//
// InboundRoute.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class InboundRoute: Codable {

    /** The globally unique identifier for the object. */
    public var _id: String?
    public var name: String?
    /** The search pattern that the mailbox name should match. */
    public var pattern: String?
    /** The queue to route the emails to. */
    public var queue: UriReference?
    /** The priority to use for routing. */
    public var priority: Int?
    /** The skills to use for routing. */
    public var skills: [UriReference]?
    /** The language to use for routing. */
    public var language: UriReference?
    /** The sender name to use for outgoing replies. */
    public var fromName: String?
    /** The sender email to use for outgoing replies. */
    public var fromEmail: String?
    /** The flow to use for processing the email. */
    public var flow: UriReference?
    /** The route to use for email replies. */
    public var replyEmailAddress: QueueEmailAddress?
    /** The recipients that should be  automatically blind copied on outbound emails associated with this InboundRoute. */
    public var autoBcc: [EmailAddress]?
    /** The flow to use for processing inbound emails that have been marked as spam. */
    public var spamFlow: UriReference?
    /** The URI for this object */
    public var selfUri: String?

    public init(_id: String?, name: String?, pattern: String?, queue: UriReference?, priority: Int?, skills: [UriReference]?, language: UriReference?, fromName: String?, fromEmail: String?, flow: UriReference?, replyEmailAddress: QueueEmailAddress?, autoBcc: [EmailAddress]?, spamFlow: UriReference?, selfUri: String?) {
        
        self._id = _id
        
        self.name = name
        
        self.pattern = pattern
        
        self.queue = queue
        
        self.priority = priority
        
        self.skills = skills
        
        self.language = language
        
        self.fromName = fromName
        
        self.fromEmail = fromEmail
        
        self.flow = flow
        
        self.replyEmailAddress = replyEmailAddress
        
        self.autoBcc = autoBcc
        
        self.spamFlow = spamFlow
        
        self.selfUri = selfUri
        
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case name
        case pattern
        case queue
        case priority
        case skills
        case language
        case fromName
        case fromEmail
        case flow
        case replyEmailAddress
        case autoBcc
        case spamFlow
        case selfUri
    }


}

