//
// AnalyticsMediaEndpointStat.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class AnalyticsMediaEndpointStat: Codable {

    /** The MIME types of the audio encodings used by the audio streams belonging to this endpoint */
    public var codecs: [String]?
    /** The lowest estimated average MOS among all the audio streams belonging to this endpoint */
    public var minMos: Double?
    /** The lowest R-factor value among all of the audio streams belonging to this endpoint */
    public var minRFactor: Double?
    /** The maximum latency experienced by any audio stream belonging to this endpoint, in milliseconds */
    public var maxLatencyMs: Int64?
    /** The total number of packets received for all audio streams belonging to this endpoint (includes invalid, duplicate, and discarded packets) */
    public var receivedPackets: Int64?
    /** The total number of malformed or not RTP packets, unknown payload type, or discarded probation packets for all audio streams belonging to this endpoint */
    public var invalidPackets: Int64?
    /** The total number of packets received too late or too early, jitter queue overrun or underrun, for all audio streams belonging to this endpoint */
    public var discardedPackets: Int64?
    /** The total number of packets received with the same sequence number as another one recently received (window of 64 packets), for all audio streams belonging to this endpoint */
    public var duplicatePackets: Int64?
    /** The total number of packets for which there was no room in the jitter queue when it was received, for all audio streams belonging to this endpoint (also counted in discarded) */
    public var overrunPackets: Int64?
    /** The total number of packets received after their timestamp/seqnum has been played out, for all audio streams belonging to this endpoint (also counted in discarded) */
    public var underrunPackets: Int64?

    public init(codecs: [String]?, minMos: Double?, minRFactor: Double?, maxLatencyMs: Int64?, receivedPackets: Int64?, invalidPackets: Int64?, discardedPackets: Int64?, duplicatePackets: Int64?, overrunPackets: Int64?, underrunPackets: Int64?) {
        
        self.codecs = codecs
        
        self.minMos = minMos
        
        self.minRFactor = minRFactor
        
        self.maxLatencyMs = maxLatencyMs
        
        self.receivedPackets = receivedPackets
        
        self.invalidPackets = invalidPackets
        
        self.discardedPackets = discardedPackets
        
        self.duplicatePackets = duplicatePackets
        
        self.overrunPackets = overrunPackets
        
        self.underrunPackets = underrunPackets
        
    }


}

