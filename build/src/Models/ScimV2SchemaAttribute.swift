//
// ScimV2SchemaAttribute.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** A complex type that defines service provider attributes, or sub-attributes and their qualities. */

public class ScimV2SchemaAttribute: Codable {

    public enum ModelType: String, Codable { 
        case string = "STRING"
        case boolean = "BOOLEAN"
        case decimal = "DECIMAL"
        case integer = "INTEGER"
        case dateTime = "DATE_TIME"
        case reference = "REFERENCE"
        case complex = "COMPLEX"
    }
    public enum Mutability: String, Codable { 
        case readwrite = "readWrite"
        case readonly = "readOnly"
        case immutable = "immutable"
        case writeonly = "writeOnly"
    }
    public enum Returned: String, Codable { 
        case always = "ALWAYS"
        case never = "NEVER"
        case _default = "DEFAULT"
        case request = "REQUEST"
    }
    public enum Uniqueness: String, Codable { 
        case _none = "NONE"
        case server = "SERVER"
        case global = "GLOBAL"
    }
    public enum ReferenceTypes: String, Codable { 
        case user = "USER"
        case group = "GROUP"
        case external = "EXTERNAL"
        case uri = "URI"
    }
    /** The attribute&#39;s name */
    public var name: String?
    /** The attribute&#39;s data type.  Valid values are \&quot;string\&quot;, \&quot;boolean\&quot;, \&quot;decimal\&quot;, \&quot;integer\&quot;, \&quot;dateTime\&quot;, \&quot;reference\&quot;, and \&quot;complex\&quot;. */
    public var type: ModelType?
    /** When an attribute is of type \&quot;complex\&quot;, \&quot;subAttributes\&quot; defines a set of sub-attributes. \&quot;subAttributes\&quot; has the same schema sub-attributes as \&quot;attributes\&quot; */
    public var subAttributes: [ScimV2SchemaAttribute]?
    /** A Boolean value indicating the attribute&#39;s plurality. */
    public var multiValued: Bool?
    /** The attribute&#39;s human-readable description. */
    public var _description: String?
    /** A Boolean value that specifies whether or not the attribute is required. */
    public var _required: Bool?
    /** A collection of suggested canonical values that MAY be used (e.g., \&quot;work\&quot; and \&quot;home\&quot;).  In some cases, service providers MAY choose to ignore unsupported values.  OPTIONAL. */
    public var canonicalValues: [String]?
    /** A Boolean value that specifies whether or not a string attribute is case sensitive.  The server SHALL use case sensitivity when evaluating filters.  For attributes that are case exact, the server SHALL preserve case for any value submitted.  If the attribute is case insensitive, the server MAY alter case for a submitted value.  Case sensitivity also impacts how attribute values MAY be compared against filter values (see Section 3.4.2.2 of [RFC7644]) */
    public var caseExact: Bool?
    /** A single keyword indicating the circumstances under which the value of the attribute can be (re)defined. Value are readOnly, readWrite, immutable, writeOnly */
    public var mutability: Mutability?
    /** A single keyword that indicates when an attribute and associated values are returned in response to a GET request, or in response to a PUT, POST, or PATCH request.  Valid keywords are as follows: always, never, default, request */
    public var returned: Returned?
    /** A single keyword value that specifies how the service provider enforces uniqueness of attribute values.  A server MAY reject an invalid value based on uniqueness by returning HTTP response code 400 (Bad Request).  A client MAY enforce uniqueness on the client side to a greater degree than the service provider enforces.  For example, a client could make a value unique while the server has uniqueness of \&quot;none\&quot;.  Valid keywords are as follows: none, server, global */
    public var uniqueness: Uniqueness?
    /** A multi-valued array of JSON strings that indicate the SCIM resource types that may be referenced. Values include User, Group, external and uri. */
    public var referenceTypes: [ReferenceTypes]?

    public init(name: String?, type: ModelType?, subAttributes: [ScimV2SchemaAttribute]?, multiValued: Bool?, _description: String?, _required: Bool?, canonicalValues: [String]?, caseExact: Bool?, mutability: Mutability?, returned: Returned?, uniqueness: Uniqueness?, referenceTypes: [ReferenceTypes]?) {
        
        self.name = name
        
        self.type = type
        
        self.subAttributes = subAttributes
        
        self.multiValued = multiValued
        
        self._description = _description
        
        self._required = _required
        
        self.canonicalValues = canonicalValues
        
        self.caseExact = caseExact
        
        self.mutability = mutability
        
        self.returned = returned
        
        self.uniqueness = uniqueness
        
        self.referenceTypes = referenceTypes
        
    }

    public enum CodingKeys: String, CodingKey { 
        case name
        case type
        case subAttributes
        case multiValued
        case _description = "description"
        case _required = "required"
        case canonicalValues
        case caseExact
        case mutability
        case returned
        case uniqueness
        case referenceTypes
    }


}

