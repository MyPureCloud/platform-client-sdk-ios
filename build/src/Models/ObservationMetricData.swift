//
// ObservationMetricData.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class ObservationMetricData: Codable {

    public enum Metric: String, Codable { 
        case tsegmentduration = "tSegmentDuration"
        case tconversationduration = "tConversationDuration"
        case ototalcriticalscore = "oTotalCriticalScore"
        case ototalscore = "oTotalScore"
        case nevaluations = "nEvaluations"
        case tabandon = "tAbandon"
        case tivr = "tIvr"
        case tanswered = "tAnswered"
        case tflowout = "tFlowOut"
        case tacd = "tAcd"
        case ttalk = "tTalk"
        case theld = "tHeld"
        case ttalkcomplete = "tTalkComplete"
        case theldcomplete = "tHeldComplete"
        case tacw = "tAcw"
        case thandle = "tHandle"
        case tcontacting = "tContacting"
        case tdialing = "tDialing"
        case twait = "tWait"
        case tagentroutingstatus = "tAgentRoutingStatus"
        case torganizationpresence = "tOrganizationPresence"
        case tsystempresence = "tSystemPresence"
        case tuserresponsetime = "tUserResponseTime"
        case tagentresponsetime = "tAgentResponseTime"
        case tvoicemail = "tVoicemail"
        case nstatetransitionerror = "nStateTransitionError"
        case noffered = "nOffered"
        case noversla = "nOverSla"
        case ntransferred = "nTransferred"
        case nblindtransferred = "nBlindTransferred"
        case nconsulttransferred = "nConsultTransferred"
        case nconsult = "nConsult"
        case nconnected = "nConnected"
        case talert = "tAlert"
        case tnotresponding = "tNotResponding"
        case noutbound = "nOutbound"
        case noutboundattempted = "nOutboundAttempted"
        case noutboundconnected = "nOutboundConnected"
        case noutboundabandoned = "nOutboundAbandoned"
        case nerror = "nError"
        case oservicetarget = "oServiceTarget"
        case oservicelevel = "oServiceLevel"
        case tactive = "tActive"
        case tinactive = "tInactive"
        case oactiveusers = "oActiveUsers"
        case omemberusers = "oMemberUsers"
        case oactivequeues = "oActiveQueues"
        case omemberqueues = "oMemberQueues"
        case ointeracting = "oInteracting"
        case owaiting = "oWaiting"
        case oonqueueusers = "oOnQueueUsers"
        case ooffqueueusers = "oOffQueueUsers"
        case ouserpresences = "oUserPresences"
        case ouserroutingstatuses = "oUserRoutingStatuses"
        case nsurveyssent = "nSurveysSent"
        case nsurveysstarted = "nSurveysStarted"
        case nsurveysabandoned = "nSurveysAbandoned"
        case nsurveysexpired = "nSurveysExpired"
        case nsurveyerrors = "nSurveyErrors"
        case nsurveyresponses = "nSurveyResponses"
        case nsurveyanswerresponses = "nSurveyAnswerResponses"
        case osurveytotalscore = "oSurveyTotalScore"
        case osurveyquestiongroupscore = "oSurveyQuestionGroupScore"
        case nsurveyquestiongroupresponses = "nSurveyQuestionGroupResponses"
        case osurveyquestionscore = "oSurveyQuestionScore"
        case nsurveyquestionresponses = "nSurveyQuestionResponses"
        case nsurveynpsresponses = "nSurveyNpsResponses"
        case nsurveynpspromoters = "nSurveyNpsPromoters"
        case nsurveynpsdetractors = "nSurveyNpsDetractors"
        case nflow = "nFlow"
        case tflowdisconnect = "tFlowDisconnect"
        case tflowexit = "tFlowExit"
        case tflow = "tFlow"
        case oflow = "oFlow"
        case tflowoutcome = "tFlowOutcome"
        case nflowoutcome = "nFlowOutcome"
        case nflowoutcomefailed = "nFlowOutcomeFailed"
        case nwebactionsqualified = "nWebActionsQualified"
        case nwebactionsoffered = "nWebActionsOffered"
        case nwebactionsaccepted = "nWebActionsAccepted"
        case nwebactionsrejected = "nWebActionsRejected"
        case nwebactionstimedout = "nWebActionsTimedout"
        case nwebactionserrored = "nWebActionsErrored"
        case nwebactionsignored = "nWebActionsIgnored"
        case nwebactionsstarted = "nWebActionsStarted"
        case nwebactionsengaged = "nWebActionsEngaged"
    }
    public var metric: Metric?
    public var qualifier: String?
    public var stats: StatisticalSummary?
    /** Flag for a truncated list of observations. If truncated, the first half of the list of observations will contain the oldest observations and the second half the newest observations. */
    public var truncated: Bool?
    /** List of observations sorted by timestamp in ascending order. This list may be truncated. */
    public var observations: [ObservationValue]?

    public init(metric: Metric?, qualifier: String?, stats: StatisticalSummary?, truncated: Bool?, observations: [ObservationValue]?) {
        
        self.metric = metric
        
        self.qualifier = qualifier
        
        self.stats = stats
        
        self.truncated = truncated
        
        self.observations = observations
        
    }


}

