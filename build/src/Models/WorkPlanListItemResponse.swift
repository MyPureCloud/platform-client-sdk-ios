//
// WorkPlanListItemResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Work plan information */

public class WorkPlanListItemResponse: Codable {

    public enum StartDayOfWeekend: String, Codable { 
        case sunday = "Sunday"
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
    }
    /** The globally unique identifier for the object. */
    public var _id: String?
    public var name: String?
    /** Whether the work plan is enabled for scheduling */
    public var enabled: Bool?
    /** Whether the weekly paid time constraint is enabled for this work plan */
    public var constrainWeeklyPaidTime: Bool?
    /** Whether the weekly paid time constraint is flexible for this work plan */
    public var flexibleWeeklyPaidTime: Bool?
    /** Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false */
    public var weeklyExactPaidMinutes: Int?
    /** Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true */
    public var weeklyMinimumPaidMinutes: Int?
    /** Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true */
    public var weeklyMaximumPaidMinutes: Int?
    /** Whether paid time granularity is constrained for this workplan */
    public var constrainPaidTimeGranularity: Bool?
    /** Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true */
    public var paidTimeGranularityMinutes: Int?
    /** Whether the minimum time between shifts constraint is enabled for this work plan */
    public var constrainMinimumTimeBetweenShifts: Bool?
    /** Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true */
    public var minimumTimeBetweenShiftsMinutes: Int?
    /** Maximum number days in a week allowed to be scheduled for this work plan */
    public var maximumDays: Int?
    /** The day of the week for which the weekend starts, such as Saturday */
    public var startDayOfWeekend: StartDayOfWeekend?
    /** Minimum amount of consecutive time off per week that agents who are assigned this work plan are allowed to have off */
    public var minimumConsecutiveTimeOffPerWeekMinutes: Int?
    /** Whether to constrain the maximum consecutive working weekends */
    public var constrainMaximumConsecutiveWorkingWeekends: Bool?
    /** The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work */
    public var maximumConsecutiveWorkingWeekends: Int?
    /** The minimum number of days that agents assigned to a work plan must work per week */
    public var minimumWorkingDaysPerWeek: Int?
    /** The maximum number of consecutive days that agents assigned to this work plan are allowed to work */
    public var maximumConsecutiveWorkingDays: Int?
    /** The time period in minutes for the duration between the start times of two consecutive working days */
    public var minimumShiftStartDistanceMinutes: Int?
    /** Minimum days off in the planning period */
    public var minimumDaysOffPerPlanningPeriod: Int?
    /** Maximum days off in the planning period */
    public var maximumDaysOffPerPlanningPeriod: Int?
    /** Minimum paid hours in the planning period */
    public var minimumPaidHoursPerPlanningPeriod: Int?
    /** Maximum paid hours in the planning period */
    public var maximumPaidHoursPerPlanningPeriod: Int?
    /** Optional days to schedule for this work plan. Populate with expand=details */
    public var optionalDays: SetWrapperDayOfWeek?
    /** Variance in minutes among start times of shifts in this work plan. Populate with expand=details */
    public var shiftStartVariances: ListWrapperShiftStartVariance?
    /** Shifts in this work plan. Populate with expand=details (defaults to empty list) */
    public var shifts: [WorkPlanShift]?
    /** Agents in this work plan. Populate with expand=details (defaults to empty list) */
    public var agents: [DeletableUserReference]?
    /** Version metadata for this work plan */
    public var metadata: WfmVersionedEntityMetadata?
    /** Number of agents in this work plan.  Populate with expand=agentCount */
    public var agentCount: Int?
    /** The URI for this object */
    public var selfUri: String?

    public init(_id: String?, name: String?, enabled: Bool?, constrainWeeklyPaidTime: Bool?, flexibleWeeklyPaidTime: Bool?, weeklyExactPaidMinutes: Int?, weeklyMinimumPaidMinutes: Int?, weeklyMaximumPaidMinutes: Int?, constrainPaidTimeGranularity: Bool?, paidTimeGranularityMinutes: Int?, constrainMinimumTimeBetweenShifts: Bool?, minimumTimeBetweenShiftsMinutes: Int?, maximumDays: Int?, startDayOfWeekend: StartDayOfWeekend?, minimumConsecutiveTimeOffPerWeekMinutes: Int?, constrainMaximumConsecutiveWorkingWeekends: Bool?, maximumConsecutiveWorkingWeekends: Int?, minimumWorkingDaysPerWeek: Int?, maximumConsecutiveWorkingDays: Int?, minimumShiftStartDistanceMinutes: Int?, minimumDaysOffPerPlanningPeriod: Int?, maximumDaysOffPerPlanningPeriod: Int?, minimumPaidHoursPerPlanningPeriod: Int?, maximumPaidHoursPerPlanningPeriod: Int?, optionalDays: SetWrapperDayOfWeek?, shiftStartVariances: ListWrapperShiftStartVariance?, shifts: [WorkPlanShift]?, agents: [DeletableUserReference]?, metadata: WfmVersionedEntityMetadata?, agentCount: Int?, selfUri: String?) {
        
        self._id = _id
        
        self.name = name
        
        self.enabled = enabled
        
        self.constrainWeeklyPaidTime = constrainWeeklyPaidTime
        
        self.flexibleWeeklyPaidTime = flexibleWeeklyPaidTime
        
        self.weeklyExactPaidMinutes = weeklyExactPaidMinutes
        
        self.weeklyMinimumPaidMinutes = weeklyMinimumPaidMinutes
        
        self.weeklyMaximumPaidMinutes = weeklyMaximumPaidMinutes
        
        self.constrainPaidTimeGranularity = constrainPaidTimeGranularity
        
        self.paidTimeGranularityMinutes = paidTimeGranularityMinutes
        
        self.constrainMinimumTimeBetweenShifts = constrainMinimumTimeBetweenShifts
        
        self.minimumTimeBetweenShiftsMinutes = minimumTimeBetweenShiftsMinutes
        
        self.maximumDays = maximumDays
        
        self.startDayOfWeekend = startDayOfWeekend
        
        self.minimumConsecutiveTimeOffPerWeekMinutes = minimumConsecutiveTimeOffPerWeekMinutes
        
        self.constrainMaximumConsecutiveWorkingWeekends = constrainMaximumConsecutiveWorkingWeekends
        
        self.maximumConsecutiveWorkingWeekends = maximumConsecutiveWorkingWeekends
        
        self.minimumWorkingDaysPerWeek = minimumWorkingDaysPerWeek
        
        self.maximumConsecutiveWorkingDays = maximumConsecutiveWorkingDays
        
        self.minimumShiftStartDistanceMinutes = minimumShiftStartDistanceMinutes
        
        self.minimumDaysOffPerPlanningPeriod = minimumDaysOffPerPlanningPeriod
        
        self.maximumDaysOffPerPlanningPeriod = maximumDaysOffPerPlanningPeriod
        
        self.minimumPaidHoursPerPlanningPeriod = minimumPaidHoursPerPlanningPeriod
        
        self.maximumPaidHoursPerPlanningPeriod = maximumPaidHoursPerPlanningPeriod
        
        self.optionalDays = optionalDays
        
        self.shiftStartVariances = shiftStartVariances
        
        self.shifts = shifts
        
        self.agents = agents
        
        self.metadata = metadata
        
        self.agentCount = agentCount
        
        self.selfUri = selfUri
        
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case name
        case enabled
        case constrainWeeklyPaidTime
        case flexibleWeeklyPaidTime
        case weeklyExactPaidMinutes
        case weeklyMinimumPaidMinutes
        case weeklyMaximumPaidMinutes
        case constrainPaidTimeGranularity
        case paidTimeGranularityMinutes
        case constrainMinimumTimeBetweenShifts
        case minimumTimeBetweenShiftsMinutes
        case maximumDays
        case startDayOfWeekend
        case minimumConsecutiveTimeOffPerWeekMinutes
        case constrainMaximumConsecutiveWorkingWeekends
        case maximumConsecutiveWorkingWeekends
        case minimumWorkingDaysPerWeek
        case maximumConsecutiveWorkingDays
        case minimumShiftStartDistanceMinutes
        case minimumDaysOffPerPlanningPeriod
        case maximumDaysOffPerPlanningPeriod
        case minimumPaidHoursPerPlanningPeriod
        case maximumPaidHoursPerPlanningPeriod
        case optionalDays
        case shiftStartVariances
        case shifts
        case agents
        case metadata
        case agentCount
        case selfUri
    }


}

