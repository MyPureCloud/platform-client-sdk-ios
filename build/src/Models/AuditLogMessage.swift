//
// AuditLogMessage.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public class AuditLogMessage: Codable {

    public enum ServiceName: String, Codable { 
        case contactCenter = "ContactCenter"
        case contentManagement = "ContentManagement"
        case peoplePermissions = "PeoplePermissions"
        case quality = "Quality"
        case languageUnderstanding = "LanguageUnderstanding"
        case topicsDefinitions = "TopicsDefinitions"
        case predictiveEngagement = "PredictiveEngagement"
        case workforceManagement = "WorkforceManagement"
    }
    public enum Action: String, Codable { 
        case create = "Create"
        case view = "View"
        case update = "Update"
        case delete = "Delete"
        case download = "Download"
        case memberAdd = "MemberAdd"
        case memberUpdate = "MemberUpdate"
        case memberRemove = "MemberRemove"
        case read = "Read"
        case applyProtection = "ApplyProtection"
        case revokeProtection = "RevokeProtection"
        case updateRetention = "UpdateRetention"
        case readAll = "ReadAll"
        case execute = "Execute"
        case publish = "Publish"
        case unpublish = "Unpublish"
        case authorize = "Authorize"
        case deauthorize = "Deauthorize"
        case authenticate = "Authenticate"
        case changePassword = "ChangePassword"
    }
    public enum EntityType: String, Codable { 
        case document = "Document"
        case queue = "Queue"
        case recording = "Recording"
        case role = "Role"
        case voicemailUserPolicy = "VoicemailUserPolicy"
        case wrapupCode = "WrapupCode"
        case accessToken = "AccessToken"
        case oauthclient = "OAuthClient"
        case oauthclientauthorization = "OAuthClientAuthorization"
        case authOrganization = "AuthOrganization"
        case authUser = "AuthUser"
        case bulkActions = "BulkActions"
        case feedback = "Feedback"
        case topic = "Topic"
        case program = "Program"
        case segment = "Segment"
        case outcome = "Outcome"
        case clickstreamSettings = "ClickstreamSettings"
        case schedule = "Schedule"
    }
    /** Id of the audit message. */
    public var _id: String?
    /** User associated with this audit message. */
    public var user: DomainEntityRef?
    /** Client associated with this audit message. */
    public var client: AddressableEntityRef?
    /** List of IP addresses of systems that originated or handled the request. */
    public var remoteIp: [String]?
    /** Name of the service that logged this audit message. */
    public var serviceName: ServiceName?
    /** Date and time of when the audit message was logged. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var eventDate: Date?
    /** Message describing the event being audited. */
    public var message: MessageInfo?
    /** Action that took place. */
    public var action: Action?
    /** Entity that was impacted. */
    public var entity: AddressableEntityRef?
    /** Type of the entity that was impacted. */
    public var entityType: EntityType?
    /** List of properties that were changed and changes made to those properties. */
    public var propertyChanges: [PropertyChange]?
    /** Additional context for this message. */
    public var context: [String:String]?

    public init(_id: String?, user: DomainEntityRef?, client: AddressableEntityRef?, remoteIp: [String]?, serviceName: ServiceName?, eventDate: Date?, message: MessageInfo?, action: Action?, entity: AddressableEntityRef?, entityType: EntityType?, propertyChanges: [PropertyChange]?, context: [String:String]?) {
        
        self._id = _id
        
        self.user = user
        
        self.client = client
        
        self.remoteIp = remoteIp
        
        self.serviceName = serviceName
        
        self.eventDate = eventDate
        
        self.message = message
        
        self.action = action
        
        self.entity = entity
        
        self.entityType = entityType
        
        self.propertyChanges = propertyChanges
        
        self.context = context
        
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case user
        case client
        case remoteIp
        case serviceName
        case eventDate
        case message
        case action
        case entity
        case entityType
        case propertyChanges
        case context
    }


}

