//
// SettingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SettingsAPI {
    /**
     Reset email threading settings to default
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEmailsSettingsThreading(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteEmailsSettingsThreadingWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Reset email threading settings to default
     - DELETE /api/v2/emails/settings/threading
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEmailsSettingsThreadingWithRequestBuilder() -> RequestBuilder<Void> {        
        let path = "/api/v2/emails/settings/threading"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete agent auto answer settings
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUsersAgentuiAgentsAutoanswerAgentIdSettings(agentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete agent auto answer settings
     - DELETE /api/v2/users/agentui/agents/autoanswer/{agentId}/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/agentui/agents/autoanswer/{agentId}/settings"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    /**
     Get email Contact Center settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmailsSettings(completion: @escaping ((_ data: EmailSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmailsSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<EmailSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get email Contact Center settings
     - GET /api/v2/emails/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "multipleRouteDestinationsOnInboundEmailEnabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<EmailSettings> 
     */
    open class func getEmailsSettingsWithRequestBuilder() -> RequestBuilder<EmailSettings> {        
        let path = "/api/v2/emails/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get email threading settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmailsSettingsThreading(completion: @escaping ((_ data: EmailThreadingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmailsSettingsThreadingWithRequestBuilder()
        requestBuilder.execute { (response: Response<EmailThreadingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get email threading settings
     - GET /api/v2/emails/settings/threading
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startNewConversationOnSubjectChange" : true,
  "timeoutInMinutes" : 0
}, statusCode=200}]

     - returns: RequestBuilder<EmailThreadingSettings> 
     */
    open class func getEmailsSettingsThreadingWithRequestBuilder() -> RequestBuilder<EmailThreadingSettings> {        
        let path = "/api/v2/emails/settings/threading"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailThreadingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get the execution history enabled setting.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettingsExecutiondata(completion: @escaping ((_ data: ExecutionDataGlobalSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSettingsExecutiondataWithRequestBuilder()
        requestBuilder.execute { (response: Response<ExecutionDataGlobalSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the execution history enabled setting.
     - GET /api/v2/settings/executiondata
     - Get the execution history enabled setting.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "modifiedByClient" : "{}",
  "enabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<ExecutionDataGlobalSettingsResponse> 
     */
    open class func getSettingsExecutiondataWithRequestBuilder() -> RequestBuilder<ExecutionDataGlobalSettingsResponse> {        
        let path = "/api/v2/settings/executiondata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExecutionDataGlobalSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get agent auto answer settings
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersAgentuiAgentsAutoanswerAgentIdSettings(agentId: String, completion: @escaping ((_ data: AutoAnswerSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<AutoAnswerSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get agent auto answer settings
     - GET /api/v2/users/agentui/agents/autoanswer/{agentId}/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "settings" : {
    "key" : {
      "enabled" : true
    }
  }
}, statusCode=200}]
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 

     - returns: RequestBuilder<AutoAnswerSettings> 
     */
    open class func getUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: String) -> RequestBuilder<AutoAnswerSettings> {        
        var path = "/api/v2/users/agentui/agents/autoanswer/{agentId}/settings"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AutoAnswerSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Patch email Contact Center settings
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchEmailsSettings(body: EmailSettings? = nil, completion: @escaping ((_ data: EmailSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchEmailsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EmailSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch email Contact Center settings
     - PATCH /api/v2/emails/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "multipleRouteDestinationsOnInboundEmailEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EmailSettings> 
     */
    open class func patchEmailsSettingsWithRequestBuilder(body: EmailSettings? = nil) -> RequestBuilder<EmailSettings> {        
        let path = "/api/v2/emails/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Patch email threading settings
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchEmailsSettingsThreading(body: EmailThreadingSettings? = nil, completion: @escaping ((_ data: EmailThreadingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchEmailsSettingsThreadingWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EmailThreadingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch email threading settings
     - PATCH /api/v2/emails/settings/threading
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startNewConversationOnSubjectChange" : true,
  "timeoutInMinutes" : 0
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EmailThreadingSettings> 
     */
    open class func patchEmailsSettingsThreadingWithRequestBuilder(body: EmailThreadingSettings? = nil) -> RequestBuilder<EmailThreadingSettings> {        
        let path = "/api/v2/emails/settings/threading"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailThreadingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Edit the execution history on off setting.
     
     - parameter body: (body) New Execution Data Setting 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSettingsExecutiondata(body: ExecutionDataSettingsRequest, completion: @escaping ((_ data: ExecutionDataGlobalSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchSettingsExecutiondataWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExecutionDataGlobalSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Edit the execution history on off setting.
     - PATCH /api/v2/settings/executiondata
     - Edit the execution history on off setting.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "modifiedByClient" : "{}",
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) New Execution Data Setting 

     - returns: RequestBuilder<ExecutionDataGlobalSettingsResponse> 
     */
    open class func patchSettingsExecutiondataWithRequestBuilder(body: ExecutionDataSettingsRequest) -> RequestBuilder<ExecutionDataGlobalSettingsResponse> {        
        let path = "/api/v2/settings/executiondata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExecutionDataGlobalSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update agent auto answer settings
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter body: (body) AutoAnswerSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUsersAgentuiAgentsAutoanswerAgentIdSettings(agentId: String, body: AutoAnswerSettings, completion: @escaping ((_ data: AutoAnswerSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: agentId, body: body)
        requestBuilder.execute { (response: Response<AutoAnswerSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update agent auto answer settings
     - PATCH /api/v2/users/agentui/agents/autoanswer/{agentId}/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "settings" : {
    "key" : {
      "enabled" : true
    }
  }
}, statusCode=200}]
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter body: (body) AutoAnswerSettings 

     - returns: RequestBuilder<AutoAnswerSettings> 
     */
    open class func patchUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: String, body: AutoAnswerSettings) -> RequestBuilder<AutoAnswerSettings> {        
        var path = "/api/v2/users/agentui/agents/autoanswer/{agentId}/settings"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AutoAnswerSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Set agent auto answer settings
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter body: (body) AutoAnswerSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUsersAgentuiAgentsAutoanswerAgentIdSettings(agentId: String, body: AutoAnswerSettings, completion: @escaping ((_ data: AutoAnswerSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: agentId, body: body)
        requestBuilder.execute { (response: Response<AutoAnswerSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Set agent auto answer settings
     - PUT /api/v2/users/agentui/agents/autoanswer/{agentId}/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "settings" : {
    "key" : {
      "enabled" : true
    }
  }
}, statusCode=200}]
     
     - parameter agentId: (path) The agent to apply the auto answer settings to 
     - parameter body: (body) AutoAnswerSettings 

     - returns: RequestBuilder<AutoAnswerSettings> 
     */
    open class func putUsersAgentuiAgentsAutoanswerAgentIdSettingsWithRequestBuilder(agentId: String, body: AutoAnswerSettings) -> RequestBuilder<AutoAnswerSettings> {        
        var path = "/api/v2/users/agentui/agents/autoanswer/{agentId}/settings"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AutoAnswerSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
