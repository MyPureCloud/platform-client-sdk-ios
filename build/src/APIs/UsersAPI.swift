//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UsersAPI {
    
    
    
    /**
     
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete/cancel an async request
     
     - DELETE /api/v2/analytics/users/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a grant of a role in a division
     
     - DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - DELETE /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(userId: String, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete user
     
     - DELETE /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Empty> 
     */
    open class func deleteUserWithRequestBuilder(userId: String) -> RequestBuilder<Empty> {
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Remove routing language from user
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutinglanguage(userId: String, languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove routing language from user
     
     - DELETE /api/v2/users/{userId}/routinglanguages/{languageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutingskill(userId: String, skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove routing skill from user
     
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutingskillWithRequestBuilder(userId: String, skillId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Clear associated station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserStationAssociatedstation(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserStationAssociatedstationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Clear associated station
     
     - DELETE /api/v2/users/{userId}/station/associatedstation
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserStationAssociatedstationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/associatedstation"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Clear default station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserStationDefaultstation(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserStationDefaultstationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Clear default station
     
     - DELETE /api/v2/users/{userId}/station/defaultstation
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserStationDefaultstationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/defaultstation"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status for async query for user details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status for async query for user details
     
     - GET /api/v2/analytics/users/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "aeiou",
  "submissionDate" : "2000-01-23T04:56:07.000+0000",
  "completionDate" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "expirationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsUserDetailsAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a page of results for an async query
     
     - GET /api/v2/analytics/users/details/jobs/{jobId}/results
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000",
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "organizationPresenceId" : "aeiou"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "routingStatus" : "aeiou"
    } ],
    "userId" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> 
     */
    open class func getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "cursor": cursor, 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedMe(permission: String, name: String? = nil, completion: @escaping ((_ data: [AuthzDivision]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: permission, name: name)
        requestBuilder.execute { (response: Response<[AuthzDivision]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the current user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/me
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
} ]}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)

     - returns: RequestBuilder<[AuthzDivision]> 
     */
    open class func getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: String, name: String? = nil) -> RequestBuilder<[AuthzDivision]> {
        let path = "/api/v2/authorization/divisionspermitted/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "name": name, 
            
            "permission": permission
            
        ])

        let requestBuilder: RequestBuilder<[AuthzDivision]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedMe(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the current user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/paged/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "allDivsPermitted" : true,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "objectCounts" : {
      "key" : 123456789
    },
    "id" : "aeiou",
    "homeDivision" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {
        let path = "/api/v2/authorization/divisionspermitted/paged/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "permission": permission, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Returns which divisions the specified user has the given permission in.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectId(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: subjectId, permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the specified user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/paged/{subjectId}
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "allDivsPermitted" : true,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "objectCounts" : {
      "key" : 123456789
    },
    "id" : "aeiou",
    "homeDivision" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {
        var path = "/api/v2/authorization/divisionspermitted/paged/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "permission": permission, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Returns a listing of roles and permissions for a user.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubject(subjectId: String, completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectWithRequestBuilder(subjectId: subjectId)
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for a user.
     
     - GET /api/v2/authorization/subjects/{subjectId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "objectCounts" : {
        "key" : 123456789
      },
      "id" : "aeiou",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+0000",
    "role" : {
      "default" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "policies" : [ {
        "condition" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "actions" : [ "aeiou" ]
      } ],
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "subjectId" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter subjectId: (path) Subject ID (user or group) 

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectWithRequestBuilder(subjectId: String) -> RequestBuilder<AuthzSubject> {
        var path = "/api/v2/authorization/subjects/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Returns a listing of roles and permissions for the currently authenticated user.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubjectsMe(completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectsMeWithRequestBuilder()
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for the currently authenticated user.
     
     - GET /api/v2/authorization/subjects/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "objectCounts" : {
        "key" : 123456789
      },
      "id" : "aeiou",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+0000",
    "role" : {
      "default" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "policies" : [ {
        "condition" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "actions" : [ "aeiou" ]
      } ],
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "subjectId" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123
}}]

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectsMeWithRequestBuilder() -> RequestBuilder<AuthzSubject> {
        let path = "/api/v2/authorization/subjects/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum ModelType_getFieldconfig: String { 
        case person = "person"
        case group = "group"
        case org = "org"
        case externalcontact = "externalContact"
    }

    
    
    /**
     
     Fetch field config for an entity type
     
     - parameter type: (query) Field type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFieldconfig(type: ModelType_getFieldconfig, completion: @escaping ((_ data: FieldConfig?,_ error: Error?) -> Void)) {
        let requestBuilder = getFieldconfigWithRequestBuilder(type: type)
        requestBuilder.execute { (response: Response<FieldConfig>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch field config for an entity type
     
     - GET /api/v2/fieldconfig
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schemaVersion" : "aeiou",
  "entityType" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou",
  "sections" : [ {
    "instructionText" : "aeiou",
    "state" : "aeiou",
    "fieldList" : [ {
      "instructionText" : "aeiou",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "aeiou" ],
      "state" : "aeiou",
      "params" : {
        "key" : "{}"
      },
      "type" : "aeiou",
      "key" : "aeiou",
      "required" : true
    } ],
    "key" : "aeiou"
  } ]
}}]
     
     - parameter type: (query) Field type 

     - returns: RequestBuilder<FieldConfig> 
     */
    open class func getFieldconfigWithRequestBuilder(type: ModelType_getFieldconfig) -> RequestBuilder<FieldConfig> {
        let path = "/api/v2/fieldconfig"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "type": type.rawValue
            
        ])

        let requestBuilder: RequestBuilder<FieldConfig>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getProfilesUsers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    public enum Expand_getProfilesUsers: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
    }

    
    
    /**
     
     Get a user profile listing
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) id (optional)
     - parameter jid: (query) jid (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfilesUsers(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jid: [String]? = nil, sortOrder: SortOrder_getProfilesUsers? = nil, expand: [String]? = nil, completion: @escaping ((_ data: UserProfileEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getProfilesUsersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jid: jid, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<UserProfileEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a user profile listing
     
     - GET /api/v2/profiles/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "expands" : {
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : "",
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : "",
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : "",
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : "",
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "authorization" : "",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "station" : "",
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "geolocation" : ""
    },
    "version" : 123456789
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) id (optional)
     - parameter jid: (query) jid (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<UserProfileEntityListing> 
     */
    open class func getProfilesUsersWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jid: [String]? = nil, sortOrder: SortOrder_getProfilesUsers? = nil, expand: [String]? = nil) -> RequestBuilder<UserProfileEntityListing> {
        let path = "/api/v2/profiles/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "id": _id, 
            
            "jid": jid, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<UserProfileEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - GET /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Utilization> 
     */
    open class func getRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Utilization> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getUser: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    
    public enum State_getUser: String { 
        case active = "active"
        case deleted = "deleted"
    }

    
    
    /**
     
     Get user.
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter state: (query) Search for a user with this state (optional, default to active)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: String, expand: [String]? = nil, state: State_getUser? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserWithRequestBuilder(userId: userId, expand: expand, state: state)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get user.
     
     - GET /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : {
    "unusedRoles" : [ "" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "skills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "defaultUser" : "",
      "id" : "aeiou",
      "type" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+0000"
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "manager" : "",
  "employerInfo" : {
    "employeeType" : "aeiou",
    "dateHire" : "aeiou",
    "employeeId" : "aeiou",
    "officialName" : "aeiou"
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "message" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : {
    "hobbies" : [ "aeiou" ],
    "biography" : "aeiou",
    "interests" : [ "aeiou" ],
    "spouse" : "aeiou"
  },
  "team" : {
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "indefinite" : true
  },
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ {
    "notes" : "aeiou",
    "coordinates" : {
      "key" : 1.3579000000000001069366817318950779736042022705078125
    },
    "locationDefinition" : "",
    "id" : "aeiou",
    "floorplanId" : "aeiou"
  } ],
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "locations" : [ {
      "images" : "aeiou",
      "address" : {
        "zipcode" : "aeiou",
        "country" : "aeiou",
        "city" : "aeiou",
        "street1" : "aeiou",
        "countryName" : "aeiou",
        "state" : "aeiou",
        "street2" : "aeiou"
      },
      "notes" : "aeiou",
      "floorplanImage" : [ "" ],
      "addressVerificationDetails" : {
        "dateStarted" : "2000-01-23T04:56:07.000+0000",
        "dateFinished" : "2000-01-23T04:56:07.000+0000",
        "service" : "smartystreets-us",
        "status" : "aeiou"
      },
      "selfUri" : "aeiou",
      "profileImage" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "emergencyNumber" : {
        "number" : "aeiou",
        "e164" : "aeiou",
        "type" : "aeiou"
      },
      "version" : 123,
      "path" : [ "aeiou" ],
      "addressStored" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "contactUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "state" : "aeiou",
      "addressVerified" : true
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter state: (query) Search for a user with this state (optional, default to active)

     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userId: String, expand: [String]? = nil, state: State_getUser? = nil) -> RequestBuilder<User> {
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand, 
            
            "state": state?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getUserAdjacents: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    /**
     
     Get adjacents
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserAdjacents(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: Adjacents?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserAdjacentsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<Adjacents>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get adjacents
     
     - GET /api/v2/users/{userId}/adjacents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "superiors" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "siblings" : [ "" ],
  "directReports" : [ "" ]
}}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<Adjacents> 
     */
    open class func getUserAdjacentsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<Adjacents> {
        var path = "/api/v2/users/{userId}/adjacents"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Adjacents>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserCallforwarding(userId: String, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserCallforwardingWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a user's CallForwarding
     
     - GET /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "voicemail" : "aeiou",
  "calls" : [ {
    "targets" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func getUserCallforwardingWithRequestBuilder(userId: String) -> RequestBuilder<CallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getUserDirectreports: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    /**
     
     Get direct reports
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserDirectreports(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserDirectreportsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<[User]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get direct reports
     
     - GET /api/v2/users/{userId}/directreports
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : {
    "unusedRoles" : [ "" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "skills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "defaultUser" : "",
      "id" : "aeiou",
      "type" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+0000"
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "manager" : "",
  "employerInfo" : {
    "employeeType" : "aeiou",
    "dateHire" : "aeiou",
    "employeeId" : "aeiou",
    "officialName" : "aeiou"
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "message" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : {
    "hobbies" : [ "aeiou" ],
    "biography" : "aeiou",
    "interests" : [ "aeiou" ],
    "spouse" : "aeiou"
  },
  "team" : {
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "indefinite" : true
  },
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ {
    "notes" : "aeiou",
    "coordinates" : {
      "key" : 1.3579000000000001069366817318950779736042022705078125
    },
    "locationDefinition" : "",
    "id" : "aeiou",
    "floorplanId" : "aeiou"
  } ],
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "locations" : [ {
      "images" : "aeiou",
      "address" : {
        "zipcode" : "aeiou",
        "country" : "aeiou",
        "city" : "aeiou",
        "street1" : "aeiou",
        "countryName" : "aeiou",
        "state" : "aeiou",
        "street2" : "aeiou"
      },
      "notes" : "aeiou",
      "floorplanImage" : [ "" ],
      "addressVerificationDetails" : {
        "dateStarted" : "2000-01-23T04:56:07.000+0000",
        "dateFinished" : "2000-01-23T04:56:07.000+0000",
        "service" : "smartystreets-us",
        "status" : "aeiou"
      },
      "selfUri" : "aeiou",
      "profileImage" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "emergencyNumber" : {
        "number" : "aeiou",
        "e164" : "aeiou",
        "type" : "aeiou"
      },
      "version" : 123,
      "path" : [ "aeiou" ],
      "addressStored" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "contactUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "state" : "aeiou",
      "addressVerified" : true
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
} ]}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getUserDirectreportsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<[User]> {
        var path = "/api/v2/users/{userId}/directreports"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<[User]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getUserFavorites: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    /**
     
     Get favorites
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserFavorites(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserFavoritesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get favorites
     
     - GET /api/v2/users/{userId}/favorites
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getUserFavoritesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<UserEntityListing> {
        var path = "/api/v2/users/{userId}/favorites"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGeolocation(userId: String, clientId: String, completion: @escaping ((_ data: Geolocation?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserGeolocationWithRequestBuilder(userId: userId, clientId: clientId)
        requestBuilder.execute { (response: Response<Geolocation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a user's Geolocation
     
     - GET /api/v2/users/{userId}/geolocations/{clientId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "city" : "aeiou",
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "locations" : [ {
    "images" : "aeiou",
    "address" : {
      "zipcode" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street1" : "aeiou",
      "countryName" : "aeiou",
      "state" : "aeiou",
      "street2" : "aeiou"
    },
    "notes" : "aeiou",
    "floorplanImage" : [ "" ],
    "addressVerificationDetails" : {
      "dateStarted" : "2000-01-23T04:56:07.000+0000",
      "dateFinished" : "2000-01-23T04:56:07.000+0000",
      "service" : "smartystreets-us",
      "status" : "aeiou"
    },
    "selfUri" : "aeiou",
    "profileImage" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "emergencyNumber" : {
      "number" : "aeiou",
      "e164" : "aeiou",
      "type" : "aeiou"
    },
    "version" : 123,
    "path" : [ "aeiou" ],
    "addressStored" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "contactUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "state" : "aeiou",
    "addressVerified" : true
  } ],
  "id" : "aeiou",
  "type" : "aeiou",
  "region" : "aeiou",
  "primary" : true,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 

     - returns: RequestBuilder<Geolocation> 
     */
    open class func getUserGeolocationWithRequestBuilder(userId: String, clientId: String) -> RequestBuilder<Geolocation> {
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geolocation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserOutofoffice(userId: String, completion: @escaping ((_ data: OutOfOffice?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserOutofofficeWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<OutOfOffice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a OutOfOffice
     
     - GET /api/v2/users/{userId}/outofoffice
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "startDate" : "2000-01-23T04:56:07.000+0000",
  "indefinite" : true
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<OutOfOffice> 
     */
    open class func getUserOutofofficeWithRequestBuilder(userId: String) -> RequestBuilder<OutOfOffice> {
        var path = "/api/v2/users/{userId}/outofoffice"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutOfOffice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getUserProfile: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    /**
     
     Get user profile
     
     - parameter userId: (path) userId 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProfile(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: UserProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserProfileWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<UserProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get user profile
     
     - GET /api/v2/users/{userId}/profile
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "expands" : {
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : "",
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "authorization" : "",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "station" : "",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "geolocation" : ""
  },
  "version" : 123456789
}}]
     
     - parameter userId: (path) userId 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<UserProfile> 
     */
    open class func getUserProfileWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<UserProfile> {
        var path = "/api/v2/users/{userId}/profile"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<UserProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     List profile skills for a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProfileskills(userId: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserProfileskillsWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List profile skills for a user
     
     - GET /api/v2/users/{userId}/profileskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<[String]> 
     */
    open class func getUserProfileskillsWithRequestBuilder(userId: String) -> RequestBuilder<[String]> {
        var path = "/api/v2/users/{userId}/profileskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get queues for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter joined: (query) Is joined to the queue (optional, default to true)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserQueues(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserQueuesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, joined: joined, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get queues for user
     
     - GET /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter joined: (query) Is joined to the queue (optional, default to true)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getUserQueuesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "joined": joined, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Returns a listing of roles and permissions for a user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoles(userId: String, completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRolesWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for a user.
     
     - GET /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func getUserRolesWithRequestBuilder(userId: String) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum SortOrder_getUserRoutinglanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     List routing language for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutinglanguages(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil, completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutinglanguagesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List routing language for user
     
     - GET /api/v2/users/{userId}/routinglanguages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func getUserRoutinglanguagesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil) -> RequestBuilder<UserLanguageEntityListing> {
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum SortOrder_getUserRoutingskills: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingskills(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil, completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List routing skills for user
     
     - GET /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func getUserRoutingskillsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Fetch the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingstatus(userId: String, completion: @escaping ((_ data: RoutingStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingstatusWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<RoutingStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch the routing status of a user
     
     - GET /api/v2/users/{userId}/routingstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<RoutingStatus> 
     */
    open class func getUserRoutingstatusWithRequestBuilder(userId: String) -> RequestBuilder<RoutingStatus> {
        var path = "/api/v2/users/{userId}/routingstatus"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get station information for user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserStation(userId: String, completion: @escaping ((_ data: UserStations?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserStationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserStations>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get station information for user
     
     - GET /api/v2/users/{userId}/station
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultStation" : "",
  "lastAssociatedStation" : "",
  "associatedStation" : {
    "associatedDate" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "defaultUser" : "",
    "id" : "aeiou",
    "type" : "aeiou",
    "associatedUser" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "providerInfo" : {
      "key" : "aeiou"
    }
  },
  "effectiveStation" : ""
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<UserStations> 
     */
    open class func getUserStationWithRequestBuilder(userId: String) -> RequestBuilder<UserStations> {
        var path = "/api/v2/users/{userId}/station"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserStations>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getUserSuperiors: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    /**
     
     Get superiors
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSuperiors(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserSuperiorsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<[User]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get superiors
     
     - GET /api/v2/users/{userId}/superiors
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : {
    "unusedRoles" : [ "" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "skills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "defaultUser" : "",
      "id" : "aeiou",
      "type" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+0000"
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "manager" : "",
  "employerInfo" : {
    "employeeType" : "aeiou",
    "dateHire" : "aeiou",
    "employeeId" : "aeiou",
    "officialName" : "aeiou"
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "message" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : {
    "hobbies" : [ "aeiou" ],
    "biography" : "aeiou",
    "interests" : [ "aeiou" ],
    "spouse" : "aeiou"
  },
  "team" : {
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "indefinite" : true
  },
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ {
    "notes" : "aeiou",
    "coordinates" : {
      "key" : 1.3579000000000001069366817318950779736042022705078125
    },
    "locationDefinition" : "",
    "id" : "aeiou",
    "floorplanId" : "aeiou"
  } ],
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "locations" : [ {
      "images" : "aeiou",
      "address" : {
        "zipcode" : "aeiou",
        "country" : "aeiou",
        "city" : "aeiou",
        "street1" : "aeiou",
        "countryName" : "aeiou",
        "state" : "aeiou",
        "street2" : "aeiou"
      },
      "notes" : "aeiou",
      "floorplanImage" : [ "" ],
      "addressVerificationDetails" : {
        "dateStarted" : "2000-01-23T04:56:07.000+0000",
        "dateFinished" : "2000-01-23T04:56:07.000+0000",
        "service" : "smartystreets-us",
        "status" : "aeiou"
      },
      "selfUri" : "aeiou",
      "profileImage" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "emergencyNumber" : {
        "number" : "aeiou",
        "e164" : "aeiou",
        "type" : "aeiou"
      },
      "version" : 123,
      "path" : [ "aeiou" ],
      "addressStored" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "contactUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "state" : "aeiou",
      "addressVerified" : true
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
} ]}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getUserSuperiorsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<[User]> {
        var path = "/api/v2/users/{userId}/superiors"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<[User]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     List the organizations that have authorized/trusted the user.
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTrustors(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustorEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserTrustorsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustorEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List the organizations that have authorized/trusted the user.
     
     - GET /api/v2/users/{userId}/trustors
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "lastTokenIssued" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "team" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true,
        "productPlatform" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TrustorEntityListing> 
     */
    open class func getUserTrustorsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustorEntityListing> {
        var path = "/api/v2/users/{userId}/trustors"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TrustorEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getUsers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    public enum Expand_getUsers: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    
    public enum State_getUsers: String { 
        case active = "active"
        case inactive = "inactive"
        case deleted = "deleted"
        case any = "any"
    }

    
    
    /**
     
     Get the list of available users.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter state: (query) Only list users of this state (optional, default to active)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getUsers? = nil, expand: [String]? = nil, state: State_getUsers? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder, expand: expand, state: state)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of available users.
     
     - GET /api/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter state: (query) Only list users of this state (optional, default to active)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getUsersWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getUsers? = nil, expand: [String]? = nil, state: State_getUsers? = nil) -> RequestBuilder<UserEntityListing> {
        let path = "/api/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "id": _id, 
            
            "jabberId": jabberId, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "expand": expand, 
            
            "state": state?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getUsersMe: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
        case date = "date"
        case geolocationsettings = "geolocationsettings"
        case organization = "organization"
        case presencedefinitions = "presencedefinitions"
        case locationdefinitions = "locationdefinitions"
        case orgauthorization = "orgauthorization"
        case orgproducts = "orgproducts"
        case favorites = "favorites"
        case superiors = "superiors"
        case directreports = "directreports"
        case adjacents = "adjacents"
        case routingskills = "routingskills"
        case routinglanguages = "routinglanguages"
        case fieldconfigs = "fieldconfigs"
        case token = "token"
        case trustors = "trustors"
    }

    
    
    /**
     
     Get current user details.
     
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersMe(expand: [String]? = nil, completion: @escaping ((_ data: UserMe?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersMeWithRequestBuilder(expand: expand)
        requestBuilder.execute { (response: Response<UserMe>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get current user details.
     
     - GET /api/v2/users/me
     - This request is not valid when using the Client Credentials OAuth grant.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "date" : {
    "currentDate" : "2000-01-23T04:56:07.000+0000"
  },
  "addresses" : [ "" ],
  "orgProducts" : [ {
    "id" : "aeiou"
  } ],
  "geolocationSettings" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "enabled" : true,
    "mapboxKey" : "aeiou"
  },
  "routingStatus" : "",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : "",
  "skills" : [ "" ],
  "adjacents" : {
    "superiors" : [ "" ],
    "siblings" : [ "" ],
    "directReports" : [ "" ]
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "presence" : "",
  "images" : [ "" ],
  "locationDefinitions" : [ "" ],
  "employerInfo" : "",
  "conversationSummary" : "",
  "version" : 123,
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "presenceDefinitions" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "languageLabels" : {
      "key" : "aeiou"
    },
    "systemPresence" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "deactivated" : true,
    "primary" : true
  } ],
  "name" : "aeiou",
  "favorites" : [ "" ],
  "directReports" : [ "" ],
  "acdAutoAnswer" : true,
  "title" : "aeiou",
  "orgAuthorization" : [ {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : "",
          "value" : "aeiou",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "autoAnswerOnly" : true,
            "whisperPrompt" : "",
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  } ],
  "superiors" : [ "" ],
  "station" : "",
  "trustors" : [ {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : "",
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "lastTokenIssued" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ "" ],
      "biography" : "",
      "team" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "organization" : "",
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  } ],
  "fieldConfigs" : {
    "org" : {
      "schemaVersion" : "aeiou",
      "entityType" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "version" : "aeiou",
      "sections" : [ {
        "instructionText" : "aeiou",
        "state" : "aeiou",
        "fieldList" : [ {
          "instructionText" : "aeiou",
          "repeatable" : true,
          "customLabels" : true,
          "labelKeys" : [ "aeiou" ],
          "state" : "aeiou",
          "params" : {
            "key" : "{}"
          },
          "type" : "aeiou",
          "key" : "aeiou",
          "required" : true
        } ],
        "key" : "aeiou"
      } ]
    },
    "person" : "",
    "externalContact" : "",
    "group" : ""
  },
  "department" : "aeiou",
  "lastTokenIssued" : "",
  "email" : "aeiou",
  "manager" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : "",
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ "" ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : "",
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "languages" : [ "" ],
  "selfUri" : "aeiou",
  "groups" : [ "" ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : "",
  "team" : "",
  "certifications" : [ "aeiou" ],
  "token" : {
    "OAuthClient" : {
      "authorizedGrantType" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "scope" : [ "aeiou" ],
      "organization" : "",
      "name" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "roleDivisions" : [ {
        "roleId" : "aeiou",
        "divisionId" : "aeiou"
      } ]
    },
    "organization" : {
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "homeOrganization" : "",
    "authorizedScope" : [ "aeiou" ]
  },
  "outOfOffice" : "",
  "routingSkills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "version" : "aeiou"
  } ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "organization" : {
    "defaultCountryCode" : "aeiou",
    "selfUri" : "aeiou",
    "thirdPartyURI" : "aeiou",
    "version" : 123,
    "thirdPartyOrgName" : "aeiou",
    "features" : {
      "key" : true
    },
    "defaultLanguage" : "aeiou",
    "defaultSiteId" : "aeiou",
    "supportURI" : "aeiou",
    "domain" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "voicemailEnabled" : true,
    "productPlatform" : "aeiou"
  },
  "locations" : [ "" ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<UserMe> 
     */
    open class func getUsersMeWithRequestBuilder(expand: [String]? = nil) -> RequestBuilder<UserMe> {
        let path = "/api/v2/users/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<UserMe>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search users using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search users using the q64 value returned from a previous search
     
     - GET /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func getUsersSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<UsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUser(userId: String, body: UpdateUser, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update user
     
     - PATCH /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : {
    "unusedRoles" : [ "" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "skills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "defaultUser" : "",
      "id" : "aeiou",
      "type" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+0000"
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "manager" : "",
  "employerInfo" : {
    "employeeType" : "aeiou",
    "dateHire" : "aeiou",
    "employeeId" : "aeiou",
    "officialName" : "aeiou"
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "message" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : {
    "hobbies" : [ "aeiou" ],
    "biography" : "aeiou",
    "interests" : [ "aeiou" ],
    "spouse" : "aeiou"
  },
  "team" : {
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "indefinite" : true
  },
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ {
    "notes" : "aeiou",
    "coordinates" : {
      "key" : 1.3579000000000001069366817318950779736042022705078125
    },
    "locationDefinition" : "",
    "id" : "aeiou",
    "floorplanId" : "aeiou"
  } ],
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "locations" : [ {
      "images" : "aeiou",
      "address" : {
        "zipcode" : "aeiou",
        "country" : "aeiou",
        "city" : "aeiou",
        "street1" : "aeiou",
        "countryName" : "aeiou",
        "state" : "aeiou",
        "street2" : "aeiou"
      },
      "notes" : "aeiou",
      "floorplanImage" : [ "" ],
      "addressVerificationDetails" : {
        "dateStarted" : "2000-01-23T04:56:07.000+0000",
        "dateFinished" : "2000-01-23T04:56:07.000+0000",
        "service" : "smartystreets-us",
        "status" : "aeiou"
      },
      "selfUri" : "aeiou",
      "profileImage" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "emergencyNumber" : {
        "number" : "aeiou",
        "e164" : "aeiou",
        "type" : "aeiou"
      },
      "version" : 123,
      "path" : [ "aeiou" ],
      "addressStored" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "contactUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "state" : "aeiou",
      "addressVerified" : true
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 

     - returns: RequestBuilder<User> 
     */
    open class func patchUserWithRequestBuilder(userId: String, body: UpdateUser) -> RequestBuilder<User> {
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Patch a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserCallforwarding(userId: String, body: CallForwarding, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserCallforwardingWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch a user's CallForwarding
     
     - PATCH /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "voicemail" : "aeiou",
  "calls" : [ {
    "targets" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func patchUserCallforwardingWithRequestBuilder(userId: String, body: CallForwarding) -> RequestBuilder<CallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Patch a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body) Geolocation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserGeolocation(userId: String, clientId: String, body: Geolocation, completion: @escaping ((_ data: Geolocation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserGeolocationWithRequestBuilder(userId: userId, clientId: clientId, body: body)
        requestBuilder.execute { (response: Response<Geolocation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch a user's Geolocation
     
     - PATCH /api/v2/users/{userId}/geolocations/{clientId}
     - The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "city" : "aeiou",
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "locations" : [ {
    "images" : "aeiou",
    "address" : {
      "zipcode" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street1" : "aeiou",
      "countryName" : "aeiou",
      "state" : "aeiou",
      "street2" : "aeiou"
    },
    "notes" : "aeiou",
    "floorplanImage" : [ "" ],
    "addressVerificationDetails" : {
      "dateStarted" : "2000-01-23T04:56:07.000+0000",
      "dateFinished" : "2000-01-23T04:56:07.000+0000",
      "service" : "smartystreets-us",
      "status" : "aeiou"
    },
    "selfUri" : "aeiou",
    "profileImage" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "emergencyNumber" : {
      "number" : "aeiou",
      "e164" : "aeiou",
      "type" : "aeiou"
    },
    "version" : 123,
    "path" : [ "aeiou" ],
    "addressStored" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "contactUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "state" : "aeiou",
    "addressVerified" : true
  } ],
  "id" : "aeiou",
  "type" : "aeiou",
  "region" : "aeiou",
  "primary" : true,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body) Geolocation 

     - returns: RequestBuilder<Geolocation> 
     */
    open class func patchUserGeolocationWithRequestBuilder(userId: String, clientId: String, body: Geolocation) -> RequestBuilder<Geolocation> {
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geolocation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Join or unjoin a queue for a user
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueue(queueId: String, userId: String, body: UserQueue, completion: @escaping ((_ data: UserQueue?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueueWithRequestBuilder(queueId: queueId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserQueue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Join or unjoin a queue for a user
     
     - PATCH /api/v2/users/{userId}/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "joined" : true,
  "memberCount" : 123,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "whisperPrompt" : "",
  "outboundEmailAddress" : {
    "route" : {
      "replyEmailAddress" : "",
      "selfUri" : "aeiou",
      "pattern" : "aeiou",
      "language" : "",
      "autoBcc" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "priority" : 123,
      "fromEmail" : "aeiou",
      "skills" : [ "" ],
      "name" : "aeiou",
      "fromName" : "aeiou",
      "id" : "aeiou",
      "queue" : "",
      "flow" : "",
      "spamFlow" : ""
    },
    "domain" : ""
  },
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "aeiou",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+0000",
      "features" : "{}",
      "versionId" : "aeiou",
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "pages" : [ {
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "startPageId" : "aeiou",
      "id" : "aeiou",
      "publishedDate" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "outboundMessagingAddresses" : {
    "smsAddress" : ""
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<UserQueue> 
     */
    open class func patchUserQueueWithRequestBuilder(queueId: String, userId: String, body: UserQueue) -> RequestBuilder<UserQueue> {
        var path = "/api/v2/users/{userId}/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserQueue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Join or unjoin a set of queues for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueues(userId: String, body: [UserQueue], divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueuesWithRequestBuilder(userId: userId, body: body, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Join or unjoin a set of queues for a user
     
     - PATCH /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func patchUserQueuesWithRequestBuilder(userId: String, body: [UserQueue], divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update routing language proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguage(userId: String, languageId: String, body: UserRoutingLanguage, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update routing language proficiency or state.
     
     - PATCH /api/v2/users/{userId}/routinglanguages/{languageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "languageUri" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func patchUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String, body: UserRoutingLanguage) -> RequestBuilder<UserRoutingLanguage> {
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add bulk routing language to user. Max limit 50 languages
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguagesBulk(userId: String, body: [UserRoutingLanguagePost], completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguagesBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add bulk routing language to user. Max limit 50 languages
     
     - PATCH /api/v2/users/{userId}/routinglanguages/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func patchUserRoutinglanguagesBulkWithRequestBuilder(userId: String, body: [UserRoutingLanguagePost]) -> RequestBuilder<UserLanguageEntityListing> {
        var path = "/api/v2/users/{userId}/routinglanguages/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Bulk add routing skills to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk add routing skills to user
     
     - PATCH /api/v2/users/{userId}/routingskills/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func patchUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Update bulk acd autoanswer on users
     
     - parameter body: (body) Users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUsersBulk(body: [PatchUser], completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUsersBulkWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update bulk acd autoanswer on users
     
     - PATCH /api/v2/users/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter body: (body) Users 

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func patchUsersBulkWithRequestBuilder(body: [PatchUser]) -> RequestBuilder<UserEntityListing> {
        let path = "/api/v2/users/bulk"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersAggregatesQuery(body: UserAggregationQuery, completion: @escaping ((_ data: UserAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user aggregates
     
     - POST /api/v2/analytics/users/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "aeiou" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserAggregateQueryResponse> 
     */
    open class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: UserAggregationQuery) -> RequestBuilder<UserAggregateQueryResponse> {
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsJobs(body: AsyncUserDetailsQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user details asynchronously
     
     - POST /api/v2/analytics/users/details/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsJobsWithRequestBuilder(body: AsyncUserDetailsQuery) -> RequestBuilder<AsyncQueryResponse> {
        let path = "/api/v2/analytics/users/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsQuery(body: UserDetailsQuery, completion: @escaping ((_ data: AnalyticsUserDetailsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user details
     
     - POST /api/v2/analytics/users/details/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "organizationPresenceId" : "aeiou"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "routingStatus" : "aeiou"
    } ],
    "userId" : "aeiou"
  } ],
  "aggregations" : [ {
    "metric" : "aeiou",
    "count" : 123456789,
    "type" : "aeiou",
    "dimension" : "aeiou",
    "results" : [ {
      "count" : 123456789,
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "value" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsUserDetailsQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsQueryWithRequestBuilder(body: UserDetailsQuery) -> RequestBuilder<AnalyticsUserDetailsQueryResponse> {
        let path = "/api/v2/analytics/users/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersObservationsQuery(body: UserObservationQuery, completion: @escaping ((_ data: UserObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user observations
     
     - POST /api/v2/analytics/users/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou",
      "observations" : [ {
        "routingPriority" : 123456789,
        "conversationId" : "aeiou",
        "convertedTo" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "sessionId" : "aeiou",
        "userId" : "aeiou",
        "addressTo" : "aeiou",
        "observationDate" : "2000-01-23T04:56:07.000+0000",
        "teamId" : "aeiou",
        "convertedFrom" : "aeiou",
        "dnis" : "aeiou",
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "requestedLanguageId" : "aeiou",
        "participantName" : "aeiou",
        "addressFrom" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserObservationQueryResponse> 
     */
    open class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body: UserObservationQuery) -> RequestBuilder<UserObservationQueryResponse> {
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Bulk-grant roles and divisions to a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkadd(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: subjectId, body: body, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk-grant roles and divisions to a subject.
     
     - POST /api/v2/authorization/subjects/{subjectId}/bulkadd
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkadd"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "subjectType": subjectType
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Bulk-remove grants from a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkremove(subjectId: String, body: RoleDivisionGrants, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: subjectId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk-remove grants from a subject.
     
     - POST /api/v2/authorization/subjects/{subjectId}/bulkremove
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: String, body: RoleDivisionGrants) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkremove"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Make a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional, default to PC_USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Make a grant of a role in a division
     
     - POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional, default to PC_USER)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "subjectType": subjectType
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Send an activation email to the user
     
     - parameter userId: (path) User ID 
     - parameter force: (query) Resend the invitation even if one is already outstanding (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserInvite(userId: String, force: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserInviteWithRequestBuilder(userId: userId, force: force)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send an activation email to the user
     
     - POST /api/v2/users/{userId}/invite
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter force: (query) Resend the invitation even if one is already outstanding (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func postUserInviteWithRequestBuilder(userId: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/invite"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "force": force
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Change a users password
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserPassword(userId: String, body: ChangePasswordRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserPasswordWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Change a users password
     
     - POST /api/v2/users/{userId}/password
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Password 

     - returns: RequestBuilder<Void> 
     */
    open class func postUserPasswordWithRequestBuilder(userId: String, body: ChangePasswordRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/password"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add routing language to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutinglanguages(userId: String, body: UserRoutingLanguagePost, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutinglanguagesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add routing language to user
     
     - POST /api/v2/users/{userId}/routinglanguages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "languageUri" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func postUserRoutinglanguagesWithRequestBuilder(userId: String, body: UserRoutingLanguagePost) -> RequestBuilder<UserRoutingLanguage> {
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutingskills(userId: String, body: UserRoutingSkillPost, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutingskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add routing skill to user
     
     - POST /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func postUserRoutingskillsWithRequestBuilder(userId: String, body: UserRoutingSkillPost) -> RequestBuilder<UserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create user
     
     - parameter body: (body) User 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsers(body: CreateUser, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create user
     
     - POST /api/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : {
    "unusedRoles" : [ "" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "skills" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "defaultUser" : "",
      "id" : "aeiou",
      "type" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+0000"
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "manager" : "",
  "employerInfo" : {
    "employeeType" : "aeiou",
    "dateHire" : "aeiou",
    "employeeId" : "aeiou",
    "officialName" : "aeiou"
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "message" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : {
    "hobbies" : [ "aeiou" ],
    "biography" : "aeiou",
    "interests" : [ "aeiou" ],
    "spouse" : "aeiou"
  },
  "team" : {
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "indefinite" : true
  },
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ {
    "notes" : "aeiou",
    "coordinates" : {
      "key" : 1.3579000000000001069366817318950779736042022705078125
    },
    "locationDefinition" : "",
    "id" : "aeiou",
    "floorplanId" : "aeiou"
  } ],
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "locations" : [ {
      "images" : "aeiou",
      "address" : {
        "zipcode" : "aeiou",
        "country" : "aeiou",
        "city" : "aeiou",
        "street1" : "aeiou",
        "countryName" : "aeiou",
        "state" : "aeiou",
        "street2" : "aeiou"
      },
      "notes" : "aeiou",
      "floorplanImage" : [ "" ],
      "addressVerificationDetails" : {
        "dateStarted" : "2000-01-23T04:56:07.000+0000",
        "dateFinished" : "2000-01-23T04:56:07.000+0000",
        "service" : "smartystreets-us",
        "status" : "aeiou"
      },
      "selfUri" : "aeiou",
      "profileImage" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "emergencyNumber" : {
        "number" : "aeiou",
        "e164" : "aeiou",
        "type" : "aeiou"
      },
      "version" : 123,
      "path" : [ "aeiou" ],
      "addressStored" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "contactUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "state" : "aeiou",
      "addressVerified" : true
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter body: (body) User 

     - returns: RequestBuilder<User> 
     */
    open class func postUsersWithRequestBuilder(body: CreateUser) -> RequestBuilder<User> {
        let path = "/api/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Change your password
     
     - parameter body: (body) Password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersMePassword(body: ChangeMyPasswordRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersMePasswordWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Change your password
     
     - POST /api/v2/users/me/password
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) Password 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersMePasswordWithRequestBuilder(body: ChangeMyPasswordRequest) -> RequestBuilder<Void> {
        let path = "/api/v2/users/me/password"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search users
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearch(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search users
     
     - POST /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUserUtilization(userId: String, body: Utilization, completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUserUtilizationWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - PUT /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 

     - returns: RequestBuilder<Utilization> 
     */
    open class func putRoutingUserUtilizationWithRequestBuilder(userId: String, body: Utilization) -> RequestBuilder<Utilization> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserCallforwarding(userId: String, body: CallForwarding, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserCallforwardingWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a user's CallForwarding
     
     - PUT /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "voicemail" : "aeiou",
  "calls" : [ {
    "targets" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func putUserCallforwardingWithRequestBuilder(userId: String, body: CallForwarding) -> RequestBuilder<CallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated OutOffOffice 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserOutofoffice(userId: String, body: OutOfOffice, completion: @escaping ((_ data: OutOfOffice?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserOutofofficeWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<OutOfOffice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an OutOfOffice
     
     - PUT /api/v2/users/{userId}/outofoffice
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "startDate" : "2000-01-23T04:56:07.000+0000",
  "indefinite" : true
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated OutOffOffice 

     - returns: RequestBuilder<OutOfOffice> 
     */
    open class func putUserOutofofficeWithRequestBuilder(userId: String, body: OutOfOffice) -> RequestBuilder<OutOfOffice> {
        var path = "/api/v2/users/{userId}/outofoffice"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutOfOffice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update profile skills for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skills 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserProfileskills(userId: String, body: [String], completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserProfileskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update profile skills for a user
     
     - PUT /api/v2/users/{userId}/profileskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skills 

     - returns: RequestBuilder<[String]> 
     */
    open class func putUserProfileskillsWithRequestBuilder(userId: String, body: [String]) -> RequestBuilder<[String]> {
        var path = "/api/v2/users/{userId}/profileskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Sets the user's roles
     
     - parameter userId: (path) User ID 
     - parameter body: (body) List of roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoles(userId: String, body: [String], completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRolesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Sets the user's roles
     
     - PUT /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) List of roles 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func putUserRolesWithRequestBuilder(userId: String, body: [String]) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskill(userId: String, skillId: String, body: UserRoutingSkill, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update routing skill proficiency or state.
     
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func putUserRoutingskillWithRequestBuilder(userId: String, skillId: String, body: UserRoutingSkill) -> RequestBuilder<UserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Replace all routing skills assigned to a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace all routing skills assigned to a user
     
     - PUT /api/v2/users/{userId}/routingskills/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func putUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingstatus(userId: String, body: RoutingStatus, completion: @escaping ((_ data: RoutingStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingstatusWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<RoutingStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the routing status of a user
     
     - PUT /api/v2/users/{userId}/routingstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status 

     - returns: RequestBuilder<RoutingStatus> 
     */
    open class func putUserRoutingstatusWithRequestBuilder(userId: String, body: RoutingStatus) -> RequestBuilder<RoutingStatus> {
        var path = "/api/v2/users/{userId}/routingstatus"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Set associated station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserStationAssociatedstationStationId(userId: String, stationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserStationAssociatedstationStationIdWithRequestBuilder(userId: userId, stationId: stationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Set associated station
     
     - PUT /api/v2/users/{userId}/station/associatedstation/{stationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 

     - returns: RequestBuilder<Void> 
     */
    open class func putUserStationAssociatedstationStationIdWithRequestBuilder(userId: String, stationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/associatedstation/{stationId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let stationIdPreEscape = "\(stationId)"
        let stationIdPostEscape = stationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stationId}", with: stationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Set default station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserStationDefaultstationStationId(userId: String, stationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserStationDefaultstationStationIdWithRequestBuilder(userId: userId, stationId: stationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Set default station
     
     - PUT /api/v2/users/{userId}/station/defaultstation/{stationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 

     - returns: RequestBuilder<Void> 
     */
    open class func putUserStationDefaultstationStationIdWithRequestBuilder(userId: String, stationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/defaultstation/{stationId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let stationIdPreEscape = "\(stationId)"
        let stationIdPostEscape = stationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stationId}", with: stationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
