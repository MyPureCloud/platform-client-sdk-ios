//
// CoachingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CoachingAPI {
    
    
    
    /**
     
     Delete an existing appointment
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCoachingAppointment(appointmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteCoachingAppointmentWithRequestBuilder(appointmentId: appointmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an existing appointment
     
     - DELETE /api/v2/coaching/appointments/{appointmentId}
     - Permission not required if you are the creator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCoachingAppointmentWithRequestBuilder(appointmentId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/coaching/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete an existing annotation
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCoachingAppointmentAnnotation(appointmentId: String, annotationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: appointmentId, annotationId: annotationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an existing annotation
     
     - DELETE /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}
     - You must have the appropriate permission for the type of annotation you are updating. Permission not required if you are the creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: String, annotationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Retrieve an appointment
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointment(appointmentId: String, completion: @escaping ((_ data: CoachingAppointmentResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentWithRequestBuilder(appointmentId: appointmentId)
        requestBuilder.execute { (response: Response<CoachingAppointmentResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve an appointment
     
     - GET /api/v2/coaching/appointments/{appointmentId}
     - Permission not required if you are the attendee, creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "documents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "attendees" : [ "" ],
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "conversations" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "facilitator" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "lengthInMinutes" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 

     - returns: RequestBuilder<CoachingAppointmentResponse> 
     */
    open class func getCoachingAppointmentWithRequestBuilder(appointmentId: String) -> RequestBuilder<CoachingAppointmentResponse> {
        var path = "/api/v2/coaching/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAppointmentResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve an annotation.
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointmentAnnotation(appointmentId: String, annotationId: String, completion: @escaping ((_ data: CoachingAnnotation?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: appointmentId, annotationId: annotationId)
        requestBuilder.execute { (response: Response<CoachingAnnotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve an annotation.
     
     - GET /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}
     - You must have the appropriate permission for the type of annotation you are creating. Permission not required if you are related to the appointment (only the creator or facilitator can view private annotations).
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessType" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isDeleted" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "modifiedBy" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "text" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 

     - returns: RequestBuilder<CoachingAnnotation> 
     */
    open class func getCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: String, annotationId: String) -> RequestBuilder<CoachingAnnotation> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAnnotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of annotations.
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointmentAnnotations(appointmentId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: CoachingAnnotationList?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentAnnotationsWithRequestBuilder(appointmentId: appointmentId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<CoachingAnnotationList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of annotations.
     
     - GET /api/v2/coaching/appointments/{appointmentId}/annotations
     - You must have the appropriate permission for the type of annotation you are creating. Permission not required if you are related to the appointment (only the creator or facilitator can view private annotations).
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "accessType" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "isDeleted" : true,
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "text" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<CoachingAnnotationList> 
     */
    open class func getCoachingAppointmentAnnotationsWithRequestBuilder(appointmentId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<CoachingAnnotationList> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/annotations"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<CoachingAnnotationList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the list of status changes for a coaching appointment.
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointmentStatuses(appointmentId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: CoachingAppointmentStatusDtoList?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentStatusesWithRequestBuilder(appointmentId: appointmentId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<CoachingAppointmentStatusDtoList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of status changes for a coaching appointment.
     
     - GET /api/v2/coaching/appointments/{appointmentId}/statuses
     - Permission not required if you are an attendee, creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "appointment" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ],
  "pageSize" : 123
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<CoachingAppointmentStatusDtoList> 
     */
    open class func getCoachingAppointmentStatusesWithRequestBuilder(appointmentId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<CoachingAppointmentStatusDtoList> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/statuses"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<CoachingAppointmentStatusDtoList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Statuses_getCoachingAppointments: String { 
        case scheduled = "Scheduled"
        case inProgress = "InProgress"
        case completed = "Completed"
    }

    
    
    
    
    
    public enum SortOrder_getCoachingAppointments: String { 
        case desc = "Desc"
        case asc = "Asc"
    }

    
    
    /**
     
     Get appointments for users and optional date range
     
     - parameter userIds: (query) The user IDs for which to retrieve appointments 
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter statuses: (query) Appointment Statuses to filter by (optional)
     - parameter facilitatorIds: (query) The facilitator IDs for which to retrieve appointments (optional)
     - parameter sortOrder: (query) Sort (by due date) either Asc or Desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointments(userIds: [String], interval: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, statuses: [String]? = nil, facilitatorIds: [String]? = nil, sortOrder: SortOrder_getCoachingAppointments? = nil, completion: @escaping ((_ data: CoachingAppointmentResponseList?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentsWithRequestBuilder(userIds: userIds, interval: interval, pageNumber: pageNumber, pageSize: pageSize, statuses: statuses, facilitatorIds: facilitatorIds, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CoachingAppointmentResponseList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get appointments for users and optional date range
     
     - GET /api/v2/coaching/appointments
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "documents" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "attendees" : [ "" ],
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "conversations" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "facilitator" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "lengthInMinutes" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter userIds: (query) The user IDs for which to retrieve appointments 
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter statuses: (query) Appointment Statuses to filter by (optional)
     - parameter facilitatorIds: (query) The facilitator IDs for which to retrieve appointments (optional)
     - parameter sortOrder: (query) Sort (by due date) either Asc or Desc (optional)

     - returns: RequestBuilder<CoachingAppointmentResponseList> 
     */
    open class func getCoachingAppointmentsWithRequestBuilder(userIds: [String], interval: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, statuses: [String]? = nil, facilitatorIds: [String]? = nil, sortOrder: SortOrder_getCoachingAppointments? = nil) -> RequestBuilder<CoachingAppointmentResponseList> {
        let path = "/api/v2/coaching/appointments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "userIds": userIds, 
            
            "interval": interval, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "statuses": statuses, 
            
            "facilitatorIds": facilitatorIds, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CoachingAppointmentResponseList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Statuses_getCoachingAppointmentsMe: String { 
        case scheduled = "Scheduled"
        case inProgress = "InProgress"
        case completed = "Completed"
    }

    
    
    
    
    
    public enum SortOrder_getCoachingAppointmentsMe: String { 
        case desc = "Desc"
        case asc = "Asc"
    }

    
    
    /**
     
     Get my appointments for a given date range
     
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter statuses: (query) Appointment Statuses to filter by (optional)
     - parameter facilitatorIds: (query) The facilitator IDs for which to retrieve appointments (optional)
     - parameter sortOrder: (query) Sort (by due date) either Asc or Desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingAppointmentsMe(interval: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, statuses: [String]? = nil, facilitatorIds: [String]? = nil, sortOrder: SortOrder_getCoachingAppointmentsMe? = nil, completion: @escaping ((_ data: CoachingAppointmentResponseList?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingAppointmentsMeWithRequestBuilder(interval: interval, pageNumber: pageNumber, pageSize: pageSize, statuses: statuses, facilitatorIds: facilitatorIds, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CoachingAppointmentResponseList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get my appointments for a given date range
     
     - GET /api/v2/coaching/appointments/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "documents" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "attendees" : [ "" ],
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "conversations" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "facilitator" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "lengthInMinutes" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter statuses: (query) Appointment Statuses to filter by (optional)
     - parameter facilitatorIds: (query) The facilitator IDs for which to retrieve appointments (optional)
     - parameter sortOrder: (query) Sort (by due date) either Asc or Desc (optional)

     - returns: RequestBuilder<CoachingAppointmentResponseList> 
     */
    open class func getCoachingAppointmentsMeWithRequestBuilder(interval: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, statuses: [String]? = nil, facilitatorIds: [String]? = nil, sortOrder: SortOrder_getCoachingAppointmentsMe? = nil) -> RequestBuilder<CoachingAppointmentResponseList> {
        let path = "/api/v2/coaching/appointments/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "interval": interval, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "statuses": statuses, 
            
            "facilitatorIds": facilitatorIds, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CoachingAppointmentResponseList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get an existing notification
     
     - parameter notificationId: (path) The ID of the notification. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingNotification(notificationId: String, completion: @escaping ((_ data: CoachingNotification?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingNotificationWithRequestBuilder(notificationId: notificationId)
        requestBuilder.execute { (response: Response<CoachingNotification>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an existing notification
     
     - GET /api/v2/coaching/notifications/{notificationId}
     - Permission not required if you are the owner of the notification.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "actionType" : "aeiou",
  "lengthInMinutes" : 123,
  "markedAsRead" : true,
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "appointment" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "id" : "aeiou",
  "relationship" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter notificationId: (path) The ID of the notification. 

     - returns: RequestBuilder<CoachingNotification> 
     */
    open class func getCoachingNotificationWithRequestBuilder(notificationId: String) -> RequestBuilder<CoachingNotification> {
        var path = "/api/v2/coaching/notifications/{notificationId}"
        let notificationIdPreEscape = "\(notificationId)"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingNotification>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve the list of your notifications.
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoachingNotifications(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: CoachingNotificationList?,_ error: Error?) -> Void)) {
        let requestBuilder = getCoachingNotificationsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<CoachingNotificationList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve the list of your notifications.
     
     - GET /api/v2/coaching/notifications
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "actionType" : "aeiou",
    "lengthInMinutes" : 123,
    "markedAsRead" : true,
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "appointment" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "id" : "aeiou",
    "relationship" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<CoachingNotificationList> 
     */
    open class func getCoachingNotificationsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<CoachingNotificationList> {
        let path = "/api/v2/coaching/notifications"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<CoachingNotificationList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an existing appointment
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) The new version of the appointment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchCoachingAppointment(appointmentId: String, body: UpdateCoachingAppointmentRequest, completion: @escaping ((_ data: CoachingAppointmentResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchCoachingAppointmentWithRequestBuilder(appointmentId: appointmentId, body: body)
        requestBuilder.execute { (response: Response<CoachingAppointmentResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an existing appointment
     
     - PATCH /api/v2/coaching/appointments/{appointmentId}
     - Permission not required if you are the creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "documents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "attendees" : [ "" ],
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "conversations" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "facilitator" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "lengthInMinutes" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) The new version of the appointment 

     - returns: RequestBuilder<CoachingAppointmentResponse> 
     */
    open class func patchCoachingAppointmentWithRequestBuilder(appointmentId: String, body: UpdateCoachingAppointmentRequest) -> RequestBuilder<CoachingAppointmentResponse> {
        var path = "/api/v2/coaching/appointments/{appointmentId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAppointmentResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update an existing annotation.
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 
     - parameter body: (body) The new version of the annotation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchCoachingAppointmentAnnotation(appointmentId: String, annotationId: String, body: CoachingAnnotation, completion: @escaping ((_ data: CoachingAnnotation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: appointmentId, annotationId: annotationId, body: body)
        requestBuilder.execute { (response: Response<CoachingAnnotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an existing annotation.
     
     - PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}
     - You must have the appropriate permission for the type of annotation you are updating. Permission not required if you are the creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessType" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isDeleted" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "modifiedBy" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "text" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter annotationId: (path) The ID of the annotation. 
     - parameter body: (body) The new version of the annotation 

     - returns: RequestBuilder<CoachingAnnotation> 
     */
    open class func patchCoachingAppointmentAnnotationWithRequestBuilder(appointmentId: String, annotationId: String, body: CoachingAnnotation) -> RequestBuilder<CoachingAnnotation> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAnnotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the status of a coaching appointment
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) Updated status of the coaching appointment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchCoachingAppointmentStatus(appointmentId: String, body: CoachingAppointmentStatusDto, completion: @escaping ((_ data: CoachingAppointmentStatusDto?,_ error: Error?) -> Void)) {
        let requestBuilder = patchCoachingAppointmentStatusWithRequestBuilder(appointmentId: appointmentId, body: body)
        requestBuilder.execute { (response: Response<CoachingAppointmentStatusDto>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the status of a coaching appointment
     
     - PATCH /api/v2/coaching/appointments/{appointmentId}/status
     - Permission not required if you are an attendee, creator or facilitator of the appointment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "appointment" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) Updated status of the coaching appointment 

     - returns: RequestBuilder<CoachingAppointmentStatusDto> 
     */
    open class func patchCoachingAppointmentStatusWithRequestBuilder(appointmentId: String, body: CoachingAppointmentStatusDto) -> RequestBuilder<CoachingAppointmentStatusDto> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/status"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAppointmentStatusDto>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an existing notification.
     
     - parameter notificationId: (path) The ID of the notification. 
     - parameter body: (body) Change the read state of a notification 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchCoachingNotification(notificationId: String, body: CoachingNotification, completion: @escaping ((_ data: CoachingNotification?,_ error: Error?) -> Void)) {
        let requestBuilder = patchCoachingNotificationWithRequestBuilder(notificationId: notificationId, body: body)
        requestBuilder.execute { (response: Response<CoachingNotification>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an existing notification.
     
     - PATCH /api/v2/coaching/notifications/{notificationId}
     - Can only update your own notifications.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "actionType" : "aeiou",
  "lengthInMinutes" : 123,
  "markedAsRead" : true,
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "appointment" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "id" : "aeiou",
  "relationship" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter notificationId: (path) The ID of the notification. 
     - parameter body: (body) Change the read state of a notification 

     - returns: RequestBuilder<CoachingNotification> 
     */
    open class func patchCoachingNotificationWithRequestBuilder(notificationId: String, body: CoachingNotification) -> RequestBuilder<CoachingNotification> {
        var path = "/api/v2/coaching/notifications/{notificationId}"
        let notificationIdPreEscape = "\(notificationId)"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingNotification>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new annotation.
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) The annotation to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCoachingAppointmentAnnotations(appointmentId: String, body: CoachingAnnotationCreateRequest, completion: @escaping ((_ data: CoachingAnnotation?,_ error: Error?) -> Void)) {
        let requestBuilder = postCoachingAppointmentAnnotationsWithRequestBuilder(appointmentId: appointmentId, body: body)
        requestBuilder.execute { (response: Response<CoachingAnnotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new annotation.
     
     - POST /api/v2/coaching/appointments/{appointmentId}/annotations
     - You must have the appropriate permission for the type of annotation you are creating. Permission not required if you are related to the appointment (only the creator or facilitator can create private annotations).
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessType" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isDeleted" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "modifiedBy" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "text" : "aeiou"
}}]
     
     - parameter appointmentId: (path) The ID of the coaching appointment. 
     - parameter body: (body) The annotation to add 

     - returns: RequestBuilder<CoachingAnnotation> 
     */
    open class func postCoachingAppointmentAnnotationsWithRequestBuilder(appointmentId: String, body: CoachingAnnotationCreateRequest) -> RequestBuilder<CoachingAnnotation> {
        var path = "/api/v2/coaching/appointments/{appointmentId}/annotations"
        let appointmentIdPreEscape = "\(appointmentId)"
        let appointmentIdPostEscape = appointmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appointmentId}", with: appointmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAnnotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new appointment
     
     - parameter body: (body) The appointment to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCoachingAppointments(body: CreateCoachingAppointmentRequest, completion: @escaping ((_ data: CoachingAppointmentResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postCoachingAppointmentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CoachingAppointmentResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new appointment
     
     - POST /api/v2/coaching/appointments
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "documents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "attendees" : [ "" ],
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "conversations" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "facilitator" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "lengthInMinutes" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) The appointment to add 

     - returns: RequestBuilder<CoachingAppointmentResponse> 
     */
    open class func postCoachingAppointmentsWithRequestBuilder(body: CreateCoachingAppointmentRequest) -> RequestBuilder<CoachingAppointmentResponse> {
        let path = "/api/v2/coaching/appointments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoachingAppointmentResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
