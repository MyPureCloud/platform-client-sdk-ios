//
// GamificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GamificationAPI {
    
    
    
    
    
    
    
    /**
     
     Leaderboard of the requesting user's division or performance profile
     
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboard(startWorkday: Date, endWorkday: Date, metricId: String? = nil, completion: @escaping ((_ data: Leaderboard?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId)
        requestBuilder.execute { (response: Response<Leaderboard>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Leaderboard of the requesting user's division or performance profile
     
     - GET /api/v2/gamification/leaderboard
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : "",
  "metric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "leaders" : [ {
    "rank" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "points" : 123456789
  } ],
  "userRank" : ""
}}]
     
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)

     - returns: RequestBuilder<Leaderboard> 
     */
    open class func getGamificationLeaderboardWithRequestBuilder(startWorkday: Date, endWorkday: Date, metricId: String? = nil) -> RequestBuilder<Leaderboard> {
        let path = "/api/v2/gamification/leaderboard"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "metricId": metricId
            
        ])

        let requestBuilder: RequestBuilder<Leaderboard>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationLeaderboardAll: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Leaderboard by filter type
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardAll(filterType: FilterType_getGamificationLeaderboardAll, filterId: String, startWorkday: Date, endWorkday: Date, metricId: String? = nil, completion: @escaping ((_ data: Leaderboard?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardAllWithRequestBuilder(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId)
        requestBuilder.execute { (response: Response<Leaderboard>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Leaderboard by filter type
     
     - GET /api/v2/gamification/leaderboard/all
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : "",
  "metric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "leaders" : [ {
    "rank" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "points" : 123456789
  } ],
  "userRank" : ""
}}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)

     - returns: RequestBuilder<Leaderboard> 
     */
    open class func getGamificationLeaderboardAllWithRequestBuilder(filterType: FilterType_getGamificationLeaderboardAll, filterId: String, startWorkday: Date, endWorkday: Date, metricId: String? = nil) -> RequestBuilder<Leaderboard> {
        let path = "/api/v2/gamification/leaderboard/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType.rawValue, 
            
            "filterId": filterId, 
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "metricId": metricId
            
        ])

        let requestBuilder: RequestBuilder<Leaderboard>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationLeaderboardAllBestpoints: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    /**
     
     Best Points by division or performance profile
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardAllBestpoints(filterType: FilterType_getGamificationLeaderboardAllBestpoints, filterId: String, completion: @escaping ((_ data: OverallBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardAllBestpointsWithRequestBuilder(filterType: filterType, filterId: filterId)
        requestBuilder.execute { (response: Response<OverallBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Best Points by division or performance profile
     
     - GET /api/v2/gamification/leaderboard/all/bestpoints
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "bestPoints" : [ {
    "granularityType" : "aeiou",
    "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
    "count" : 123,
    "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
    "users" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "points" : 123
  } ]
}}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 

     - returns: RequestBuilder<OverallBestPoints> 
     */
    open class func getGamificationLeaderboardAllBestpointsWithRequestBuilder(filterType: FilterType_getGamificationLeaderboardAllBestpoints, filterId: String) -> RequestBuilder<OverallBestPoints> {
        let path = "/api/v2/gamification/leaderboard/all/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType.rawValue, 
            
            "filterId": filterId
            
        ])

        let requestBuilder: RequestBuilder<OverallBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Best Points of the requesting user's current performance profile or division
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardBestpoints(completion: @escaping ((_ data: OverallBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardBestpointsWithRequestBuilder()
        requestBuilder.execute { (response: Response<OverallBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Best Points of the requesting user's current performance profile or division
     
     - GET /api/v2/gamification/leaderboard/bestpoints
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "bestPoints" : [ {
    "granularityType" : "aeiou",
    "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
    "count" : 123,
    "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
    "users" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "points" : 123
  } ]
}}]

     - returns: RequestBuilder<OverallBestPoints> 
     */
    open class func getGamificationLeaderboardBestpointsWithRequestBuilder() -> RequestBuilder<OverallBestPoints> {
        let path = "/api/v2/gamification/leaderboard/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OverallBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gamified metric by id
     
     - parameter metricId: (path) metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetric(metricId: String, workday: Date? = nil, performanceProfileId: String? = nil, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricWithRequestBuilder(metricId: metricId, workday: workday, performanceProfileId: performanceProfileId)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gamified metric by id
     
     - GET /api/v2/gamification/metrics/{metricId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter metricId: (path) metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)

     - returns: RequestBuilder<Metric> 
     */
    open class func getGamificationMetricWithRequestBuilder(metricId: String, workday: Date? = nil, performanceProfileId: String? = nil) -> RequestBuilder<Metric> {
        var path = "/api/v2/gamification/metrics/{metricId}"
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday?.encodeToJSON(), 
            
            "performanceProfileId": performanceProfileId
            
        ])

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Metric definition by id
     
     - parameter metricDefinitionId: (path) metric definition id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetricdefinition(metricDefinitionId: String, completion: @escaping ((_ data: MetricDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricdefinitionWithRequestBuilder(metricDefinitionId: metricDefinitionId)
        requestBuilder.execute { (response: Response<MetricDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Metric definition by id
     
     - GET /api/v2/gamification/metricdefinitions/{metricDefinitionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unitType" : "aeiou",
  "defaultObjective" : {
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  },
  "divisorMetrics" : [ "aeiou" ],
  "lockTemplateId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dividendMetrics" : [ "aeiou" ],
  "id" : "aeiou",
  "shortName" : "aeiou"
}}]
     
     - parameter metricDefinitionId: (path) metric definition id 

     - returns: RequestBuilder<MetricDefinition> 
     */
    open class func getGamificationMetricdefinitionWithRequestBuilder(metricDefinitionId: String) -> RequestBuilder<MetricDefinition> {
        var path = "/api/v2/gamification/metricdefinitions/{metricDefinitionId}"
        let metricDefinitionIdPreEscape = "\(metricDefinitionId)"
        let metricDefinitionIdPostEscape = metricDefinitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricDefinitionId}", with: metricDefinitionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MetricDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     All metric definitions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetricdefinitions(completion: @escaping ((_ data: GetMetricDefinitionsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricdefinitionsWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetMetricDefinitionsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All metric definitions
     
     - GET /api/v2/gamification/metricdefinitions
     - Retrieves the metric definitions and their corresponding default objectives used to create a gamified metric
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "unitType" : "aeiou",
    "defaultObjective" : {
      "id" : "aeiou",
      "templateId" : "aeiou",
      "zones" : [ {
        "upperLimitValue" : 123,
        "directionType" : "aeiou",
        "lowerLimitPoints" : 123,
        "zoneType" : "aeiou",
        "upperLimitPoints" : 123,
        "label" : "aeiou",
        "lowerLimitValue" : 123
      } ],
      "enabled" : true
    },
    "divisorMetrics" : [ "aeiou" ],
    "lockTemplateId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dividendMetrics" : [ "aeiou" ],
    "id" : "aeiou",
    "shortName" : "aeiou"
  } ],
  "selfUri" : "aeiou"
}}]

     - returns: RequestBuilder<GetMetricDefinitionsResponse> 
     */
    open class func getGamificationMetricdefinitionsWithRequestBuilder() -> RequestBuilder<GetMetricDefinitionsResponse> {
        let path = "/api/v2/gamification/metricdefinitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetMetricDefinitionsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     All gamified metrics for a given profile
     
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetrics(performanceProfileId: String? = nil, workday: Date? = nil, completion: @escaping ((_ data: GetMetricsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricsWithRequestBuilder(performanceProfileId: performanceProfileId, workday: workday)
        requestBuilder.execute { (response: Response<GetMetricsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All gamified metrics for a given profile
     
     - GET /api/v2/gamification/metrics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "precision" : 123,
    "selfUri" : "aeiou",
    "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
    "performanceProfileId" : "aeiou",
    "enabled" : true,
    "unitType" : "aeiou",
    "metricDefinitionId" : "aeiou",
    "linkedMetric" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "templateName" : "aeiou",
    "maxPoints" : 123,
    "unitDefinition" : "aeiou",
    "name" : "aeiou",
    "sourcePerformanceProfile" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "metricOrders" : [ "aeiou" ],
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "maxLeaderboardRankSize" : 123,
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "reportingIntervals" : [ {
        "intervalType" : "aeiou",
        "intervalValue" : 123
      } ]
    },
    "id" : "aeiou",
    "metricDefinitionName" : "aeiou",
    "externalMetricDefinitionId" : "aeiou",
    "order" : 123
  } ],
  "selfUri" : "aeiou"
}}]
     
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<GetMetricsResponse> 
     */
    open class func getGamificationMetricsWithRequestBuilder(performanceProfileId: String? = nil, workday: Date? = nil) -> RequestBuilder<GetMetricsResponse> {
        let path = "/api/v2/gamification/metrics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "performanceProfileId": performanceProfileId, 
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<GetMetricsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Performance profile by id
     
     - parameter performanceProfileId: (path) Performance Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfile(performanceProfileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileWithRequestBuilder(performanceProfileId: performanceProfileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Performance profile by id
     
     - GET /api/v2/gamification/profiles/{performanceProfileId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter performanceProfileId: (path) Performance Profile Id 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfileWithRequestBuilder(performanceProfileId: String) -> RequestBuilder<PerformanceProfile> {
        var path = "/api/v2/gamification/profiles/{performanceProfileId}"
        let performanceProfileIdPreEscape = "\(performanceProfileId)"
        let performanceProfileIdPostEscape = performanceProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{performanceProfileId}", with: performanceProfileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Performance profile gamified metric by id
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetric(profileId: String, metricId: String, workday: Date? = nil, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricWithRequestBuilder(profileId: profileId, metricId: metricId, workday: workday)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Performance profile gamified metric by id
     
     - GET /api/v2/gamification/profiles/{profileId}/metrics/{metricId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<Metric> 
     */
    open class func getGamificationProfileMetricWithRequestBuilder(profileId: String, metricId: String, workday: Date? = nil) -> RequestBuilder<Metric> {
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getGamificationProfileMetrics: String { 
        case objective = "objective"
    }

    
    
    
    
    /**
     
     All gamified metrics for a given performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetrics(profileId: String, expand: [String]? = nil, workday: Date? = nil, completion: @escaping ((_ data: GetMetricResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricsWithRequestBuilder(profileId: profileId, expand: expand, workday: workday)
        requestBuilder.execute { (response: Response<GetMetricResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All gamified metrics for a given performance profile
     
     - GET /api/v2/gamification/profiles/{profileId}/metrics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "metricDefinitionId" : "aeiou",
    "linkedMetric" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "sourcePerformanceProfile" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "metricOrders" : [ "aeiou" ],
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "maxLeaderboardRankSize" : 123,
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "reportingIntervals" : [ {
        "intervalType" : "aeiou",
        "intervalValue" : 123
      } ]
    },
    "id" : "aeiou",
    "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
    "externalMetricDefinitionId" : "aeiou",
    "performanceProfileId" : "aeiou",
    "objective" : {
      "dateStart" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "templateId" : "aeiou",
      "zones" : [ {
        "upperLimitValue" : 123,
        "directionType" : "aeiou",
        "lowerLimitPoints" : 123,
        "zoneType" : "aeiou",
        "upperLimitPoints" : 123,
        "label" : "aeiou",
        "lowerLimitValue" : 123
      } ],
      "enabled" : true
    }
  } ],
  "selfUri" : "aeiou"
}}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<GetMetricResponse> 
     */
    open class func getGamificationProfileMetricsWithRequestBuilder(profileId: String, expand: [String]? = nil, workday: Date? = nil) -> RequestBuilder<GetMetricResponse> {
        var path = "/api/v2/gamification/profiles/{profileId}/metrics"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand, 
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<GetMetricResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     All metrics for a given performance profile with objective details such as order and maxPoints
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetricsObjectivedetails(profileId: String, workday: Date? = nil, completion: @escaping ((_ data: GetMetricsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricsObjectivedetailsWithRequestBuilder(profileId: profileId, workday: workday)
        requestBuilder.execute { (response: Response<GetMetricsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All metrics for a given performance profile with objective details such as order and maxPoints
     
     - GET /api/v2/gamification/profiles/{profileId}/metrics/objectivedetails
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "precision" : 123,
    "selfUri" : "aeiou",
    "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
    "performanceProfileId" : "aeiou",
    "enabled" : true,
    "unitType" : "aeiou",
    "metricDefinitionId" : "aeiou",
    "linkedMetric" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "templateName" : "aeiou",
    "maxPoints" : 123,
    "unitDefinition" : "aeiou",
    "name" : "aeiou",
    "sourcePerformanceProfile" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "metricOrders" : [ "aeiou" ],
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "maxLeaderboardRankSize" : 123,
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "reportingIntervals" : [ {
        "intervalType" : "aeiou",
        "intervalValue" : 123
      } ]
    },
    "id" : "aeiou",
    "metricDefinitionName" : "aeiou",
    "externalMetricDefinitionId" : "aeiou",
    "order" : 123
  } ],
  "selfUri" : "aeiou"
}}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<GetMetricsResponse> 
     */
    open class func getGamificationProfileMetricsObjectivedetailsWithRequestBuilder(profileId: String, workday: Date? = nil) -> RequestBuilder<GetMetricsResponse> {
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/objectivedetails"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<GetMetricsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     All performance profiles
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfiles(completion: @escaping ((_ data: GetProfilesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetProfilesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All performance profiles
     
     - GET /api/v2/gamification/profiles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  } ],
  "selfUri" : "aeiou"
}}]

     - returns: RequestBuilder<GetProfilesResponse> 
     */
    open class func getGamificationProfilesWithRequestBuilder() -> RequestBuilder<GetProfilesResponse> {
        let path = "/api/v2/gamification/profiles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetProfilesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Performance profile of a user
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfilesUser(userId: String, workday: Date? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesUserWithRequestBuilder(userId: userId, workday: workday)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Performance profile of a user
     
     - GET /api/v2/gamification/profiles/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfilesUserWithRequestBuilder(userId: String, workday: Date? = nil) -> RequestBuilder<PerformanceProfile> {
        var path = "/api/v2/gamification/profiles/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Performance profile of the requesting user
     
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfilesUsersMe(workday: Date? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesUsersMeWithRequestBuilder(workday: workday)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Performance profile of the requesting user
     
     - GET /api/v2/gamification/profiles/users/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfilesUsersMeWithRequestBuilder(workday: Date? = nil) -> RequestBuilder<PerformanceProfile> {
        let path = "/api/v2/gamification/profiles/users/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getGamificationScorecards: String { 
        case objective = "objective"
    }

    
    
    /**
     
     Workday performance metrics of the requesting user
     
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecards(workday: Date, expand: [String]? = nil, completion: @escaping ((_ data: WorkdayMetricListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsWithRequestBuilder(workday: workday, expand: expand)
        requestBuilder.execute { (response: Response<WorkdayMetricListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Workday performance metrics of the requesting user
     
     - GET /api/v2/gamification/scorecards
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "punctualityEvents" : [ {
      "activityCodeId" : "aeiou",
      "activityCode" : "aeiou",
      "dateStart" : "2000-01-23T04:56:07.000+0000",
      "lengthMinutes" : 123,
      "delta" : 1.3579000000000001069366817318950779736042022705078125,
      "description" : "aeiou",
      "category" : "aeiou",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+0000",
      "bullseye" : true,
      "points" : 123
    } ],
    "metric" : {
      "metricDefinitionId" : "aeiou",
      "linkedMetric" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "sourcePerformanceProfile" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "metricOrders" : [ "aeiou" ],
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "maxLeaderboardRankSize" : 123,
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "reportingIntervals" : [ {
          "intervalType" : "aeiou",
          "intervalValue" : 123
        } ]
      },
      "id" : "aeiou",
      "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
      "externalMetricDefinitionId" : "aeiou",
      "performanceProfileId" : "aeiou",
      "objective" : {
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "templateId" : "aeiou",
        "zones" : [ {
          "upperLimitValue" : 123,
          "directionType" : "aeiou",
          "lowerLimitPoints" : 123,
          "zoneType" : "aeiou",
          "upperLimitPoints" : 123,
          "label" : "aeiou",
          "lowerLimitValue" : 123
        } ],
        "enabled" : true
      }
    },
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "objective" : "",
    "points" : 123
  } ]
}}]
     
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkdayMetricListing> 
     */
    open class func getGamificationScorecardsWithRequestBuilder(workday: Date, expand: [String]? = nil) -> RequestBuilder<WorkdayMetricListing> {
        let path = "/api/v2/gamification/scorecards"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday.encodeToJSON(), 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkdayMetricListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Attendance status metrics of the requesting user
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsAttendance(startWorkday: Date, endWorkday: Date, completion: @escaping ((_ data: AttendanceStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsAttendanceWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AttendanceStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Attendance status metrics of the requesting user
     
     - GET /api/v2/gamification/scorecards/attendance
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "attendanceStatusType" : "aeiou",
    "dateWorkday" : "2000-01-23T04:56:07.000+0000"
  } ]
}}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AttendanceStatusListing> 
     */
    open class func getGamificationScorecardsAttendanceWithRequestBuilder(startWorkday: Date, endWorkday: Date) -> RequestBuilder<AttendanceStatusListing> {
        let path = "/api/v2/gamification/scorecards/attendance"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AttendanceStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Best points of the requesting user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsBestpoints(completion: @escaping ((_ data: UserBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsBestpointsWithRequestBuilder()
        requestBuilder.execute { (response: Response<UserBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Best points of the requesting user
     
     - GET /api/v2/gamification/scorecards/bestpoints
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "bestPoints" : [ {
    "granularityType" : "aeiou",
    "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
    "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
    "rank" : 123,
    "points" : 123
  } ]
}}]

     - returns: RequestBuilder<UserBestPoints> 
     */
    open class func getGamificationScorecardsBestpointsWithRequestBuilder() -> RequestBuilder<UserBestPoints> {
        let path = "/api/v2/gamification/scorecards/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     All-time points of the requesting user
     
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsAlltime(endWorkday: Date, completion: @escaping ((_ data: AllTimePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsAlltimeWithRequestBuilder(endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AllTimePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All-time points of the requesting user
     
     - GET /api/v2/gamification/scorecards/points/alltime
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "allTimePoints" : 123456789,
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AllTimePoints> 
     */
    open class func getGamificationScorecardsPointsAlltimeWithRequestBuilder(endWorkday: Date) -> RequestBuilder<AllTimePoints> {
        let path = "/api/v2/gamification/scorecards/points/alltime"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "endWorkday": endWorkday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AllTimePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Average points of the requesting user's division or performance profile
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsAverage(workday: Date, completion: @escaping ((_ data: SingleWorkdayAveragePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsAverageWithRequestBuilder(workday: workday)
        requestBuilder.execute { (response: Response<SingleWorkdayAveragePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Average points of the requesting user's division or performance profile
     
     - GET /api/v2/gamification/scorecards/points/average
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "averagePoints" : 1.3579000000000001069366817318950779736042022705078125,
  "dateWorkday" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<SingleWorkdayAveragePoints> 
     */
    open class func getGamificationScorecardsPointsAverageWithRequestBuilder(workday: Date) -> RequestBuilder<SingleWorkdayAveragePoints> {
        let path = "/api/v2/gamification/scorecards/points/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAveragePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum DayOfWeek_getGamificationScorecardsPointsTrends: String { 
        case sunday = "Sunday"
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
    }

    
    
    /**
     
     Points trends of the requesting user
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsTrends(startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsPointsTrends? = nil, completion: @escaping ((_ data: WorkdayPointsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsTrendsWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek)
        requestBuilder.execute { (response: Response<WorkdayPointsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Points trends of the requesting user
     
     - GET /api/v2/gamification/scorecards/points/trends
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dayOfWeek" : "aeiou",
  "averagePoints" : 1.3579000000000001069366817318950779736042022705078125,
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "trend" : [ {
    "dateWorkday" : "2000-01-23T04:56:07.000+0000",
    "points" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)

     - returns: RequestBuilder<WorkdayPointsTrend> 
     */
    open class func getGamificationScorecardsPointsTrendsWithRequestBuilder(startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsPointsTrends? = nil) -> RequestBuilder<WorkdayPointsTrend> {
        let path = "/api/v2/gamification/scorecards/points/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "dayOfWeek": dayOfWeek?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<WorkdayPointsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getGamificationScorecardsUser: String { 
        case objective = "objective"
    }

    
    
    /**
     
     Workday performance metrics for a user
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUser(userId: String, workday: Date, expand: [String]? = nil, completion: @escaping ((_ data: WorkdayMetricListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserWithRequestBuilder(userId: userId, workday: workday, expand: expand)
        requestBuilder.execute { (response: Response<WorkdayMetricListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Workday performance metrics for a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "punctualityEvents" : [ {
      "activityCodeId" : "aeiou",
      "activityCode" : "aeiou",
      "dateStart" : "2000-01-23T04:56:07.000+0000",
      "lengthMinutes" : 123,
      "delta" : 1.3579000000000001069366817318950779736042022705078125,
      "description" : "aeiou",
      "category" : "aeiou",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+0000",
      "bullseye" : true,
      "points" : 123
    } ],
    "metric" : {
      "metricDefinitionId" : "aeiou",
      "linkedMetric" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "sourcePerformanceProfile" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "metricOrders" : [ "aeiou" ],
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "maxLeaderboardRankSize" : 123,
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "reportingIntervals" : [ {
          "intervalType" : "aeiou",
          "intervalValue" : 123
        } ]
      },
      "id" : "aeiou",
      "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
      "externalMetricDefinitionId" : "aeiou",
      "performanceProfileId" : "aeiou",
      "objective" : {
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "templateId" : "aeiou",
        "zones" : [ {
          "upperLimitValue" : 123,
          "directionType" : "aeiou",
          "lowerLimitPoints" : 123,
          "zoneType" : "aeiou",
          "upperLimitPoints" : 123,
          "label" : "aeiou",
          "lowerLimitValue" : 123
        } ],
        "enabled" : true
      }
    },
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "objective" : "",
    "points" : 123
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkdayMetricListing> 
     */
    open class func getGamificationScorecardsUserWithRequestBuilder(userId: String, workday: Date, expand: [String]? = nil) -> RequestBuilder<WorkdayMetricListing> {
        var path = "/api/v2/gamification/scorecards/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday.encodeToJSON(), 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkdayMetricListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Attendance status metrics for a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserAttendance(userId: String, startWorkday: Date, endWorkday: Date, completion: @escaping ((_ data: AttendanceStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserAttendanceWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AttendanceStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Attendance status metrics for a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}/attendance
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "attendanceStatusType" : "aeiou",
    "dateWorkday" : "2000-01-23T04:56:07.000+0000"
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AttendanceStatusListing> 
     */
    open class func getGamificationScorecardsUserAttendanceWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date) -> RequestBuilder<AttendanceStatusListing> {
        var path = "/api/v2/gamification/scorecards/users/{userId}/attendance"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AttendanceStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Best points of a user
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserBestpoints(userId: String, completion: @escaping ((_ data: UserBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserBestpointsWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Best points of a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}/bestpoints
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "bestPoints" : [ {
    "granularityType" : "aeiou",
    "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
    "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
    "rank" : 123,
    "points" : 123
  } ]
}}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<UserBestPoints> 
     */
    open class func getGamificationScorecardsUserBestpointsWithRequestBuilder(userId: String) -> RequestBuilder<UserBestPoints> {
        var path = "/api/v2/gamification/scorecards/users/{userId}/bestpoints"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     All-time points for a user
     
     - parameter userId: (path)  
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserPointsAlltime(userId: String, endWorkday: Date, completion: @escaping ((_ data: AllTimePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserPointsAlltimeWithRequestBuilder(userId: userId, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AllTimePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All-time points for a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}/points/alltime
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "allTimePoints" : 123456789,
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter userId: (path)  
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AllTimePoints> 
     */
    open class func getGamificationScorecardsUserPointsAlltimeWithRequestBuilder(userId: String, endWorkday: Date) -> RequestBuilder<AllTimePoints> {
        var path = "/api/v2/gamification/scorecards/users/{userId}/points/alltime"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "endWorkday": endWorkday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AllTimePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum DayOfWeek_getGamificationScorecardsUserPointsTrends: String { 
        case sunday = "Sunday"
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
    }

    
    
    /**
     
     Points trend for a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserPointsTrends(userId: String, startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsUserPointsTrends? = nil, completion: @escaping ((_ data: WorkdayPointsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserPointsTrendsWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek)
        requestBuilder.execute { (response: Response<WorkdayPointsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Points trend for a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}/points/trends
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dayOfWeek" : "aeiou",
  "averagePoints" : 1.3579000000000001069366817318950779736042022705078125,
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "trend" : [ {
    "dateWorkday" : "2000-01-23T04:56:07.000+0000",
    "points" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)

     - returns: RequestBuilder<WorkdayPointsTrend> 
     */
    open class func getGamificationScorecardsUserPointsTrendsWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsUserPointsTrends? = nil) -> RequestBuilder<WorkdayPointsTrend> {
        var path = "/api/v2/gamification/scorecards/users/{userId}/points/trends"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "dayOfWeek": dayOfWeek?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<WorkdayPointsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Values trends of a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserValuesTrends(userId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserValuesTrendsWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Values trends of a user
     
     - GET /api/v2/gamification/scorecards/users/{userId}/values/trends
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "metric" : "",
  "timezone" : "aeiou",
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "dateReferenceWorkday" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "results" : [ {
    "unitType" : "aeiou",
    "average" : 1.3579000000000001069366817318950779736042022705078125,
    "trend" : [ {
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "dateWorkday" : "2000-01-23T04:56:07.000+0000"
    } ],
    "metricDefinition" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsUserValuesTrendsWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {
        var path = "/api/v2/gamification/scorecards/users/{userId}/values/trends"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "timeZone": timeZone
            
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationScorecardsUsersPointsAverage: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    /**
     
     Workday average points by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersPointsAverage(filterType: FilterType_getGamificationScorecardsUsersPointsAverage, filterId: String, workday: Date, completion: @escaping ((_ data: SingleWorkdayAveragePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersPointsAverageWithRequestBuilder(filterType: filterType, filterId: filterId, workday: workday)
        requestBuilder.execute { (response: Response<SingleWorkdayAveragePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Workday average points by target group
     
     - GET /api/v2/gamification/scorecards/users/points/average
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "averagePoints" : 1.3579000000000001069366817318950779736042022705078125,
  "dateWorkday" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<SingleWorkdayAveragePoints> 
     */
    open class func getGamificationScorecardsUsersPointsAverageWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersPointsAverage, filterId: String, workday: Date) -> RequestBuilder<SingleWorkdayAveragePoints> {
        let path = "/api/v2/gamification/scorecards/users/points/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType.rawValue, 
            
            "filterId": filterId, 
            
            "workday": workday.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAveragePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationScorecardsUsersValuesAverage: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    
    
    /**
     
     Workday average values by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division Id 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersValuesAverage(filterType: FilterType_getGamificationScorecardsUsersValuesAverage, filterId: String, workday: Date, timeZone: String? = nil, completion: @escaping ((_ data: SingleWorkdayAverageValues?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersValuesAverageWithRequestBuilder(filterType: filterType, filterId: filterId, workday: workday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<SingleWorkdayAverageValues>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Workday average values by target group
     
     - GET /api/v2/gamification/scorecards/users/values/average
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "timezone" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "results" : [ {
    "unitType" : "aeiou",
    "average" : 1.3579000000000001069366817318950779736042022705078125,
    "trend" : [ {
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "dateWorkday" : "2000-01-23T04:56:07.000+0000"
    } ],
    "metricDefinition" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "dateWorkday" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division Id 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)

     - returns: RequestBuilder<SingleWorkdayAverageValues> 
     */
    open class func getGamificationScorecardsUsersValuesAverageWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersValuesAverage, filterId: String, workday: Date, timeZone: String? = nil) -> RequestBuilder<SingleWorkdayAverageValues> {
        let path = "/api/v2/gamification/scorecards/users/values/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType.rawValue, 
            
            "filterId": filterId, 
            
            "workday": workday.encodeToJSON(), 
            
            "timeZone": timeZone
            
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAverageValues>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationScorecardsUsersValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Values trend by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersValuesTrends(filterType: FilterType_getGamificationScorecardsUsersValuesTrends, filterId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersValuesTrendsWithRequestBuilder(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Values trend by target group
     
     - GET /api/v2/gamification/scorecards/users/values/trends
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "metric" : "",
  "timezone" : "aeiou",
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "dateReferenceWorkday" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "results" : [ {
    "unitType" : "aeiou",
    "average" : 1.3579000000000001069366817318950779736042022705078125,
    "trend" : [ {
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "dateWorkday" : "2000-01-23T04:56:07.000+0000"
    } ],
    "metricDefinition" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsUsersValuesTrendsWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersValuesTrends, filterId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {
        let path = "/api/v2/gamification/scorecards/users/values/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType.rawValue, 
            
            "filterId": filterId, 
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "timeZone": timeZone
            
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Average values of the requesting user's division or performance profile
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsValuesAverage(workday: Date, timeZone: String? = nil, completion: @escaping ((_ data: SingleWorkdayAverageValues?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsValuesAverageWithRequestBuilder(workday: workday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<SingleWorkdayAverageValues>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Average values of the requesting user's division or performance profile
     
     - GET /api/v2/gamification/scorecards/values/average
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "timezone" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "results" : [ {
    "unitType" : "aeiou",
    "average" : 1.3579000000000001069366817318950779736042022705078125,
    "trend" : [ {
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "dateWorkday" : "2000-01-23T04:56:07.000+0000"
    } ],
    "metricDefinition" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "dateWorkday" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)

     - returns: RequestBuilder<SingleWorkdayAverageValues> 
     */
    open class func getGamificationScorecardsValuesAverageWithRequestBuilder(workday: Date, timeZone: String? = nil) -> RequestBuilder<SingleWorkdayAverageValues> {
        let path = "/api/v2/gamification/scorecards/values/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workday": workday.encodeToJSON(), 
            
            "timeZone": timeZone
            
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAverageValues>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FilterType_getGamificationScorecardsValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    /**
     
     Values trends of the requesting user or group
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, then the request is for the requesting user. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user&#39;s current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsValuesTrends(startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsValuesTrendsWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, filterType: filterType, referenceWorkday: referenceWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Values trends of the requesting user or group
     
     - GET /api/v2/gamification/scorecards/values/trends
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "performanceProfile" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateEndWorkday" : "2000-01-23T04:56:07.000+0000",
  "metric" : "",
  "timezone" : "aeiou",
  "dateStartWorkday" : "2000-01-23T04:56:07.000+0000",
  "dateReferenceWorkday" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "results" : [ {
    "unitType" : "aeiou",
    "average" : 1.3579000000000001069366817318950779736042022705078125,
    "trend" : [ {
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "dateWorkday" : "2000-01-23T04:56:07.000+0000"
    } ],
    "metricDefinition" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, then the request is for the requesting user. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user&#39;s current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional, default to UTC)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsValuesTrendsWithRequestBuilder(startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {
        let path = "/api/v2/gamification/scorecards/values/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "filterType": filterType?.rawValue, 
            
            "referenceWorkday": referenceWorkday?.encodeToJSON(), 
            
            "startWorkday": startWorkday.encodeToJSON(), 
            
            "endWorkday": endWorkday.encodeToJSON(), 
            
            "timeZone": timeZone
            
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Gamification activation status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationStatus(completion: @escaping ((_ data: GamificationStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationStatusWithRequestBuilder()
        requestBuilder.execute { (response: Response<GamificationStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gamification activation status
     
     - GET /api/v2/gamification/status
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "automaticUserAssignment" : true,
  "isActive" : true
}}]

     - returns: RequestBuilder<GamificationStatus> 
     */
    open class func getGamificationStatusWithRequestBuilder() -> RequestBuilder<GamificationStatus> {
        let path = "/api/v2/gamification/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GamificationStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Objective template by id
     
     - parameter templateId: (path) template id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationTemplate(templateId: String, completion: @escaping ((_ data: ObjectiveTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationTemplateWithRequestBuilder(templateId: templateId)
        requestBuilder.execute { (response: Response<ObjectiveTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Objective template by id
     
     - GET /api/v2/gamification/templates/{templateId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "zones" : [ {
    "upperLimitValue" : 123,
    "directionType" : "aeiou",
    "lowerLimitPoints" : 123,
    "zoneType" : "aeiou",
    "upperLimitPoints" : 123,
    "label" : "aeiou",
    "lowerLimitValue" : 123
  } ]
}}]
     
     - parameter templateId: (path) template id 

     - returns: RequestBuilder<ObjectiveTemplate> 
     */
    open class func getGamificationTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<ObjectiveTemplate> {
        var path = "/api/v2/gamification/templates/{templateId}"
        let templateIdPreEscape = "\(templateId)"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ObjectiveTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     All objective templates
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationTemplates(completion: @escaping ((_ data: GetTemplatesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationTemplatesWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetTemplatesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     All objective templates
     
     - GET /api/v2/gamification/templates
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ]
  } ],
  "selfUri" : "aeiou"
}}]

     - returns: RequestBuilder<GetTemplatesResponse> 
     */
    open class func getGamificationTemplatesWithRequestBuilder() -> RequestBuilder<GetTemplatesResponse> {
        let path = "/api/v2/gamification/templates"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetTemplatesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Creates a gamified metric with a given metric definition and metric objective
     
     - parameter body: (body) Metric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationMetrics(body: Metric, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationMetricsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates a gamified metric with a given metric definition and metric objective
     
     - POST /api/v2/gamification/metrics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter body: (body) Metric 

     - returns: RequestBuilder<Metric> 
     */
    open class func postGamificationMetricsWithRequestBuilder(body: Metric) -> RequestBuilder<Metric> {
        let path = "/api/v2/gamification/metrics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Activate a performance profile
     
     - parameter performanceProfileId: (path) Performance Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileActivate(performanceProfileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileActivateWithRequestBuilder(performanceProfileId: performanceProfileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Activate a performance profile
     
     - POST /api/v2/gamification/profiles/{performanceProfileId}/activate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter performanceProfileId: (path) Performance Profile Id 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func postGamificationProfileActivateWithRequestBuilder(performanceProfileId: String) -> RequestBuilder<PerformanceProfile> {
        var path = "/api/v2/gamification/profiles/{performanceProfileId}/activate"
        let performanceProfileIdPreEscape = "\(performanceProfileId)"
        let performanceProfileIdPostEscape = performanceProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{performanceProfileId}", with: performanceProfileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Deactivate a performance profile
     
     - parameter performanceProfileId: (path) Performance Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileDeactivate(performanceProfileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileDeactivateWithRequestBuilder(performanceProfileId: performanceProfileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deactivate a performance profile
     
     - POST /api/v2/gamification/profiles/{performanceProfileId}/deactivate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter performanceProfileId: (path) Performance Profile Id 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func postGamificationProfileDeactivateWithRequestBuilder(performanceProfileId: String) -> RequestBuilder<PerformanceProfile> {
        var path = "/api/v2/gamification/profiles/{performanceProfileId}/deactivate"
        let performanceProfileIdPreEscape = "\(performanceProfileId)"
        let performanceProfileIdPostEscape = performanceProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{performanceProfileId}", with: performanceProfileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Creates a gamified metric with a given metric definition and metric objective under in a performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter body: (body) Metric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileMetrics(profileId: String, body: Metric, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileMetricsWithRequestBuilder(profileId: profileId, body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates a gamified metric with a given metric definition and metric objective under in a performance profile
     
     - POST /api/v2/gamification/profiles/{profileId}/metrics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter body: (body) Metric 

     - returns: RequestBuilder<Metric> 
     */
    open class func postGamificationProfileMetricsWithRequestBuilder(profileId: String, body: Metric) -> RequestBuilder<Metric> {
        var path = "/api/v2/gamification/profiles/{profileId}/metrics"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new custom performance profile
     
     - parameter body: (body) performanceProfile 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfiles(body: CreatePerformanceProfile, completion: @escaping ((_ data: GetProfilesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfilesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GetProfilesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new custom performance profile
     
     - POST /api/v2/gamification/profiles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  } ],
  "selfUri" : "aeiou"
}}]
     
     - parameter body: (body) performanceProfile 

     - returns: RequestBuilder<GetProfilesResponse> 
     */
    open class func postGamificationProfilesWithRequestBuilder(body: CreatePerformanceProfile) -> RequestBuilder<GetProfilesResponse> {
        let path = "/api/v2/gamification/profiles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetProfilesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Updates a metric
     
     - parameter metricId: (path) metric Id 
     - parameter body: (body) Metric 
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationMetric(metricId: String, body: Metric, performanceProfileId: String? = nil, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationMetricWithRequestBuilder(metricId: metricId, body: body, performanceProfileId: performanceProfileId)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates a metric
     
     - PUT /api/v2/gamification/metrics/{metricId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter metricId: (path) metric Id 
     - parameter body: (body) Metric 
     - parameter performanceProfileId: (query) The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given. (optional)

     - returns: RequestBuilder<Metric> 
     */
    open class func putGamificationMetricWithRequestBuilder(metricId: String, body: Metric, performanceProfileId: String? = nil) -> RequestBuilder<Metric> {
        var path = "/api/v2/gamification/metrics/{metricId}"
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "performanceProfileId": performanceProfileId
            
        ])

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Updates a performance profile
     
     - parameter performanceProfileId: (path) Performance Profile Id 
     - parameter body: (body) performanceProfile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationProfile(performanceProfileId: String, body: PerformanceProfile? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationProfileWithRequestBuilder(performanceProfileId: performanceProfileId, body: body)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates a performance profile
     
     - PUT /api/v2/gamification/profiles/{performanceProfileId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "metricOrders" : [ "aeiou" ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "maxLeaderboardRankSize" : 123,
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "reportingIntervals" : [ {
    "intervalType" : "aeiou",
    "intervalValue" : 123
  } ]
}}]
     
     - parameter performanceProfileId: (path) Performance Profile Id 
     - parameter body: (body) performanceProfile (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func putGamificationProfileWithRequestBuilder(performanceProfileId: String, body: PerformanceProfile? = nil) -> RequestBuilder<PerformanceProfile> {
        var path = "/api/v2/gamification/profiles/{performanceProfileId}"
        let performanceProfileIdPreEscape = "\(performanceProfileId)"
        let performanceProfileIdPostEscape = performanceProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{performanceProfileId}", with: performanceProfileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Updates a metric in performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter body: (body) Metric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationProfileMetric(profileId: String, metricId: String, body: Metric, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationProfileMetricWithRequestBuilder(profileId: profileId, metricId: metricId, body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates a metric in performance profile
     
     - PUT /api/v2/gamification/profiles/{profileId}/metrics/{metricId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metricDefinitionId" : "aeiou",
  "linkedMetric" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "sourcePerformanceProfile" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "metricOrders" : [ "aeiou" ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "maxLeaderboardRankSize" : 123,
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "reportingIntervals" : [ {
      "intervalType" : "aeiou",
      "intervalValue" : 123
    } ]
  },
  "id" : "aeiou",
  "dateUnlinked" : "2000-01-23T04:56:07.000+0000",
  "externalMetricDefinitionId" : "aeiou",
  "performanceProfileId" : "aeiou",
  "objective" : {
    "dateStart" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "templateId" : "aeiou",
    "zones" : [ {
      "upperLimitValue" : 123,
      "directionType" : "aeiou",
      "lowerLimitPoints" : 123,
      "zoneType" : "aeiou",
      "upperLimitPoints" : 123,
      "label" : "aeiou",
      "lowerLimitValue" : 123
    } ],
    "enabled" : true
  }
}}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter body: (body) Metric 

     - returns: RequestBuilder<Metric> 
     */
    open class func putGamificationProfileMetricWithRequestBuilder(profileId: String, metricId: String, body: Metric) -> RequestBuilder<Metric> {
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update gamification activation status
     
     - parameter status: (body) Gamification status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationStatus(status: GamificationStatus, completion: @escaping ((_ data: GamificationStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationStatusWithRequestBuilder(status: status)
        requestBuilder.execute { (response: Response<GamificationStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update gamification activation status
     
     - PUT /api/v2/gamification/status
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "automaticUserAssignment" : true,
  "isActive" : true
}}]
     
     - parameter status: (body) Gamification status 

     - returns: RequestBuilder<GamificationStatus> 
     */
    open class func putGamificationStatusWithRequestBuilder(status: GamificationStatus) -> RequestBuilder<GamificationStatus> {
        let path = "/api/v2/gamification/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: status)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GamificationStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
