//
// AnalyticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AnalyticsAPI {
    
    
    /**
     Delete/cancel an async details job
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete/cancel an async details job
     - DELETE /api/v2/analytics/conversations/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete/cancel an async request
     - DELETE /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public enum AskActionResults_getAnalyticsBotflowDivisionsReportingturns: String { 
        case agentRequestedByUser = "AgentRequestedByUser"
        case confirmationRequired = "ConfirmationRequired"
        case disambiguationRequired = "DisambiguationRequired"
        case error = "Error"
        case expressionError = "ExpressionError"
        case noInputCollection = "NoInputCollection"
        case noInputConfirmation = "NoInputConfirmation"
        case noInputDisambiguation = "NoInputDisambiguation"
        case noMatchCollection = "NoMatchCollection"
        case noMatchConfirmation = "NoMatchConfirmation"
        case noMatchDisambiguation = "NoMatchDisambiguation"
        case successCollection = "SuccessCollection"
        case skippedCollection = "SkippedCollection"
        case successConfirmationNo = "SuccessConfirmationNo"
        case successConfirmationYes = "SuccessConfirmationYes"
        case successDisambiguation = "SuccessDisambiguation"
        case successDisambiguationNone = "SuccessDisambiguationNone"
    }
    
    
    /**
     Get Reporting Turns (division aware).
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsBotflowDivisionsReportingturns(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowDivisionsReportingturns? = nil, completion: @escaping ((_ data: ReportingTurnsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsBotflowDivisionsReportingturnsWithRequestBuilder(botFlowId: botFlowId, after: after, pageSize: pageSize, interval: interval, actionId: actionId, sessionId: sessionId, language: language, askActionResults: askActionResults)
        requestBuilder.execute { (response: Response<ReportingTurnsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Reporting Turns (division aware).
     - GET /api/v2/analytics/botflows/{botFlowId}/divisions/reportingturns
     - Returns the reporting turns for the specified flow, filtered by the clients divisions and grouped by session, in reverse chronological order from the date the session was created, with the reporting turns from the most recent session appearing at the start of the list. It is expected that the client will URL encode the request URI once only. For pagination, clients should keep sending requests using the value of 'nextUri' in the response, until it's no longer present, only then have all items have been returned. The 'nextUri' value in the response is already URL encoded (so it doesn't need to be encoded again). Note: resources returned by this endpoint are not persisted indefinitely, as they are deleted after approximately, but not before, 10 days.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "knowledgeBaseEvents" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "knowledgeBaseEvents" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)

     - returns: RequestBuilder<ReportingTurnsResponse> 
     */
    open class func getAnalyticsBotflowDivisionsReportingturnsWithRequestBuilder(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowDivisionsReportingturns? = nil) -> RequestBuilder<ReportingTurnsResponse> {        
        var path = "/api/v2/analytics/botflows/{botFlowId}/divisions/reportingturns"
        let botFlowIdPreEscape = "\(botFlowId)"
        let botFlowIdPostEscape = botFlowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botFlowId}", with: botFlowIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize, 
            "interval": interval, 
            "actionId": actionId, 
            "sessionId": sessionId, 
            "language": language, 
            "askActionResults": askActionResults?.rawValue
        ])

        let requestBuilder: RequestBuilder<ReportingTurnsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public enum AskActionResults_getAnalyticsBotflowReportingturns: String { 
        case agentRequestedByUser = "AgentRequestedByUser"
        case confirmationRequired = "ConfirmationRequired"
        case disambiguationRequired = "DisambiguationRequired"
        case error = "Error"
        case expressionError = "ExpressionError"
        case noInputCollection = "NoInputCollection"
        case noInputConfirmation = "NoInputConfirmation"
        case noInputDisambiguation = "NoInputDisambiguation"
        case noMatchCollection = "NoMatchCollection"
        case noMatchConfirmation = "NoMatchConfirmation"
        case noMatchDisambiguation = "NoMatchDisambiguation"
        case successCollection = "SuccessCollection"
        case skippedCollection = "SkippedCollection"
        case successConfirmationNo = "SuccessConfirmationNo"
        case successConfirmationYes = "SuccessConfirmationYes"
        case successDisambiguation = "SuccessDisambiguation"
        case successDisambiguationNone = "SuccessDisambiguationNone"
    }
    
    
    /**
     Get Reporting Turns.
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsBotflowReportingturns(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowReportingturns? = nil, completion: @escaping ((_ data: ReportingTurnsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsBotflowReportingturnsWithRequestBuilder(botFlowId: botFlowId, after: after, pageSize: pageSize, interval: interval, actionId: actionId, sessionId: sessionId, language: language, askActionResults: askActionResults)
        requestBuilder.execute { (response: Response<ReportingTurnsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Reporting Turns.
     - GET /api/v2/analytics/botflows/{botFlowId}/reportingturns
     - Deprecated: Please use GET /analytics/botflows/{botFlowId}/divisions/reportingturns instead. Returns the reporting turns grouped by session, in reverse chronological order from the date the session was created, with the reporting turns from the most recent session appearing at the start of the list. It is expected that the client will URL encode the request URI once only. For pagination, clients should keep sending requests using the value of 'nextUri' in the response, until it's no longer present, only then have all items have been returned. The 'nextUri' value in the response is already URL encoded (so it doesn't need to be encoded again). Note: resources returned by this endpoint are not persisted indefinitely, as they are deleted after approximately, but not before, 10 days.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "knowledgeBaseEvents" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "knowledgeBaseEvents" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)

     - returns: RequestBuilder<ReportingTurnsResponse> 
     */
    open class func getAnalyticsBotflowReportingturnsWithRequestBuilder(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowReportingturns? = nil) -> RequestBuilder<ReportingTurnsResponse> {        
        var path = "/api/v2/analytics/botflows/{botFlowId}/reportingturns"
        let botFlowIdPreEscape = "\(botFlowId)"
        let botFlowIdPostEscape = botFlowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botFlowId}", with: botFlowIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize, 
            "interval": interval, 
            "actionId": actionId, 
            "sessionId": sessionId, 
            "language": language, 
            "askActionResults": askActionResults?.rawValue
        ])

        let requestBuilder: RequestBuilder<ReportingTurnsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    public enum BotResultCategories_getAnalyticsBotflowSessions: String { 
        case unknown = "Unknown"
        case userExit = "UserExit"
        case botExit = "BotExit"
        case error = "Error"
        case recognitionFailure = "RecognitionFailure"
        case userDisconnect = "UserDisconnect"
        case botDisconnect = "BotDisconnect"
        case sessionExpired = "SessionExpired"
        case transfer = "Transfer"
    }
    
    
    
    
    /**
     Get Bot Flow Sessions.
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter botResultCategories: (query) Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by. (optional)
     - parameter endLanguage: (query) Optional case-insensitive language code to filter sessions by the language the sessions ended in. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsBotflowSessions(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, botResultCategories: BotResultCategories_getAnalyticsBotflowSessions? = nil, endLanguage: String? = nil, completion: @escaping ((_ data: SessionsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsBotflowSessionsWithRequestBuilder(botFlowId: botFlowId, after: after, pageSize: pageSize, interval: interval, botResultCategories: botResultCategories, endLanguage: endLanguage)
        requestBuilder.execute { (response: Response<SessionsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Bot Flow Sessions.
     - GET /api/v2/analytics/botflows/{botFlowId}/sessions
     - Returns the bot flow sessions in reverse chronological order from the date they were created. It is expected that the client will URL encode the request URI once only. For pagination, clients should keep sending requests using the value of 'nextUri' in the response, until it's no longer present, only then have all items have been returned. The 'nextUri' value in the response is already URL encoded (so it doesn't need to be encoded again). Note: resources returned by this endpoint are not persisted indefinitely, as they are deleted after approximately, but not before, 10 days.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "endLanguage" : "endLanguage",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "{}",
    "language" : "language",
    "id" : "id",
    "flow" : "{}",
    "botResult" : "Unknown",
    "botResultCategory" : "Unknown",
    "conversation" : "{}"
  }, {
    "endLanguage" : "endLanguage",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "{}",
    "language" : "language",
    "id" : "id",
    "flow" : "{}",
    "botResult" : "Unknown",
    "botResultCategory" : "Unknown",
    "conversation" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter botResultCategories: (query) Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by. (optional)
     - parameter endLanguage: (query) Optional case-insensitive language code to filter sessions by the language the sessions ended in. (optional)

     - returns: RequestBuilder<SessionsResponse> 
     */
    open class func getAnalyticsBotflowSessionsWithRequestBuilder(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, botResultCategories: BotResultCategories_getAnalyticsBotflowSessions? = nil, endLanguage: String? = nil) -> RequestBuilder<SessionsResponse> {        
        var path = "/api/v2/analytics/botflows/{botFlowId}/sessions"
        let botFlowIdPreEscape = "\(botFlowId)"
        let botFlowIdPostEscape = botFlowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botFlowId}", with: botFlowIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize, 
            "interval": interval, 
            "botResultCategories": botResultCategories?.rawValue, 
            "endLanguage": endLanguage
        ])

        let requestBuilder: RequestBuilder<SessionsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a conversation by id
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationDetails(conversationId: String, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributes?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationDetailsWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributes>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a conversation by id
     - GET /api/v2/analytics/conversations/{conversationId}/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationStart" : "2000-01-23T04:56:07.000+00:00",
  "mediaStatsMinConversationMos" : 0.8008281904610115,
  "evaluations" : [ {
    "formId" : "formId",
    "queueId" : "queueId",
    "oTotalScore" : 5,
    "oTotalCriticalScore" : 1,
    "contextId" : "contextId",
    "assigneeId" : "assigneeId",
    "userId" : "userId",
    "evaluationId" : "evaluationId",
    "assigneeApplicable" : true,
    "deleted" : true,
    "formName" : "formName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "rescored" : true,
    "calibrationId" : "calibrationId",
    "evaluationStatus" : "Finished",
    "evaluatorId" : "evaluatorId",
    "released" : true
  }, {
    "formId" : "formId",
    "queueId" : "queueId",
    "oTotalScore" : 5,
    "oTotalCriticalScore" : 1,
    "contextId" : "contextId",
    "assigneeId" : "assigneeId",
    "userId" : "userId",
    "evaluationId" : "evaluationId",
    "assigneeApplicable" : true,
    "deleted" : true,
    "formName" : "formName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "rescored" : true,
    "calibrationId" : "calibrationId",
    "evaluationStatus" : "Finished",
    "evaluatorId" : "evaluatorId",
    "released" : true
  } ],
  "conversationInitiator" : "acd",
  "conversationId" : "conversationId",
  "surveys" : [ {
    "surveyType" : "Web",
    "queueId" : "queueId",
    "surveyStatus" : "surveyStatus",
    "surveyId" : "surveyId",
    "surveyFormName" : "surveyFormName",
    "surveyFormContextId" : "surveyFormContextId",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
    "surveyPartialResponse" : true,
    "surveyPromoterScore" : 5,
    "userId" : "userId",
    "oSurveyTotalScore" : 2,
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "surveyFormId" : "surveyFormId"
  }, {
    "surveyType" : "Web",
    "queueId" : "queueId",
    "surveyStatus" : "surveyStatus",
    "surveyId" : "surveyId",
    "surveyFormName" : "surveyFormName",
    "surveyFormContextId" : "surveyFormContextId",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
    "surveyPartialResponse" : true,
    "surveyPromoterScore" : 5,
    "userId" : "userId",
    "oSurveyTotalScore" : 2,
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "surveyFormId" : "surveyFormId"
  } ],
  "externalTag" : "externalTag",
  "resolutions" : [ {
    "queueId" : "queueId",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "nNextContactAvoided" : 7,
    "userId" : "userId"
  }, {
    "queueId" : "queueId",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "nNextContactAvoided" : 7,
    "userId" : "userId"
  } ],
  "originatingDirection" : "inbound",
  "divisionIds" : [ "divisionIds", "divisionIds" ],
  "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
  "mediaStatsMinConversationRFactor" : 6.027456183070403,
  "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
  "customerParticipation" : true,
  "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
  "selfServed" : true,
  "participants" : [ {
    "participantId" : "participantId",
    "sessions" : [ {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "deliveryPushed" : true,
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    }, {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "deliveryPushed" : true,
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    } ],
    "externalContactId" : "externalContactId",
    "purpose" : "acd",
    "teamId" : "teamId",
    "externalOrganizationId" : "externalOrganizationId",
    "participantName" : "participantName",
    "flaggedReason" : "general",
    "screenRecording" : true,
    "userId" : "userId"
  }, {
    "participantId" : "participantId",
    "sessions" : [ {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "deliveryPushed" : true,
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    }, {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "deliveryPushed" : true,
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    } ],
    "externalContactId" : "externalContactId",
    "purpose" : "acd",
    "teamId" : "teamId",
    "externalOrganizationId" : "externalOrganizationId",
    "participantName" : "participantName",
    "flaggedReason" : "general",
    "screenRecording" : true,
    "userId" : "userId"
  } ]
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributes> 
     */
    open class func getAnalyticsConversationDetailsWithRequestBuilder(conversationId: String) -> RequestBuilder<AnalyticsConversationWithoutAttributes> {        
        var path = "/api/v2/analytics/conversations/{conversationId}/details"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributes>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Gets multiple conversations by id
     
     - parameter _id: (query) Comma-separated conversation ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetails(_id: [String]? = nil, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets multiple conversations by id
     - GET /api/v2/analytics/conversations/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter _id: (query) Comma-separated conversation ids (optional)

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func getAnalyticsConversationsDetailsWithRequestBuilder(_id: [String]? = nil) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {        
        let path = "/api/v2/analytics/conversations/details"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get status for async query for conversation details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for conversation details
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Fetch a page of results for an async details job
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsConversationAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsConversationAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async details job
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00",
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsConversationAsyncQueryResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsConversationAsyncQueryResponse> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Lookup the datalake availability date and time
     - GET /api/v2/analytics/conversations/details/jobs/availability
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {        
        let path = "/api/v2/analytics/conversations/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get analytics data retention setting
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsDataretentionSettings(completion: @escaping ((_ data: AnalyticsDataRetentionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsDataretentionSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<AnalyticsDataRetentionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get analytics data retention setting
     - GET /api/v2/analytics/dataretention/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "retentionDays" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<AnalyticsDataRetentionResponse> 
     */
    open class func getAnalyticsDataretentionSettingsWithRequestBuilder() -> RequestBuilder<AnalyticsDataRetentionResponse> {        
        let path = "/api/v2/analytics/dataretention/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsDataRetentionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get dashboards summary for a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingDashboardsUser(userId: String, completion: @escaping ((_ data: DashboardUser?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingDashboardsUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<DashboardUser>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get dashboards summary for a user
     - GET /api/v2/analytics/reporting/dashboards/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dashboardCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "publicDashboardCount" : 6,
  "id" : "id",
  "state" : "active"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<DashboardUser> 
     */
    open class func getAnalyticsReportingDashboardsUserWithRequestBuilder(userId: String) -> RequestBuilder<DashboardUser> {        
        var path = "/api/v2/analytics/reporting/dashboards/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DashboardUser>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    public enum State_getAnalyticsReportingDashboardsUsers: String { 
        case active = "active"
        case inactive = "inactive"
    }
    
    
    
    
    /**
     Get dashboards summary for users in a org
     
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter state: (query) Only list users of this state (optional)
     - parameter deletedOnly: (query) Only list users with deleted dashboards (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingDashboardsUsers(sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, _id: [String]? = nil, state: State_getAnalyticsReportingDashboardsUsers? = nil, deletedOnly: Bool? = nil, completion: @escaping ((_ data: DashboardUserListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingDashboardsUsersWithRequestBuilder(sortBy: sortBy, pageNumber: pageNumber, pageSize: pageSize, _id: _id, state: state, deletedOnly: deletedOnly)
        requestBuilder.execute { (response: Response<DashboardUserListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get dashboards summary for users in a org
     - GET /api/v2/analytics/reporting/dashboards/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dashboardCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "publicDashboardCount" : 6,
    "id" : "id",
    "state" : "active"
  }, {
    "dashboardCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "publicDashboardCount" : 6,
    "id" : "id",
    "state" : "active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter state: (query) Only list users of this state (optional)
     - parameter deletedOnly: (query) Only list users with deleted dashboards (optional)

     - returns: RequestBuilder<DashboardUserListing> 
     */
    open class func getAnalyticsReportingDashboardsUsersWithRequestBuilder(sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, _id: [String]? = nil, state: State_getAnalyticsReportingDashboardsUsers? = nil, deletedOnly: Bool? = nil) -> RequestBuilder<DashboardUserListing> {        
        let path = "/api/v2/analytics/reporting/dashboards/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "sortBy": sortBy, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "id": _id, 
            "state": state?.rawValue, 
            "deletedOnly": deletedOnly
        ])

        let requestBuilder: RequestBuilder<DashboardUserListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get all view export requests for a user
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExports(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportingExportJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportingExportJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all view export requests for a user
     - GET /api/v2/analytics/reporting/exports
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "pageCount" : 2,
  "pageNumber" : 5,
  "entities" : [ {
    "hasSummaryRow" : true,
    "downloadUrl" : "downloadUrl",
    "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
    "hasSplitByMedia" : true,
    "locale" : "locale",
    "excludeEmptyRows" : true,
    "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
    "enabled" : true,
    "exportAllowedToRerun" : true,
    "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "includeDurationFormatInHeader" : true,
    "hasFormatDurations" : true,
    "durationFormat" : "Seconds",
    "period" : "period",
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "timeZone" : "timeZone",
    "csvDelimiter" : "SEMICOLON",
    "filter" : "{}",
    "selectedColumns" : [ {
      "columnOrder" : 6,
      "columnName" : "columnName"
    }, {
      "columnOrder" : 6,
      "columnName" : "columnName"
    } ],
    "emailStatuses" : {
      "key" : "Sent"
    },
    "emailErrorDescription" : "emailErrorDescription",
    "percentageComplete" : 0.8008281904610115,
    "hasSplitFilters" : true,
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "interval" : "interval",
    "runId" : "runId",
    "hasCustomParticipantAttributes" : true,
    "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
    "exportFormat" : "CSV",
    "status" : "SUBMITTED"
  }, {
    "hasSummaryRow" : true,
    "downloadUrl" : "downloadUrl",
    "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
    "hasSplitByMedia" : true,
    "locale" : "locale",
    "excludeEmptyRows" : true,
    "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
    "enabled" : true,
    "exportAllowedToRerun" : true,
    "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "includeDurationFormatInHeader" : true,
    "hasFormatDurations" : true,
    "durationFormat" : "Seconds",
    "period" : "period",
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "timeZone" : "timeZone",
    "csvDelimiter" : "SEMICOLON",
    "filter" : "{}",
    "selectedColumns" : [ {
      "columnOrder" : 6,
      "columnName" : "columnName"
    }, {
      "columnOrder" : 6,
      "columnName" : "columnName"
    } ],
    "emailStatuses" : {
      "key" : "Sent"
    },
    "emailErrorDescription" : "emailErrorDescription",
    "percentageComplete" : 0.8008281904610115,
    "hasSplitFilters" : true,
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "interval" : "interval",
    "runId" : "runId",
    "hasCustomParticipantAttributes" : true,
    "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
    "exportFormat" : "CSV",
    "status" : "SUBMITTED"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 1,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<ReportingExportJobListing> 
     */
    open class func getAnalyticsReportingExportsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportingExportJobListing> {        
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ReportingExportJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get all export metadata
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExportsMetadata(completion: @escaping ((_ data: ReportingExportMetadataJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsMetadataWithRequestBuilder()
        requestBuilder.execute { (response: Response<ReportingExportMetadataJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all export metadata
     - GET /api/v2/analytics/reporting/exports/metadata
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "requiredFilters" : [ "requiredFilters", "requiredFilters" ],
    "supportedFilters" : [ "supportedFilters", "supportedFilters" ],
    "requiredColumnIds" : [ "requiredColumnIds", "requiredColumnIds" ],
    "availableColumnIds" : [ "availableColumnIds", "availableColumnIds" ],
    "dependentColumnIds" : {
      "key" : [ "dependentColumnIds", "dependentColumnIds" ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "id" : "id",
    "dateLimitations" : "dateLimitations"
  }, {
    "requiredFilters" : [ "requiredFilters", "requiredFilters" ],
    "supportedFilters" : [ "supportedFilters", "supportedFilters" ],
    "requiredColumnIds" : [ "requiredColumnIds", "requiredColumnIds" ],
    "availableColumnIds" : [ "availableColumnIds", "availableColumnIds" ],
    "dependentColumnIds" : {
      "key" : [ "dependentColumnIds", "dependentColumnIds" ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "id" : "id",
    "dateLimitations" : "dateLimitations"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<ReportingExportMetadataJobListing> 
     */
    open class func getAnalyticsReportingExportsMetadataWithRequestBuilder() -> RequestBuilder<ReportingExportMetadataJobListing> {        
        let path = "/api/v2/analytics/reporting/exports/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportMetadataJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get AnalyticsReportingSettings for an organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSettings(completion: @escaping ((_ data: AnalyticsReportingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<AnalyticsReportingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get AnalyticsReportingSettings for an organization
     - GET /api/v2/analytics/reporting/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "piiMaskingEnabled" : true,
  "queueAgentAccessObfuscation" : true,
  "myInteractionsPiiMaskingEnabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<AnalyticsReportingSettings> 
     */
    open class func getAnalyticsReportingSettingsWithRequestBuilder() -> RequestBuilder<AnalyticsReportingSettings> {        
        let path = "/api/v2/analytics/reporting/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsReportingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    public enum DashboardType_getAnalyticsReportingSettingsDashboardsQuery: String { 
        case all = "All"
        case _public = "Public"
        case _private = "Private"
        case shared = "Shared"
        case favorites = "Favorites"
    }
    
    
    
    public enum DashboardAccessFilter_getAnalyticsReportingSettingsDashboardsQuery: String { 
        case ownedByMe = "OwnedByMe"
        case ownedByAnyone = "OwnedByAnyone"
        case notOwnedByMe = "NotOwnedByMe"
    }
    
    
    
    
    
    public enum DashboardState_getAnalyticsReportingSettingsDashboardsQuery: String { 
        case active = "Active"
        case deleted = "Deleted"
    }
    
    
    
    
    
    
    
    
    /**
     Get list of dashboard configurations
     
     - parameter dashboardType: (query) List dashboard of given type 
     - parameter dashboardAccessFilter: (query) Filter dashboard based on the owner of dashboard 
     - parameter name: (query) name of the dashboard (optional)
     - parameter dashboardState: (query) List dashboard of given state (optional)
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSettingsDashboardsQuery(dashboardType: DashboardType_getAnalyticsReportingSettingsDashboardsQuery, dashboardAccessFilter: DashboardAccessFilter_getAnalyticsReportingSettingsDashboardsQuery, name: String? = nil, dashboardState: DashboardState_getAnalyticsReportingSettingsDashboardsQuery? = nil, sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DashboardConfigurationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSettingsDashboardsQueryWithRequestBuilder(dashboardType: dashboardType, dashboardAccessFilter: dashboardAccessFilter, name: name, dashboardState: dashboardState, sortBy: sortBy, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DashboardConfigurationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of dashboard configurations
     - GET /api/v2/analytics/reporting/settings/dashboards/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 3,
  "pageCount" : 2,
  "pageNumber" : 9,
  "entities" : [ {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  }, {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 7,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter dashboardType: (query) List dashboard of given type 
     - parameter dashboardAccessFilter: (query) Filter dashboard based on the owner of dashboard 
     - parameter name: (query) name of the dashboard (optional)
     - parameter dashboardState: (query) List dashboard of given state (optional)
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)

     - returns: RequestBuilder<DashboardConfigurationListing> 
     */
    open class func getAnalyticsReportingSettingsDashboardsQueryWithRequestBuilder(dashboardType: DashboardType_getAnalyticsReportingSettingsDashboardsQuery, dashboardAccessFilter: DashboardAccessFilter_getAnalyticsReportingSettingsDashboardsQuery, name: String? = nil, dashboardState: DashboardState_getAnalyticsReportingSettingsDashboardsQuery? = nil, sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DashboardConfigurationListing> {        
        let path = "/api/v2/analytics/reporting/settings/dashboards/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "dashboardType": dashboardType.rawValue, 
            "dashboardState": dashboardState?.rawValue, 
            "dashboardAccessFilter": dashboardAccessFilter.rawValue, 
            "sortBy": sortBy, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DashboardConfigurationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     Get list of dashboards for an user
     
     - parameter userId: (path) User ID 
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter publicOnly: (query) If true, retrieve only public dashboards (optional)
     - parameter favoriteOnly: (query) If true, retrieve only favorite dashboards (optional)
     - parameter deletedOnly: (query) If true, retrieve only deleted dashboards that are still recoverable (optional)
     - parameter name: (query) retrieve dashboards that match with given name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSettingsUserDashboards(userId: String, sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, publicOnly: Bool? = nil, favoriteOnly: Bool? = nil, deletedOnly: Bool? = nil, name: String? = nil, completion: @escaping ((_ data: DashboardConfigurationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSettingsUserDashboardsWithRequestBuilder(userId: userId, sortBy: sortBy, pageNumber: pageNumber, pageSize: pageSize, publicOnly: publicOnly, favoriteOnly: favoriteOnly, deletedOnly: deletedOnly, name: name)
        requestBuilder.execute { (response: Response<DashboardConfigurationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of dashboards for an user
     - GET /api/v2/analytics/reporting/settings/users/{userId}/dashboards
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 3,
  "pageCount" : 2,
  "pageNumber" : 9,
  "entities" : [ {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  }, {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 7,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter sortBy: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter publicOnly: (query) If true, retrieve only public dashboards (optional)
     - parameter favoriteOnly: (query) If true, retrieve only favorite dashboards (optional)
     - parameter deletedOnly: (query) If true, retrieve only deleted dashboards that are still recoverable (optional)
     - parameter name: (query) retrieve dashboards that match with given name (optional)

     - returns: RequestBuilder<DashboardConfigurationListing> 
     */
    open class func getAnalyticsReportingSettingsUserDashboardsWithRequestBuilder(userId: String, sortBy: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, publicOnly: Bool? = nil, favoriteOnly: Bool? = nil, deletedOnly: Bool? = nil, name: String? = nil) -> RequestBuilder<DashboardConfigurationListing> {        
        var path = "/api/v2/analytics/reporting/settings/users/{userId}/dashboards"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "sortBy": sortBy, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "publicOnly": publicOnly, 
            "favoriteOnly": favoriteOnly, 
            "deletedOnly": deletedOnly, 
            "name": name
        ])

        let requestBuilder: RequestBuilder<DashboardConfigurationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get status for async query for user details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for user details
     - GET /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsUserDetailsAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async query
     - GET /api/v2/analytics/users/details/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00",
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> 
     */
    open class func getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Lookup the datalake availability date and time
     - GET /api/v2/analytics/users/details/jobs/availability
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {        
        let path = "/api/v2/analytics/users/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Patch AnalyticsReportingSettings values for an organization
     
     - parameter body: (body) AnalyticsReportingSettingsRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchAnalyticsReportingSettings(body: AnalyticsReportingSettings, completion: @escaping ((_ data: AnalyticsReportingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchAnalyticsReportingSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsReportingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch AnalyticsReportingSettings values for an organization
     - PATCH /api/v2/analytics/reporting/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "piiMaskingEnabled" : true,
  "queueAgentAccessObfuscation" : true,
  "myInteractionsPiiMaskingEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) AnalyticsReportingSettingsRequest 

     - returns: RequestBuilder<AnalyticsReportingSettings> 
     */
    open class func patchAnalyticsReportingSettingsWithRequestBuilder(body: AnalyticsReportingSettings) -> RequestBuilder<AnalyticsReportingSettings> {        
        let path = "/api/v2/analytics/reporting/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsReportingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for action aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsActionsAggregatesQuery(body: ActionAggregationQuery, completion: @escaping ((_ data: ActionAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsActionsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ActionAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for action aggregates
     - POST /api/v2/analytics/actions/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ActionAggregateQueryResponse> 
     */
    open class func postAnalyticsActionsAggregatesQueryWithRequestBuilder(body: ActionAggregationQuery) -> RequestBuilder<ActionAggregateQueryResponse> {        
        let path = "/api/v2/analytics/actions/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for agent copilot aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsAgentcopilotsAggregatesQuery(body: AgentCopilotAggregationQuery, completion: @escaping ((_ data: AgentCopilotAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsAgentcopilotsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AgentCopilotAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for agent copilot aggregates
     - POST /api/v2/analytics/agentcopilots/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AgentCopilotAggregateQueryResponse> 
     */
    open class func postAnalyticsAgentcopilotsAggregatesQueryWithRequestBuilder(body: AgentCopilotAggregationQuery) -> RequestBuilder<AgentCopilotAggregateQueryResponse> {        
        let path = "/api/v2/analytics/agentcopilots/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentCopilotAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for bot aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsBotsAggregatesQuery(body: BotAggregationQuery, completion: @escaping ((_ data: BotAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsBotsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BotAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for bot aggregates
     - POST /api/v2/analytics/bots/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<BotAggregateQueryResponse> 
     */
    open class func postAnalyticsBotsAggregatesQueryWithRequestBuilder(body: BotAggregationQuery) -> RequestBuilder<BotAggregateQueryResponse> {        
        let path = "/api/v2/analytics/bots/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BotAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Index conversation properties
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationDetailsProperties(conversationId: String, body: PropertyIndexRequest, completion: @escaping ((_ data: PropertyIndexRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<PropertyIndexRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Index conversation properties
     - POST /api/v2/analytics/conversations/{conversationId}/details/properties
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "targetDate" : "2000-01-23T04:56:07.000+00:00",
  "sessionId" : "sessionId",
  "properties" : [ {
    "propertyType" : "bool",
    "property" : "property",
    "value" : "value"
  }, {
    "propertyType" : "bool",
    "property" : "property",
    "value" : "value"
  } ]
}, statusCode=202}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 

     - returns: RequestBuilder<PropertyIndexRequest> 
     */
    open class func postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: String, body: PropertyIndexRequest) -> RequestBuilder<PropertyIndexRequest> {        
        var path = "/api/v2/analytics/conversations/{conversationId}/details/properties"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PropertyIndexRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Query for conversation activity observations
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsActivityQuery(body: ConversationActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: ConversationActivityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsActivityQueryWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<ConversationActivityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation activity observations
     - POST /api/v2/analytics/conversations/activity/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entityIdDimension" : "activeRouting",
  "results" : [ {
    "data" : [ {
      "metric" : "oAlerting",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oAlerting",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "conversationId" : "conversationId",
      "convertedTo" : "convertedTo",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "metric" : "oAlerting",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "ani" : "ani",
      "direction" : "inbound"
    }, {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "conversationId" : "conversationId",
      "convertedTo" : "convertedTo",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "metric" : "oAlerting",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "ani" : "ani",
      "direction" : "inbound"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "oAlerting",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oAlerting",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "conversationId" : "conversationId",
      "convertedTo" : "convertedTo",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "metric" : "oAlerting",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "ani" : "ani",
      "direction" : "inbound"
    }, {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "conversationId" : "conversationId",
      "convertedTo" : "convertedTo",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "metric" : "oAlerting",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "ani" : "ani",
      "direction" : "inbound"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)

     - returns: RequestBuilder<ConversationActivityResponse> 
     */
    open class func postAnalyticsConversationsActivityQueryWithRequestBuilder(body: ConversationActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<ConversationActivityResponse> {        
        let path = "/api/v2/analytics/conversations/activity/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ConversationActivityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for conversation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsAggregatesQuery(body: ConversationAggregationQuery, completion: @escaping ((_ data: ConversationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ConversationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation aggregates
     - POST /api/v2/analytics/conversations/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ConversationAggregateQueryResponse> 
     */
    open class func postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: ConversationAggregationQuery) -> RequestBuilder<ConversationAggregateQueryResponse> {        
        let path = "/api/v2/analytics/conversations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConversationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for conversation details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsJobs(body: AsyncConversationQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation details asynchronously
     - POST /api/v2/analytics/conversations/details/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: AsyncConversationQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/analytics/conversations/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for conversation details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsQuery(body: ConversationQuery, completion: @escaping ((_ data: AnalyticsConversationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation details
     - POST /api/v2/analytics/conversations/details/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalHits" : 6,
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  } ],
  "aggregations" : [ {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  }, {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsConversationQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: ConversationQuery) -> RequestBuilder<AnalyticsConversationQueryResponse> {        
        let path = "/api/v2/analytics/conversations/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsTranscriptsQuery(body: TranscriptConversationDetailSearchRequest, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/analytics/conversations/transcripts/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    }, {
      "surveyType" : "Web",
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPartialResponse" : true,
      "surveyPromoterScore" : 5,
      "userId" : "userId",
      "oSurveyTotalScore" : 2,
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "detectedSpeechStart" : "2000-01-23T04:56:07.000+00:00",
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "detectedSpeechEnd" : "2000-01-23T04:56:07.000+00:00",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "deliveryPushed" : true,
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "screenRecording" : true,
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: TranscriptConversationDetailSearchRequest) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {        
        let path = "/api/v2/analytics/conversations/transcripts/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for evaluation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsEvaluationsAggregatesQuery(body: EvaluationAggregationQuery, completion: @escaping ((_ data: EvaluationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for evaluation aggregates
     - POST /api/v2/analytics/evaluations/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<EvaluationAggregateQueryResponse> 
     */
    open class func postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: EvaluationAggregationQuery) -> RequestBuilder<EvaluationAggregateQueryResponse> {        
        let path = "/api/v2/analytics/evaluations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for flow execution aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowexecutionsAggregatesQuery(body: FlowExecutionAggregationQuery, completion: @escaping ((_ data: FlowExecutionAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowexecutionsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowExecutionAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow execution aggregates
     - POST /api/v2/analytics/flowexecutions/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowExecutionAggregateQueryResponse> 
     */
    open class func postAnalyticsFlowexecutionsAggregatesQueryWithRequestBuilder(body: FlowExecutionAggregationQuery) -> RequestBuilder<FlowExecutionAggregateQueryResponse> {        
        let path = "/api/v2/analytics/flowexecutions/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowExecutionAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Query for flow activity observations
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsActivityQuery(body: FlowActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: FlowActivityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsActivityQueryWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<FlowActivityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow activity observations
     - POST /api/v2/analytics/flows/activity/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entityIdDimension" : "activeRouting",
  "results" : [ {
    "data" : [ {
      "metric" : "oFlow",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oFlow",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "convertedTo" : "convertedTo",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "ani" : "ani",
      "flowId" : "flowId",
      "direction" : "inbound",
      "conversationId" : "conversationId",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "metric" : "oFlow",
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "flowType" : "BOT"
    }, {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "convertedTo" : "convertedTo",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "ani" : "ani",
      "flowId" : "flowId",
      "direction" : "inbound",
      "conversationId" : "conversationId",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "metric" : "oFlow",
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "flowType" : "BOT"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "oFlow",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oFlow",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "convertedTo" : "convertedTo",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "ani" : "ani",
      "flowId" : "flowId",
      "direction" : "inbound",
      "conversationId" : "conversationId",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "metric" : "oFlow",
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "flowType" : "BOT"
    }, {
      "queueId" : "queueId",
      "usedRouting" : "Bullseye",
      "routingPriority" : 6,
      "convertedTo" : "convertedTo",
      "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "dnis" : "dnis",
      "scoredAgents" : [ {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      }, {
        "scoredAgentId" : "scoredAgentId",
        "agentScore" : 1
      } ],
      "addressFrom" : "addressFrom",
      "ani" : "ani",
      "flowId" : "flowId",
      "direction" : "inbound",
      "conversationId" : "conversationId",
      "activeRouting" : "Bullseye",
      "mediaType" : "callback",
      "sessionId" : "sessionId",
      "userId" : "userId",
      "addressTo" : "addressTo",
      "metric" : "oFlow",
      "teamId" : "teamId",
      "convertedFrom" : "convertedFrom",
      "participantName" : "participantName",
      "requestedLanguageId" : "requestedLanguageId",
      "flowType" : "BOT"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)

     - returns: RequestBuilder<FlowActivityResponse> 
     */
    open class func postAnalyticsFlowsActivityQueryWithRequestBuilder(body: FlowActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<FlowActivityResponse> {        
        let path = "/api/v2/analytics/flows/activity/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FlowActivityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for flow aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsAggregatesQuery(body: FlowAggregationQuery, completion: @escaping ((_ data: FlowAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow aggregates
     - POST /api/v2/analytics/flows/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowAggregateQueryResponse> 
     */
    open class func postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: FlowAggregationQuery) -> RequestBuilder<FlowAggregateQueryResponse> {        
        let path = "/api/v2/analytics/flows/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for flow observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsObservationsQuery(body: FlowObservationQuery, completion: @escaping ((_ data: FlowObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow observations
     - POST /api/v2/analytics/flows/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowObservationQueryResponse> 
     */
    open class func postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: FlowObservationQuery) -> RequestBuilder<FlowObservationQueryResponse> {        
        let path = "/api/v2/analytics/flows/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for journey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsJourneysAggregatesQuery(body: JourneyAggregationQuery, completion: @escaping ((_ data: JourneyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JourneyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for journey aggregates
     - POST /api/v2/analytics/journeys/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<JourneyAggregateQueryResponse> 
     */
    open class func postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: JourneyAggregationQuery) -> RequestBuilder<JourneyAggregateQueryResponse> {        
        let path = "/api/v2/analytics/journeys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for knowledge aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsKnowledgeAggregatesQuery(body: KnowledgeAggregationQuery, completion: @escaping ((_ data: KnowledgeAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsKnowledgeAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<KnowledgeAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for knowledge aggregates
     - POST /api/v2/analytics/knowledge/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<KnowledgeAggregateQueryResponse> 
     */
    open class func postAnalyticsKnowledgeAggregatesQueryWithRequestBuilder(body: KnowledgeAggregationQuery) -> RequestBuilder<KnowledgeAggregateQueryResponse> {        
        let path = "/api/v2/analytics/knowledge/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for queue observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsQueuesObservationsQuery(body: QueueObservationQuery, completion: @escaping ((_ data: QueueObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueueObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for queue observations
     - POST /api/v2/analytics/queues/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QueueObservationQueryResponse> 
     */
    open class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: QueueObservationQuery) -> RequestBuilder<QueueObservationQueryResponse> {        
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for limits rate limit aggregates. Data populated when limits reach 90% of the maximum. Not a source of truth for limits hit but a best effort estimate.
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsRatelimitsAggregatesQuery(body: RateLimitAggregationQuery, completion: @escaping ((_ data: RateLimitAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsRatelimitsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RateLimitAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for limits rate limit aggregates. Data populated when limits reach 90% of the maximum. Not a source of truth for limits hit but a best effort estimate.
     - POST /api/v2/analytics/ratelimits/aggregates/query
     - The 'max' property can be used to determine estimated rate limit value hit. See https://developer.genesys.cloud/organization/organization/limits#available-limits for limits that are trackable (Operational Events Enabled).
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<RateLimitAggregateQueryResponse> 
     */
    open class func postAnalyticsRatelimitsAggregatesQueryWithRequestBuilder(body: RateLimitAggregationQuery) -> RequestBuilder<RateLimitAggregateQueryResponse> {        
        let path = "/api/v2/analytics/ratelimits/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RateLimitAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Bulk soft delete dashboards owned by other user(s)
     
     - parameter body: (body) List of userIds 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingDashboardsUsersBulkRemove(body: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingDashboardsUsersBulkRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk soft delete dashboards owned by other user(s)
     - POST /api/v2/analytics/reporting/dashboards/users/bulk/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) List of userIds 

     - returns: RequestBuilder<Void> 
     */
    open class func postAnalyticsReportingDashboardsUsersBulkRemoveWithRequestBuilder(body: [String]) -> RequestBuilder<Void> {        
        let path = "/api/v2/analytics/reporting/dashboards/users/bulk/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Generate a view export request
     
     - parameter body: (body) ReportingExportJobRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingExports(body: ReportingExportJobRequest, completion: @escaping ((_ data: ReportingExportJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingExportsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ReportingExportJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Generate a view export request
     - POST /api/v2/analytics/reporting/exports
     - This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "hasSummaryRow" : true,
  "downloadUrl" : "downloadUrl",
  "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasSplitByMedia" : true,
  "locale" : "locale",
  "excludeEmptyRows" : true,
  "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
  "enabled" : true,
  "exportAllowedToRerun" : true,
  "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "includeDurationFormatInHeader" : true,
  "hasFormatDurations" : true,
  "durationFormat" : "Seconds",
  "period" : "period",
  "read" : true,
  "selfUri" : "https://openapi-generator.tech",
  "timeZone" : "timeZone",
  "csvDelimiter" : "SEMICOLON",
  "filter" : "{}",
  "selectedColumns" : [ {
    "columnOrder" : 6,
    "columnName" : "columnName"
  }, {
    "columnOrder" : 6,
    "columnName" : "columnName"
  } ],
  "emailStatuses" : {
    "key" : "Sent"
  },
  "emailErrorDescription" : "emailErrorDescription",
  "percentageComplete" : 0.8008281904610115,
  "hasSplitFilters" : true,
  "name" : "name",
  "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
  "interval" : "interval",
  "runId" : "runId",
  "hasCustomParticipantAttributes" : true,
  "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
  "exportFormat" : "CSV",
  "status" : "SUBMITTED"
}, statusCode=200}]
     
     - parameter body: (body) ReportingExportJobRequest 

     - returns: RequestBuilder<ReportingExportJobResponse> 
     */
    open class func postAnalyticsReportingExportsWithRequestBuilder(body: ReportingExportJobRequest) -> RequestBuilder<ReportingExportJobResponse> {        
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Bulk soft delete dashboard configurations
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingSettingsDashboardsBulkRemove(body: DashboardConfigurationBulkRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingSettingsDashboardsBulkRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk soft delete dashboard configurations
     - POST /api/v2/analytics/reporting/settings/dashboards/bulk/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postAnalyticsReportingSettingsDashboardsBulkRemoveWithRequestBuilder(body: DashboardConfigurationBulkRequest) -> RequestBuilder<Void> {        
        let path = "/api/v2/analytics/reporting/settings/dashboards/bulk/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query dashboard configurations
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingSettingsDashboardsQuery(body: DashboardConfigurationQueryRequest, completion: @escaping ((_ data: DashboardConfigurationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingSettingsDashboardsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DashboardConfigurationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query dashboard configurations
     - POST /api/v2/analytics/reporting/settings/dashboards/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 3,
  "pageCount" : 2,
  "pageNumber" : 9,
  "entities" : [ {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  }, {
    "shared" : true,
    "columns" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "rows" : 0,
    "widgets" : [ {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    }, {
      "displayAggregates" : true,
      "showProfilePicture" : true,
      "displayAsTable" : true,
      "webContentUrl" : "webContentUrl",
      "title" : "title",
      "type" : "METRIC",
      "entityLimit" : 5,
      "selectedStatuses" : [ "Available", "Available" ],
      "showDuration" : true,
      "selectedSegmentTypes" : [ "alert", "alert" ],
      "showOfflineAgents" : true,
      "periods" : [ "NONE", "NONE" ],
      "row" : 1,
      "displayTextColor" : "displayTextColor",
      "displayText" : "displayText",
      "showLongest" : true,
      "warnings" : [ {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      }, {
        "rangeType" : "OVER",
        "color" : "color",
        "value" : 2
      } ],
      "column" : 5,
      "agentInteractionSortOrder" : "ascending",
      "splitByMediaType" : true,
      "showTimeInStatus" : true,
      "filter" : "{}",
      "mediaTypes" : [ "callback", "callback" ],
      "sortKey" : "Name",
      "showPercentageChange" : true,
      "sortOrder" : "ascending",
      "metrics" : [ "AVG_TALK_TIME", "AVG_TALK_TIME" ],
      "splitFilters" : true,
      "isFullWidth" : true
    } ],
    "publicDashboard" : true,
    "dashboardsSharedWith" : "{}",
    "dateDeleted" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "restricted" : true,
    "name" : "name",
    "layoutType" : "Grid",
    "id" : "id",
    "favorite" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 7,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<DashboardConfigurationListing> 
     */
    open class func postAnalyticsReportingSettingsDashboardsQueryWithRequestBuilder(body: DashboardConfigurationQueryRequest) -> RequestBuilder<DashboardConfigurationListing> {        
        let path = "/api/v2/analytics/reporting/settings/dashboards/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DashboardConfigurationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for resolution aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsResolutionsAggregatesQuery(body: ResolutionAggregationQuery, completion: @escaping ((_ data: ResolutionAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsResolutionsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ResolutionAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for resolution aggregates
     - POST /api/v2/analytics/resolutions/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ResolutionAggregateQueryResponse> 
     */
    open class func postAnalyticsResolutionsAggregatesQueryWithRequestBuilder(body: ResolutionAggregationQuery) -> RequestBuilder<ResolutionAggregateQueryResponse> {        
        let path = "/api/v2/analytics/resolutions/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResolutionAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Query for user activity observations
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsRoutingActivityQuery(body: RoutingActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: RoutingActivityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsRoutingActivityQueryWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<RoutingActivityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user activity observations
     - POST /api/v2/analytics/routing/activity/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entityIdDimension" : "organizationPresenceId",
  "results" : [ {
    "data" : [ {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oActiveUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oActiveUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oActiveUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oActiveUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)

     - returns: RequestBuilder<RoutingActivityResponse> 
     */
    open class func postAnalyticsRoutingActivityQueryWithRequestBuilder(body: RoutingActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<RoutingActivityResponse> {        
        let path = "/api/v2/analytics/routing/activity/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<RoutingActivityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for summary aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsSummariesAggregatesQuery(body: SummaryAggregationQuery, completion: @escaping ((_ data: SummaryAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsSummariesAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SummaryAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for summary aggregates
     - POST /api/v2/analytics/summaries/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<SummaryAggregateQueryResponse> 
     */
    open class func postAnalyticsSummariesAggregatesQueryWithRequestBuilder(body: SummaryAggregationQuery) -> RequestBuilder<SummaryAggregateQueryResponse> {        
        let path = "/api/v2/analytics/summaries/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SummaryAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for survey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsSurveysAggregatesQuery(body: SurveyAggregationQuery, completion: @escaping ((_ data: SurveyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for survey aggregates
     - POST /api/v2/analytics/surveys/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<SurveyAggregateQueryResponse> 
     */
    open class func postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: SurveyAggregationQuery) -> RequestBuilder<SurveyAggregateQueryResponse> {        
        let path = "/api/v2/analytics/surveys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for task management aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsTaskmanagementAggregatesQuery(body: TaskManagementAggregationQuery, completion: @escaping ((_ data: TaskManagementAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsTaskmanagementAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TaskManagementAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for task management aggregates
     - POST /api/v2/analytics/taskmanagement/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<TaskManagementAggregateQueryResponse> 
     */
    open class func postAnalyticsTaskmanagementAggregatesQueryWithRequestBuilder(body: TaskManagementAggregationQuery) -> RequestBuilder<TaskManagementAggregateQueryResponse> {        
        let path = "/api/v2/analytics/taskmanagement/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TaskManagementAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Query for team activity observations
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsTeamsActivityQuery(body: TeamActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TeamActivityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsTeamsActivityQueryWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TeamActivityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for team activity observations
     - POST /api/v2/analytics/teams/activity/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entityIdDimension" : "organizationPresenceId",
  "results" : [ {
    "data" : [ {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oTeamOffQueueUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oTeamOffQueueUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oTeamOffQueueUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "secondaryQualifier" : "secondaryQualifier",
      "metric" : "oTeamOffQueueUsers",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)

     - returns: RequestBuilder<TeamActivityResponse> 
     */
    open class func postAnalyticsTeamsActivityQueryWithRequestBuilder(body: TeamActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TeamActivityResponse> {        
        let path = "/api/v2/analytics/teams/activity/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TeamActivityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for transcript aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsTranscriptsAggregatesQuery(body: TranscriptAggregationQuery, completion: @escaping ((_ data: TranscriptAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for transcript aggregates
     - POST /api/v2/analytics/transcripts/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<TranscriptAggregateQueryResponse> 
     */
    open class func postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: TranscriptAggregationQuery) -> RequestBuilder<TranscriptAggregateQueryResponse> {        
        let path = "/api/v2/analytics/transcripts/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Query for user activity observations
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersActivityQuery(body: UserActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: UserActivityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersActivityQueryWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<UserActivityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user activity observations
     - POST /api/v2/analytics/users/activity/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entityIdDimension" : "organizationPresenceId",
  "results" : [ {
    "data" : [ {
      "metric" : "oActiveQueues",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oActiveQueues",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "oActiveQueues",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    }, {
      "metric" : "oActiveQueues",
      "qualifier" : "qualifier",
      "count" : 0,
      "entityIds" : [ "entityIds", "entityIds" ]
    } ],
    "entities" : [ {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "queueId" : "queueId",
      "presenceDate" : "2000-01-23T04:56:07.000+00:00",
      "routingStatusDate" : "2000-01-23T04:56:07.000+00:00",
      "activityDate" : "2000-01-23T04:56:07.000+00:00",
      "queueMembershipStatus" : "queueMembershipStatus",
      "systemPresence" : "systemPresence",
      "teamId" : "teamId",
      "routingStatus" : "routingStatus",
      "userId" : "userId",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "truncated" : true,
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 
     - parameter pageSize: (query) The desired page size (optional)
     - parameter pageNumber: (query) The desired page number (optional)

     - returns: RequestBuilder<UserActivityResponse> 
     */
    open class func postAnalyticsUsersActivityQueryWithRequestBuilder(body: UserActivityQuery, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<UserActivityResponse> {        
        let path = "/api/v2/analytics/users/activity/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<UserActivityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for user aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersAggregatesQuery(body: UserAggregationQuery, completion: @escaping ((_ data: UserAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user aggregates
     - POST /api/v2/analytics/users/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserAggregateQueryResponse> 
     */
    open class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: UserAggregationQuery) -> RequestBuilder<UserAggregateQueryResponse> {        
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for user details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsJobs(body: AsyncUserDetailsQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details asynchronously
     - POST /api/v2/analytics/users/details/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsJobsWithRequestBuilder(body: AsyncUserDetailsQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/analytics/users/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for user details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsQuery(body: UserDetailsQuery, completion: @escaping ((_ data: AnalyticsUserDetailsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details
     - POST /api/v2/analytics/users/details/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalHits" : 0,
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ],
  "aggregations" : [ {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  }, {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsUserDetailsQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsQueryWithRequestBuilder(body: UserDetailsQuery) -> RequestBuilder<AnalyticsUserDetailsQueryResponse> {        
        let path = "/api/v2/analytics/users/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for user observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersObservationsQuery(body: UserObservationQuery, completion: @escaping ((_ data: UserObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user observations
     - POST /api/v2/analytics/users/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserObservationQueryResponse> 
     */
    open class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body: UserObservationQuery) -> RequestBuilder<UserObservationQueryResponse> {        
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Update analytics data retention setting
     
     - parameter body: (body) retentionDays 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAnalyticsDataretentionSettings(body: UpdateAnalyticsDataRetentionRequest, completion: @escaping ((_ data: AnalyticsDataRetentionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putAnalyticsDataretentionSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsDataRetentionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update analytics data retention setting
     - PUT /api/v2/analytics/dataretention/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "retentionDays" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter body: (body) retentionDays 

     - returns: RequestBuilder<AnalyticsDataRetentionResponse> 
     */
    open class func putAnalyticsDataretentionSettingsWithRequestBuilder(body: UpdateAnalyticsDataRetentionRequest) -> RequestBuilder<AnalyticsDataRetentionResponse> {        
        let path = "/api/v2/analytics/dataretention/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsDataRetentionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
