//
// AnalyticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AnalyticsAPI {
    
    
    
    /**
     
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete/cancel an async request
     
     - DELETE /api/v2/analytics/conversations/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsReportingSchedule(scheduleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a scheduled report job.
     
     - DELETE /api/v2/analytics/reporting/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete/cancel an async request
     
     - DELETE /api/v2/analytics/users/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a conversation by id
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationDetails(conversationId: String, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributes?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationDetailsWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributes>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a conversation by id
     
     - GET /api/v2/analytics/conversations/{conversationId}/details
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationStart" : "2000-01-23T04:56:07.000+0000",
  "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
  "evaluations" : [ {
    "formId" : "aeiou",
    "queueId" : "aeiou",
    "oTotalScore" : 123456789,
    "oTotalCriticalScore" : 123456789,
    "contextId" : "aeiou",
    "userId" : "aeiou",
    "evaluationId" : "aeiou",
    "deleted" : true,
    "formName" : "aeiou",
    "eventTime" : "2000-01-23T04:56:07.000+0000",
    "rescored" : true,
    "evaluatorId" : "aeiou",
    "calibrationId" : "aeiou"
  } ],
  "conversationId" : "aeiou",
  "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "surveys" : [ {
    "queueId" : "aeiou",
    "surveyStatus" : "aeiou",
    "oSurveyTotalScore" : 123456789,
    "surveyId" : "aeiou",
    "surveyFormName" : "aeiou",
    "eventTime" : "2000-01-23T04:56:07.000+0000",
    "surveyFormId" : "aeiou",
    "surveyFormContextId" : "aeiou",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "surveyPromoterScore" : 123
  } ],
  "conversationEnd" : "2000-01-23T04:56:07.000+0000",
  "originatingDirection" : "aeiou",
  "divisionIds" : [ "aeiou" ],
  "participants" : [ {
    "participantId" : "aeiou",
    "sessions" : [ {
      "usedRouting" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "cobrowseRole" : "aeiou",
      "videoAddressSelf" : "aeiou",
      "proposedAgents" : [ {
        "proposedAgentId" : "aeiou",
        "agentRank" : 123
      } ],
      "addressSelf" : "aeiou",
      "skipEnabled" : true,
      "journeyActionMapId" : "aeiou",
      "remote" : "aeiou",
      "roomId" : "aeiou",
      "messageType" : "aeiou",
      "requestedRoutings" : [ "aeiou" ],
      "mediaCount" : 123,
      "dnis" : "aeiou",
      "videoRoomId" : "aeiou",
      "flow" : {
        "entryType" : "aeiou",
        "issuedCallback" : true,
        "exitReason" : "aeiou",
        "transferTargetName" : "aeiou",
        "flowVersion" : "aeiou",
        "flowName" : "aeiou",
        "transferTargetAddress" : "aeiou",
        "outcomes" : [ {
          "flowOutcomeId" : "aeiou",
          "flowOutcome" : "aeiou",
          "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
          "flowOutcomeValue" : "aeiou",
          "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
        } ],
        "transferType" : "aeiou",
        "entryReason" : "aeiou",
        "endingLanguage" : "aeiou",
        "flowId" : "aeiou",
        "startingLanguage" : "aeiou",
        "flowType" : "aeiou"
      },
      "dispositionAnalyzer" : "aeiou",
      "addressOther" : "aeiou",
      "cobrowseRoomId" : "aeiou",
      "protocolCallId" : "aeiou",
      "mediaType" : "aeiou",
      "monitoredSessionId" : "aeiou",
      "flowOutType" : "aeiou",
      "outboundCampaignId" : "aeiou",
      "addressTo" : "aeiou",
      "edgeId" : "aeiou",
      "timeoutSeconds" : 123,
      "metrics" : [ {
        "name" : "aeiou",
        "emitDate" : "2000-01-23T04:56:07.000+0000",
        "value" : 123456789
      } ],
      "mediaBridgeId" : "aeiou",
      "journeyActionMapVersion" : "aeiou",
      "screenShareRoomId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "assignerId" : "aeiou",
      "outboundContactId" : "aeiou",
      "peerId" : "aeiou",
      "remoteNameDisplayable" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "callbackNumbers" : [ "aeiou" ],
      "recording" : true,
      "screenShareAddressSelf" : "aeiou",
      "sharingScreen" : true,
      "sessionDnis" : "aeiou",
      "segments" : [ {
        "queueId" : "aeiou",
        "conference" : true,
        "subject" : "aeiou",
        "sourceConversationId" : "aeiou",
        "groupId" : "aeiou",
        "errorCode" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+0000",
        "wrapUpNote" : "aeiou",
        "destinationSessionId" : "aeiou",
        "disconnectType" : "aeiou",
        "segmentStart" : "2000-01-23T04:56:07.000+0000",
        "requestedRoutingUserIds" : [ "aeiou" ],
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "videoMuted" : true,
        "q850ResponseCodes" : [ 123456789 ],
        "audioMuted" : true,
        "wrapUpCode" : "aeiou",
        "destinationConversationId" : "aeiou",
        "wrapUpTags" : [ "aeiou" ],
        "sourceSessionId" : "aeiou",
        "sipResponseCodes" : [ 123456789 ],
        "requestedLanguageId" : "aeiou",
        "segmentType" : "aeiou",
        "properties" : [ {
          "propertyType" : "aeiou",
          "property" : "aeiou",
          "value" : "aeiou"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "aeiou",
      "provider" : "aeiou",
      "journeyCustomerIdType" : "aeiou",
      "journeyCustomerId" : "aeiou",
      "callbackUserName" : "aeiou",
      "addressFrom" : "aeiou",
      "flowInType" : "aeiou",
      "ani" : "aeiou",
      "direction" : "aeiou",
      "journeyCustomerSessionId" : "aeiou",
      "sessionId" : "aeiou",
      "journeyActionId" : "aeiou",
      "dispositionName" : "disposition.classification.callable.machine",
      "scriptId" : "aeiou",
      "selectedAgentId" : "aeiou",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
        "underrunPackets" : 123456789,
        "overrunPackets" : 123456789,
        "minMos" : 1.3579000000000001069366817318950779736042022705078125,
        "maxLatencyMs" : 123456789,
        "codecs" : [ "aeiou" ],
        "receivedPackets" : 123456789,
        "duplicatePackets" : 123456789,
        "invalidPackets" : 123456789,
        "discardedPackets" : 123456789
      } ],
      "selectedAgentRank" : 123,
      "outboundContactListId" : "aeiou"
    } ],
    "externalContactId" : "aeiou",
    "purpose" : "aeiou",
    "teamId" : "aeiou",
    "externalOrganizationId" : "aeiou",
    "participantName" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou"
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributes> 
     */
    open class func getAnalyticsConversationDetailsWithRequestBuilder(conversationId: String) -> RequestBuilder<AnalyticsConversationWithoutAttributes> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributes>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets multiple conversations by id
     
     - parameter _id: (query) Comma-separated conversation ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetails(_id: [String]? = nil, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets multiple conversations by id
     
     - GET /api/v2/analytics/conversations/details
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "assignerId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter _id: (query) Comma-separated conversation ids (optional)

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func getAnalyticsConversationsDetailsWithRequestBuilder(_id: [String]? = nil) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {
        let path = "/api/v2/analytics/conversations/details"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status for async query for conversation details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status for async query for conversation details
     
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "aeiou",
  "submissionDate" : "2000-01-23T04:56:07.000+0000",
  "completionDate" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "expirationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsConversationAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsConversationAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a page of results for an async query
     
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}/results
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000",
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "assignerId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsConversationAsyncQueryResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsConversationAsyncQueryResponse> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "cursor": cursor, 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Lookup the datalake availability date and time
     
     - GET /api/v2/analytics/conversations/details/jobs/availability
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000"
}}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {
        let path = "/api/v2/analytics/conversations/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get all view export requests for a user
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExports(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportingExportJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportingExportJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all view export requests for a user
     
     - GET /api/v2/analytics/reporting/exports
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "hasSummaryRow" : true,
    "downloadUrl" : "aeiou",
    "createdDateTime" : "2000-01-23T04:56:07.000+0000",
    "hasSplitByMedia" : true,
    "locale" : "aeiou",
    "excludeEmptyRows" : true,
    "exportErrorMessagesType" : "aeiou",
    "enabled" : true,
    "modifiedDateTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "hasFormatDurations" : true,
    "period" : "aeiou",
    "read" : true,
    "selfUri" : "aeiou",
    "timeZone" : "aeiou",
    "csvDelimiter" : "aeiou",
    "filter" : {
      "sessionDnisList" : [ "aeiou" ],
      "transferred" : true,
      "surveyQuestionGroupScore" : "",
      "abandonDurationsMilliseconds" : [ "" ],
      "hasMedia" : true,
      "callbackNumberList" : [ "aeiou" ],
      "messageTypes" : [ "aeiou" ],
      "surveyPromoterScore" : "",
      "isSurveyed" : true,
      "transcriptLanguages" : [ "aeiou" ],
      "divisionIds" : [ "aeiou" ],
      "mos" : "",
      "surveyTotalScore" : "",
      "flowTypes" : [ "aeiou" ],
      "skillIds" : [ "aeiou" ],
      "evaluatorIds" : [ "aeiou" ],
      "evaluatedAgentIds" : [ "aeiou" ],
      "acdDurationsMilliseconds" : [ "" ],
      "flowEntryReasons" : [ "aeiou" ],
      "groupIds" : [ "aeiou" ],
      "participantPurposes" : [ "aeiou" ],
      "surveyFormIds" : [ "aeiou" ],
      "flowVersions" : [ "aeiou" ],
      "isEnded" : true,
      "abandoned" : true,
      "surveyScores" : [ "" ],
      "originatingDirections" : [ "aeiou" ],
      "filterUsersByTeamIds" : [ "aeiou" ],
      "isConsulted" : true,
      "transcripts" : [ {
        "contains" : [ "aeiou" ],
        "exactMatch" : [ "aeiou" ],
        "doesNotContain" : [ "aeiou" ]
      } ],
      "externalOrgIds" : [ "aeiou" ],
      "locationIds" : [ "aeiou" ],
      "languageIds" : [ "aeiou" ],
      "addressTos" : [ "aeiou" ],
      "addressFroms" : [ "aeiou" ],
      "hasJourneyActionMapId" : true,
      "filterQueuesByUserIds" : [ "aeiou" ],
      "contactIds" : [ "aeiou" ],
      "providerList" : [ "aeiou" ],
      "teamIds" : [ "aeiou" ],
      "remoteParticipants" : [ "aeiou" ],
      "directions" : [ "aeiou" ],
      "conversationIds" : [ "aeiou" ],
      "surveyNpsScore" : "",
      "reportsTos" : [ "aeiou" ],
      "hasJourneyCustomerId" : true,
      "conversationProperties" : {
        "isAcd" : true,
        "isVoicemail" : true,
        "isCobrowse" : true,
        "isWaiting" : true,
        "filterWrapUpNotes" : true,
        "isPreferred" : true,
        "isMonitored" : true,
        "isActive" : true,
        "isScreenshare" : true,
        "matchAll" : true,
        "isFlagged" : true
      },
      "showFirstQueue" : true,
      "holdDurationsMilliseconds" : [ "" ],
      "isCampaign" : true,
      "promoterScores" : [ "" ],
      "sipCallIds" : [ "aeiou" ],
      "handleDurationsMilliseconds" : [ "" ],
      "flowOutcomeIds" : [ "aeiou" ],
      "flowOutcomeValues" : [ "aeiou" ],
      "flowDestinationTypes" : [ "aeiou" ],
      "callbackInterval" : "aeiou",
      "usedRoutingTypes" : [ "aeiou" ],
      "talkDurationsMilliseconds" : [ "" ],
      "durationsMilliseconds" : [ {
        "lt" : 1.3579000000000001069366817318950779736042022705078125,
        "gte" : 1.3579000000000001069366817318950779736042022705078125,
        "lte" : 1.3579000000000001069366817318950779736042022705078125,
        "gt" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "skillGroups" : [ "aeiou" ],
      "aniList" : [ "aeiou" ],
      "wrapUpCodes" : [ "aeiou" ],
      "isConsultTransferred" : true,
      "surveyFormContextIds" : [ "aeiou" ],
      "languageGroups" : [ "aeiou" ],
      "outboundCampaignIds" : [ "aeiou" ],
      "evaluationFormIds" : [ "aeiou" ],
      "evaluationScore" : "",
      "surveyStatuses" : [ "aeiou" ],
      "userIds" : [ "aeiou" ],
      "acwDurationsMilliseconds" : [ "" ],
      "isBlindTransferred" : true,
      "flowDisconnectReasons" : [ "aeiou" ],
      "outboundContactListIds" : [ "aeiou" ],
      "answered" : true,
      "requestedRoutingTypes" : [ "aeiou" ],
      "filterUsersByQueueIds" : [ "aeiou" ],
      "hasAgentAssistId" : true,
      "evaluationCriticalScore" : "",
      "queueIds" : [ "aeiou" ],
      "flowIds" : [ "aeiou" ],
      "mediaTypes" : [ "aeiou" ],
      "flowOutTypes" : [ "aeiou" ],
      "hasJourneyVisitId" : true,
      "roleIds" : [ "aeiou" ],
      "externalContactIds" : [ "aeiou" ],
      "dnisList" : [ "aeiou" ],
      "flowEntryTypes" : [ "aeiou" ]
    },
    "selectedColumns" : [ {
      "columnOrder" : 123,
      "columnName" : "aeiou"
    } ],
    "emailStatuses" : {
      "key" : "aeiou"
    },
    "emailErrorDescription" : "aeiou",
    "percentageComplete" : 1.3579000000000001069366817318950779736042022705078125,
    "hasSplitFilters" : true,
    "name" : "aeiou",
    "viewType" : "aeiou",
    "interval" : "aeiou",
    "runId" : "aeiou",
    "hasCustomParticipantAttributes" : true,
    "recipientEmails" : [ "aeiou" ],
    "exportFormat" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<ReportingExportJobListing> 
     */
    open class func getAnalyticsReportingExportsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportingExportJobListing> {
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<ReportingExportJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get all export metadata
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExportsMetadata(completion: @escaping ((_ data: ReportingExportMetadataJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsMetadataWithRequestBuilder()
        requestBuilder.execute { (response: Response<ReportingExportMetadataJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all export metadata
     
     - GET /api/v2/analytics/reporting/exports/metadata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "requiredFilters" : [ "aeiou" ],
    "supportedFilters" : [ "aeiou" ],
    "requiredColumnIds" : [ "aeiou" ],
    "availableColumnIds" : [ "aeiou" ],
    "dependentColumnIds" : {
      "key" : [ "aeiou" ]
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "viewType" : "aeiou",
    "id" : "aeiou",
    "dateLimitations" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ReportingExportMetadataJobListing> 
     */
    open class func getAnalyticsReportingExportsMetadataWithRequestBuilder() -> RequestBuilder<ReportingExportMetadataJobListing> {
        let path = "/api/v2/analytics/reporting/exports/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportMetadataJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get list of reporting metadata.
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter locale: (query) Locale (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingMetadata(pageNumber: Int? = nil, pageSize: Int? = nil, locale: String? = nil, completion: @escaping ((_ data: ReportMetaDataEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingMetadataWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, locale: locale)
        requestBuilder.execute { (response: Response<ReportMetaDataEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of reporting metadata.
     
     - GET /api/v2/analytics/reporting/metadata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "exampleUrl" : "aeiou",
    "keywords" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "title" : "aeiou",
    "parameters" : [ {
      "parameterType" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "required" : true
    } ],
    "availableLocales" : [ "aeiou" ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter locale: (query) Locale (optional)

     - returns: RequestBuilder<ReportMetaDataEntityListing> 
     */
    open class func getAnalyticsReportingMetadataWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, locale: String? = nil) -> RequestBuilder<ReportMetaDataEntityListing> {
        let path = "/api/v2/analytics/reporting/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "locale": locale
            
        ])

        let requestBuilder: RequestBuilder<ReportMetaDataEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a reporting metadata.
     
     - parameter reportId: (path) Report ID 
     - parameter locale: (query) Locale (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingReportIdMetadata(reportId: String, locale: String? = nil, completion: @escaping ((_ data: ReportMetaData?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingReportIdMetadataWithRequestBuilder(reportId: reportId, locale: locale)
        requestBuilder.execute { (response: Response<ReportMetaData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a reporting metadata.
     
     - GET /api/v2/analytics/reporting/{reportId}/metadata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "exampleUrl" : "aeiou",
  "keywords" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "title" : "aeiou",
  "parameters" : [ {
    "parameterType" : "aeiou",
    "domain" : "aeiou",
    "name" : "aeiou",
    "required" : true
  } ],
  "availableLocales" : [ "aeiou" ]
}}]
     
     - parameter reportId: (path) Report ID 
     - parameter locale: (query) Locale (optional)

     - returns: RequestBuilder<ReportMetaData> 
     */
    open class func getAnalyticsReportingReportIdMetadataWithRequestBuilder(reportId: String, locale: String? = nil) -> RequestBuilder<ReportMetaData> {
        var path = "/api/v2/analytics/reporting/{reportId}/metadata"
        let reportIdPreEscape = "\(reportId)"
        let reportIdPostEscape = reportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reportId}", with: reportIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "locale": locale
            
        ])

        let requestBuilder: RequestBuilder<ReportMetaData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get a list of report formats
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingReportformats(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingReportformatsWithRequestBuilder()
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of report formats
     
     - GET /api/v2/analytics/reporting/reportformats
     - Get a list of report formats.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsReportingReportformatsWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/api/v2/analytics/reporting/reportformats"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSchedule(scheduleId: String, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a scheduled report job.
     
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "aeiou",
  "reportId" : "aeiou",
  "lastRun" : {
    "reportId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "errorMessage" : "aeiou",
    "runDurationMsec" : 123456789,
    "reportFormat" : "aeiou",
    "id" : "aeiou",
    "runTime" : "2000-01-23T04:56:07.000+0000",
    "reportUrl" : "aeiou",
    "scheduleUri" : "aeiou",
    "runStatus" : "aeiou"
  },
  "selfUri" : "aeiou",
  "nextFireTime" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "reportFormat" : "aeiou",
  "locale" : "aeiou",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "timePeriod" : "aeiou",
  "interval" : "aeiou",
  "id" : "aeiou",
  "parameters" : {
    "key" : "{}"
  }
}}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func getAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String) -> RequestBuilder<ReportSchedule> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get list of completed scheduled report jobs.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter pageNumber: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistory(scheduleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportRunEntryEntityDomainListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryWithRequestBuilder(scheduleId: scheduleId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportRunEntryEntityDomainListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of completed scheduled report jobs.
     
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "reportId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "errorMessage" : "aeiou",
    "runDurationMsec" : 123456789,
    "reportFormat" : "aeiou",
    "id" : "aeiou",
    "runTime" : "2000-01-23T04:56:07.000+0000",
    "reportUrl" : "aeiou",
    "scheduleUri" : "aeiou",
    "runStatus" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter pageNumber: (query)  (optional, default to 1)
     - parameter pageSize: (query)  (optional, default to 25)

     - returns: RequestBuilder<ReportRunEntryEntityDomainListing> 
     */
    open class func getAnalyticsReportingScheduleHistoryWithRequestBuilder(scheduleId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportRunEntryEntityDomainListing> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<ReportRunEntryEntityDomainListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get most recently completed scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistoryLatest(scheduleId: String, completion: @escaping ((_ data: ReportRunEntry?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryLatestWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportRunEntry>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get most recently completed scheduled report job.
     
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/latest
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reportId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "errorMessage" : "aeiou",
  "runDurationMsec" : 123456789,
  "reportFormat" : "aeiou",
  "id" : "aeiou",
  "runTime" : "2000-01-23T04:56:07.000+0000",
  "reportUrl" : "aeiou",
  "scheduleUri" : "aeiou",
  "runStatus" : "aeiou"
}}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportRunEntry> 
     */
    open class func getAnalyticsReportingScheduleHistoryLatestWithRequestBuilder(scheduleId: String) -> RequestBuilder<ReportRunEntry> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportRunEntry>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     A completed scheduled report job
     
     - parameter runId: (path) Run ID 
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistoryRunId(runId: String, scheduleId: String, completion: @escaping ((_ data: ReportRunEntry?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryRunIdWithRequestBuilder(runId: runId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportRunEntry>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     A completed scheduled report job
     
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}
     - A completed scheduled report job.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reportId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "errorMessage" : "aeiou",
  "runDurationMsec" : 123456789,
  "reportFormat" : "aeiou",
  "id" : "aeiou",
  "runTime" : "2000-01-23T04:56:07.000+0000",
  "reportUrl" : "aeiou",
  "scheduleUri" : "aeiou",
  "runStatus" : "aeiou"
}}]
     
     - parameter runId: (path) Run ID 
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportRunEntry> 
     */
    open class func getAnalyticsReportingScheduleHistoryRunIdWithRequestBuilder(runId: String, scheduleId: String) -> RequestBuilder<ReportRunEntry> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}"
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportRunEntry>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of scheduled report jobs
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSchedules(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportScheduleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSchedulesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportScheduleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of scheduled report jobs
     
     - GET /api/v2/analytics/reporting/schedules
     - Get a list of scheduled report jobs.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "quartzCronExpression" : "aeiou",
    "reportId" : "aeiou",
    "lastRun" : {
      "reportId" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "errorMessage" : "aeiou",
      "runDurationMsec" : 123456789,
      "reportFormat" : "aeiou",
      "id" : "aeiou",
      "runTime" : "2000-01-23T04:56:07.000+0000",
      "reportUrl" : "aeiou",
      "scheduleUri" : "aeiou",
      "runStatus" : "aeiou"
    },
    "selfUri" : "aeiou",
    "nextFireTime" : "2000-01-23T04:56:07.000+0000",
    "description" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "reportFormat" : "aeiou",
    "locale" : "aeiou",
    "enabled" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "timePeriod" : "aeiou",
    "interval" : "aeiou",
    "id" : "aeiou",
    "parameters" : {
      "key" : "{}"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<ReportScheduleEntityListing> 
     */
    open class func getAnalyticsReportingSchedulesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportScheduleEntityListing> {
        let path = "/api/v2/analytics/reporting/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<ReportScheduleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get a list of report time periods.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingTimeperiods(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingTimeperiodsWithRequestBuilder()
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of report time periods.
     
     - GET /api/v2/analytics/reporting/timeperiods
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsReportingTimeperiodsWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/api/v2/analytics/reporting/timeperiods"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status for async query for user details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status for async query for user details
     
     - GET /api/v2/analytics/users/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "aeiou",
  "submissionDate" : "2000-01-23T04:56:07.000+0000",
  "completionDate" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "expirationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsUserDetailsAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a page of results for an async query
     
     - GET /api/v2/analytics/users/details/jobs/{jobId}/results
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000",
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "organizationPresenceId" : "aeiou"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "routingStatus" : "aeiou"
    } ],
    "userId" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> 
     */
    open class func getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> {
        var path = "/api/v2/analytics/users/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "cursor": cursor, 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Lookup the datalake availability date and time
     
     - GET /api/v2/analytics/users/details/jobs/availability
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000"
}}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {
        let path = "/api/v2/analytics/users/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Index conversation properties
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationDetailsProperties(conversationId: String, body: PropertyIndexRequest, completion: @escaping ((_ data: PropertyIndexRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<PropertyIndexRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Index conversation properties
     
     - POST /api/v2/analytics/conversations/{conversationId}/details/properties
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "targetDate" : "2000-01-23T04:56:07.000+0000",
  "sessionId" : "aeiou",
  "properties" : [ {
    "propertyType" : "aeiou",
    "property" : "aeiou",
    "value" : "aeiou"
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 

     - returns: RequestBuilder<PropertyIndexRequest> 
     */
    open class func postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: String, body: PropertyIndexRequest) -> RequestBuilder<PropertyIndexRequest> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details/properties"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PropertyIndexRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsAggregatesQuery(body: ConversationAggregationQuery, completion: @escaping ((_ data: ConversationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ConversationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation aggregates
     
     - POST /api/v2/analytics/conversations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ConversationAggregateQueryResponse> 
     */
    open class func postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: ConversationAggregationQuery) -> RequestBuilder<ConversationAggregateQueryResponse> {
        let path = "/api/v2/analytics/conversations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConversationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsJobs(body: AsyncConversationQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation details asynchronously
     
     - POST /api/v2/analytics/conversations/details/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: AsyncConversationQuery) -> RequestBuilder<AsyncQueryResponse> {
        let path = "/api/v2/analytics/conversations/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsQuery(body: ConversationQuery, completion: @escaping ((_ data: AnalyticsConversationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation details
     
     - POST /api/v2/analytics/conversations/details/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "aggregations" : [ {
    "metric" : "aeiou",
    "count" : 123456789,
    "type" : "aeiou",
    "dimension" : "aeiou",
    "results" : [ {
      "count" : 123456789,
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "value" : "aeiou"
    } ]
  } ],
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "assignerId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsConversationQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: ConversationQuery) -> RequestBuilder<AnalyticsConversationQueryResponse> {
        let path = "/api/v2/analytics/conversations/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsTranscriptsQuery(body: TranscriptConversationDetailSearchRequest, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search resources.
     
     - POST /api/v2/analytics/conversations/transcripts/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "assignerId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: TranscriptConversationDetailSearchRequest) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {
        let path = "/api/v2/analytics/conversations/transcripts/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for evaluation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsEvaluationsAggregatesQuery(body: EvaluationAggregationQuery, completion: @escaping ((_ data: EvaluationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for evaluation aggregates
     
     - POST /api/v2/analytics/evaluations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<EvaluationAggregateQueryResponse> 
     */
    open class func postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: EvaluationAggregationQuery) -> RequestBuilder<EvaluationAggregateQueryResponse> {
        let path = "/api/v2/analytics/evaluations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for flow aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsAggregatesQuery(body: FlowAggregationQuery, completion: @escaping ((_ data: FlowAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for flow aggregates
     
     - POST /api/v2/analytics/flows/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowAggregateQueryResponse> 
     */
    open class func postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: FlowAggregationQuery) -> RequestBuilder<FlowAggregateQueryResponse> {
        let path = "/api/v2/analytics/flows/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for flow observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsObservationsQuery(body: FlowObservationQuery, completion: @escaping ((_ data: FlowObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for flow observations
     
     - POST /api/v2/analytics/flows/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "countPositive" : 123456789,
        "countNegative" : 123456789,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou",
      "observations" : [ {
        "usedRouting" : "aeiou",
        "routingPriority" : 123456789,
        "conversationId" : "aeiou",
        "convertedTo" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "sessionId" : "aeiou",
        "userId" : "aeiou",
        "addressTo" : "aeiou",
        "observationDate" : "2000-01-23T04:56:07.000+0000",
        "teamId" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "convertedFrom" : "aeiou",
        "dnis" : "aeiou",
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "requestedLanguageId" : "aeiou",
        "participantName" : "aeiou",
        "addressFrom" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowObservationQueryResponse> 
     */
    open class func postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: FlowObservationQuery) -> RequestBuilder<FlowObservationQueryResponse> {
        let path = "/api/v2/analytics/flows/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for journey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsJourneysAggregatesQuery(body: JourneyAggregationQuery, completion: @escaping ((_ data: JourneyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JourneyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for journey aggregates
     
     - POST /api/v2/analytics/journeys/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<JourneyAggregateQueryResponse> 
     */
    open class func postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: JourneyAggregationQuery) -> RequestBuilder<JourneyAggregateQueryResponse> {
        let path = "/api/v2/analytics/journeys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for queue observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsQueuesObservationsQuery(body: QueueObservationQuery, completion: @escaping ((_ data: QueueObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueueObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for queue observations
     
     - POST /api/v2/analytics/queues/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "aeiou" ]
  },
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "countPositive" : 123456789,
        "countNegative" : 123456789,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou",
      "observations" : [ {
        "usedRouting" : "aeiou",
        "routingPriority" : 123456789,
        "conversationId" : "aeiou",
        "convertedTo" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "sessionId" : "aeiou",
        "userId" : "aeiou",
        "addressTo" : "aeiou",
        "observationDate" : "2000-01-23T04:56:07.000+0000",
        "teamId" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "convertedFrom" : "aeiou",
        "dnis" : "aeiou",
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "requestedLanguageId" : "aeiou",
        "participantName" : "aeiou",
        "addressFrom" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QueueObservationQueryResponse> 
     */
    open class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: QueueObservationQuery) -> RequestBuilder<QueueObservationQueryResponse> {
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Generate a view export request
     
     - parameter body: (body) ReportingExportJobRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingExports(body: ReportingExportJobRequest, completion: @escaping ((_ data: ReportingExportJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingExportsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ReportingExportJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Generate a view export request
     
     - POST /api/v2/analytics/reporting/exports
     - This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "hasSummaryRow" : true,
  "downloadUrl" : "aeiou",
  "createdDateTime" : "2000-01-23T04:56:07.000+0000",
  "hasSplitByMedia" : true,
  "locale" : "aeiou",
  "excludeEmptyRows" : true,
  "exportErrorMessagesType" : "aeiou",
  "enabled" : true,
  "modifiedDateTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "hasFormatDurations" : true,
  "period" : "aeiou",
  "read" : true,
  "selfUri" : "aeiou",
  "timeZone" : "aeiou",
  "csvDelimiter" : "aeiou",
  "filter" : {
    "sessionDnisList" : [ "aeiou" ],
    "transferred" : true,
    "surveyQuestionGroupScore" : "",
    "abandonDurationsMilliseconds" : [ "" ],
    "hasMedia" : true,
    "callbackNumberList" : [ "aeiou" ],
    "messageTypes" : [ "aeiou" ],
    "surveyPromoterScore" : "",
    "isSurveyed" : true,
    "transcriptLanguages" : [ "aeiou" ],
    "divisionIds" : [ "aeiou" ],
    "mos" : "",
    "surveyTotalScore" : "",
    "flowTypes" : [ "aeiou" ],
    "skillIds" : [ "aeiou" ],
    "evaluatorIds" : [ "aeiou" ],
    "evaluatedAgentIds" : [ "aeiou" ],
    "acdDurationsMilliseconds" : [ "" ],
    "flowEntryReasons" : [ "aeiou" ],
    "groupIds" : [ "aeiou" ],
    "participantPurposes" : [ "aeiou" ],
    "surveyFormIds" : [ "aeiou" ],
    "flowVersions" : [ "aeiou" ],
    "isEnded" : true,
    "abandoned" : true,
    "surveyScores" : [ "" ],
    "originatingDirections" : [ "aeiou" ],
    "filterUsersByTeamIds" : [ "aeiou" ],
    "isConsulted" : true,
    "transcripts" : [ {
      "contains" : [ "aeiou" ],
      "exactMatch" : [ "aeiou" ],
      "doesNotContain" : [ "aeiou" ]
    } ],
    "externalOrgIds" : [ "aeiou" ],
    "locationIds" : [ "aeiou" ],
    "languageIds" : [ "aeiou" ],
    "addressTos" : [ "aeiou" ],
    "addressFroms" : [ "aeiou" ],
    "hasJourneyActionMapId" : true,
    "filterQueuesByUserIds" : [ "aeiou" ],
    "contactIds" : [ "aeiou" ],
    "providerList" : [ "aeiou" ],
    "teamIds" : [ "aeiou" ],
    "remoteParticipants" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "conversationIds" : [ "aeiou" ],
    "surveyNpsScore" : "",
    "reportsTos" : [ "aeiou" ],
    "hasJourneyCustomerId" : true,
    "conversationProperties" : {
      "isAcd" : true,
      "isVoicemail" : true,
      "isCobrowse" : true,
      "isWaiting" : true,
      "filterWrapUpNotes" : true,
      "isPreferred" : true,
      "isMonitored" : true,
      "isActive" : true,
      "isScreenshare" : true,
      "matchAll" : true,
      "isFlagged" : true
    },
    "showFirstQueue" : true,
    "holdDurationsMilliseconds" : [ "" ],
    "isCampaign" : true,
    "promoterScores" : [ "" ],
    "sipCallIds" : [ "aeiou" ],
    "handleDurationsMilliseconds" : [ "" ],
    "flowOutcomeIds" : [ "aeiou" ],
    "flowOutcomeValues" : [ "aeiou" ],
    "flowDestinationTypes" : [ "aeiou" ],
    "callbackInterval" : "aeiou",
    "usedRoutingTypes" : [ "aeiou" ],
    "talkDurationsMilliseconds" : [ "" ],
    "durationsMilliseconds" : [ {
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "lte" : 1.3579000000000001069366817318950779736042022705078125,
      "gt" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "skillGroups" : [ "aeiou" ],
    "aniList" : [ "aeiou" ],
    "wrapUpCodes" : [ "aeiou" ],
    "isConsultTransferred" : true,
    "surveyFormContextIds" : [ "aeiou" ],
    "languageGroups" : [ "aeiou" ],
    "outboundCampaignIds" : [ "aeiou" ],
    "evaluationFormIds" : [ "aeiou" ],
    "evaluationScore" : "",
    "surveyStatuses" : [ "aeiou" ],
    "userIds" : [ "aeiou" ],
    "acwDurationsMilliseconds" : [ "" ],
    "isBlindTransferred" : true,
    "flowDisconnectReasons" : [ "aeiou" ],
    "outboundContactListIds" : [ "aeiou" ],
    "answered" : true,
    "requestedRoutingTypes" : [ "aeiou" ],
    "filterUsersByQueueIds" : [ "aeiou" ],
    "hasAgentAssistId" : true,
    "evaluationCriticalScore" : "",
    "queueIds" : [ "aeiou" ],
    "flowIds" : [ "aeiou" ],
    "mediaTypes" : [ "aeiou" ],
    "flowOutTypes" : [ "aeiou" ],
    "hasJourneyVisitId" : true,
    "roleIds" : [ "aeiou" ],
    "externalContactIds" : [ "aeiou" ],
    "dnisList" : [ "aeiou" ],
    "flowEntryTypes" : [ "aeiou" ]
  },
  "selectedColumns" : [ {
    "columnOrder" : 123,
    "columnName" : "aeiou"
  } ],
  "emailStatuses" : {
    "key" : "aeiou"
  },
  "emailErrorDescription" : "aeiou",
  "percentageComplete" : 1.3579000000000001069366817318950779736042022705078125,
  "hasSplitFilters" : true,
  "name" : "aeiou",
  "viewType" : "aeiou",
  "interval" : "aeiou",
  "runId" : "aeiou",
  "hasCustomParticipantAttributes" : true,
  "recipientEmails" : [ "aeiou" ],
  "exportFormat" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) ReportingExportJobRequest 

     - returns: RequestBuilder<ReportingExportJobResponse> 
     */
    open class func postAnalyticsReportingExportsWithRequestBuilder(body: ReportingExportJobRequest) -> RequestBuilder<ReportingExportJobResponse> {
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Place a scheduled report immediately into the reporting queue
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingScheduleRunreport(scheduleId: String, completion: @escaping ((_ data: RunNowResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingScheduleRunreportWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<RunNowResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Place a scheduled report immediately into the reporting queue
     
     - POST /api/v2/analytics/reporting/schedules/{scheduleId}/runreport
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<RunNowResponse> 
     */
    open class func postAnalyticsReportingScheduleRunreportWithRequestBuilder(scheduleId: String) -> RequestBuilder<RunNowResponse> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/runreport"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunNowResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a scheduled report job
     
     - parameter body: (body) ReportSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingSchedules(body: ReportSchedule, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingSchedulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a scheduled report job
     
     - POST /api/v2/analytics/reporting/schedules
     - Create a scheduled report job.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "aeiou",
  "reportId" : "aeiou",
  "lastRun" : {
    "reportId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "errorMessage" : "aeiou",
    "runDurationMsec" : 123456789,
    "reportFormat" : "aeiou",
    "id" : "aeiou",
    "runTime" : "2000-01-23T04:56:07.000+0000",
    "reportUrl" : "aeiou",
    "scheduleUri" : "aeiou",
    "runStatus" : "aeiou"
  },
  "selfUri" : "aeiou",
  "nextFireTime" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "reportFormat" : "aeiou",
  "locale" : "aeiou",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "timePeriod" : "aeiou",
  "interval" : "aeiou",
  "id" : "aeiou",
  "parameters" : {
    "key" : "{}"
  }
}}]
     
     - parameter body: (body) ReportSchedule 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func postAnalyticsReportingSchedulesWithRequestBuilder(body: ReportSchedule) -> RequestBuilder<ReportSchedule> {
        let path = "/api/v2/analytics/reporting/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for survey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsSurveysAggregatesQuery(body: SurveyAggregationQuery, completion: @escaping ((_ data: SurveyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for survey aggregates
     
     - POST /api/v2/analytics/surveys/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<SurveyAggregateQueryResponse> 
     */
    open class func postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: SurveyAggregationQuery) -> RequestBuilder<SurveyAggregateQueryResponse> {
        let path = "/api/v2/analytics/surveys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for transcript aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsTranscriptsAggregatesQuery(body: TranscriptAggregationQuery, completion: @escaping ((_ data: TranscriptAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for transcript aggregates
     
     - POST /api/v2/analytics/transcripts/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<TranscriptAggregateQueryResponse> 
     */
    open class func postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: TranscriptAggregationQuery) -> RequestBuilder<TranscriptAggregateQueryResponse> {
        let path = "/api/v2/analytics/transcripts/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersAggregatesQuery(body: UserAggregationQuery, completion: @escaping ((_ data: UserAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user aggregates
     
     - POST /api/v2/analytics/users/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "aeiou" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserAggregateQueryResponse> 
     */
    open class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: UserAggregationQuery) -> RequestBuilder<UserAggregateQueryResponse> {
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsJobs(body: AsyncUserDetailsQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user details asynchronously
     
     - POST /api/v2/analytics/users/details/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsJobsWithRequestBuilder(body: AsyncUserDetailsQuery) -> RequestBuilder<AsyncQueryResponse> {
        let path = "/api/v2/analytics/users/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsQuery(body: UserDetailsQuery, completion: @escaping ((_ data: AnalyticsUserDetailsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user details
     
     - POST /api/v2/analytics/users/details/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "organizationPresenceId" : "aeiou"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "routingStatus" : "aeiou"
    } ],
    "userId" : "aeiou"
  } ],
  "aggregations" : [ {
    "metric" : "aeiou",
    "count" : 123456789,
    "type" : "aeiou",
    "dimension" : "aeiou",
    "results" : [ {
      "count" : 123456789,
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "value" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsUserDetailsQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsQueryWithRequestBuilder(body: UserDetailsQuery) -> RequestBuilder<AnalyticsUserDetailsQueryResponse> {
        let path = "/api/v2/analytics/users/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for user observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersObservationsQuery(body: UserObservationQuery, completion: @escaping ((_ data: UserObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for user observations
     
     - POST /api/v2/analytics/users/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "countPositive" : 123456789,
        "countNegative" : 123456789,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou",
      "observations" : [ {
        "usedRouting" : "aeiou",
        "routingPriority" : 123456789,
        "conversationId" : "aeiou",
        "convertedTo" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "sessionId" : "aeiou",
        "userId" : "aeiou",
        "addressTo" : "aeiou",
        "observationDate" : "2000-01-23T04:56:07.000+0000",
        "teamId" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "convertedFrom" : "aeiou",
        "dnis" : "aeiou",
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "requestedLanguageId" : "aeiou",
        "participantName" : "aeiou",
        "addressFrom" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserObservationQueryResponse> 
     */
    open class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body: UserObservationQuery) -> RequestBuilder<UserObservationQueryResponse> {
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter body: (body) ReportSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAnalyticsReportingSchedule(scheduleId: String, body: ReportSchedule, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = putAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId, body: body)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a scheduled report job.
     
     - PUT /api/v2/analytics/reporting/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "aeiou",
  "reportId" : "aeiou",
  "lastRun" : {
    "reportId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "errorMessage" : "aeiou",
    "runDurationMsec" : 123456789,
    "reportFormat" : "aeiou",
    "id" : "aeiou",
    "runTime" : "2000-01-23T04:56:07.000+0000",
    "reportUrl" : "aeiou",
    "scheduleUri" : "aeiou",
    "runStatus" : "aeiou"
  },
  "selfUri" : "aeiou",
  "nextFireTime" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "reportFormat" : "aeiou",
  "locale" : "aeiou",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "timePeriod" : "aeiou",
  "interval" : "aeiou",
  "id" : "aeiou",
  "parameters" : {
    "key" : "{}"
  }
}}]
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter body: (body) ReportSchedule 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func putAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String, body: ReportSchedule) -> RequestBuilder<ReportSchedule> {
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
