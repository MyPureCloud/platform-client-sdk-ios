//
// KnowledgeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class KnowledgeAPI {
    
    
    
    /**
     
     Delete knowledge base
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteKnowledgeKnowledgebase(knowledgeBaseId: String, completion: @escaping ((_ data: KnowledgeBase?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: knowledgeBaseId)
        requestBuilder.execute { (response: Response<KnowledgeBase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete knowledge base
     
     - DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "faqCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "coreLanguage" : "en-us",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "articleCount" : 123,
  "id" : "aeiou",
  "published" : true
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 

     - returns: RequestBuilder<KnowledgeBase> 
     */
    open class func deleteKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: String) -> RequestBuilder<KnowledgeBase> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeBase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_deleteKnowledgeKnowledgebaseLanguageCategory: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    /**
     
     Delete category
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteKnowledgeKnowledgebaseLanguageCategory(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_deleteKnowledgeKnowledgebaseLanguageCategory, completion: @escaping ((_ data: KnowledgeCategory?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode)
        requestBuilder.execute { (response: Response<KnowledgeCategory>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete category
     
     - DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "languageCode" : "aeiou"
}}]
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 

     - returns: RequestBuilder<KnowledgeCategory> 
     */
    open class func deleteKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_deleteKnowledgeKnowledgebaseLanguageCategory) -> RequestBuilder<KnowledgeCategory> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}"
        let categoryIdPreEscape = "\(categoryId)"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeCategory>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocument: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    /**
     
     Delete document
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteKnowledgeKnowledgebaseLanguageDocument(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocument, completion: @escaping ((_ data: KnowledgeDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode)
        requestBuilder.execute { (response: Response<KnowledgeDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete document
     
     - DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalUrl" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "knowledgeBase" : "",
  "faq" : {
    "question" : "aeiou",
    "answer" : "aeiou",
    "alternatives" : [ "aeiou" ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "categories" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  } ],
  "languageCode" : "aeiou",
  "type" : "aeiou",
  "article" : {
    "alternatives" : [ "aeiou" ],
    "title" : "aeiou",
    "content" : {
      "body" : {
        "locationUrl" : "aeiou"
      }
    }
  }
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 

     - returns: RequestBuilder<KnowledgeDocument> 
     */
    open class func deleteKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocument) -> RequestBuilder<KnowledgeDocument> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get knowledge base
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebase(knowledgeBaseId: String, completion: @escaping ((_ data: KnowledgeBase?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: knowledgeBaseId)
        requestBuilder.execute { (response: Response<KnowledgeBase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get knowledge base
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "faqCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "coreLanguage" : "en-us",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "articleCount" : 123,
  "id" : "aeiou",
  "published" : true
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 

     - returns: RequestBuilder<KnowledgeBase> 
     */
    open class func getKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: String) -> RequestBuilder<KnowledgeBase> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeBase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageCategories: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get categories
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter name: (query) Filter to return the categories that starts with the given category name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageCategories, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, name: String? = nil, completion: @escaping ((_ data: CategoryListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageCategoriesWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<CategoryListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get categories
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter name: (query) Filter to return the categories that starts with the given category name. (optional)

     - returns: RequestBuilder<CategoryListing> 
     */
    open class func getKnowledgeKnowledgebaseLanguageCategoriesWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageCategories, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, name: String? = nil) -> RequestBuilder<CategoryListing> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "before": before, 
            
            "after": after, 
            
            "limit": limit, 
            
            "pageSize": pageSize, 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<CategoryListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageCategory: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    /**
     
     Get category
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageCategory(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageCategory, completion: @escaping ((_ data: KnowledgeExtendedCategory?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode)
        requestBuilder.execute { (response: Response<KnowledgeExtendedCategory>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get category
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "parent" : {
    "knowledgeBase" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  },
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "children" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "languageCode" : "aeiou"
}}]
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 

     - returns: RequestBuilder<KnowledgeExtendedCategory> 
     */
    open class func getKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageCategory) -> RequestBuilder<KnowledgeExtendedCategory> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}"
        let categoryIdPreEscape = "\(categoryId)"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeExtendedCategory>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageDocument: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    /**
     
     Get document
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageDocument(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageDocument, completion: @escaping ((_ data: KnowledgeDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode)
        requestBuilder.execute { (response: Response<KnowledgeDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get document
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalUrl" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "knowledgeBase" : "",
  "faq" : {
    "question" : "aeiou",
    "answer" : "aeiou",
    "alternatives" : [ "aeiou" ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "categories" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  } ],
  "languageCode" : "aeiou",
  "type" : "aeiou",
  "article" : {
    "alternatives" : [ "aeiou" ],
    "title" : "aeiou",
    "content" : {
      "body" : {
        "locationUrl" : "aeiou"
      }
    }
  }
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 

     - returns: RequestBuilder<KnowledgeDocument> 
     */
    open class func getKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageDocument) -> RequestBuilder<KnowledgeDocument> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageDocuments: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get documents
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter categories: (query) Filter by categories ids, comma separated values expected. (optional)
     - parameter title: (query) Filter by document title. (optional)
     - parameter documentIds: (query) Comma-separated list of document identifiers to fetch by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageDocuments, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, categories: String? = nil, title: String? = nil, documentIds: [String]? = nil, completion: @escaping ((_ data: DocumentListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, categories: categories, title: title, documentIds: documentIds)
        requestBuilder.execute { (response: Response<DocumentListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get documents
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "externalUrl" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "knowledgeBase" : "",
    "faq" : {
      "question" : "aeiou",
      "answer" : "aeiou",
      "alternatives" : [ "aeiou" ]
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "categories" : [ {
      "knowledgeBase" : {
        "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "faqCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "coreLanguage" : "en-us",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "articleCount" : 123,
        "id" : "aeiou",
        "published" : true
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "languageCode" : "aeiou"
    } ],
    "languageCode" : "aeiou",
    "type" : "aeiou",
    "article" : {
      "alternatives" : [ "aeiou" ],
      "title" : "aeiou",
      "content" : {
        "body" : {
          "locationUrl" : "aeiou"
        }
      }
    }
  } ],
  "selfUri" : "aeiou",
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter categories: (query) Filter by categories ids, comma separated values expected. (optional)
     - parameter title: (query) Filter by document title. (optional)
     - parameter documentIds: (query) Comma-separated list of document identifiers to fetch by. (optional)

     - returns: RequestBuilder<DocumentListing> 
     */
    open class func getKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageDocuments, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, categories: String? = nil, title: String? = nil, documentIds: [String]? = nil) -> RequestBuilder<DocumentListing> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "before": before, 
            
            "after": after, 
            
            "limit": limit, 
            
            "pageSize": pageSize, 
            
            "categories": categories, 
            
            "title": title, 
            
            "documentIds": documentIds
            
        ])

        let requestBuilder: RequestBuilder<DocumentListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageTraining: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Get training detail
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter trainingId: (path) Training ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageTraining, trainingId: String, completion: @escaping ((_ data: KnowledgeTraining?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageTrainingWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, trainingId: trainingId)
        requestBuilder.execute { (response: Response<KnowledgeTraining>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get training detail
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateTriggered" : "2000-01-23T04:56:07.000+0000",
  "dateCompleted" : "2000-01-23T04:56:07.000+0000",
  "datePromoted" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "id" : "aeiou",
  "languageCode" : "aeiou",
  "knowledgeDocumentsState" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter trainingId: (path) Training ID 

     - returns: RequestBuilder<KnowledgeTraining> 
     */
    open class func getKnowledgeKnowledgebaseLanguageTrainingWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageTraining, trainingId: String) -> RequestBuilder<KnowledgeTraining> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let trainingIdPreEscape = "\(trainingId)"
        let trainingIdPostEscape = trainingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trainingId}", with: trainingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeTraining>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_getKnowledgeKnowledgebaseLanguageTrainings: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum KnowledgeDocumentsState_getKnowledgeKnowledgebaseLanguageTrainings: String { 
        case draft = "Draft"
        case active = "Active"
        case discarded = "Discarded"
        case archived = "Archived"
    }

    
    
    /**
     
     Get all trainings information for a knowledgebase
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter knowledgeDocumentsState: (query) Return the training with the specified state of the trained documents. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageTrainings, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, knowledgeDocumentsState: KnowledgeDocumentsState_getKnowledgeKnowledgebaseLanguageTrainings? = nil, completion: @escaping ((_ data: TrainingListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebaseLanguageTrainingsWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, knowledgeDocumentsState: knowledgeDocumentsState)
        requestBuilder.execute { (response: Response<TrainingListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all trainings information for a knowledgebase
     
     - GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateTriggered" : "2000-01-23T04:56:07.000+0000",
    "dateCompleted" : "2000-01-23T04:56:07.000+0000",
    "datePromoted" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "errorMessage" : "aeiou",
    "id" : "aeiou",
    "languageCode" : "aeiou",
    "knowledgeDocumentsState" : "aeiou",
    "status" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter knowledgeDocumentsState: (query) Return the training with the specified state of the trained documents. (optional)

     - returns: RequestBuilder<TrainingListing> 
     */
    open class func getKnowledgeKnowledgebaseLanguageTrainingsWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_getKnowledgeKnowledgebaseLanguageTrainings, before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, knowledgeDocumentsState: KnowledgeDocumentsState_getKnowledgeKnowledgebaseLanguageTrainings? = nil) -> RequestBuilder<TrainingListing> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "before": before, 
            
            "after": after, 
            
            "limit": limit, 
            
            "pageSize": pageSize, 
            
            "knowledgeDocumentsState": knowledgeDocumentsState?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<TrainingListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum CoreLanguage_getKnowledgeKnowledgebases: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Get knowledge bases
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter name: (query) Filter by Name. (optional)
     - parameter coreLanguage: (query) Filter by core language. (optional)
     - parameter published: (query) Filter by published status. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKnowledgeKnowledgebases(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, name: String? = nil, coreLanguage: CoreLanguage_getKnowledgeKnowledgebases? = nil, published: Bool? = nil, completion: @escaping ((_ data: KnowledgeBaseListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getKnowledgeKnowledgebasesWithRequestBuilder(before: before, after: after, limit: limit, pageSize: pageSize, name: name, coreLanguage: coreLanguage, published: published)
        requestBuilder.execute { (response: Response<KnowledgeBaseListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get knowledge bases
     
     - GET /api/v2/knowledge/knowledgebases
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  } ],
  "selfUri" : "aeiou",
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter name: (query) Filter by Name. (optional)
     - parameter coreLanguage: (query) Filter by core language. (optional)
     - parameter published: (query) Filter by published status. (optional)

     - returns: RequestBuilder<KnowledgeBaseListing> 
     */
    open class func getKnowledgeKnowledgebasesWithRequestBuilder(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, name: String? = nil, coreLanguage: CoreLanguage_getKnowledgeKnowledgebases? = nil, published: Bool? = nil) -> RequestBuilder<KnowledgeBaseListing> {
        let path = "/api/v2/knowledge/knowledgebases"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "before": before, 
            
            "after": after, 
            
            "limit": limit, 
            
            "pageSize": pageSize, 
            
            "name": name, 
            
            "coreLanguage": coreLanguage?.rawValue, 
            
            "published": published
            
        ])

        let requestBuilder: RequestBuilder<KnowledgeBaseListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update knowledge base
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchKnowledgeKnowledgebase(knowledgeBaseId: String, body: KnowledgeBase, completion: @escaping ((_ data: KnowledgeBase?,_ error: Error?) -> Void)) {
        let requestBuilder = patchKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, body: body)
        requestBuilder.execute { (response: Response<KnowledgeBase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update knowledge base
     
     - PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "faqCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "coreLanguage" : "en-us",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "articleCount" : 123,
  "id" : "aeiou",
  "published" : true
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeBase> 
     */
    open class func patchKnowledgeKnowledgebaseWithRequestBuilder(knowledgeBaseId: String, body: KnowledgeBase) -> RequestBuilder<KnowledgeBase> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeBase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_patchKnowledgeKnowledgebaseLanguageCategory: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Update category
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchKnowledgeKnowledgebaseLanguageCategory(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageCategory, body: KnowledgeCategoryRequest, completion: @escaping ((_ data: KnowledgeExtendedCategory?,_ error: Error?) -> Void)) {
        let requestBuilder = patchKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body)
        requestBuilder.execute { (response: Response<KnowledgeExtendedCategory>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update category
     
     - PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "parent" : {
    "knowledgeBase" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  },
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "children" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "languageCode" : "aeiou"
}}]
     
     - parameter categoryId: (path) Category ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeExtendedCategory> 
     */
    open class func patchKnowledgeKnowledgebaseLanguageCategoryWithRequestBuilder(categoryId: String, knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageCategory, body: KnowledgeCategoryRequest) -> RequestBuilder<KnowledgeExtendedCategory> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}"
        let categoryIdPreEscape = "\(categoryId)"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeExtendedCategory>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum LanguageCode_patchKnowledgeKnowledgebaseLanguageDocument: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Update document
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchKnowledgeKnowledgebaseLanguageDocument(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageDocument, body: KnowledgeDocumentRequest, completion: @escaping ((_ data: KnowledgeDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = patchKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body)
        requestBuilder.execute { (response: Response<KnowledgeDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update document
     
     - PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalUrl" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "knowledgeBase" : "",
  "faq" : {
    "question" : "aeiou",
    "answer" : "aeiou",
    "alternatives" : [ "aeiou" ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "categories" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  } ],
  "languageCode" : "aeiou",
  "type" : "aeiou",
  "article" : {
    "alternatives" : [ "aeiou" ],
    "title" : "aeiou",
    "content" : {
      "body" : {
        "locationUrl" : "aeiou"
      }
    }
  }
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeDocument> 
     */
    open class func patchKnowledgeKnowledgebaseLanguageDocumentWithRequestBuilder(documentId: String, knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageDocument, body: KnowledgeDocumentRequest) -> RequestBuilder<KnowledgeDocument> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_patchKnowledgeKnowledgebaseLanguageDocuments: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Update documents collection
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageDocuments, body: [KnowledgeDocumentBulkRequest], completion: @escaping ((_ data: DocumentListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body)
        requestBuilder.execute { (response: Response<DocumentListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update documents collection
     
     - PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "externalUrl" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "knowledgeBase" : "",
    "faq" : {
      "question" : "aeiou",
      "answer" : "aeiou",
      "alternatives" : [ "aeiou" ]
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "categories" : [ {
      "knowledgeBase" : {
        "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "faqCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "coreLanguage" : "en-us",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "articleCount" : 123,
        "id" : "aeiou",
        "published" : true
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "languageCode" : "aeiou"
    } ],
    "languageCode" : "aeiou",
    "type" : "aeiou",
    "article" : {
      "alternatives" : [ "aeiou" ],
      "title" : "aeiou",
      "content" : {
        "body" : {
          "locationUrl" : "aeiou"
        }
      }
    }
  } ],
  "selfUri" : "aeiou",
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  

     - returns: RequestBuilder<DocumentListing> 
     */
    open class func patchKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_patchKnowledgeKnowledgebaseLanguageDocuments, body: [KnowledgeDocumentBulkRequest]) -> RequestBuilder<DocumentListing> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DocumentListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_postKnowledgeKnowledgebaseLanguageCategories: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Create new category
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageCategories, body: KnowledgeCategoryRequest, completion: @escaping ((_ data: KnowledgeExtendedCategory?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseLanguageCategoriesWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body)
        requestBuilder.execute { (response: Response<KnowledgeExtendedCategory>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create new category
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "parent" : {
    "knowledgeBase" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  },
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "children" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "languageCode" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeExtendedCategory> 
     */
    open class func postKnowledgeKnowledgebaseLanguageCategoriesWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageCategories, body: KnowledgeCategoryRequest) -> RequestBuilder<KnowledgeExtendedCategory> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeExtendedCategory>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_postKnowledgeKnowledgebaseLanguageDocuments: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Create document
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageDocuments, body: KnowledgeDocumentRequest, completion: @escaping ((_ data: KnowledgeDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body)
        requestBuilder.execute { (response: Response<KnowledgeDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create document
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalUrl" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "knowledgeBase" : "",
  "faq" : {
    "question" : "aeiou",
    "answer" : "aeiou",
    "alternatives" : [ "aeiou" ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "categories" : [ {
    "knowledgeBase" : {
      "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "faqCount" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "coreLanguage" : "en-us",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "articleCount" : 123,
      "id" : "aeiou",
      "published" : true
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "languageCode" : "aeiou"
  } ],
  "languageCode" : "aeiou",
  "type" : "aeiou",
  "article" : {
    "alternatives" : [ "aeiou" ],
    "title" : "aeiou",
    "content" : {
      "body" : {
        "locationUrl" : "aeiou"
      }
    }
  }
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeDocument> 
     */
    open class func postKnowledgeKnowledgebaseLanguageDocumentsWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageDocuments, body: KnowledgeDocumentRequest) -> RequestBuilder<KnowledgeDocument> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_postKnowledgeKnowledgebaseLanguageTrainingPromote: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    
    
    /**
     
     Promote trained documents from draft state to active.
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter trainingId: (path) Training ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageTrainingPromote, trainingId: String, completion: @escaping ((_ data: KnowledgeTraining?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseLanguageTrainingPromoteWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, trainingId: trainingId)
        requestBuilder.execute { (response: Response<KnowledgeTraining>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Promote trained documents from draft state to active.
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateTriggered" : "2000-01-23T04:56:07.000+0000",
  "dateCompleted" : "2000-01-23T04:56:07.000+0000",
  "datePromoted" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "id" : "aeiou",
  "languageCode" : "aeiou",
  "knowledgeDocumentsState" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter trainingId: (path) Training ID 

     - returns: RequestBuilder<KnowledgeTraining> 
     */
    open class func postKnowledgeKnowledgebaseLanguageTrainingPromoteWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageTrainingPromote, trainingId: String) -> RequestBuilder<KnowledgeTraining> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let trainingIdPreEscape = "\(trainingId)"
        let trainingIdPostEscape = trainingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trainingId}", with: trainingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeTraining>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    public enum LanguageCode_postKnowledgeKnowledgebaseLanguageTrainings: String { 
        case enUs = "en-US"
        case deDe = "de-DE"
    }

    
    
    /**
     
     Trigger training
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageTrainings, completion: @escaping ((_ data: KnowledgeTraining?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseLanguageTrainingsWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode)
        requestBuilder.execute { (response: Response<KnowledgeTraining>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Trigger training
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "knowledgeBase" : {
    "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "faqCount" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "coreLanguage" : "en-us",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "articleCount" : 123,
    "id" : "aeiou",
    "published" : true
  },
  "dateTriggered" : "2000-01-23T04:56:07.000+0000",
  "dateCompleted" : "2000-01-23T04:56:07.000+0000",
  "datePromoted" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "id" : "aeiou",
  "languageCode" : "aeiou",
  "knowledgeDocumentsState" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter languageCode: (path) Language code, format: iso2-LOCALE 

     - returns: RequestBuilder<KnowledgeTraining> 
     */
    open class func postKnowledgeKnowledgebaseLanguageTrainingsWithRequestBuilder(knowledgeBaseId: String, languageCode: LanguageCode_postKnowledgeKnowledgebaseLanguageTrainings) -> RequestBuilder<KnowledgeTraining> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let languageCodePreEscape = "\(languageCode.rawValue)"
        let languageCodePostEscape = languageCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageCode}", with: languageCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeTraining>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search Documents
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseSearch(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil, completion: @escaping ((_ data: KnowledgeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, body: body)
        requestBuilder.execute { (response: Response<KnowledgeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search Documents
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "pageCount" : 123,
  "pageNumber" : 123,
  "searchId" : "aeiou",
  "pageSize" : 123,
  "results" : [ {
    "externalUrl" : "aeiou",
    "confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "languageCode" : "aeiou",
    "type" : "aeiou",
    "article" : {
      "alternatives" : [ "aeiou" ],
      "title" : "aeiou",
      "content" : {
        "body" : {
          "locationUrl" : "aeiou"
        }
      }
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "knowledgeBase" : "",
    "faq" : {
      "question" : "aeiou",
      "answer" : "aeiou",
      "alternatives" : [ "aeiou" ]
    },
    "name" : "aeiou",
    "id" : "aeiou",
    "categories" : [ {
      "knowledgeBase" : {
        "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "faqCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "coreLanguage" : "en-us",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "articleCount" : 123,
        "id" : "aeiou",
        "published" : true
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "languageCode" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<KnowledgeSearchResponse> 
     */
    open class func postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil) -> RequestBuilder<KnowledgeSearchResponse> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create new knowledge base
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebases(body: KnowledgeBase, completion: @escaping ((_ data: KnowledgeBase?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebasesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<KnowledgeBase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create new knowledge base
     
     - POST /api/v2/knowledge/knowledgebases
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "faqCount" : 123,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "coreLanguage" : "en-us",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "articleCount" : 123,
  "id" : "aeiou",
  "published" : true
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<KnowledgeBase> 
     */
    open class func postKnowledgeKnowledgebasesWithRequestBuilder(body: KnowledgeBase) -> RequestBuilder<KnowledgeBase> {
        let path = "/api/v2/knowledge/knowledgebases"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeBase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
