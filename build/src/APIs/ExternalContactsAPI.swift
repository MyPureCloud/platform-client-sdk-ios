//
// ExternalContactsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ExternalContactsAPI {
    
    
    
    /**
     
     Delete an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsContact(contactId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsContactWithRequestBuilder(contactId: contactId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an external contact
     
     - DELETE /api/v2/externalcontacts/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactId: (path) ExternalContact ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsContactWithRequestBuilder(contactId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsContactNote(contactId: String, noteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a note for an external contact
     
     - DELETE /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganization(externalOrganizationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an external organization
     
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a note for an external organization
     
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Unlink the Trustor for this External Organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganizationTrustor(externalOrganizationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationTrustorWithRequestBuilder(externalOrganizationId: externalOrganizationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Unlink the Trustor for this External Organization
     
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsOrganizationTrustorWithRequestBuilder(externalOrganizationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsRelationship(relationshipId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a relationship
     
     - DELETE /api/v2/externalcontacts/relationships/{relationshipId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter relationshipId: (path) Relationship Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsRelationshipWithRequestBuilder(relationshipId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getExternalcontactsContact: String { 
        case externalorganization = "externalOrganization"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Fetch an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContact(contactId: String, expand: [String]? = nil, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactWithRequestBuilder(contactId: contactId, expand: expand)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch an external contact
     
     - GET /api/v2/externalcontacts/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "workEmail" : "aeiou",
  "title" : "aeiou",
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "personalEmail" : "aeiou",
  "externalSystemUrl" : "aeiou",
  "id" : "aeiou",
  "otherEmail" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "homePhone" : "",
  "facebookId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "scopedId" : "aeiou"
    } ]
  },
  "selfUri" : "aeiou",
  "lineId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "userId" : "aeiou"
    } ]
  },
  "externalOrganization" : {
    "address" : "",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : "",
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : "",
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : "",
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ "" ],
          "biography" : {
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : "",
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  },
  "firstName" : "aeiou",
  "otherPhone" : "",
  "whatsAppId" : {
    "phoneNumber" : "",
    "displayName" : "aeiou"
  },
  "externalDataSources" : [ "" ],
  "middleName" : "aeiou",
  "workPhone" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "salutation" : "aeiou",
  "cellPhone" : "",
  "surveyOptOut" : true
}}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func getExternalcontactsContactWithRequestBuilder(contactId: String, expand: [String]? = nil) -> RequestBuilder<ExternalContact> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getExternalcontactsContactNote: String { 
        case author = "author"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Fetch a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactNote(contactId: String, noteId: String, expand: [String]? = nil, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId, expand: expand)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a note for an external contact
     
     - GET /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Note> 
     */
    open class func getExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String, expand: [String]? = nil) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsContactNotes: String { 
        case author = "author"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     List notes for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactNotes(contactId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: NoteListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactNotesWithRequestBuilder(contactId: contactId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<NoteListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List notes for an external contact
     
     - GET /api/v2/externalcontacts/contacts/{contactId}/notes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "noteText" : "aeiou",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<NoteListing> 
     */
    open class func getExternalcontactsContactNotesWithRequestBuilder(contactId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<NoteListing> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<NoteListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsContacts: String { 
        case externalorganization = "externalOrganization"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Search for external contacts
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContacts(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: ContactListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<ContactListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search for external contacts
     
     - GET /api/v2/externalcontacts/contacts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "lastName" : "aeiou",
    "workEmail" : "aeiou",
    "title" : "aeiou",
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "personalEmail" : "aeiou",
    "externalSystemUrl" : "aeiou",
    "id" : "aeiou",
    "otherEmail" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000",
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "homePhone" : "",
    "facebookId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "scopedId" : "aeiou"
      } ]
    },
    "selfUri" : "aeiou",
    "lineId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "userId" : "aeiou"
      } ]
    },
    "externalOrganization" : {
      "address" : "",
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "companyType" : "aeiou",
      "selfUri" : "aeiou",
      "industry" : "aeiou",
      "employeeCount" : 123456789,
      "tickers" : [ {
        "symbol" : "aeiou",
        "exchange" : "aeiou"
      } ],
      "twitterId" : "",
      "primaryContactId" : "aeiou",
      "tags" : [ "aeiou" ],
      "revenue" : 123456789,
      "phoneNumber" : "",
      "externalSystemUrl" : "aeiou",
      "externalDataSources" : [ {
        "platform" : "aeiou",
        "url" : "aeiou"
      } ],
      "name" : "aeiou",
      "faxNumber" : "",
      "trustor" : {
        "authorization" : {
          "permissions" : [ "aeiou" ]
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : "",
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : "",
          "skills" : [ "" ],
          "station" : "",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : "",
          "email" : "aeiou",
          "images" : [ "" ],
          "manager" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : "",
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ "" ],
            "biography" : {
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "employerInfo" : "",
          "languages" : [ "" ],
          "conversationSummary" : "",
          "groups" : [ "" ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : "",
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : "",
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "organization" : {
            "defaultCountryCode" : "aeiou",
            "selfUri" : "aeiou",
            "thirdPartyURI" : "aeiou",
            "version" : 123,
            "thirdPartyOrgName" : "aeiou",
            "features" : {
              "key" : true
            },
            "defaultLanguage" : "aeiou",
            "defaultSiteId" : "aeiou",
            "supportURI" : "aeiou",
            "domain" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "voicemailEnabled" : true
          },
          "name" : "aeiou",
          "locations" : [ "" ],
          "username" : "aeiou",
          "geolocation" : ""
        },
        "organization" : "",
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "enabled" : true
      },
      "websites" : [ "aeiou" ],
      "id" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000"
    },
    "firstName" : "aeiou",
    "otherPhone" : "",
    "whatsAppId" : {
      "phoneNumber" : "",
      "displayName" : "aeiou"
    },
    "externalDataSources" : [ "" ],
    "middleName" : "aeiou",
    "workPhone" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "salutation" : "aeiou",
    "cellPhone" : "",
    "surveyOptOut" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<ContactListing> 
     */
    open class func getExternalcontactsContactsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<ContactListing> {
        let path = "/api/v2/externalcontacts/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "q": q, 
            
            "sortOrder": sortOrder, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ContactListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getExternalcontactsOrganization: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    
    
    /**
     
     Fetch an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter expand: (query) which fields, if any, to expand (externalDataSources) (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganization(externalOrganizationId: String, expand: Expand_getExternalcontactsOrganization? = nil, includeTrustors: Bool? = nil, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId, expand: expand, includeTrustors: includeTrustors)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch an external organization
     
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "companyType" : "aeiou",
  "selfUri" : "aeiou",
  "industry" : "aeiou",
  "employeeCount" : 123456789,
  "tickers" : [ {
    "symbol" : "aeiou",
    "exchange" : "aeiou"
  } ],
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "primaryContactId" : "aeiou",
  "tags" : [ "aeiou" ],
  "revenue" : 123456789,
  "phoneNumber" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "externalSystemUrl" : "aeiou",
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "name" : "aeiou",
  "faxNumber" : "",
  "trustor" : {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  },
  "websites" : [ "aeiou" ],
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter expand: (query) which fields, if any, to expand (externalDataSources) (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func getExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String, expand: Expand_getExternalcontactsOrganization? = nil, includeTrustors: Bool? = nil) -> RequestBuilder<ExternalOrganization> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "includeTrustors": includeTrustors
            
        ])

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsOrganizationContacts: String { 
        case externalorganization = "externalOrganization"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Search for external contacts in an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationContacts(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: ContactListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationContactsWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<ContactListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search for external contacts in an external organization
     
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "lastName" : "aeiou",
    "workEmail" : "aeiou",
    "title" : "aeiou",
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "personalEmail" : "aeiou",
    "externalSystemUrl" : "aeiou",
    "id" : "aeiou",
    "otherEmail" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000",
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "homePhone" : "",
    "facebookId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "scopedId" : "aeiou"
      } ]
    },
    "selfUri" : "aeiou",
    "lineId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "userId" : "aeiou"
      } ]
    },
    "externalOrganization" : {
      "address" : "",
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "companyType" : "aeiou",
      "selfUri" : "aeiou",
      "industry" : "aeiou",
      "employeeCount" : 123456789,
      "tickers" : [ {
        "symbol" : "aeiou",
        "exchange" : "aeiou"
      } ],
      "twitterId" : "",
      "primaryContactId" : "aeiou",
      "tags" : [ "aeiou" ],
      "revenue" : 123456789,
      "phoneNumber" : "",
      "externalSystemUrl" : "aeiou",
      "externalDataSources" : [ {
        "platform" : "aeiou",
        "url" : "aeiou"
      } ],
      "name" : "aeiou",
      "faxNumber" : "",
      "trustor" : {
        "authorization" : {
          "permissions" : [ "aeiou" ]
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : "",
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : "",
          "skills" : [ "" ],
          "station" : "",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : "",
          "email" : "aeiou",
          "images" : [ "" ],
          "manager" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : "",
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ "" ],
            "biography" : {
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "employerInfo" : "",
          "languages" : [ "" ],
          "conversationSummary" : "",
          "groups" : [ "" ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : "",
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : "",
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "organization" : {
            "defaultCountryCode" : "aeiou",
            "selfUri" : "aeiou",
            "thirdPartyURI" : "aeiou",
            "version" : 123,
            "thirdPartyOrgName" : "aeiou",
            "features" : {
              "key" : true
            },
            "defaultLanguage" : "aeiou",
            "defaultSiteId" : "aeiou",
            "supportURI" : "aeiou",
            "domain" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "voicemailEnabled" : true
          },
          "name" : "aeiou",
          "locations" : [ "" ],
          "username" : "aeiou",
          "geolocation" : ""
        },
        "organization" : "",
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "enabled" : true
      },
      "websites" : [ "aeiou" ],
      "id" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000"
    },
    "firstName" : "aeiou",
    "otherPhone" : "",
    "whatsAppId" : {
      "phoneNumber" : "",
      "displayName" : "aeiou"
    },
    "externalDataSources" : [ "" ],
    "middleName" : "aeiou",
    "workPhone" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "salutation" : "aeiou",
    "cellPhone" : "",
    "surveyOptOut" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<ContactListing> 
     */
    open class func getExternalcontactsOrganizationContactsWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<ContactListing> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "q": q, 
            
            "sortOrder": sortOrder, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ContactListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getExternalcontactsOrganizationNote: String { 
        case author = "author"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Fetch a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, expand: [String]? = nil, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId, expand: expand)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a note for an external organization
     
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Note> 
     */
    open class func getExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String, expand: [String]? = nil) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsOrganizationNotes: String { 
        case author = "author"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     List notes for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationNotes(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: NoteListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<NoteListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List notes for an external organization
     
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "noteText" : "aeiou",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<NoteListing> 
     */
    open class func getExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<NoteListing> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<NoteListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsOrganizationRelationships: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    
    
    /**
     
     Fetch a relationship for an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationRelationships(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getExternalcontactsOrganizationRelationships? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: RelationshipListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationRelationshipsWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, expand: expand, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<RelationshipListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a relationship for an external organization
     
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "externalDataSources" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "relationship" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "externalOrganization" : {
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "companyType" : "aeiou",
      "selfUri" : "aeiou",
      "industry" : "aeiou",
      "employeeCount" : 123456789,
      "tickers" : [ {
        "symbol" : "aeiou",
        "exchange" : "aeiou"
      } ],
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "primaryContactId" : "aeiou",
      "tags" : [ "aeiou" ],
      "revenue" : 123456789,
      "phoneNumber" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "externalSystemUrl" : "aeiou",
      "externalDataSources" : [ {
        "platform" : "aeiou",
        "url" : "aeiou"
      } ],
      "name" : "aeiou",
      "faxNumber" : "",
      "trustor" : {
        "authorization" : {
          "permissions" : [ "aeiou" ]
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : "",
          "title" : "aeiou",
          "division" : "",
          "authorization" : "",
          "skills" : [ "" ],
          "station" : "",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : "",
          "email" : "aeiou",
          "images" : [ "" ],
          "manager" : "",
          "employerInfo" : "",
          "languages" : [ "" ],
          "conversationSummary" : "",
          "groups" : [ "" ],
          "primaryContactInfo" : [ "" ],
          "biography" : "",
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : "",
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : "",
          "organization" : {
            "defaultCountryCode" : "aeiou",
            "selfUri" : "aeiou",
            "thirdPartyURI" : "aeiou",
            "version" : 123,
            "thirdPartyOrgName" : "aeiou",
            "features" : {
              "key" : true
            },
            "defaultLanguage" : "aeiou",
            "defaultSiteId" : "aeiou",
            "supportURI" : "aeiou",
            "domain" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "voicemailEnabled" : true
          },
          "name" : "aeiou",
          "locations" : [ "" ],
          "username" : "aeiou",
          "geolocation" : ""
        },
        "organization" : "",
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "enabled" : true
      },
      "websites" : [ "aeiou" ],
      "id" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter sortOrder: (query) Sort order (optional)

     - returns: RequestBuilder<RelationshipListing> 
     */
    open class func getExternalcontactsOrganizationRelationshipsWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getExternalcontactsOrganizationRelationships? = nil, sortOrder: String? = nil) -> RequestBuilder<RelationshipListing> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "expand": expand?.rawValue, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<RelationshipListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum Expand_getExternalcontactsOrganizations: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    
    
    /**
     
     Search for external organizations
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) Search query (optional)
     - parameter trustorId: (query) Search for external organizations by trustorIds (limit 25). If supplied, the &#39;q&#39; parameters is ignored. Items are returned in the order requested (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizations(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, trustorId: [String]? = nil, sortOrder: String? = nil, expand: [String]? = nil, includeTrustors: Bool? = nil, completion: @escaping ((_ data: ExternalOrganizationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, q: q, trustorId: trustorId, sortOrder: sortOrder, expand: expand, includeTrustors: includeTrustors)
        requestBuilder.execute { (response: Response<ExternalOrganizationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search for external organizations
     
     - GET /api/v2/externalcontacts/organizations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : "",
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ "" ],
          "biography" : {
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : "",
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 20)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;= 1,000) (optional, default to 1)
     - parameter q: (query) Search query (optional)
     - parameter trustorId: (query) Search for external organizations by trustorIds (limit 25). If supplied, the &#39;q&#39; parameters is ignored. Items are returned in the order requested (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)

     - returns: RequestBuilder<ExternalOrganizationListing> 
     */
    open class func getExternalcontactsOrganizationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, trustorId: [String]? = nil, sortOrder: String? = nil, expand: [String]? = nil, includeTrustors: Bool? = nil) -> RequestBuilder<ExternalOrganizationListing> {
        let path = "/api/v2/externalcontacts/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "q": q, 
            
            "trustorId": trustorId, 
            
            "sortOrder": sortOrder, 
            
            "expand": expand, 
            
            "includeTrustors": includeTrustors
            
        ])

        let requestBuilder: RequestBuilder<ExternalOrganizationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getExternalcontactsRelationship: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Fetch a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsRelationship(relationshipId: String, expand: Expand_getExternalcontactsRelationship? = nil, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId, expand: expand)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a relationship
     
     - GET /api/v2/externalcontacts/relationships/{relationshipId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "relationship" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalOrganization" : {
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : "",
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : "",
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ "" ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  }
}}]
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Relationship> 
     */
    open class func getExternalcontactsRelationshipWithRequestBuilder(relationshipId: String, expand: Expand_getExternalcontactsRelationship? = nil) -> RequestBuilder<Relationship> {
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getExternalcontactsReversewhitepageslookup: String { 
        case contactsExternalorganization = "contacts.externalOrganization"
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     
     Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.
     
     - parameter lookupVal: (query) User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names) 
     - parameter expand: (query) which field, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsReversewhitepageslookup(lookupVal: String, expand: [String]? = nil, completion: @escaping ((_ data: ReverseWhitepagesLookupResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsReversewhitepageslookupWithRequestBuilder(lookupVal: lookupVal, expand: expand)
        requestBuilder.execute { (response: Response<ReverseWhitepagesLookupResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.
     
     - GET /api/v2/externalcontacts/reversewhitepageslookup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalOrganizations" : [ "" ],
  "contacts" : [ {
    "lastName" : "aeiou",
    "workEmail" : "aeiou",
    "title" : "aeiou",
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "personalEmail" : "aeiou",
    "externalSystemUrl" : "aeiou",
    "id" : "aeiou",
    "otherEmail" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000",
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "homePhone" : "",
    "facebookId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "scopedId" : "aeiou"
      } ]
    },
    "selfUri" : "aeiou",
    "lineId" : {
      "displayName" : "aeiou",
      "ids" : [ {
        "userId" : "aeiou"
      } ]
    },
    "externalOrganization" : {
      "address" : "",
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "companyType" : "aeiou",
      "selfUri" : "aeiou",
      "industry" : "aeiou",
      "employeeCount" : 123456789,
      "tickers" : [ {
        "symbol" : "aeiou",
        "exchange" : "aeiou"
      } ],
      "twitterId" : "",
      "primaryContactId" : "aeiou",
      "tags" : [ "aeiou" ],
      "revenue" : 123456789,
      "phoneNumber" : "",
      "externalSystemUrl" : "aeiou",
      "externalDataSources" : [ {
        "platform" : "aeiou",
        "url" : "aeiou"
      } ],
      "name" : "aeiou",
      "faxNumber" : "",
      "trustor" : {
        "authorization" : {
          "permissions" : [ "aeiou" ]
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : "",
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : "",
          "skills" : [ "" ],
          "station" : "",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : "",
          "email" : "aeiou",
          "images" : [ "" ],
          "manager" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : "",
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ "" ],
            "biography" : {
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "employerInfo" : "",
          "languages" : [ "" ],
          "conversationSummary" : "",
          "groups" : [ "" ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : "",
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : "",
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "organization" : {
            "defaultCountryCode" : "aeiou",
            "selfUri" : "aeiou",
            "thirdPartyURI" : "aeiou",
            "version" : 123,
            "thirdPartyOrgName" : "aeiou",
            "features" : {
              "key" : true
            },
            "defaultLanguage" : "aeiou",
            "defaultSiteId" : "aeiou",
            "supportURI" : "aeiou",
            "domain" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "voicemailEnabled" : true
          },
          "name" : "aeiou",
          "locations" : [ "" ],
          "username" : "aeiou",
          "geolocation" : ""
        },
        "organization" : "",
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "enabled" : true
      },
      "websites" : [ "aeiou" ],
      "id" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000"
    },
    "firstName" : "aeiou",
    "otherPhone" : "",
    "whatsAppId" : {
      "phoneNumber" : "",
      "displayName" : "aeiou"
    },
    "externalDataSources" : [ "" ],
    "middleName" : "aeiou",
    "workPhone" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "salutation" : "aeiou",
    "cellPhone" : "",
    "surveyOptOut" : true
  } ]
}}]
     
     - parameter lookupVal: (query) User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names) 
     - parameter expand: (query) which field, if any, to expand (optional)

     - returns: RequestBuilder<ReverseWhitepagesLookupResult> 
     */
    open class func getExternalcontactsReversewhitepageslookupWithRequestBuilder(lookupVal: String, expand: [String]? = nil) -> RequestBuilder<ReverseWhitepagesLookupResult> {
        let path = "/api/v2/externalcontacts/reversewhitepageslookup"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "lookupVal": lookupVal, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ReverseWhitepagesLookupResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContactNotes(contactId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactNotesWithRequestBuilder(contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a note for an external contact
     
     - POST /api/v2/externalcontacts/contacts/{contactId}/notes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<Note> 
     */
    open class func postExternalcontactsContactNotesWithRequestBuilder(contactId: String, body: Note) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an external contact
     
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContacts(body: ExternalContact, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an external contact
     
     - POST /api/v2/externalcontacts/contacts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "workEmail" : "aeiou",
  "title" : "aeiou",
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "personalEmail" : "aeiou",
  "externalSystemUrl" : "aeiou",
  "id" : "aeiou",
  "otherEmail" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "homePhone" : "",
  "facebookId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "scopedId" : "aeiou"
    } ]
  },
  "selfUri" : "aeiou",
  "lineId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "userId" : "aeiou"
    } ]
  },
  "externalOrganization" : {
    "address" : "",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : "",
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : "",
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : "",
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ "" ],
          "biography" : {
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : "",
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  },
  "firstName" : "aeiou",
  "otherPhone" : "",
  "whatsAppId" : {
    "phoneNumber" : "",
    "displayName" : "aeiou"
  },
  "externalDataSources" : [ "" ],
  "middleName" : "aeiou",
  "workPhone" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "salutation" : "aeiou",
  "cellPhone" : "",
  "surveyOptOut" : true
}}]
     
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func postExternalcontactsContactsWithRequestBuilder(body: ExternalContact) -> RequestBuilder<ExternalContact> {
        let path = "/api/v2/externalcontacts/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsOrganizationNotes(externalOrganizationId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: externalOrganizationId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a note for an external organization
     
     - POST /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<Note> 
     */
    open class func postExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: String, body: Note) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an external organization
     
     - parameter body: (body) ExternalOrganization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsOrganizations(body: ExternalOrganization, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsOrganizationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an external organization
     
     - POST /api/v2/externalcontacts/organizations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "companyType" : "aeiou",
  "selfUri" : "aeiou",
  "industry" : "aeiou",
  "employeeCount" : 123456789,
  "tickers" : [ {
    "symbol" : "aeiou",
    "exchange" : "aeiou"
  } ],
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "primaryContactId" : "aeiou",
  "tags" : [ "aeiou" ],
  "revenue" : 123456789,
  "phoneNumber" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "externalSystemUrl" : "aeiou",
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "name" : "aeiou",
  "faxNumber" : "",
  "trustor" : {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  },
  "websites" : [ "aeiou" ],
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) ExternalOrganization 

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func postExternalcontactsOrganizationsWithRequestBuilder(body: ExternalOrganization) -> RequestBuilder<ExternalOrganization> {
        let path = "/api/v2/externalcontacts/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a relationship
     
     - parameter body: (body) Relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsRelationships(body: Relationship, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsRelationshipsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a relationship
     
     - POST /api/v2/externalcontacts/relationships
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "relationship" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalOrganization" : {
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : "",
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : "",
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ "" ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  }
}}]
     
     - parameter body: (body) Relationship 

     - returns: RequestBuilder<Relationship> 
     */
    open class func postExternalcontactsRelationshipsWithRequestBuilder(body: Relationship) -> RequestBuilder<Relationship> {
        let path = "/api/v2/externalcontacts/relationships"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsContact(contactId: String, body: ExternalContact, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsContactWithRequestBuilder(contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an external contact
     
     - PUT /api/v2/externalcontacts/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastName" : "aeiou",
  "workEmail" : "aeiou",
  "title" : "aeiou",
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "personalEmail" : "aeiou",
  "externalSystemUrl" : "aeiou",
  "id" : "aeiou",
  "otherEmail" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000",
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "homePhone" : "",
  "facebookId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "scopedId" : "aeiou"
    } ]
  },
  "selfUri" : "aeiou",
  "lineId" : {
    "displayName" : "aeiou",
    "ids" : [ {
      "userId" : "aeiou"
    } ]
  },
  "externalOrganization" : {
    "address" : "",
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : "",
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : "",
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : "",
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ "" ],
          "biography" : {
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : "",
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  },
  "firstName" : "aeiou",
  "otherPhone" : "",
  "whatsAppId" : {
    "phoneNumber" : "",
    "displayName" : "aeiou"
  },
  "externalDataSources" : [ "" ],
  "middleName" : "aeiou",
  "workPhone" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "salutation" : "aeiou",
  "cellPhone" : "",
  "surveyOptOut" : true
}}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func putExternalcontactsContactWithRequestBuilder(contactId: String, body: ExternalContact) -> RequestBuilder<ExternalContact> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsContactNote(contactId: String, noteId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a note for an external contact
     
     - PUT /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 

     - returns: RequestBuilder<Note> 
     */
    open class func putExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String, body: Note) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Associate an external contact with a conversation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) ConversationAssociation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsConversation(conversationId: String, body: ConversationAssociation, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsConversationWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Associate an external contact with a conversation
     
     - PUT /api/v2/externalcontacts/conversations/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) ConversationAssociation 

     - returns: RequestBuilder<Void> 
     */
    open class func putExternalcontactsConversationWithRequestBuilder(conversationId: String, body: ConversationAssociation) -> RequestBuilder<Void> {
        var path = "/api/v2/externalcontacts/conversations/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter body: (body) ExternalOrganization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganization(externalOrganizationId: String, body: ExternalOrganization, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId, body: body)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an external organization
     
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "companyType" : "aeiou",
  "selfUri" : "aeiou",
  "industry" : "aeiou",
  "employeeCount" : 123456789,
  "tickers" : [ {
    "symbol" : "aeiou",
    "exchange" : "aeiou"
  } ],
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "primaryContactId" : "aeiou",
  "tags" : [ "aeiou" ],
  "revenue" : 123456789,
  "phoneNumber" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "externalSystemUrl" : "aeiou",
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "name" : "aeiou",
  "faxNumber" : "",
  "trustor" : {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  },
  "websites" : [ "aeiou" ],
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter body: (body) ExternalOrganization 

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func putExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String, body: ExternalOrganization) -> RequestBuilder<ExternalOrganization> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a note for an external organization
     
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "aeiou",
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 

     - returns: RequestBuilder<Note> 
     */
    open class func putExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String, body: Note) -> RequestBuilder<Note> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Links a Trustor with an External Organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter trustorId: (path) Trustor ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId: String, trustorId: String, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationTrustorTrustorIdWithRequestBuilder(externalOrganizationId: externalOrganizationId, trustorId: trustorId)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Links a Trustor with an External Organization
     
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : {
    "address2" : "aeiou",
    "city" : "aeiou",
    "address1" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "state" : "aeiou"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+0000",
  "companyType" : "aeiou",
  "selfUri" : "aeiou",
  "industry" : "aeiou",
  "employeeCount" : 123456789,
  "tickers" : [ {
    "symbol" : "aeiou",
    "exchange" : "aeiou"
  } ],
  "twitterId" : {
    "profileUrl" : "aeiou",
    "name" : "aeiou",
    "verified" : true,
    "id" : "aeiou",
    "screenName" : "aeiou"
  },
  "primaryContactId" : "aeiou",
  "tags" : [ "aeiou" ],
  "revenue" : 123456789,
  "phoneNumber" : {
    "extension" : 123456789,
    "e164" : "aeiou",
    "acceptsSMS" : true,
    "countryCode" : "aeiou",
    "display" : "aeiou",
    "userInput" : "aeiou"
  },
  "externalSystemUrl" : "aeiou",
  "externalDataSources" : [ {
    "platform" : "aeiou",
    "url" : "aeiou"
  } ],
  "name" : "aeiou",
  "faxNumber" : "",
  "trustor" : {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  },
  "websites" : [ "aeiou" ],
  "id" : "aeiou",
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter trustorId: (path) Trustor ID 

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func putExternalcontactsOrganizationTrustorTrustorIdWithRequestBuilder(externalOrganizationId: String, trustorId: String) -> RequestBuilder<ExternalOrganization> {
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let trustorIdPreEscape = "\(trustorId)"
        let trustorIdPostEscape = trustorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorId}", with: trustorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter body: (body) Relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsRelationship(relationshipId: String, body: Relationship, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId, body: body)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a relationship
     
     - PUT /api/v2/externalcontacts/relationships/{relationshipId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "relationship" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "externalOrganization" : {
    "address" : {
      "address2" : "aeiou",
      "city" : "aeiou",
      "address1" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "state" : "aeiou"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+0000",
    "companyType" : "aeiou",
    "selfUri" : "aeiou",
    "industry" : "aeiou",
    "employeeCount" : 123456789,
    "tickers" : [ {
      "symbol" : "aeiou",
      "exchange" : "aeiou"
    } ],
    "twitterId" : {
      "profileUrl" : "aeiou",
      "name" : "aeiou",
      "verified" : true,
      "id" : "aeiou",
      "screenName" : "aeiou"
    },
    "primaryContactId" : "aeiou",
    "tags" : [ "aeiou" ],
    "revenue" : 123456789,
    "phoneNumber" : {
      "extension" : 123456789,
      "e164" : "aeiou",
      "acceptsSMS" : true,
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "userInput" : "aeiou"
    },
    "externalSystemUrl" : "aeiou",
    "externalDataSources" : [ {
      "platform" : "aeiou",
      "url" : "aeiou"
    } ],
    "name" : "aeiou",
    "faxNumber" : "",
    "trustor" : {
      "authorization" : {
        "permissions" : [ "aeiou" ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : "",
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : "",
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ "" ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      },
      "organization" : "",
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "enabled" : true
    },
    "websites" : [ "aeiou" ],
    "id" : "aeiou",
    "createDate" : "2000-01-23T04:56:07.000+0000"
  }
}}]
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter body: (body) Relationship 

     - returns: RequestBuilder<Relationship> 
     */
    open class func putExternalcontactsRelationshipWithRequestBuilder(relationshipId: String, body: Relationship) -> RequestBuilder<Relationship> {
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
