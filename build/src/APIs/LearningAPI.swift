//
// LearningAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LearningAPI {
    
    
    
    /**
     
     Delete a learning assignment
     
     - parameter assignmentId: (path) The Learning Assignment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLearningAssignment(assignmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLearningAssignmentWithRequestBuilder(assignmentId: assignmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a learning assignment
     
     - DELETE /api/v2/learning/assignments/{assignmentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter assignmentId: (path) The Learning Assignment ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLearningAssignmentWithRequestBuilder(assignmentId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLearningModule(moduleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLearningModuleWithRequestBuilder(moduleId: moduleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a learning module
     
     - DELETE /api/v2/learning/modules/{moduleId}
     - This will delete a learning module if it is unpublished or it will delete a published and archived learning module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter moduleId: (path) The ID of the learning module 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLearningModuleWithRequestBuilder(moduleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getLearningAssignment: String { 
        case module = "module"
        case assessment = "assessment"
        case assessmentform = "assessmentForm"
    }

    
    
    /**
     
     Get Learning Assignment
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter expand: (query) Fields to expand in response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignment(assignmentId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentWithRequestBuilder(assignmentId: assignmentId, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Learning Assignment
     
     - GET /api/v2/learning/assignments/{assignmentId}
     - Permission not required if you are the assigned user of the learning assignment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "aeiou",
  "module" : {
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "aeiou",
    "externalId" : "aeiou",
    "rule" : {
      "selfUri" : "aeiou",
      "parts" : [ {
        "selector" : "aeiou",
        "operation" : "aeiou",
        "value" : [ "aeiou" ],
        "order" : 123
      } ],
      "id" : "aeiou",
      "isActive" : true
    },
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "source" : "aeiou",
    "type" : "aeiou",
    "version" : 123,
    "completionTimeInDays" : 123,
    "summaryData" : {
      "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
      "assignedCount" : 123,
      "passedCount" : 123,
      "completedCount" : 123
    },
    "informSteps" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou",
      "contentType" : "aeiou",
      "sharingUri" : "aeiou",
      "order" : 123
    } ],
    "assessmentForm" : {
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "passPercent" : 123,
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "visibilityCondition" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "questions" : [ {
          "helpText" : "aeiou",
          "commentsRequired" : true,
          "visibilityCondition" : {
            "combiningOperation" : "aeiou",
            "predicates" : [ "{}" ]
          },
          "isCritical" : true,
          "id" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou",
          "isKill" : true,
          "maxResponseCharacters" : 123,
          "naEnabled" : true,
          "answerOptions" : [ {
            "id" : "aeiou",
            "text" : "aeiou",
            "value" : 123,
            "assistanceConditions" : [ {
              "topicIds" : [ "aeiou" ],
              "operator" : "aeiou"
            } ]
          } ]
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou"
  },
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "isRule" : true,
  "assessment" : {
    "assessmentFormId" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "answers" : {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "isPassed" : true,
      "comments" : "aeiou",
      "agentComments" : "aeiou",
      "failureReasons" : [ "aeiou" ],
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionGroupScores" : [ {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "markedNA" : true,
        "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionScores" : [ {
          "failedKillQuestion" : true,
          "answerId" : "aeiou",
          "score" : 123,
          "comments" : "aeiou",
          "questionId" : "aeiou",
          "markedNA" : true,
          "freeTextAnswer" : "aeiou"
        } ],
        "questionGroupId" : "aeiou",
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    },
    "contextId" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "assessmentId" : "aeiou",
    "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
    "status" : "aeiou"
  },
  "assessmentForm" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isOverdue" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
  "state" : "aeiou",
  "user" : ""
}}]
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter expand: (query) Fields to expand in response (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func getLearningAssignmentWithRequestBuilder(assignmentId: String, expand: [String]? = nil) -> RequestBuilder<LearningAssignment> {
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Overdue_getLearningAssignments: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    
    
    
    public enum Pass_getLearningAssignments: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getLearningAssignments: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    
    public enum SortBy_getLearningAssignments: String { 
        case recommendedCompletionDate = "RecommendedCompletionDate"
        case dateModified = "DateModified"
    }

    
    
    
    
    
    public enum Types_getLearningAssignments: String { 
        case informational = "Informational"
        case assessedContent = "AssessedContent"
        case assessment = "Assessment"
    }

    
    
    
    public enum States_getLearningAssignments: String { 
        case assigned = "Assigned"
        case inProgress = "InProgress"
        case completed = "Completed"
    }

    
    
    
    public enum Expand_getLearningAssignments: String { 
        case moduleSummary = "ModuleSummary"
    }

    
    
    /**
     
     List of Learning module Assignments
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional, default to Desc)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. (optional)
     - parameter types: (query) Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignments(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignments? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignments? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignments? = nil, sortBy: SortBy_getLearningAssignments? = nil, userId: [String]? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentsDomainEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentsWithRequestBuilder(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, userId: userId, types: types, states: states, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignmentsDomainEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List of Learning module Assignments
     
     - GET /api/v2/learning/assignments
     - Either moduleId or user value is required
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "aeiou",
    "module" : {
      "isArchived" : true,
      "isPublished" : true,
      "selfUri" : "aeiou",
      "externalId" : "aeiou",
      "rule" : {
        "selfUri" : "aeiou",
        "parts" : [ {
          "selector" : "aeiou",
          "operation" : "aeiou",
          "value" : [ "aeiou" ],
          "order" : 123
        } ],
        "id" : "aeiou",
        "isActive" : true
      },
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "source" : "aeiou",
      "type" : "aeiou",
      "version" : 123,
      "completionTimeInDays" : 123,
      "summaryData" : {
        "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
        "assignedCount" : 123,
        "passedCount" : 123,
        "completedCount" : 123
      },
      "informSteps" : [ {
        "name" : "aeiou",
        "type" : "aeiou",
        "value" : "aeiou",
        "contentType" : "aeiou",
        "sharingUri" : "aeiou",
        "order" : 123
      } ],
      "assessmentForm" : {
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "passPercent" : 123,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "maxResponseCharacters" : 123,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123,
              "assistanceConditions" : [ {
                "topicIds" : [ "aeiou" ],
                "operator" : "aeiou"
              } ]
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "name" : "aeiou",
      "modifiedBy" : "",
      "id" : "aeiou"
    },
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "isRule" : true,
    "assessment" : {
      "assessmentFormId" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "isPassed" : true,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "failureReasons" : [ "aeiou" ],
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "failedKillQuestion" : true,
            "answerId" : "aeiou",
            "score" : 123,
            "comments" : "aeiou",
            "questionId" : "aeiou",
            "markedNA" : true,
            "freeTextAnswer" : "aeiou"
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125
      },
      "contextId" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "assessmentId" : "aeiou",
      "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
      "status" : "aeiou"
    },
    "assessmentForm" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "isOverdue" : true,
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
    "state" : "aeiou",
    "user" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional, default to Desc)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. (optional)
     - parameter types: (query) Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)

     - returns: RequestBuilder<LearningAssignmentsDomainEntity> 
     */
    open class func getLearningAssignmentsWithRequestBuilder(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignments? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignments? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignments? = nil, sortBy: SortBy_getLearningAssignments? = nil, userId: [String]? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<LearningAssignmentsDomainEntity> {
        let path = "/api/v2/learning/assignments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "moduleId": moduleId, 
            
            "interval": interval, 
            
            "completionInterval": completionInterval, 
            
            "overdue": overdue?.rawValue, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pass": pass?.rawValue, 
            
            "minPercentageScore": minPercentageScore, 
            
            "maxPercentageScore": maxPercentageScore, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "sortBy": sortBy?.rawValue, 
            
            "userId": userId, 
            
            "types": types, 
            
            "states": states, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentsDomainEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Overdue_getLearningAssignmentsMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    
    
    
    public enum Pass_getLearningAssignmentsMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getLearningAssignmentsMe: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    
    public enum SortBy_getLearningAssignmentsMe: String { 
        case recommendedCompletionDate = "RecommendedCompletionDate"
        case dateModified = "DateModified"
    }

    
    
    
    public enum Types_getLearningAssignmentsMe: String { 
        case informational = "Informational"
        case assessedContent = "AssessedContent"
        case assessment = "Assessment"
    }

    
    
    
    public enum States_getLearningAssignmentsMe: String { 
        case assigned = "Assigned"
        case inProgress = "InProgress"
        case completed = "Completed"
    }

    
    
    
    public enum Expand_getLearningAssignmentsMe: String { 
        case moduleSummary = "ModuleSummary"
    }

    
    
    /**
     
     List of Learning Assignments assigned to current user
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional, default to Desc)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter types: (query) Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignmentsMe(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignmentsMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignmentsMe? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignmentsMe? = nil, sortBy: SortBy_getLearningAssignmentsMe? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentsDomainEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentsMeWithRequestBuilder(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, types: types, states: states, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignmentsDomainEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List of Learning Assignments assigned to current user
     
     - GET /api/v2/learning/assignments/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "aeiou",
    "module" : {
      "isArchived" : true,
      "isPublished" : true,
      "selfUri" : "aeiou",
      "externalId" : "aeiou",
      "rule" : {
        "selfUri" : "aeiou",
        "parts" : [ {
          "selector" : "aeiou",
          "operation" : "aeiou",
          "value" : [ "aeiou" ],
          "order" : 123
        } ],
        "id" : "aeiou",
        "isActive" : true
      },
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "source" : "aeiou",
      "type" : "aeiou",
      "version" : 123,
      "completionTimeInDays" : 123,
      "summaryData" : {
        "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
        "assignedCount" : 123,
        "passedCount" : 123,
        "completedCount" : 123
      },
      "informSteps" : [ {
        "name" : "aeiou",
        "type" : "aeiou",
        "value" : "aeiou",
        "contentType" : "aeiou",
        "sharingUri" : "aeiou",
        "order" : 123
      } ],
      "assessmentForm" : {
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "passPercent" : 123,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "maxResponseCharacters" : 123,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123,
              "assistanceConditions" : [ {
                "topicIds" : [ "aeiou" ],
                "operator" : "aeiou"
              } ]
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "name" : "aeiou",
      "modifiedBy" : "",
      "id" : "aeiou"
    },
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "isRule" : true,
    "assessment" : {
      "assessmentFormId" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "isPassed" : true,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "failureReasons" : [ "aeiou" ],
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "failedKillQuestion" : true,
            "answerId" : "aeiou",
            "score" : 123,
            "comments" : "aeiou",
            "questionId" : "aeiou",
            "markedNA" : true,
            "freeTextAnswer" : "aeiou"
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125
      },
      "contextId" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "assessmentId" : "aeiou",
      "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
      "status" : "aeiou"
    },
    "assessmentForm" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "isOverdue" : true,
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
    "state" : "aeiou",
    "user" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional, default to Any)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional, default to Desc)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter types: (query) Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)

     - returns: RequestBuilder<LearningAssignmentsDomainEntity> 
     */
    open class func getLearningAssignmentsMeWithRequestBuilder(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignmentsMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignmentsMe? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignmentsMe? = nil, sortBy: SortBy_getLearningAssignmentsMe? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<LearningAssignmentsDomainEntity> {
        let path = "/api/v2/learning/assignments/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "moduleId": moduleId, 
            
            "interval": interval, 
            
            "completionInterval": completionInterval, 
            
            "overdue": overdue?.rawValue, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pass": pass?.rawValue, 
            
            "minPercentageScore": minPercentageScore, 
            
            "maxPercentageScore": maxPercentageScore, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "sortBy": sortBy?.rawValue, 
            
            "types": types, 
            
            "states": states, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentsDomainEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getLearningModule: String { 
        case assessmentform = "assessmentForm"
    }

    
    
    /**
     
     Get a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModule(moduleId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleWithRequestBuilder(moduleId: moduleId, expand: expand)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a learning module
     
     - GET /api/v2/learning/modules/{moduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "aeiou",
  "externalId" : "aeiou",
  "rule" : {
    "selfUri" : "aeiou",
    "parts" : [ {
      "selector" : "aeiou",
      "operation" : "aeiou",
      "value" : [ "aeiou" ],
      "order" : 123
    } ],
    "id" : "aeiou",
    "isActive" : true
  },
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "source" : "aeiou",
  "type" : "aeiou",
  "version" : 123,
  "completionTimeInDays" : 123,
  "summaryData" : {
    "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
    "assignedCount" : 123,
    "passedCount" : 123,
    "completedCount" : 123
  },
  "informSteps" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "value" : "aeiou",
    "contentType" : "aeiou",
    "sharingUri" : "aeiou",
    "order" : 123
  } ],
  "assessmentForm" : {
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "passPercent" : 123,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123,
          "assistanceConditions" : [ {
            "topicIds" : [ "aeiou" ],
            "operator" : "aeiou"
          } ]
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou"
}}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)

     - returns: RequestBuilder<LearningModule> 
     */
    open class func getLearningModuleWithRequestBuilder(moduleId: String, expand: [String]? = nil) -> RequestBuilder<LearningModule> {
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a learning module rule
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModuleRule(moduleId: String, completion: @escaping ((_ data: LearningModuleRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleRuleWithRequestBuilder(moduleId: moduleId)
        requestBuilder.execute { (response: Response<LearningModuleRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a learning module rule
     
     - GET /api/v2/learning/modules/{moduleId}/rule
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "parts" : [ {
    "selector" : "aeiou",
    "operation" : "aeiou",
    "value" : [ "aeiou" ],
    "order" : 123
  } ],
  "id" : "aeiou",
  "isActive" : true
}}]
     
     - parameter moduleId: (path) The ID of the learning module 

     - returns: RequestBuilder<LearningModuleRule> 
     */
    open class func getLearningModuleRuleWithRequestBuilder(moduleId: String) -> RequestBuilder<LearningModuleRule> {
        var path = "/api/v2/learning/modules/{moduleId}/rule"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getLearningModuleVersion: String { 
        case assessmentform = "assessmentForm"
    }

    
    
    /**
     
     Get specific version of a published module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter versionId: (path) The version of learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModuleVersion(moduleId: String, versionId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleVersionWithRequestBuilder(moduleId: moduleId, versionId: versionId, expand: expand)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get specific version of a published module
     
     - GET /api/v2/learning/modules/{moduleId}/versions/{versionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "aeiou",
  "externalId" : "aeiou",
  "rule" : {
    "selfUri" : "aeiou",
    "parts" : [ {
      "selector" : "aeiou",
      "operation" : "aeiou",
      "value" : [ "aeiou" ],
      "order" : 123
    } ],
    "id" : "aeiou",
    "isActive" : true
  },
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "source" : "aeiou",
  "type" : "aeiou",
  "version" : 123,
  "completionTimeInDays" : 123,
  "summaryData" : {
    "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
    "assignedCount" : 123,
    "passedCount" : 123,
    "completedCount" : 123
  },
  "informSteps" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "value" : "aeiou",
    "contentType" : "aeiou",
    "sharingUri" : "aeiou",
    "order" : 123
  } ],
  "assessmentForm" : {
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "passPercent" : 123,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123,
          "assistanceConditions" : [ {
            "topicIds" : [ "aeiou" ],
            "operator" : "aeiou"
          } ]
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou"
}}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter versionId: (path) The version of learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)

     - returns: RequestBuilder<LearningModule> 
     */
    open class func getLearningModuleVersionWithRequestBuilder(moduleId: String, versionId: String, expand: [String]? = nil) -> RequestBuilder<LearningModule> {
        var path = "/api/v2/learning/modules/{moduleId}/versions/{versionId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Types_getLearningModules: String { 
        case informational = "Informational"
        case assessedContent = "AssessedContent"
        case assessment = "Assessment"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getLearningModules: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    public enum SortBy_getLearningModules: String { 
        case name = "name"
    }

    
    
    
    
    
    public enum Expand_getLearningModules: String { 
        case rule = "rule"
        case summarydata = "summaryData"
    }

    
    
    
    public enum IsPublished_getLearningModules: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    /**
     
     Get all learning modules of an organization
     
     - parameter isArchived: (query) Archive status (optional, default to false)
     - parameter types: (query) Specifies the module types. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter searchTerm: (query) Search Term (searchable by name) (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter isPublished: (query) Specifies if only the Unpublished (isPublished is \&quot;False\&quot;) or Published (isPublished is \&quot;True\&quot;) modules are returned. If isPublished is \&quot;Any\&quot; or omitted, both types are returned (optional, default to Any)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModules(isArchived: Bool? = nil, types: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLearningModules? = nil, sortBy: SortBy_getLearningModules? = nil, searchTerm: String? = nil, expand: [String]? = nil, isPublished: IsPublished_getLearningModules? = nil, completion: @escaping ((_ data: LearningModulesDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModulesWithRequestBuilder(isArchived: isArchived, types: types, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, sortBy: sortBy, searchTerm: searchTerm, expand: expand, isPublished: isPublished)
        requestBuilder.execute { (response: Response<LearningModulesDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all learning modules of an organization
     
     - GET /api/v2/learning/modules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "aeiou",
    "externalId" : "aeiou",
    "rule" : {
      "selfUri" : "aeiou",
      "parts" : [ {
        "selector" : "aeiou",
        "operation" : "aeiou",
        "value" : [ "aeiou" ],
        "order" : 123
      } ],
      "id" : "aeiou",
      "isActive" : true
    },
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "source" : "aeiou",
    "type" : "aeiou",
    "version" : 123,
    "completionTimeInDays" : 123,
    "summaryData" : {
      "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
      "assignedCount" : 123,
      "passedCount" : 123,
      "completedCount" : 123
    },
    "informSteps" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou",
      "contentType" : "aeiou",
      "sharingUri" : "aeiou",
      "order" : 123
    } ],
    "assessmentForm" : {
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "passPercent" : 123,
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "visibilityCondition" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "questions" : [ {
          "helpText" : "aeiou",
          "commentsRequired" : true,
          "visibilityCondition" : {
            "combiningOperation" : "aeiou",
            "predicates" : [ "{}" ]
          },
          "isCritical" : true,
          "id" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou",
          "isKill" : true,
          "maxResponseCharacters" : 123,
          "naEnabled" : true,
          "answerOptions" : [ {
            "id" : "aeiou",
            "text" : "aeiou",
            "value" : 123,
            "assistanceConditions" : [ {
              "topicIds" : [ "aeiou" ],
              "operator" : "aeiou"
            } ]
          } ]
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter isArchived: (query) Archive status (optional, default to false)
     - parameter types: (query) Specifies the module types. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter searchTerm: (query) Search Term (searchable by name) (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter isPublished: (query) Specifies if only the Unpublished (isPublished is \&quot;False\&quot;) or Published (isPublished is \&quot;True\&quot;) modules are returned. If isPublished is \&quot;Any\&quot; or omitted, both types are returned (optional, default to Any)

     - returns: RequestBuilder<LearningModulesDomainEntityListing> 
     */
    open class func getLearningModulesWithRequestBuilder(isArchived: Bool? = nil, types: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLearningModules? = nil, sortBy: SortBy_getLearningModules? = nil, searchTerm: String? = nil, expand: [String]? = nil, isPublished: IsPublished_getLearningModules? = nil) -> RequestBuilder<LearningModulesDomainEntityListing> {
        let path = "/api/v2/learning/modules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "isArchived": isArchived, 
            
            "types": types, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "sortBy": sortBy?.rawValue, 
            
            "searchTerm": searchTerm, 
            
            "expand": expand, 
            
            "isPublished": isPublished?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<LearningModulesDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update Learning Assignment
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning Assignment to be updated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLearningAssignment(assignmentId: String, body: LearningAssignmentUpdate? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLearningAssignmentWithRequestBuilder(assignmentId: assignmentId, body: body)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Learning Assignment
     
     - PATCH /api/v2/learning/assignments/{assignmentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "aeiou",
  "module" : {
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "aeiou",
    "externalId" : "aeiou",
    "rule" : {
      "selfUri" : "aeiou",
      "parts" : [ {
        "selector" : "aeiou",
        "operation" : "aeiou",
        "value" : [ "aeiou" ],
        "order" : 123
      } ],
      "id" : "aeiou",
      "isActive" : true
    },
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "source" : "aeiou",
    "type" : "aeiou",
    "version" : 123,
    "completionTimeInDays" : 123,
    "summaryData" : {
      "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
      "assignedCount" : 123,
      "passedCount" : 123,
      "completedCount" : 123
    },
    "informSteps" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou",
      "contentType" : "aeiou",
      "sharingUri" : "aeiou",
      "order" : 123
    } ],
    "assessmentForm" : {
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "passPercent" : 123,
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "visibilityCondition" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "questions" : [ {
          "helpText" : "aeiou",
          "commentsRequired" : true,
          "visibilityCondition" : {
            "combiningOperation" : "aeiou",
            "predicates" : [ "{}" ]
          },
          "isCritical" : true,
          "id" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou",
          "isKill" : true,
          "maxResponseCharacters" : 123,
          "naEnabled" : true,
          "answerOptions" : [ {
            "id" : "aeiou",
            "text" : "aeiou",
            "value" : 123,
            "assistanceConditions" : [ {
              "topicIds" : [ "aeiou" ],
              "operator" : "aeiou"
            } ]
          } ]
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou"
  },
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "isRule" : true,
  "assessment" : {
    "assessmentFormId" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "answers" : {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "isPassed" : true,
      "comments" : "aeiou",
      "agentComments" : "aeiou",
      "failureReasons" : [ "aeiou" ],
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionGroupScores" : [ {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "markedNA" : true,
        "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionScores" : [ {
          "failedKillQuestion" : true,
          "answerId" : "aeiou",
          "score" : 123,
          "comments" : "aeiou",
          "questionId" : "aeiou",
          "markedNA" : true,
          "freeTextAnswer" : "aeiou"
        } ],
        "questionGroupId" : "aeiou",
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    },
    "contextId" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "assessmentId" : "aeiou",
    "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
    "status" : "aeiou"
  },
  "assessmentForm" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isOverdue" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
  "state" : "aeiou",
  "user" : ""
}}]
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning Assignment to be updated (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func patchLearningAssignmentWithRequestBuilder(assignmentId: String, body: LearningAssignmentUpdate? = nil) -> RequestBuilder<LearningAssignment> {
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Score learning assessment for preview
     
     - parameter body: (body) Assessment form and answers to score 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssessmentsScoring(body: LearningAssessmentScoringRequest, completion: @escaping ((_ data: AssessmentScoringSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssessmentsScoringWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AssessmentScoringSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Score learning assessment for preview
     
     - POST /api/v2/learning/assessments/scoring
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "isPassed" : true,
  "comments" : "aeiou",
  "agentComments" : "aeiou",
  "failureReasons" : [ "aeiou" ],
  "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "questionGroupScores" : [ {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "markedNA" : true,
    "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionScores" : [ {
      "failedKillQuestion" : true,
      "answerId" : "aeiou",
      "score" : 123,
      "comments" : "aeiou",
      "questionId" : "aeiou",
      "markedNA" : true,
      "freeTextAnswer" : "aeiou"
    } ],
    "questionGroupId" : "aeiou",
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalScore" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter body: (body) Assessment form and answers to score 

     - returns: RequestBuilder<AssessmentScoringSet> 
     */
    open class func postLearningAssessmentsScoringWithRequestBuilder(body: LearningAssessmentScoringRequest) -> RequestBuilder<AssessmentScoringSet> {
        let path = "/api/v2/learning/assessments/scoring"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AssessmentScoringSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Learning Assignment
     
     - parameter body: (body) The Learning Assignment to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignments(body: LearningAssignmentCreate? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Learning Assignment
     
     - POST /api/v2/learning/assignments
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "aeiou",
  "module" : {
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "aeiou",
    "externalId" : "aeiou",
    "rule" : {
      "selfUri" : "aeiou",
      "parts" : [ {
        "selector" : "aeiou",
        "operation" : "aeiou",
        "value" : [ "aeiou" ],
        "order" : 123
      } ],
      "id" : "aeiou",
      "isActive" : true
    },
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "source" : "aeiou",
    "type" : "aeiou",
    "version" : 123,
    "completionTimeInDays" : 123,
    "summaryData" : {
      "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
      "assignedCount" : 123,
      "passedCount" : 123,
      "completedCount" : 123
    },
    "informSteps" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou",
      "contentType" : "aeiou",
      "sharingUri" : "aeiou",
      "order" : 123
    } ],
    "assessmentForm" : {
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "passPercent" : 123,
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "visibilityCondition" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "questions" : [ {
          "helpText" : "aeiou",
          "commentsRequired" : true,
          "visibilityCondition" : {
            "combiningOperation" : "aeiou",
            "predicates" : [ "{}" ]
          },
          "isCritical" : true,
          "id" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou",
          "isKill" : true,
          "maxResponseCharacters" : 123,
          "naEnabled" : true,
          "answerOptions" : [ {
            "id" : "aeiou",
            "text" : "aeiou",
            "value" : 123,
            "assistanceConditions" : [ {
              "topicIds" : [ "aeiou" ],
              "operator" : "aeiou"
            } ]
          } ]
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou"
  },
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "isRule" : true,
  "assessment" : {
    "assessmentFormId" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "answers" : {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "isPassed" : true,
      "comments" : "aeiou",
      "agentComments" : "aeiou",
      "failureReasons" : [ "aeiou" ],
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionGroupScores" : [ {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "markedNA" : true,
        "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionScores" : [ {
          "failedKillQuestion" : true,
          "answerId" : "aeiou",
          "score" : 123,
          "comments" : "aeiou",
          "questionId" : "aeiou",
          "markedNA" : true,
          "freeTextAnswer" : "aeiou"
        } ],
        "questionGroupId" : "aeiou",
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    },
    "contextId" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "assessmentId" : "aeiou",
    "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
    "status" : "aeiou"
  },
  "assessmentForm" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "isOverdue" : true,
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
  "state" : "aeiou",
  "user" : ""
}}]
     
     - parameter body: (body) The Learning Assignment to be created (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func postLearningAssignmentsWithRequestBuilder(body: LearningAssignmentCreate? = nil) -> RequestBuilder<LearningAssignment> {
        let path = "/api/v2/learning/assignments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Retrieve aggregated assignment data
     
     - parameter body: (body) Aggregate Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsAggregatesQuery(body: LearningAssignmentAggregateParam, completion: @escaping ((_ data: LearningAssignmentAggregateResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentAggregateResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve aggregated assignment data
     
     - POST /api/v2/learning/assignments/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123,
          "sum" : 1.3579000000000001069366817318950779736042022705078125
        }
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) Aggregate Request 

     - returns: RequestBuilder<LearningAssignmentAggregateResponse> 
     */
    open class func postLearningAssignmentsAggregatesQueryWithRequestBuilder(body: LearningAssignmentAggregateParam) -> RequestBuilder<LearningAssignmentAggregateResponse> {
        let path = "/api/v2/learning/assignments/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentAggregateResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add multiple learning assignments
     
     - parameter body: (body) The learning assignments to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsBulkadd(body: [LearningAssignmentItem]? = nil, completion: @escaping ((_ data: LearningAssignmentBulkAddResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsBulkaddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentBulkAddResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add multiple learning assignments
     
     - POST /api/v2/learning/assignments/bulkadd
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "aeiou",
    "module" : {
      "isArchived" : true,
      "isPublished" : true,
      "selfUri" : "aeiou",
      "externalId" : "aeiou",
      "rule" : {
        "selfUri" : "aeiou",
        "parts" : [ {
          "selector" : "aeiou",
          "operation" : "aeiou",
          "value" : [ "aeiou" ],
          "order" : 123
        } ],
        "id" : "aeiou",
        "isActive" : true
      },
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "source" : "aeiou",
      "type" : "aeiou",
      "version" : 123,
      "completionTimeInDays" : 123,
      "summaryData" : {
        "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
        "assignedCount" : 123,
        "passedCount" : 123,
        "completedCount" : 123
      },
      "informSteps" : [ {
        "name" : "aeiou",
        "type" : "aeiou",
        "value" : "aeiou",
        "contentType" : "aeiou",
        "sharingUri" : "aeiou",
        "order" : 123
      } ],
      "assessmentForm" : {
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "passPercent" : 123,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "maxResponseCharacters" : 123,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123,
              "assistanceConditions" : [ {
                "topicIds" : [ "aeiou" ],
                "operator" : "aeiou"
              } ]
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "name" : "aeiou",
      "modifiedBy" : "",
      "id" : "aeiou"
    },
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+0000",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "isRule" : true,
    "assessment" : {
      "assessmentFormId" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "isPassed" : true,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "failureReasons" : [ "aeiou" ],
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "failedKillQuestion" : true,
            "answerId" : "aeiou",
            "score" : 123,
            "comments" : "aeiou",
            "questionId" : "aeiou",
            "markedNA" : true,
            "freeTextAnswer" : "aeiou"
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125
      },
      "contextId" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "assessmentId" : "aeiou",
      "dateSubmitted" : "2000-01-23T04:56:07.000+0000",
      "status" : "aeiou"
    },
    "assessmentForm" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "isOverdue" : true,
    "createdBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "percentageScore" : 1.3579000000000001069366817318950779736042022705078125,
    "state" : "aeiou",
    "user" : ""
  } ],
  "disallowedEntities" : [ {
    "errorCode" : "aeiou",
    "entity" : {
      "moduleId" : "aeiou",
      "userId" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) The learning assignments to be created (optional)

     - returns: RequestBuilder<LearningAssignmentBulkAddResponse> 
     */
    open class func postLearningAssignmentsBulkaddWithRequestBuilder(body: [LearningAssignmentItem]? = nil) -> RequestBuilder<LearningAssignmentBulkAddResponse> {
        let path = "/api/v2/learning/assignments/bulkadd"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentBulkAddResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Remove multiple Learning Assignments
     
     - parameter body: (body) The IDs of the learning assignments to be removed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsBulkremove(body: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentBulkRemoveResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsBulkremoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentBulkRemoveResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove multiple Learning Assignments
     
     - POST /api/v2/learning/assignments/bulkremove
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "assignmentId" : "aeiou"
  } ],
  "disallowedEntities" : [ {
    "errorCode" : "aeiou",
    "entity" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) The IDs of the learning assignments to be removed (optional)

     - returns: RequestBuilder<LearningAssignmentBulkRemoveResponse> 
     */
    open class func postLearningAssignmentsBulkremoveWithRequestBuilder(body: [String]? = nil) -> RequestBuilder<LearningAssignmentBulkRemoveResponse> {
        let path = "/api/v2/learning/assignments/bulkremove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentBulkRemoveResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Publish a Learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningModulePublish(moduleId: String, completion: @escaping ((_ data: LearningModulePublishResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningModulePublishWithRequestBuilder(moduleId: moduleId)
        requestBuilder.execute { (response: Response<LearningModulePublishResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish a Learning module
     
     - POST /api/v2/learning/modules/{moduleId}/publish
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter moduleId: (path) The ID of the learning module 

     - returns: RequestBuilder<LearningModulePublishResponse> 
     */
    open class func postLearningModulePublishWithRequestBuilder(moduleId: String) -> RequestBuilder<LearningModulePublishResponse> {
        var path = "/api/v2/learning/modules/{moduleId}/publish"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModulePublishResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new learning module
     
     - parameter body: (body) The learning module to be created 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningModules(body: LearningModuleRequest, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningModulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new learning module
     
     - POST /api/v2/learning/modules
     - This will create a new unpublished learning module with the specified fields.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "aeiou",
  "externalId" : "aeiou",
  "rule" : {
    "selfUri" : "aeiou",
    "parts" : [ {
      "selector" : "aeiou",
      "operation" : "aeiou",
      "value" : [ "aeiou" ],
      "order" : 123
    } ],
    "id" : "aeiou",
    "isActive" : true
  },
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "source" : "aeiou",
  "type" : "aeiou",
  "version" : 123,
  "completionTimeInDays" : 123,
  "summaryData" : {
    "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
    "assignedCount" : 123,
    "passedCount" : 123,
    "completedCount" : 123
  },
  "informSteps" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "value" : "aeiou",
    "contentType" : "aeiou",
    "sharingUri" : "aeiou",
    "order" : 123
  } ],
  "assessmentForm" : {
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "passPercent" : 123,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123,
          "assistanceConditions" : [ {
            "topicIds" : [ "aeiou" ],
            "operator" : "aeiou"
          } ]
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) The learning module to be created 

     - returns: RequestBuilder<LearningModule> 
     */
    open class func postLearningModulesWithRequestBuilder(body: LearningModuleRequest) -> RequestBuilder<LearningModule> {
        let path = "/api/v2/learning/modules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get users for learning module rule
     
     - parameter pageSize: (query) Page size 
     - parameter pageNumber: (query) Page number 
     - parameter body: (body) The learning module rule to fetch users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningRulesQuery(pageSize: Int, pageNumber: Int, body: LearningAssignmentUserQuery, completion: @escaping ((_ data: LearningAssignmentUserListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningRulesQueryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentUserListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get users for learning module rule
     
     - POST /api/v2/learning/rules/query
     - This will get the users who matches the given rule.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou",
  "unfilteredTotal" : 123
}}]
     
     - parameter pageSize: (query) Page size 
     - parameter pageNumber: (query) Page number 
     - parameter body: (body) The learning module rule to fetch users 

     - returns: RequestBuilder<LearningAssignmentUserListing> 
     */
    open class func postLearningRulesQueryWithRequestBuilder(pageSize: Int, pageNumber: Int, body: LearningAssignmentUserQuery) -> RequestBuilder<LearningAssignmentUserListing> {
        let path = "/api/v2/learning/rules/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize.encodeToJSON(), 
            
            "pageNumber": pageNumber.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentUserListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLearningModule(moduleId: String, body: LearningModuleRequest, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = putLearningModuleWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a learning module
     
     - PUT /api/v2/learning/modules/{moduleId}
     - This will update the name, description, completion time in days and inform steps for a learning module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "aeiou",
  "externalId" : "aeiou",
  "rule" : {
    "selfUri" : "aeiou",
    "parts" : [ {
      "selector" : "aeiou",
      "operation" : "aeiou",
      "value" : [ "aeiou" ],
      "order" : 123
    } ],
    "id" : "aeiou",
    "isActive" : true
  },
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "source" : "aeiou",
  "type" : "aeiou",
  "version" : 123,
  "completionTimeInDays" : 123,
  "summaryData" : {
    "completedSum" : 1.3579000000000001069366817318950779736042022705078125,
    "assignedCount" : 123,
    "passedCount" : 123,
    "completedCount" : 123
  },
  "informSteps" : [ {
    "name" : "aeiou",
    "type" : "aeiou",
    "value" : "aeiou",
    "contentType" : "aeiou",
    "sharingUri" : "aeiou",
    "order" : 123
  } ],
  "assessmentForm" : {
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "passPercent" : 123,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123,
          "assistanceConditions" : [ {
            "topicIds" : [ "aeiou" ],
            "operator" : "aeiou"
          } ]
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "name" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou"
}}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module to be updated 

     - returns: RequestBuilder<LearningModule> 
     */
    open class func putLearningModuleWithRequestBuilder(moduleId: String, body: LearningModuleRequest) -> RequestBuilder<LearningModule> {
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a learning module rule
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module rule to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLearningModuleRule(moduleId: String, body: LearningModuleRule, completion: @escaping ((_ data: LearningModuleRule?,_ error: Error?) -> Void)) {
        let requestBuilder = putLearningModuleRuleWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModuleRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a learning module rule
     
     - PUT /api/v2/learning/modules/{moduleId}/rule
     - This will update a learning module rule with the specified fields.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "parts" : [ {
    "selector" : "aeiou",
    "operation" : "aeiou",
    "value" : [ "aeiou" ],
    "order" : 123
  } ],
  "id" : "aeiou",
  "isActive" : true
}}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module rule to be updated 

     - returns: RequestBuilder<LearningModuleRule> 
     */
    open class func putLearningModuleRuleWithRequestBuilder(moduleId: String, body: LearningModuleRule) -> RequestBuilder<LearningModuleRule> {
        var path = "/api/v2/learning/modules/{moduleId}/rule"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
