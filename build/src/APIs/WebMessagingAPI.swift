//
// WebMessagingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WebMessagingAPI {
    
    
    
    
    /**
     Delete device information
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebmessagingDeploymentPushdevice(deploymentId: String, tokenId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: deploymentId, tokenId: tokenId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete device information
     - DELETE /api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: String, tokenId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(tokenId)"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get the messages for a web messaging session.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebmessagingMessages(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: WebMessagingMessageEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebmessagingMessagesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<WebMessagingMessageEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the messages for a web messaging session.
     - GET /api/v2/webmessaging/messages
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "metadata" : {
      "key" : "metadata"
    },
    "reasons" : [ {
      "code" : "MessageExpired",
      "message" : "message"
    }, {
      "code" : "MessageExpired",
      "message" : "message"
    } ],
    "originatingEntity" : "Human",
    "channel" : "{}",
    "id" : "id",
    "text" : "text",
    "type" : "Text",
    "content" : [ {
      "quickReply" : "{}",
      "attachment" : "{}",
      "buttonResponse" : "{}",
      "datePicker" : "{}",
      "carousel" : "{}",
      "contentType" : "Attachment",
      "listPicker" : "{}",
      "generic" : "{}",
      "card" : "{}"
    }, {
      "quickReply" : "{}",
      "attachment" : "{}",
      "buttonResponse" : "{}",
      "datePicker" : "{}",
      "carousel" : "{}",
      "contentType" : "Attachment",
      "listPicker" : "{}",
      "generic" : "{}",
      "card" : "{}"
    } ],
    "events" : [ {
      "coBrowse" : "{}",
      "eventType" : "CoBrowse",
      "presence" : "{}"
    }, {
      "coBrowse" : "{}",
      "eventType" : "CoBrowse",
      "presence" : "{}"
    } ],
    "status" : "Sent",
    "direction" : "Inbound"
  }, {
    "metadata" : {
      "key" : "metadata"
    },
    "reasons" : [ {
      "code" : "MessageExpired",
      "message" : "message"
    }, {
      "code" : "MessageExpired",
      "message" : "message"
    } ],
    "originatingEntity" : "Human",
    "channel" : "{}",
    "id" : "id",
    "text" : "text",
    "type" : "Text",
    "content" : [ {
      "quickReply" : "{}",
      "attachment" : "{}",
      "buttonResponse" : "{}",
      "datePicker" : "{}",
      "carousel" : "{}",
      "contentType" : "Attachment",
      "listPicker" : "{}",
      "generic" : "{}",
      "card" : "{}"
    }, {
      "quickReply" : "{}",
      "attachment" : "{}",
      "buttonResponse" : "{}",
      "datePicker" : "{}",
      "carousel" : "{}",
      "contentType" : "Attachment",
      "listPicker" : "{}",
      "generic" : "{}",
      "card" : "{}"
    } ],
    "events" : [ {
      "coBrowse" : "{}",
      "eventType" : "CoBrowse",
      "presence" : "{}"
    }, {
      "coBrowse" : "{}",
      "eventType" : "CoBrowse",
      "presence" : "{}"
    } ],
    "status" : "Sent",
    "direction" : "Inbound"
  } ],
  "pageSize" : 0
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<WebMessagingMessageEntityList> 
     */
    open class func getWebmessagingMessagesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<WebMessagingMessageEntityList> {        
        let path = "/api/v2/webmessaging/messages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WebMessagingMessageEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Edit device information
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 
     - parameter body: (body) Request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWebmessagingDeploymentPushdevice(deploymentId: String, tokenId: String, body: PushDeviceUpdateRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: deploymentId, tokenId: tokenId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Edit device information
     - PATCH /api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 
     - parameter body: (body) Request body 

     - returns: RequestBuilder<Void> 
     */
    open class func patchWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: String, tokenId: String, body: PushDeviceUpdateRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(tokenId)"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Add a new device information
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 
     - parameter body: (body) Request body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebmessagingDeploymentPushdevice(deploymentId: String, tokenId: String, body: PushDeviceInsertRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: deploymentId, tokenId: tokenId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Add a new device information
     - POST /api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}
     
     - parameter deploymentId: (path) WebMessaging deployment id 
     - parameter tokenId: (path) Device token id or cookie id 
     - parameter body: (body) Request body 

     - returns: RequestBuilder<Void> 
     */
    open class func postWebmessagingDeploymentPushdeviceWithRequestBuilder(deploymentId: String, tokenId: String, body: PushDeviceInsertRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/webmessaging/deployments/{deploymentId}/pushdevices/{tokenId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(tokenId)"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

}
