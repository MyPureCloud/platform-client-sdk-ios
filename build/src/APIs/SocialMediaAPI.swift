//
// SocialMediaAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SocialMediaAPI {
    
    
    /**
     Delete an escalation rule.
     
     - parameter escalationRuleId: (path) escalationRuleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSocialmediaEscalationrule(escalationRuleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: escalationRuleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an escalation rule.
     - DELETE /api/v2/socialmedia/escalationrules/{escalationRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter escalationRuleId: (path) escalationRuleId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/socialmedia/escalationrules/{escalationRuleId}"
        let escalationRuleIdPreEscape = "\(escalationRuleId)"
        let escalationRuleIdPostEscape = escalationRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{escalationRuleId}", with: escalationRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a social topic.
     
     - parameter topicId: (path) topicId 
     - parameter hardDelete: (query) Determines whether a Social topic should be soft-deleted or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSocialmediaTopic(topicId: String, hardDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSocialmediaTopicWithRequestBuilder(topicId: topicId, hardDelete: hardDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a social topic.
     - DELETE /api/v2/socialmedia/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter topicId: (path) topicId 
     - parameter hardDelete: (query) Determines whether a Social topic should be soft-deleted or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSocialmediaTopicWithRequestBuilder(topicId: String, hardDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/socialmedia/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "hardDelete": hardDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Delete a Facebook data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter hardDelete: (query) Determines whether a Facebook data ingestion rule should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleId(topicId: String, facebookIngestionRuleId: String, hardDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, hardDelete: hardDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Facebook data ingestion rule.
     - DELETE /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter hardDelete: (query) Determines whether a Facebook data ingestion rule should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, hardDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "hardDelete": hardDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Delete a X (formally Twitter) data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter hardDelete: (query) Determines whether a X (formally Twitter) data ingestion rule should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleId(topicId: String, twitterIngestionRuleId: String, hardDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, hardDelete: hardDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a X (formally Twitter) data ingestion rule.
     - DELETE /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter hardDelete: (query) Determines whether a X (formally Twitter) data ingestion rule should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, hardDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "hardDelete": hardDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Get status for async query for social media aggregates
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaAnalyticsAggregatesJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaAnalyticsAggregatesJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for social media aggregates
     - GET /api/v2/socialmedia/analytics/aggregates/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getSocialmediaAnalyticsAggregatesJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/socialmedia/analytics/aggregates/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Fetch a page of results for an async social media query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Cursor token to retrieve next page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaAnalyticsAggregatesJobResults(jobId: String, cursor: String? = nil, completion: @escaping ((_ data: SocialMediaAsyncAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaAnalyticsAggregatesJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor)
        requestBuilder.execute { (response: Response<SocialMediaAsyncAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async social media query
     - GET /api/v2/socialmedia/analytics/aggregates/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "countUnknown" : 7,
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 9.301444243932576,
          "p95" : 1,
          "countNegative" : 5,
          "numerator" : 4.145608029883936,
          "denominator" : 7.386281948385884,
          "target" : 1.2315135367772556,
          "p99" : 1,
          "current" : 3.616076749251911,
          "min" : 6.027456183070403,
          "countNeutral" : 2,
          "countPositive" : 5,
          "ratio" : 2.027123023002322
        },
        "qualifier" : "qualifier"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Cursor token to retrieve next page (optional)

     - returns: RequestBuilder<SocialMediaAsyncAggregateQueryResponse> 
     */
    open class func getSocialmediaAnalyticsAggregatesJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil) -> RequestBuilder<SocialMediaAsyncAggregateQueryResponse> {        
        var path = "/api/v2/socialmedia/analytics/aggregates/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<SocialMediaAsyncAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get status for async query for social media messages job
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaAnalyticsMessagesJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaAnalyticsMessagesJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for social media messages job
     - GET /api/v2/socialmedia/analytics/messages/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getSocialmediaAnalyticsMessagesJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/socialmedia/analytics/messages/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Fetch a page of results for an async social media messages query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Cursor token to retrieve next page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaAnalyticsMessagesJobResults(jobId: String, cursor: String? = nil, completion: @escaping ((_ data: SocialMediaAsyncDetailQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaAnalyticsMessagesJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor)
        requestBuilder.execute { (response: Response<SocialMediaAsyncDetailQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async social media messages query
     - GET /api/v2/socialmedia/analytics/messages/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "results" : [ {
    "messages" : [ {
      "escalationInfo" : {
        "escalationStatus" : "Unknown"
      },
      "id" : "id",
      "normalizedMessage" : {
        "metadata" : {
          "key" : "metadata"
        },
        "reasons" : [ {
          "code" : "MessageExpired",
          "message" : "message"
        }, {
          "code" : "MessageExpired",
          "message" : "message"
        } ],
        "originatingEntity" : "Human",
        "isFinalReceipt" : true,
        "channel" : "{}",
        "type" : "Text",
        "content" : [ {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        }, {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        } ],
        "id" : "id",
        "text" : "text",
        "byoSmsIntegrationId" : "byoSmsIntegrationId",
        "events" : [ {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        }, {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        } ],
        "status" : "Sent",
        "direction" : "Inbound"
      }
    }, {
      "escalationInfo" : {
        "escalationStatus" : "Unknown"
      },
      "id" : "id",
      "normalizedMessage" : {
        "metadata" : {
          "key" : "metadata"
        },
        "reasons" : [ {
          "code" : "MessageExpired",
          "message" : "message"
        }, {
          "code" : "MessageExpired",
          "message" : "message"
        } ],
        "originatingEntity" : "Human",
        "isFinalReceipt" : true,
        "channel" : "{}",
        "type" : "Text",
        "content" : [ {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        }, {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        } ],
        "id" : "id",
        "text" : "text",
        "byoSmsIntegrationId" : "byoSmsIntegrationId",
        "events" : [ {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        }, {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        } ],
        "status" : "Sent",
        "direction" : "Inbound"
      }
    } ],
    "interval" : "interval"
  }, {
    "messages" : [ {
      "escalationInfo" : {
        "escalationStatus" : "Unknown"
      },
      "id" : "id",
      "normalizedMessage" : {
        "metadata" : {
          "key" : "metadata"
        },
        "reasons" : [ {
          "code" : "MessageExpired",
          "message" : "message"
        }, {
          "code" : "MessageExpired",
          "message" : "message"
        } ],
        "originatingEntity" : "Human",
        "isFinalReceipt" : true,
        "channel" : "{}",
        "type" : "Text",
        "content" : [ {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        }, {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        } ],
        "id" : "id",
        "text" : "text",
        "byoSmsIntegrationId" : "byoSmsIntegrationId",
        "events" : [ {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        }, {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        } ],
        "status" : "Sent",
        "direction" : "Inbound"
      }
    }, {
      "escalationInfo" : {
        "escalationStatus" : "Unknown"
      },
      "id" : "id",
      "normalizedMessage" : {
        "metadata" : {
          "key" : "metadata"
        },
        "reasons" : [ {
          "code" : "MessageExpired",
          "message" : "message"
        }, {
          "code" : "MessageExpired",
          "message" : "message"
        } ],
        "originatingEntity" : "Human",
        "isFinalReceipt" : true,
        "channel" : "{}",
        "type" : "Text",
        "content" : [ {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        }, {
          "template" : "{}",
          "quickReplyV2" : "{}",
          "quickReply" : "{}",
          "attachment" : "{}",
          "buttonResponse" : "{}",
          "location" : "{}",
          "text" : "{}",
          "carousel" : "{}",
          "contentType" : "Reactions",
          "card" : "{}",
          "story" : "{}"
        } ],
        "id" : "id",
        "text" : "text",
        "byoSmsIntegrationId" : "byoSmsIntegrationId",
        "events" : [ {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        }, {
          "coBrowse" : "{}",
          "typing" : "{}",
          "eventType" : "CoBrowse",
          "video" : "{}",
          "presence" : "{}"
        } ],
        "status" : "Sent",
        "direction" : "Inbound"
      }
    } ],
    "interval" : "interval"
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Cursor token to retrieve next page (optional)

     - returns: RequestBuilder<SocialMediaAsyncDetailQueryResponse> 
     */
    open class func getSocialmediaAnalyticsMessagesJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil) -> RequestBuilder<SocialMediaAsyncDetailQueryResponse> {        
        var path = "/api/v2/socialmedia/analytics/messages/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<SocialMediaAsyncDetailQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a single escalation rule.
     
     - parameter escalationRuleId: (path) escalationRuleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaEscalationrule(escalationRuleId: String, completion: @escaping ((_ data: EscalationRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: escalationRuleId)
        requestBuilder.execute { (response: Response<EscalationRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single escalation rule.
     - GET /api/v2/socialmedia/escalationrules/{escalationRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facebookEscalation" : "{}",
  "matchCriteria" : "matchCriteria",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "priority" : 0,
  "twitterEscalation" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "openEscalation" : "{}",
  "instagramEscalation" : "{}",
  "name" : "name",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter escalationRuleId: (path) escalationRuleId 

     - returns: RequestBuilder<EscalationRuleResponse> 
     */
    open class func getSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: String) -> RequestBuilder<EscalationRuleResponse> {        
        var path = "/api/v2/socialmedia/escalationrules/{escalationRuleId}"
        let escalationRuleIdPreEscape = "\(escalationRuleId)"
        let escalationRuleIdPostEscape = escalationRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{escalationRuleId}", with: escalationRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EscalationRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Retrieve all escalation rules for a division.
     
     - parameter divisionId: (query) One division ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaEscalationrules(divisionId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: SocialEscalationResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaEscalationrulesWithRequestBuilder(divisionId: divisionId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<SocialEscalationResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all escalation rules for a division.
     - GET /api/v2/socialmedia/escalationrules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "facebookEscalation" : "{}",
    "matchCriteria" : "matchCriteria",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "priority" : 0,
    "twitterEscalation" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "openEscalation" : "{}",
    "instagramEscalation" : "{}",
    "name" : "name",
    "id" : "id",
    "divisionId" : "divisionId",
    "status" : "Active"
  }, {
    "facebookEscalation" : "{}",
    "matchCriteria" : "matchCriteria",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "priority" : 0,
    "twitterEscalation" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "openEscalation" : "{}",
    "instagramEscalation" : "{}",
    "name" : "name",
    "id" : "id",
    "divisionId" : "divisionId",
    "status" : "Active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter divisionId: (query) One division ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<SocialEscalationResponseEntityListing> 
     */
    open class func getSocialmediaEscalationrulesWithRequestBuilder(divisionId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<SocialEscalationResponseEntityListing> {        
        let path = "/api/v2/socialmedia/escalationrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<SocialEscalationResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a single social topic.
     
     - parameter topicId: (path) topicId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopic(topicId: String, includeDeleted: Bool? = nil, completion: @escaping ((_ data: SocialTopicResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicWithRequestBuilder(topicId: topicId, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<SocialTopicResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single social topic.
     - GET /api/v2/socialmedia/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dataIngestionRulesMetadata" : [ {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  }, {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<SocialTopicResponse> 
     */
    open class func getSocialmediaTopicWithRequestBuilder(topicId: String, includeDeleted: Bool? = nil) -> RequestBuilder<SocialTopicResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<SocialTopicResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Retrieve all social topic data ingestion rules with pagination.
     
     - parameter topicId: (path) topicId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrules(topicId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil, completion: @escaping ((_ data: DataIngestionRuleResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesWithRequestBuilder(topicId: topicId, pageNumber: pageNumber, pageSize: pageSize, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<DataIngestionRuleResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all social topic data ingestion rules with pagination.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "pageCount" : 5,
  "pageNumber" : 1,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 6,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<DataIngestionRuleResponseEntityListing> 
     */
    open class func getSocialmediaTopicDataingestionrulesWithRequestBuilder(topicId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil) -> RequestBuilder<DataIngestionRuleResponseEntityListing> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<DataIngestionRuleResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a single Facebook data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleId(topicId: String, facebookIngestionRuleId: String, includeDeleted: Bool? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single Facebook data ingestion rule.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "integrationId" : "integrationId",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleResponse> 
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, includeDeleted: Bool? = nil) -> RequestBuilder<FacebookDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a single Facebook data ingestion rule version.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter dataIngestionRuleVersion: (path) version 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted item in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersion(topicId: String, facebookIngestionRuleId: String, dataIngestionRuleVersion: String, includeDeleted: Bool? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleVersionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersionWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, dataIngestionRuleVersion: dataIngestionRuleVersion, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleVersionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single Facebook data ingestion rule version.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}/versions/{dataIngestionRuleVersion}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "integrationId" : "integrationId",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter dataIngestionRuleVersion: (path) version 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted item in the result. (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleVersionResponse> 
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersionWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, dataIngestionRuleVersion: String, includeDeleted: Bool? = nil) -> RequestBuilder<FacebookDataIngestionRuleVersionResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}/versions/{dataIngestionRuleVersion}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let dataIngestionRuleVersionPreEscape = "\(dataIngestionRuleVersion)"
        let dataIngestionRuleVersionPostEscape = dataIngestionRuleVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dataIngestionRuleVersion}", with: dataIngestionRuleVersionPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleVersionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    /**
     Get the Facebook data ingestion rule versions.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersions(topicId: String, facebookIngestionRuleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleVersionResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersionsWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, pageNumber: pageNumber, pageSize: pageSize, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleVersionResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the Facebook data ingestion rule versions.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "integrationId" : "integrationId",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "integrationId" : "integrationId",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleVersionResponseEntityListing> 
     */
    open class func getSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdVersionsWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil) -> RequestBuilder<FacebookDataIngestionRuleVersionResponseEntityListing> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}/versions"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleVersionResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get a single X (formally Twitter) data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleId(topicId: String, twitterIngestionRuleId: String, includeDeleted: Bool? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single X (formally Twitter) data ingestion rule.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "searchTerms" : "searchTerms",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "countries" : [ "countries", "countries" ],
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleResponse> 
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, includeDeleted: Bool? = nil) -> RequestBuilder<TwitterDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a single X (formally Twitter) data ingestion rule version.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter dataIngestionRuleVersion: (path) version 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted item in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersion(topicId: String, twitterIngestionRuleId: String, dataIngestionRuleVersion: String, includeDeleted: Bool? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleVersionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersionWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, dataIngestionRuleVersion: dataIngestionRuleVersion, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleVersionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a single X (formally Twitter) data ingestion rule version.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}/versions/{dataIngestionRuleVersion}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "searchTerms" : "searchTerms",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "countries" : [ "countries", "countries" ],
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter dataIngestionRuleVersion: (path) version 
     - parameter includeDeleted: (query) Determines whether to include soft-deleted item in the result. (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleVersionResponse> 
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersionWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, dataIngestionRuleVersion: String, includeDeleted: Bool? = nil) -> RequestBuilder<TwitterDataIngestionRuleVersionResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}/versions/{dataIngestionRuleVersion}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let dataIngestionRuleVersionPreEscape = "\(dataIngestionRuleVersion)"
        let dataIngestionRuleVersionPostEscape = dataIngestionRuleVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dataIngestionRuleVersion}", with: dataIngestionRuleVersionPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleVersionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    /**
     Get the Open data ingestion rule versions.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersions(topicId: String, twitterIngestionRuleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleVersionResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersionsWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, pageNumber: pageNumber, pageSize: pageSize, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleVersionResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the Open data ingestion rule versions.
     - GET /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "searchTerms" : "searchTerms",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "countries" : [ "countries", "countries" ],
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "searchTerms" : "searchTerms",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "countries" : [ "countries", "countries" ],
    "version" : 0,
    "platform" : "platform",
    "status" : "Active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleVersionResponseEntityListing> 
     */
    open class func getSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdVersionsWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, includeDeleted: Bool? = nil) -> RequestBuilder<TwitterDataIngestionRuleVersionResponseEntityListing> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}/versions"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleVersionResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Retrieve all social topics.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter divisionIds: (query) One or more division IDs. If nothing is provided, the social topics associated withthe list of divisions that the user has access to will be returned. (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSocialmediaTopics(pageNumber: Int? = nil, pageSize: Int? = nil, divisionIds: [String]? = nil, includeDeleted: Bool? = nil, completion: @escaping ((_ data: SocialTopicResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSocialmediaTopicsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, divisionIds: divisionIds, includeDeleted: includeDeleted)
        requestBuilder.execute { (response: Response<SocialTopicResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all social topics.
     - GET /api/v2/socialmedia/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dataIngestionRulesMetadata" : [ {
      "countByStatus" : {
        "key" : 0
      },
      "totalCount" : 6,
      "platform" : "platform"
    }, {
      "countByStatus" : {
        "key" : 0
      },
      "totalCount" : 6,
      "platform" : "platform"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "divisionId" : "divisionId",
    "status" : "Active"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dataIngestionRulesMetadata" : [ {
      "countByStatus" : {
        "key" : 0
      },
      "totalCount" : 6,
      "platform" : "platform"
    }, {
      "countByStatus" : {
        "key" : 0
      },
      "totalCount" : 6,
      "platform" : "platform"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "divisionId" : "divisionId",
    "status" : "Active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter divisionIds: (query) One or more division IDs. If nothing is provided, the social topics associated withthe list of divisions that the user has access to will be returned. (optional)
     - parameter includeDeleted: (query) Determines whether to include soft-deleted items in the result. (optional)

     - returns: RequestBuilder<SocialTopicResponseEntityListing> 
     */
    open class func getSocialmediaTopicsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, divisionIds: [String]? = nil, includeDeleted: Bool? = nil) -> RequestBuilder<SocialTopicResponseEntityListing> {        
        let path = "/api/v2/socialmedia/topics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "divisionIds": divisionIds, 
            "includeDeleted": includeDeleted
        ])

        let requestBuilder: RequestBuilder<SocialTopicResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update a social topic.
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSocialmediaTopic(topicId: String, body: SocialTopicPatchRequest? = nil, completion: @escaping ((_ data: SocialTopicResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchSocialmediaTopicWithRequestBuilder(topicId: topicId, body: body)
        requestBuilder.execute { (response: Response<SocialTopicResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a social topic.
     - PATCH /api/v2/socialmedia/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dataIngestionRulesMetadata" : [ {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  }, {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SocialTopicResponse> 
     */
    open class func patchSocialmediaTopicWithRequestBuilder(topicId: String, body: SocialTopicPatchRequest? = nil) -> RequestBuilder<SocialTopicResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SocialTopicResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the status of a Facebook data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleId(topicId: String, facebookIngestionRuleId: String, body: DataIngestionRuleStatusPatchRequest? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, body: body)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the status of a Facebook data ingestion rule.
     - PATCH /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "integrationId" : "integrationId",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleResponse> 
     */
    open class func patchSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, body: DataIngestionRuleStatusPatchRequest? = nil) -> RequestBuilder<FacebookDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the status of a X (formally Twitter) data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleId(topicId: String, twitterIngestionRuleId: String, body: DataIngestionRuleStatusPatchRequest? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, body: body)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the status of a X (formally Twitter) data ingestion rule.
     - PATCH /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "searchTerms" : "searchTerms",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "countries" : [ "countries", "countries" ],
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleResponse> 
     */
    open class func patchSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, body: DataIngestionRuleStatusPatchRequest? = nil) -> RequestBuilder<TwitterDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for social media aggregates asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaAnalyticsAggregatesJobs(body: SocialMediaAsyncAggregationQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaAnalyticsAggregatesJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for social media aggregates asynchronously
     - POST /api/v2/socialmedia/analytics/aggregates/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postSocialmediaAnalyticsAggregatesJobsWithRequestBuilder(body: SocialMediaAsyncAggregationQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/socialmedia/analytics/aggregates/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for social media messages asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaAnalyticsMessagesJobs(body: SocialMediaAsyncDetailQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaAnalyticsMessagesJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for social media messages asynchronously
     - POST /api/v2/socialmedia/analytics/messages/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postSocialmediaAnalyticsMessagesJobsWithRequestBuilder(body: SocialMediaAsyncDetailQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/socialmedia/analytics/messages/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create an escalation rule.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaEscalationrules(body: EscalationRuleRequest? = nil, completion: @escaping ((_ data: EscalationRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaEscalationrulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EscalationRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an escalation rule.
     - POST /api/v2/socialmedia/escalationrules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facebookEscalation" : "{}",
  "matchCriteria" : "matchCriteria",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "priority" : 0,
  "twitterEscalation" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "openEscalation" : "{}",
  "instagramEscalation" : "{}",
  "name" : "name",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EscalationRuleResponse> 
     */
    open class func postSocialmediaEscalationrulesWithRequestBuilder(body: EscalationRuleRequest? = nil) -> RequestBuilder<EscalationRuleResponse> {        
        let path = "/api/v2/socialmedia/escalationrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EscalationRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Escalate message to a conversation manually
     
     - parameter divisionId: (query) One division ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaEscalationsMessages(divisionId: String, body: ManualEscalationRequest? = nil, completion: @escaping ((_ data: ManualEscalationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaEscalationsMessagesWithRequestBuilder(divisionId: divisionId, body: body)
        requestBuilder.execute { (response: Response<ManualEscalationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Escalate message to a conversation manually
     - POST /api/v2/socialmedia/escalations/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "socialMediaNormalizedMessageId" : "socialMediaNormalizedMessageId",
  "conversationNormalizedMessageId" : "conversationNormalizedMessageId",
  "escalationTarget" : "{}",
  "escalationStatus" : "Unknown"
}, statusCode=200}]
     
     - parameter divisionId: (query) One division ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ManualEscalationResponse> 
     */
    open class func postSocialmediaEscalationsMessagesWithRequestBuilder(divisionId: String, body: ManualEscalationRequest? = nil) -> RequestBuilder<ManualEscalationResponse> {        
        let path = "/api/v2/socialmedia/escalations/messages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<ManualEscalationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Create an Facebook data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaTopicDataingestionrulesFacebook(topicId: String, body: FacebookDataIngestionRuleRequest? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaTopicDataingestionrulesFacebookWithRequestBuilder(topicId: topicId, body: body)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an Facebook data ingestion rule.
     - POST /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "integrationId" : "integrationId",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleResponse> 
     */
    open class func postSocialmediaTopicDataingestionrulesFacebookWithRequestBuilder(topicId: String, body: FacebookDataIngestionRuleRequest? = nil) -> RequestBuilder<FacebookDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Create an twitter data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaTopicDataingestionrulesTwitter(topicId: String, body: TwitterDataIngestionRuleRequest? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaTopicDataingestionrulesTwitterWithRequestBuilder(topicId: topicId, body: body)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an twitter data ingestion rule.
     - POST /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "searchTerms" : "searchTerms",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "countries" : [ "countries", "countries" ],
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleResponse> 
     */
    open class func postSocialmediaTopicDataingestionrulesTwitterWithRequestBuilder(topicId: String, body: TwitterDataIngestionRuleRequest? = nil) -> RequestBuilder<TwitterDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a social topic.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaTopics(body: SocialTopicRequest? = nil, completion: @escaping ((_ data: SocialTopicResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaTopicsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SocialTopicResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a social topic.
     - POST /api/v2/socialmedia/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dataIngestionRulesMetadata" : [ {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  }, {
    "countByStatus" : {
      "key" : 0
    },
    "totalCount" : 6,
    "platform" : "platform"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SocialTopicResponse> 
     */
    open class func postSocialmediaTopicsWithRequestBuilder(body: SocialTopicRequest? = nil) -> RequestBuilder<SocialTopicResponse> {        
        let path = "/api/v2/socialmedia/topics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SocialTopicResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Retrieves historical tweet count for search terms, optional countries list and the current limit and usage for the organization.
     
     - parameter body: (body) TwitterDataHistoricalTweetRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSocialmediaTwitterHistoricalTweets(body: TwitterDataHistoricalTweetRequest, completion: @escaping ((_ data: TwitterDataHistoricalTweetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSocialmediaTwitterHistoricalTweetsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TwitterDataHistoricalTweetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves historical tweet count for search terms, optional countries list and the current limit and usage for the organization.
     - POST /api/v2/socialmedia/twitter/historical/tweets
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "previousNumberOfDays" : 6,
  "usageStatistics" : "{}",
  "matchingTweets" : 0
}, statusCode=200}]
     
     - parameter body: (body) TwitterDataHistoricalTweetRequest 

     - returns: RequestBuilder<TwitterDataHistoricalTweetResponse> 
     */
    open class func postSocialmediaTwitterHistoricalTweetsWithRequestBuilder(body: TwitterDataHistoricalTweetRequest) -> RequestBuilder<TwitterDataHistoricalTweetResponse> {        
        let path = "/api/v2/socialmedia/twitter/historical/tweets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterDataHistoricalTweetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update the escalation rule.
     
     - parameter escalationRuleId: (path) escalationRuleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSocialmediaEscalationrule(escalationRuleId: String, body: EscalationRuleRequest? = nil, completion: @escaping ((_ data: EscalationRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: escalationRuleId, body: body)
        requestBuilder.execute { (response: Response<EscalationRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the escalation rule.
     - PUT /api/v2/socialmedia/escalationrules/{escalationRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facebookEscalation" : "{}",
  "matchCriteria" : "matchCriteria",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "priority" : 0,
  "twitterEscalation" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "openEscalation" : "{}",
  "instagramEscalation" : "{}",
  "name" : "name",
  "id" : "id",
  "divisionId" : "divisionId",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter escalationRuleId: (path) escalationRuleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EscalationRuleResponse> 
     */
    open class func putSocialmediaEscalationruleWithRequestBuilder(escalationRuleId: String, body: EscalationRuleRequest? = nil) -> RequestBuilder<EscalationRuleResponse> {        
        var path = "/api/v2/socialmedia/escalationrules/{escalationRuleId}"
        let escalationRuleIdPreEscape = "\(escalationRuleId)"
        let escalationRuleIdPostEscape = escalationRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{escalationRuleId}", with: escalationRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EscalationRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the Facebook data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleId(topicId: String, facebookIngestionRuleId: String, body: FacebookDataIngestionRuleRequest? = nil, completion: @escaping ((_ data: FacebookDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: topicId, facebookIngestionRuleId: facebookIngestionRuleId, body: body)
        requestBuilder.execute { (response: Response<FacebookDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the Facebook data ingestion rule.
     - PUT /api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "integrationId" : "integrationId",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter facebookIngestionRuleId: (path) facebookIngestionRuleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<FacebookDataIngestionRuleResponse> 
     */
    open class func putSocialmediaTopicDataingestionrulesFacebookFacebookIngestionRuleIdWithRequestBuilder(topicId: String, facebookIngestionRuleId: String, body: FacebookDataIngestionRuleRequest? = nil) -> RequestBuilder<FacebookDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/facebook/{facebookIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let facebookIngestionRuleIdPreEscape = "\(facebookIngestionRuleId)"
        let facebookIngestionRuleIdPostEscape = facebookIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{facebookIngestionRuleId}", with: facebookIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the X (formally Twitter) data ingestion rule.
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleId(topicId: String, twitterIngestionRuleId: String, body: TwitterDataIngestionRuleRequest? = nil, completion: @escaping ((_ data: TwitterDataIngestionRuleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: topicId, twitterIngestionRuleId: twitterIngestionRuleId, body: body)
        requestBuilder.execute { (response: Response<TwitterDataIngestionRuleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the X (formally Twitter) data ingestion rule.
     - PUT /api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "searchTerms" : "searchTerms",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "countries" : [ "countries", "countries" ],
  "version" : 0,
  "platform" : "platform",
  "status" : "Active"
}, statusCode=202}]
     
     - parameter topicId: (path) topicId 
     - parameter twitterIngestionRuleId: (path) twitterIngestionRuleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<TwitterDataIngestionRuleResponse> 
     */
    open class func putSocialmediaTopicDataingestionrulesTwitterTwitterIngestionRuleIdWithRequestBuilder(topicId: String, twitterIngestionRuleId: String, body: TwitterDataIngestionRuleRequest? = nil) -> RequestBuilder<TwitterDataIngestionRuleResponse> {        
        var path = "/api/v2/socialmedia/topics/{topicId}/dataingestionrules/twitter/{twitterIngestionRuleId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let twitterIngestionRuleIdPreEscape = "\(twitterIngestionRuleId)"
        let twitterIngestionRuleIdPostEscape = twitterIngestionRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{twitterIngestionRuleId}", with: twitterIngestionRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterDataIngestionRuleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
