//
// OperationalEventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OperationalEventsAPI {
    
    
    /**
     Get an operational event definition by its id
     
     - parameter eventDefinitionId: (path) EventDefinition id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsageEventsDefinition(eventDefinitionId: String, completion: @escaping ((_ data: EventDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsageEventsDefinitionWithRequestBuilder(eventDefinitionId: eventDefinitionId)
        requestBuilder.execute { (response: Response<EventDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an operational event definition by its id
     - GET /api/v2/usage/events/definitions/{eventDefinitionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "name" : "name",
  "description" : "description",
  "id" : "id"
}, statusCode=200}]
     
     - parameter eventDefinitionId: (path) EventDefinition id 

     - returns: RequestBuilder<EventDefinition> 
     */
    open class func getUsageEventsDefinitionWithRequestBuilder(eventDefinitionId: String) -> RequestBuilder<EventDefinition> {        
        var path = "/api/v2/usage/events/definitions/{eventDefinitionId}"
        let eventDefinitionIdPreEscape = "\(eventDefinitionId)"
        let eventDefinitionIdPostEscape = eventDefinitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventDefinitionId}", with: eventDefinitionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get all operational event definitions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsageEventsDefinitions(completion: @escaping ((_ data: EventDefinitionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsageEventsDefinitionsWithRequestBuilder()
        requestBuilder.execute { (response: Response<EventDefinitionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all operational event definitions
     - GET /api/v2/usage/events/definitions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "name" : "name",
    "description" : "description",
    "id" : "id"
  }, {
    "name" : "name",
    "description" : "description",
    "id" : "id"
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<EventDefinitionListing> 
     */
    open class func getUsageEventsDefinitionsWithRequestBuilder() -> RequestBuilder<EventDefinitionListing> {        
        let path = "/api/v2/usage/events/definitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventDefinitionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get aggregates for operational events in a timeframe.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsageEventsAggregatesQuery(body: EventAggregatesQueryRequest? = nil, completion: @escaping ((_ data: EventAggregatesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsageEventsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EventAggregatesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get aggregates for operational events in a timeframe.
     - POST /api/v2/usage/events/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "eventDefinitionAggregates" : [ {
    "eventDefinition" : "{}",
    "eventCount" : 0
  }, {
    "eventDefinition" : "{}",
    "eventCount" : 0
  } ],
  "interval" : "interval"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EventAggregatesResponse> 
     */
    open class func postUsageEventsAggregatesQueryWithRequestBuilder(body: EventAggregatesQueryRequest? = nil) -> RequestBuilder<EventAggregatesResponse> {        
        let path = "/api/v2/usage/events/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventAggregatesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Query operational events in a timeframe.
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsageEventsQuery(before: String? = nil, after: String? = nil, pageSize: String? = nil, body: EventQueryRequest? = nil, completion: @escaping ((_ data: EventQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsageEventsQueryWithRequestBuilder(before: before, after: after, pageSize: pageSize, body: body)
        requestBuilder.execute { (response: Response<EventQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query operational events in a timeframe.
     - POST /api/v2/usage/events/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "entityVersion" : "entityVersion",
    "entityToken" : "entityToken",
    "eventDefinition" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "entityName" : "entityName",
    "errorCode" : "errorCode",
    "entityId" : "entityId",
    "parentEntityId" : "parentEntityId",
    "previousValue" : "previousValue",
    "currentValue" : "currentValue",
    "conversation" : "{}"
  }, {
    "entityVersion" : "entityVersion",
    "entityToken" : "entityToken",
    "eventDefinition" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "entityName" : "entityName",
    "errorCode" : "errorCode",
    "entityId" : "entityId",
    "parentEntityId" : "parentEntityId",
    "previousValue" : "previousValue",
    "currentValue" : "currentValue",
    "conversation" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<EventQueryResponse> 
     */
    open class func postUsageEventsQueryWithRequestBuilder(before: String? = nil, after: String? = nil, pageSize: String? = nil, body: EventQueryRequest? = nil) -> RequestBuilder<EventQueryResponse> {        
        let path = "/api/v2/usage/events/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "pageSize": pageSize
        ])

        let requestBuilder: RequestBuilder<EventQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

}
