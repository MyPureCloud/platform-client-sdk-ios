//
// OrganizationAuthorizationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OrganizationAuthorizationAPI {
    
    
    
    /**
     
     Delete Org Trust
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgauthorizationTrustee(trusteeOrgId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: trusteeOrgId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Org Trust
     
     - DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete Trustee User
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgauthorizationTrusteeUser(trusteeOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrgauthorizationTrusteeUserWithRequestBuilder(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Trustee User
     
     - DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgauthorizationTrusteeUserWithRequestBuilder(trusteeOrgId: String, trusteeUserId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete Trustee User Roles
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Trustee User Roles
     
     - DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: String, trusteeUserId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete Org Trust
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgauthorizationTrustor(trustorOrgId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrgauthorizationTrustorWithRequestBuilder(trustorOrgId: trustorOrgId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Org Trust
     
     - DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter trustorOrgId: (path) Trustor Organization Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgauthorizationTrustorWithRequestBuilder(trustorOrgId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete Trustee User
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgauthorizationTrustorUser(trustorOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Trustee User
     
     - DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: String, trusteeUserId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Pairing Info
     
     - parameter pairingId: (path) Pairing Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationPairing(pairingId: String, completion: @escaping ((_ data: TrustRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationPairingWithRequestBuilder(pairingId: pairingId)
        requestBuilder.execute { (response: Response<TrustRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Pairing Info
     
     - GET /api/v2/orgauthorization/pairings/{pairingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "selfUri" : "aeiou",
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ "" ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "rulesVisible" : true,
    "createdBy" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "trustee" : "",
  "id" : "aeiou",
  "users" : [ "" ]
}}]
     
     - parameter pairingId: (path) Pairing Id 

     - returns: RequestBuilder<TrustRequest> 
     */
    open class func getOrgauthorizationPairingWithRequestBuilder(pairingId: String) -> RequestBuilder<TrustRequest> {
        var path = "/api/v2/orgauthorization/pairings/{pairingId}"
        let pairingIdPreEscape = "\(pairingId)"
        let pairingIdPostEscape = pairingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pairingId}", with: pairingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Org Trust
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustee(trusteeOrgId: String, completion: @escaping ((_ data: Trustee?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: trusteeOrgId)
        requestBuilder.execute { (response: Response<Trustee>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Org Trust
     
     - GET /api/v2/orgauthorization/trustees/{trusteeOrgId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "organization" : "",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "enabled" : true
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 

     - returns: RequestBuilder<Trustee> 
     */
    open class func getOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: String) -> RequestBuilder<Trustee> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trustee>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get Trustee User
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrusteeUser(trusteeOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: TrustUser?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrusteeUserWithRequestBuilder(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<TrustUser>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Trustee User
     
     - GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : "",
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : "",
  "skills" : [ "" ],
  "station" : "",
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : "",
  "email" : "aeiou",
  "images" : [ "" ],
  "manager" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : "",
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ "" ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : "",
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "employerInfo" : "",
  "languages" : [ "" ],
  "conversationSummary" : "",
  "groups" : [ "" ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : "",
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : "",
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "trustUserDetails" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : "",
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ "" ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    }
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ "" ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<TrustUser> 
     */
    open class func getOrgauthorizationTrusteeUserWithRequestBuilder(trusteeOrgId: String, trusteeUserId: String) -> RequestBuilder<TrustUser> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustUser>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get Trustee User Roles
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrusteeUserRoles(trusteeOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Trustee User Roles
     
     - GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func getOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: String, trusteeUserId: String) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     The list of trustee users for this organization (i.e. users granted access to this organization).
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrusteeUsers(trusteeOrgId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrusteeUsersWithRequestBuilder(trusteeOrgId: trusteeOrgId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     The list of trustee users for this organization (i.e. users granted access to this organization).
     
     - GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "trustUserDetails" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : "",
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : "",
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ "" ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      }
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TrustUserEntityListing> 
     */
    open class func getOrgauthorizationTrusteeUsersWithRequestBuilder(trusteeOrgId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustUserEntityListing> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TrustUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     The list of trustees for this organization (i.e. organizations granted access to this organization).
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustees(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrusteesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     The list of trustees for this organization (i.e. organizations granted access to this organization).
     
     - GET /api/v2/orgauthorization/trustees
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TrustEntityListing> 
     */
    open class func getOrgauthorizationTrusteesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustEntityListing> {
        let path = "/api/v2/orgauthorization/trustees"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TrustEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Org Trust
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustor(trustorOrgId: String, completion: @escaping ((_ data: Trustor?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrustorWithRequestBuilder(trustorOrgId: trustorOrgId)
        requestBuilder.execute { (response: Response<Trustor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Org Trust
     
     - GET /api/v2/orgauthorization/trustors/{trustorOrgId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "authorization" : {
    "permissions" : [ "aeiou" ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "organization" : "",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "enabled" : true
}}]
     
     - parameter trustorOrgId: (path) Trustor Organization Id 

     - returns: RequestBuilder<Trustor> 
     */
    open class func getOrgauthorizationTrustorWithRequestBuilder(trustorOrgId: String) -> RequestBuilder<Trustor> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trustor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get Trustee User
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustorUser(trustorOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: TrustUser?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<TrustUser>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Trustee User
     
     - GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : "",
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : "",
  "skills" : [ "" ],
  "station" : "",
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : "",
  "email" : "aeiou",
  "images" : [ "" ],
  "manager" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : "",
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ "" ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : "",
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "employerInfo" : "",
  "languages" : [ "" ],
  "conversationSummary" : "",
  "groups" : [ "" ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : "",
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : "",
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "trustUserDetails" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : "",
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ "" ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    }
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ "" ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<TrustUser> 
     */
    open class func getOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: String, trusteeUserId: String) -> RequestBuilder<TrustUser> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustUser>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     The list of users in the trustor organization (i.e. users granted access).
     
     - parameter trustorOrgId: (path) Trustee Organization Id 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustorUsers(trustorOrgId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrustorUsersWithRequestBuilder(trustorOrgId: trustorOrgId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     The list of users in the trustor organization (i.e. users granted access).
     
     - GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "trustUserDetails" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : "",
        "title" : "aeiou",
        "division" : "",
        "authorization" : "",
        "skills" : [ "" ],
        "station" : "",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "images" : [ "" ],
        "manager" : "",
        "employerInfo" : "",
        "languages" : [ "" ],
        "conversationSummary" : "",
        "groups" : [ "" ],
        "primaryContactInfo" : [ "" ],
        "biography" : "",
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : "",
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "organization" : {
          "defaultCountryCode" : "aeiou",
          "selfUri" : "aeiou",
          "thirdPartyURI" : "aeiou",
          "version" : 123,
          "thirdPartyOrgName" : "aeiou",
          "features" : {
            "key" : true
          },
          "defaultLanguage" : "aeiou",
          "defaultSiteId" : "aeiou",
          "supportURI" : "aeiou",
          "domain" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "voicemailEnabled" : true
        },
        "name" : "aeiou",
        "locations" : [ "" ],
        "username" : "aeiou",
        "geolocation" : ""
      }
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter trustorOrgId: (path) Trustee Organization Id 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TrustUserEntityListing> 
     */
    open class func getOrgauthorizationTrustorUsersWithRequestBuilder(trustorOrgId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustUserEntityListing> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}/users"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TrustUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     The list of organizations that have authorized/trusted your organization.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgauthorizationTrustors(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustorEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrgauthorizationTrustorsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustorEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     The list of organizations that have authorized/trusted your organization.
     
     - GET /api/v2/orgauthorization/trustors
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "authorization" : {
      "permissions" : [ "aeiou" ]
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ "" ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : "",
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    },
    "organization" : "",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TrustorEntityListing> 
     */
    open class func getOrgauthorizationTrustorsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustorEntityListing> {
        let path = "/api/v2/orgauthorization/trustors"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TrustorEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     A pairing id is created by the trustee and given to the trustor to create a trust.
     
     - parameter body: (body) Pairing Info 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrgauthorizationPairings(body: TrustRequestCreate, completion: @escaping ((_ data: TrustRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postOrgauthorizationPairingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TrustRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     A pairing id is created by the trustee and given to the trustor to create a trust.
     
     - POST /api/v2/orgauthorization/pairings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "selfUri" : "aeiou",
  "groups" : [ {
    "images" : [ "" ],
    "addresses" : [ "" ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ "" ],
    "type" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "rulesVisible" : true,
    "createdBy" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "trustee" : "",
  "id" : "aeiou",
  "users" : [ "" ]
}}]
     
     - parameter body: (body) Pairing Info 

     - returns: RequestBuilder<TrustRequest> 
     */
    open class func postOrgauthorizationPairingsWithRequestBuilder(body: TrustRequestCreate) -> RequestBuilder<TrustRequest> {
        let path = "/api/v2/orgauthorization/pairings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add a user to the trust.
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter body: (body) Trust 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrgauthorizationTrusteeUsers(trusteeOrgId: String, body: TrustMemberCreate, completion: @escaping ((_ data: TrustUser?,_ error: Error?) -> Void)) {
        let requestBuilder = postOrgauthorizationTrusteeUsersWithRequestBuilder(trusteeOrgId: trusteeOrgId, body: body)
        requestBuilder.execute { (response: Response<TrustUser>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a user to the trust.
     
     - POST /api/v2/orgauthorization/trustees/{trusteeOrgId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : "",
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : "",
  "skills" : [ "" ],
  "station" : "",
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : "",
  "email" : "aeiou",
  "images" : [ "" ],
  "manager" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : "",
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ "" ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : "",
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "employerInfo" : "",
  "languages" : [ "" ],
  "conversationSummary" : "",
  "groups" : [ "" ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : "",
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : "",
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "trustUserDetails" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : "",
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ "" ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    }
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ "" ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter body: (body) Trust 

     - returns: RequestBuilder<TrustUser> 
     */
    open class func postOrgauthorizationTrusteeUsersWithRequestBuilder(trusteeOrgId: String, body: TrustMemberCreate) -> RequestBuilder<TrustUser> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustUser>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     
     - parameter body: (body) Trust 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrgauthorizationTrustees(body: TrustCreate, completion: @escaping ((_ data: Trustee?,_ error: Error?) -> Void)) {
        let requestBuilder = postOrgauthorizationTrusteesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Trustee>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     
     - POST /api/v2/orgauthorization/trustees
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "organization" : "",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "enabled" : true
}}]
     
     - parameter body: (body) Trust 

     - returns: RequestBuilder<Trustee> 
     */
    open class func postOrgauthorizationTrusteesWithRequestBuilder(body: TrustCreate) -> RequestBuilder<Trustee> {
        let path = "/api/v2/orgauthorization/trustees"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trustee>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get Org Trustee Audits
     
     - parameter body: (body) Values to scope the request. 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Sort order (optional, default to descending)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrgauthorizationTrusteesAudits(body: TrusteeAuditQueryRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: AuditQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postOrgauthorizationTrusteesAuditsWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<AuditQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Org Trustee Audits
     
     - POST /api/v2/orgauthorization/trustees/audits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter body: (body) Values to scope the request. 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Sort order (optional, default to descending)

     - returns: RequestBuilder<AuditQueryResponse> 
     */
    open class func postOrgauthorizationTrusteesAuditsWithRequestBuilder(body: TrusteeAuditQueryRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<AuditQueryResponse> {
        let path = "/api/v2/orgauthorization/trustees/audits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<AuditQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get Org Trustor Audits
     
     - parameter body: (body) Values to scope the request. 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Sort order (optional, default to descending)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOrgauthorizationTrustorAudits(body: TrustorAuditQueryRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: AuditQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postOrgauthorizationTrustorAuditsWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<AuditQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Org Trustor Audits
     
     - POST /api/v2/orgauthorization/trustor/audits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter body: (body) Values to scope the request. 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Sort order (optional, default to descending)

     - returns: RequestBuilder<AuditQueryResponse> 
     */
    open class func postOrgauthorizationTrustorAuditsWithRequestBuilder(body: TrustorAuditQueryRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<AuditQueryResponse> {
        let path = "/api/v2/orgauthorization/trustor/audits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<AuditQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update Org Trust
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter body: (body) Client 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrgauthorizationTrustee(trusteeOrgId: String, body: Trustee, completion: @escaping ((_ data: Trustee?,_ error: Error?) -> Void)) {
        let requestBuilder = putOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: trusteeOrgId, body: body)
        requestBuilder.execute { (response: Response<Trustee>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Org Trust
     
     - PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : "",
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : "",
    "skills" : [ "" ],
    "station" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : "",
    "email" : "aeiou",
    "images" : [ "" ],
    "manager" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : "",
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ "" ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "employerInfo" : "",
    "languages" : [ "" ],
    "conversationSummary" : "",
    "groups" : [ "" ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : "",
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : "",
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "organization" : {
      "defaultCountryCode" : "aeiou",
      "selfUri" : "aeiou",
      "thirdPartyURI" : "aeiou",
      "version" : 123,
      "thirdPartyOrgName" : "aeiou",
      "features" : {
        "key" : true
      },
      "defaultLanguage" : "aeiou",
      "defaultSiteId" : "aeiou",
      "supportURI" : "aeiou",
      "domain" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "voicemailEnabled" : true
    },
    "name" : "aeiou",
    "locations" : [ "" ],
    "username" : "aeiou",
    "geolocation" : ""
  },
  "organization" : "",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "enabled" : true
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter body: (body) Client 

     - returns: RequestBuilder<Trustee> 
     */
    open class func putOrgauthorizationTrusteeWithRequestBuilder(trusteeOrgId: String, body: Trustee) -> RequestBuilder<Trustee> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trustee>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update Trustee User Roles
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter body: (body) List of roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrgauthorizationTrusteeUserRoles(trusteeOrgId: String, trusteeUserId: String, body: [String], completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = putOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId, body: body)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Trustee User Roles
     
     - PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter trusteeOrgId: (path) Trustee Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter body: (body) List of roles 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func putOrgauthorizationTrusteeUserRolesWithRequestBuilder(trusteeOrgId: String, trusteeUserId: String, body: [String]) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles"
        let trusteeOrgIdPreEscape = "\(trusteeOrgId)"
        let trusteeOrgIdPostEscape = trusteeOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeOrgId}", with: trusteeOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add a Trustee user to the trust.
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrgauthorizationTrustorUser(trustorOrgId: String, trusteeUserId: String, completion: @escaping ((_ data: TrustUser?,_ error: Error?) -> Void)) {
        let requestBuilder = putOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId)
        requestBuilder.execute { (response: Response<TrustUser>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a Trustee user to the trust.
     
     - PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "acdAutoAnswer" : true,
  "routingStatus" : "",
  "title" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "authorization" : "",
  "skills" : [ "" ],
  "station" : "",
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : "",
  "email" : "aeiou",
  "images" : [ "" ],
  "manager" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : "",
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ "" ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : "",
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "employerInfo" : "",
  "languages" : [ "" ],
  "conversationSummary" : "",
  "groups" : [ "" ],
  "primaryContactInfo" : [ {
    "extension" : "aeiou",
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "biography" : "",
  "certifications" : [ "aeiou" ],
  "version" : 123,
  "outOfOffice" : "",
  "languagePreference" : "aeiou",
  "profileSkills" : [ "aeiou" ],
  "trustUserDetails" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : "",
      "title" : "aeiou",
      "division" : "",
      "authorization" : "",
      "skills" : [ "" ],
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : "",
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : "",
      "languages" : [ "" ],
      "conversationSummary" : "",
      "groups" : [ "" ],
      "primaryContactInfo" : [ "" ],
      "biography" : "",
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : "",
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : "",
      "organization" : {
        "defaultCountryCode" : "aeiou",
        "selfUri" : "aeiou",
        "thirdPartyURI" : "aeiou",
        "version" : 123,
        "thirdPartyOrgName" : "aeiou",
        "features" : {
          "key" : true
        },
        "defaultLanguage" : "aeiou",
        "defaultSiteId" : "aeiou",
        "supportURI" : "aeiou",
        "domain" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "voicemailEnabled" : true
      },
      "name" : "aeiou",
      "locations" : [ "" ],
      "username" : "aeiou",
      "geolocation" : ""
    }
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "locations" : [ "" ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter trustorOrgId: (path) Trustor Organization Id 
     - parameter trusteeUserId: (path) Trustee User Id 

     - returns: RequestBuilder<TrustUser> 
     */
    open class func putOrgauthorizationTrustorUserWithRequestBuilder(trustorOrgId: String, trusteeUserId: String) -> RequestBuilder<TrustUser> {
        var path = "/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}"
        let trustorOrgIdPreEscape = "\(trustorOrgId)"
        let trustorOrgIdPostEscape = trustorOrgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorOrgId}", with: trustorOrgIdPostEscape, options: .literal, range: nil)
        let trusteeUserIdPreEscape = "\(trusteeUserId)"
        let trusteeUserIdPostEscape = trusteeUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trusteeUserId}", with: trusteeUserIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrustUser>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
