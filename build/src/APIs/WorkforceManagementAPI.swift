//
// WorkforceManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WorkforceManagementAPI {
    
    
    
    /**
     
     Delete management unit
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunit(muId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete management unit
     
     - DELETE /api/v2/workforcemanagement/managementunits/{muId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWithRequestBuilder(muId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Deletes an activity code
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitActivitycode(muId: String, acId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: muId, acId: acId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes an activity code
     
     - DELETE /api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: String, acId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let acIdPreEscape = "\(acId)"
        let acIdPostEscape = acIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{acId}", with: acIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Cancel a schedule run
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitSchedulingRun(managementUnitId: String, runId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: managementUnitId, runId: runId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Cancel a schedule run
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: String, runId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a service goal group
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitServicegoalgroup(managementUnitId: String, serviceGoalGroupId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: managementUnitId, serviceGoalGroupId: serviceGoalGroupId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a service goal group
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: String, serviceGoalGroupId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalGroupIdPreEscape = "\(serviceGoalGroupId)"
        let serviceGoalGroupIdPostEscape = serviceGoalGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalGroupId}", with: serviceGoalGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of theschedule to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitWeekSchedule(managementUnitId: String, weekId: String, scheduleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a schedule
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of theschedule to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a short term forecast
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitWeekShorttermforecast(managementUnitId: String, weekDateId: String, forecastId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWeekShorttermforecastWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, forecastId: forecastId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a short term forecast
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}
     - Must not be tied to any schedules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWeekShorttermforecastWithRequestBuilder(managementUnitId: String, weekDateId: String, forecastId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a work plan
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a list of UserScheduleAdherence records for the requested users
     
     - parameter userId: (query) User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAdherence(userId: [String], completion: @escaping ((_ data: [UserScheduleAdherence]?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAdherenceWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<[UserScheduleAdherence]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of UserScheduleAdherence records for the requested users
     
     - GET /api/v2/workforcemanagement/adherence
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "removedFromManagementUnit" : true,
  "organizationSecondaryPresenceId" : "aeiou",
  "impact" : "aeiou",
  "selfUri" : "aeiou",
  "adherenceState" : "aeiou",
  "routingStatus" : "aeiou",
  "presenceUpdateTime" : "2000-01-23T04:56:07.000+0000",
  "isOutOfOffice" : true,
  "activeQueuesModifiedTime" : "2000-01-23T04:56:07.000+0000",
  "managementUnit" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "startDayOfWeek" : "aeiou",
    "settings" : {
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        }
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  },
  "timeOfAdherenceChange" : "2000-01-23T04:56:07.000+0000",
  "systemPresence" : "aeiou",
  "name" : "aeiou",
  "actualActivityCategory" : "aeiou",
  "scheduledActivityCategory" : "aeiou",
  "activeQueues" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "id" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
} ]}]
     
     - parameter userId: (query) User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request 

     - returns: RequestBuilder<[UserScheduleAdherence]> 
     */
    open class func getWorkforcemanagementAdherenceWithRequestBuilder(userId: [String]) -> RequestBuilder<[UserScheduleAdherence]> {
        let path = "/api/v2/workforcemanagement/adherence"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "userId": userId
            
        ])

        let requestBuilder: RequestBuilder<[UserScheduleAdherence]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status of the modeling job
     
     - parameter jobId: (path) The id of the modeling job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAdhocmodelingjob(jobId: String, completion: @escaping ((_ data: ModelingStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAdhocmodelingjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<ModelingStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status of the modeling job
     
     - GET /api/v2/workforcemanagement/adhocmodelingjobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "aeiou",
  "modelingResultUri" : "aeiou",
  "status" : "aeiou",
  "errorDetails" : [ {
    "description" : "aeiou",
    "internalErrorCode" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) The id of the modeling job 

     - returns: RequestBuilder<ModelingStatusResponse> 
     */
    open class func getWorkforcemanagementAdhocmodelingjobWithRequestBuilder(jobId: String) -> RequestBuilder<ModelingStatusResponse> {
        var path = "/api/v2/workforcemanagement/adhocmodelingjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelingStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunit: String { 
        case settings = "settings"
        case settingsAdherence = "settings.adherence"
        case settingsTimeoff = "settings.timeOff"
        case settingsScheduling = "settings.scheduling"
        case settingsShorttermforecasting = "settings.shortTermForecasting"
        case settingsShifttrading = "settings.shiftTrading"
    }

    
    
    /**
     
     Get management unit
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunit(muId: String, expand: [String]? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWithRequestBuilder(muId: muId, expand: expand)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "startDayOfWeek" : "aeiou",
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      }
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func getWorkforcemanagementManagementunitWithRequestBuilder(muId: String, expand: [String]? = nil) -> RequestBuilder<ManagementUnit> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get an activity code
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitActivitycode(muId: String, acId: String, completion: @escaping ((_ data: ActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: muId, acId: acId)
        requestBuilder.execute { (response: Response<ActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an activity code
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "isDefault" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "isActive" : true,
  "category" : "aeiou"
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to fetch 

     - returns: RequestBuilder<ActivityCode> 
     */
    open class func getWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: String, acId: String) -> RequestBuilder<ActivityCode> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let acIdPreEscape = "\(acId)"
        let acIdPostEscape = acIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{acId}", with: acIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get activity codes
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitActivitycodes(muId: String, completion: @escaping ((_ data: ActivityCodeContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<ActivityCodeContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get activity codes
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/activitycodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : "",
  "activityCodes" : {
    "key" : {
      "lengthInMinutes" : 123,
      "isDefault" : true,
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "countsAsWorkTime" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "countsAsPaidTime" : true,
      "agentTimeOffSelectable" : true,
      "isActive" : true,
      "category" : "aeiou"
    }
  }
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ActivityCodeContainer> 
     */
    open class func getWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(muId: String) -> RequestBuilder<ActivityCodeContainer> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/activitycodes"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityCodeContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get data for agent in the management unit
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitAgent(managementUnitId: String, agentId: String, completion: @escaping ((_ data: WfmAgent?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitAgentWithRequestBuilder(managementUnitId: managementUnitId, agentId: agentId)
        requestBuilder.execute { (response: Response<WfmAgent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get data for agent in the management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "skills" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "schedulable" : true,
  "queues" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "timeZone" : {
    "id" : "aeiou"
  },
  "id" : "aeiou",
  "workPlan" : {
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "acceptDirectShiftTrades" : true
}}]
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 

     - returns: RequestBuilder<WfmAgent> 
     */
    open class func getWorkforcemanagementManagementunitAgentWithRequestBuilder(managementUnitId: String, agentId: String) -> RequestBuilder<WfmAgent> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmAgent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get intraday queues for the given date
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter date: (query) yyyy-MM-dd date string interpreted in the configured management unit time zone 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitIntradayQueues(muId: String, date: String, completion: @escaping ((_ data: WfmIntradayQueueListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitIntradayQueuesWithRequestBuilder(muId: muId, date: date)
        requestBuilder.execute { (response: Response<WfmIntradayQueueListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get intraday queues for the given date
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/intraday/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noDataReason" : "aeiou",
  "entities" : [ {
    "mediaTypes" : [ "aeiou" ],
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter date: (query) yyyy-MM-dd date string interpreted in the configured management unit time zone 

     - returns: RequestBuilder<WfmIntradayQueueListing> 
     */
    open class func getWorkforcemanagementManagementunitIntradayQueuesWithRequestBuilder(muId: String, date: String) -> RequestBuilder<WfmIntradayQueueListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/intraday/queues"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "date": date
            
        ])

        let requestBuilder: RequestBuilder<WfmIntradayQueueListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Gets the status for a specific scheduling run
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitSchedulingRun(managementUnitId: String, runId: String, completion: @escaping ((_ data: SchedulingRunResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: managementUnitId, runId: runId)
        requestBuilder.execute { (response: Response<SchedulingRunResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the status for a specific scheduling run
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "applied" : true,
  "unscheduledAgents" : [ {
    "agent" : "",
    "unscheduledReason" : "aeiou"
  } ],
  "targetWeek" : "aeiou",
  "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
  "schedulerRunId" : "aeiou",
  "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
  "schedulingCanceledBy" : "",
  "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
  "intradayRescheduling" : true,
  "scheduleDescription" : "aeiou",
  "reschedulingOptions" : {
    "agentIds" : [ "aeiou" ],
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "activityCodeIds" : [ "aeiou" ],
    "doNotChangeManuallyEditedShifts" : true,
    "existingScheduleId" : "aeiou",
    "doNotChangeDailyPaidTime" : true,
    "doNotChangeShiftStartTimes" : true,
    "existingScheduleVersion" : 123,
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "doNotChangeWeeklyPaidTime" : true
  },
  "runId" : "aeiou",
  "state" : "aeiou",
  "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
  "schedulingStartedBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "scheduleId" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 

     - returns: RequestBuilder<SchedulingRunResponse> 
     */
    open class func getWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: String, runId: String) -> RequestBuilder<SchedulingRunResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SchedulingRunResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Gets the result of a specific scheduling run
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitSchedulingRunResult(managementUnitId: String, runId: String, completion: @escaping ((_ data: RescheduleResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitSchedulingRunResultWithRequestBuilder(managementUnitId: managementUnitId, runId: runId)
        requestBuilder.execute { (response: Response<RescheduleResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the result of a specific scheduling run
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}/result
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 

     - returns: RequestBuilder<RescheduleResult> 
     */
    open class func getWorkforcemanagementManagementunitSchedulingRunResultWithRequestBuilder(managementUnitId: String, runId: String) -> RequestBuilder<RescheduleResult> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}/result"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RescheduleResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the status of all the ongoing schedule runs
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitSchedulingRuns(managementUnitId: String, completion: @escaping ((_ data: SchedulingRunListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitSchedulingRunsWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<SchedulingRunListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the status of all the ongoing schedule runs
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "applied" : true,
    "unscheduledAgents" : [ {
      "agent" : "",
      "unscheduledReason" : "aeiou"
    } ],
    "targetWeek" : "aeiou",
    "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
    "schedulerRunId" : "aeiou",
    "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
    "schedulingCanceledBy" : "",
    "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
    "intradayRescheduling" : true,
    "scheduleDescription" : "aeiou",
    "reschedulingOptions" : {
      "agentIds" : [ "aeiou" ],
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "activityCodeIds" : [ "aeiou" ],
      "doNotChangeManuallyEditedShifts" : true,
      "existingScheduleId" : "aeiou",
      "doNotChangeDailyPaidTime" : true,
      "doNotChangeShiftStartTimes" : true,
      "existingScheduleVersion" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "doNotChangeWeeklyPaidTime" : true
    },
    "runId" : "aeiou",
    "state" : "aeiou",
    "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
    "schedulingStartedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "scheduleId" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit. 

     - returns: RequestBuilder<SchedulingRunListResponse> 
     */
    open class func getWorkforcemanagementManagementunitSchedulingRunsWithRequestBuilder(managementUnitId: String) -> RequestBuilder<SchedulingRunListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SchedulingRunListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a service goal group
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitServicegoalgroup(managementUnitId: String, serviceGoalGroupId: String, completion: @escaping ((_ data: ServiceGoalGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: managementUnitId, serviceGoalGroupId: serviceGoalGroupId)
        requestBuilder.execute { (response: Response<ServiceGoalGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a service goal group
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "queueMediaAssociations" : [ {
    "mediaTypes" : [ "aeiou" ],
    "id" : "aeiou",
    "delete" : true,
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "goals" : {
    "abandonRate" : {
      "include" : true,
      "percent" : 123
    },
    "averageSpeedOfAnswer" : {
      "include" : true,
      "seconds" : 123
    },
    "serviceLevel" : {
      "include" : true,
      "seconds" : 123,
      "percent" : 123
    }
  }
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to fetch 

     - returns: RequestBuilder<ServiceGoalGroup> 
     */
    open class func getWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: String, serviceGoalGroupId: String) -> RequestBuilder<ServiceGoalGroup> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalGroupIdPreEscape = "\(serviceGoalGroupId)"
        let serviceGoalGroupIdPostEscape = serviceGoalGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalGroupId}", with: serviceGoalGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get service goal groups
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitServicegoalgroups(managementUnitId: String, completion: @escaping ((_ data: ServiceGoalGroupList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitServicegoalgroupsWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<ServiceGoalGroupList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get service goal groups
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : "",
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "queueMediaAssociations" : [ {
      "mediaTypes" : [ "aeiou" ],
      "id" : "aeiou",
      "delete" : true,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "goals" : {
      "abandonRate" : {
        "include" : true,
        "percent" : 123
      },
      "averageSpeedOfAnswer" : {
        "include" : true,
        "seconds" : 123
      },
      "serviceLevel" : {
        "include" : true,
        "seconds" : 123,
        "percent" : 123
      }
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ServiceGoalGroupList> 
     */
    open class func getWorkforcemanagementManagementunitServicegoalgroupsWithRequestBuilder(managementUnitId: String) -> RequestBuilder<ServiceGoalGroupList> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalGroupList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the settings for the requested management unit. Deprecated, use the GET management unit route instead
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitSettings(muId: String, completion: @escaping ((_ data: ManagementUnitSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitSettingsWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<ManagementUnitSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the settings for the requested management unit. Deprecated, use the GET management unit route instead
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "shiftTrading" : {
    "weeklyMaxPaidViolations" : "aeiou",
    "unequalPaid" : "aeiou",
    "requiresMatchingLanguages" : true,
    "oneSided" : "aeiou",
    "allowDirectTrades" : true,
    "autoReview" : true,
    "enabled" : true,
    "weeklyMinPaidViolations" : "aeiou",
    "requiresMatchingSkills" : true,
    "requiresMatchingQueues" : true,
    "minHoursInFuture" : 123,
    "activityCategoryRules" : [ {
      "activityCodeIdReplacement" : "aeiou",
      "activityCategory" : "aeiou",
      "action" : "aeiou"
    } ],
    "requiresMatchingPlanningGroups" : true
  },
  "adherence" : {
    "ignoredActivityCategories" : {
      "values" : [ "aeiou" ]
    },
    "nonOnQueueActivitiesEquivalent" : true,
    "adherenceTargetPercent" : 123,
    "adherenceExceptionThresholdSeconds" : 123,
    "trackOnQueueActivity" : true,
    "severeAlertThresholdMinutes" : 123
  },
  "scheduling" : {
    "maxOccupancyPercentForDeferredWork" : 123,
    "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
    "shrinkageOverrides" : {
      "values" : [ {
        "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "intervalIndex" : 123
      } ],
      "clear" : true
    }
  },
  "timeOff" : {
    "submissionEarliestDaysFromNow" : 123,
    "submissionRangeEnforced" : true,
    "submissionLatestDaysFromNow" : 123
  },
  "shortTermForecasting" : {
    "defaultHistoryWeeks" : 123
  }
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ManagementUnitSettingsResponse> 
     */
    open class func getWorkforcemanagementManagementunitSettingsWithRequestBuilder(muId: String) -> RequestBuilder<ManagementUnitSettingsResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/settings"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnitSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets a summary of all shift trades in the matched state
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitShifttradesMatched(muId: String, completion: @escaping ((_ data: ShiftTradeMatchesSummaryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitShifttradesMatchedWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<ShiftTradeMatchesSummaryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a summary of all shift trades in the matched state
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/shifttrades/matched
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "count" : 123,
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  } ]
}}]
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ShiftTradeMatchesSummaryResponse> 
     */
    open class func getWorkforcemanagementManagementunitShifttradesMatchedWithRequestBuilder(muId: String) -> RequestBuilder<ShiftTradeMatchesSummaryResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/shifttrades/matched"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeMatchesSummaryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets list of users available for whom you can send direct shift trade requests
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitShifttradesUsers(muId: String, completion: @escaping ((_ data: WfmUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitShifttradesUsersWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<WfmUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets list of users available for whom you can send direct shift trade requests
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/shifttrades/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<WfmUserEntityListing> 
     */
    open class func getWorkforcemanagementManagementunitShifttradesUsersWithRequestBuilder(muId: String) -> RequestBuilder<WfmUserEntityListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/shifttrades/users"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a time off request
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequest(muId: String, userId: String, timeOffRequestId: String, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(muId: muId, userId: userId, timeOffRequestId: timeOffRequestId)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a time off request
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter timeOffRequestId: (path) Time Off Request Id 

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(muId: String, userId: String, timeOffRequestId: String) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests/{timeOffRequestId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of time off requests for a given user
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequests(muId: String, userId: String, recentlyReviewed: Bool? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUserTimeoffrequestsWithRequestBuilder(muId: muId, userId: userId, recentlyReviewed: recentlyReviewed)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of time off requests for a given user
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequestsWithRequestBuilder(muId: String, userId: String, recentlyReviewed: Bool? = nil) -> RequestBuilder<TimeOffRequestList> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "recentlyReviewed": recentlyReviewed
            
        ])

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get users in the management unit
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUsers(muId: String, completion: @escaping ((_ data: WfmUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUsersWithRequestBuilder(muId: muId)
        requestBuilder.execute { (response: Response<WfmUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get users in the management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{muId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<WfmUserEntityListing> 
     */
    open class func getWorkforcemanagementManagementunitUsersWithRequestBuilder(muId: String) -> RequestBuilder<WfmUserEntityListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/users"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunitWeekSchedule: String { 
        case generationresults = "generationResults"
        case headcountforecast = "headcountForecast"
    }

    
    
    
    
    /**
     
     Get a week schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekSchedule(managementUnitId: String, weekId: String, scheduleId: String, expand: Expand_getWorkforcemanagementManagementunitWeekSchedule? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: WeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, expand: expand, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<WeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a week schedule
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<WeekScheduleResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String, expand: Expand_getWorkforcemanagementManagementunitWeekSchedule? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<WeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<WeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get week schedule generation results
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch generation results 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekScheduleGenerationresults(managementUnitId: String, weekId: String, scheduleId: String, completion: @escaping ((_ data: WeekScheduleGenerationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekScheduleGenerationresultsWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<WeekScheduleGenerationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get week schedule generation results
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agentWarningCount" : 123,
  "agentWarnings" : [ {
    "unableToScheduleRequiredDays" : [ "aeiou" ],
    "userNotLicensed" : true,
    "unableToMeetMaxDays" : true,
    "noNeedDays" : [ "aeiou" ],
    "unableToMeetMaxPaidForTheWeek" : true,
    "unableToMeetMinPaidForTheWeek" : true,
    "userId" : "aeiou",
    "shiftsTooCloseTogether" : true
  } ],
  "failed" : true,
  "runId" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch generation results 

     - returns: RequestBuilder<WeekScheduleGenerationResult> 
     */
    open class func getWorkforcemanagementManagementunitWeekScheduleGenerationresultsWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String) -> RequestBuilder<WeekScheduleGenerationResult> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WeekScheduleGenerationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of schedules in a week in management unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter includeOnlyPublished: (query) Return only published schedules (optional)
     - parameter earliestWeekDate: (query) The start date of the earliest week to query in yyyy-MM-dd format (optional)
     - parameter latestWeekDate: (query) The start date of the latest week to query in yyyy-MM-dd format (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekSchedules(managementUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, earliestWeekDate: String? = nil, latestWeekDate: String? = nil, completion: @escaping ((_ data: WeekScheduleListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, includeOnlyPublished: includeOnlyPublished, earliestWeekDate: earliestWeekDate, latestWeekDate: latestWeekDate)
        requestBuilder.execute { (response: Response<WeekScheduleListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of schedules in a week in management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter includeOnlyPublished: (query) Return only published schedules (optional)
     - parameter earliestWeekDate: (query) The start date of the earliest week to query in yyyy-MM-dd format (optional)
     - parameter latestWeekDate: (query) The start date of the latest week to query in yyyy-MM-dd format (optional)

     - returns: RequestBuilder<WeekScheduleListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, earliestWeekDate: String? = nil, latestWeekDate: String? = nil) -> RequestBuilder<WeekScheduleListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeOnlyPublished": includeOnlyPublished, 
            
            "earliestWeekDate": earliestWeekDate, 
            
            "latestWeekDate": latestWeekDate
            
        ])

        let requestBuilder: RequestBuilder<WeekScheduleListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the final result of a short term forecast calculation with modifications applied
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekShorttermforecastFinal(managementUnitId: String, weekDateId: String, forecastId: String, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: ForecastResultResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekShorttermforecastFinalWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, forecastId: forecastId, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<ForecastResultResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the final result of a short term forecast calculation with modifications applied
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/final
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "routeGroups" : [ {
      "averageTalkTimeSecondsPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "averageAfterCallWorkSecondsPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "attributes" : {
        "skills" : [ {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        } ],
        "mediaType" : "aeiou",
        "language" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "offeredPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "abandonedPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "completedPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    } ],
    "startDate" : "2000-01-23T04:56:07.000+0000"
  },
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<ForecastResultResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekShorttermforecastFinalWithRequestBuilder(managementUnitId: String, weekDateId: String, forecastId: String, forceDownloadService: Bool? = nil) -> RequestBuilder<ForecastResultResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/final"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<ForecastResultResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get short term forecasts
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekShorttermforecasts(managementUnitId: String, weekDateId: String, completion: @escaping ((_ data: ShortTermForecastListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekShorttermforecastsWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId)
        requestBuilder.execute { (response: Response<ShortTermForecastListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get short term forecasts
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts
     - Use \"recent\" for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "aeiou",
    "creationMethod" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 

     - returns: RequestBuilder<ShortTermForecastListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekShorttermforecastsWithRequestBuilder(managementUnitId: String, weekDateId: String) -> RequestBuilder<ShortTermForecastListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShortTermForecastListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a work plan
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainWeeklyPaidTime" : true,
  "constrainPaidTimeGranularity" : true,
  "enabled" : true,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "startTimeIsRelativeToShiftStart" : true,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "weeklyExactPaidMinutes" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to fetch 

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func getWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunitWorkplans: String { 
        case agentcount = "agentCount"
        case details = "details"
    }

    
    
    /**
     
     Get work plans
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplans(managementUnitId: String, expand: [String]? = nil, completion: @escaping ((_ data: WorkPlanListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: managementUnitId, expand: expand)
        requestBuilder.execute { (response: Response<WorkPlanListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get work plans
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "optionalDays" : {
      "values" : [ "aeiou" ]
    },
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "flexibleWeeklyPaidTime" : true,
    "maximumDays" : 123,
    "minimumWorkingDaysPerWeek" : 123,
    "shiftStartVariances" : {
      "values" : [ {
        "applicableDays" : [ "aeiou" ],
        "maxShiftStartVarianceMinutes" : 123
      } ]
    },
    "selfUri" : "aeiou",
    "minimumTimeBetweenShiftsMinutes" : 123,
    "constrainWeeklyPaidTime" : true,
    "constrainPaidTimeGranularity" : true,
    "enabled" : true,
    "agents" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "delete" : true
    } ],
    "weeklyMaximumPaidMinutes" : 123,
    "name" : "aeiou",
    "constrainMinimumTimeBetweenShifts" : true,
    "shifts" : [ {
      "exactStartTimeMinutesFromMidnight" : 123,
      "maximumContiguousWorkTimeMinutes" : 123,
      "startIncrementMinutes" : 123,
      "flexiblePaidTime" : true,
      "constrainContiguousWorkTime" : true,
      "delete" : true,
      "constrainLatestStopTime" : true,
      "latestStartTimeMinutesFromMidnight" : 123,
      "constrainStopTime" : true,
      "latestStopTimeMinutesFromMidnight" : 123,
      "activities" : [ {
        "startTimeIncrementMinutes" : 123,
        "lengthMinutes" : 123,
        "earliestStartTimeMinutes" : 123,
        "description" : "aeiou",
        "latestStartTimeMinutes" : 123,
        "countsAsPaidTime" : true,
        "delete" : true,
        "activityCodeId" : "aeiou",
        "startTimeIsRelativeToShiftStart" : true,
        "exactStartTimeMinutes" : 123,
        "countsAsContiguousWorkTime" : true,
        "id" : "aeiou",
        "flexibleStartTime" : true
      } ],
      "maximumPaidTimeMinutes" : 123,
      "name" : "aeiou",
      "days" : "",
      "id" : "aeiou",
      "minimumContiguousWorkTimeMinutes" : 123,
      "exactPaidTimeMinutes" : 123,
      "earliestStartTimeMinutesFromMidnight" : 123,
      "flexibleStartTime" : true,
      "minimumPaidTimeMinutes" : 123
    } ],
    "weeklyMinimumPaidMinutes" : 123,
    "id" : "aeiou",
    "paidTimeGranularityMinutes" : 123,
    "agentCount" : 123,
    "weeklyExactPaidMinutes" : 123
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<WorkPlanListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: String, expand: [String]? = nil) -> RequestBuilder<WorkPlanListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkPlanListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunits: String { 
        case details = "details"
    }

    
    
    
    public enum Feature_getWorkforcemanagementManagementunits: String { 
        case agentSchedule = "AgentSchedule"
        case agentTimeOffRequest = "AgentTimeOffRequest"
        case activityCodes = "ActivityCodes"
        case agents = "Agents"
        case businessUnitActivityCodes = "BusinessUnitActivityCodes"
        case businessUnits = "BusinessUnits"
        case historicalAdherence = "HistoricalAdherence"
        case intradayMonitoring = "IntradayMonitoring"
        case buIntradayMonitoring = "BuIntradayMonitoring"
        case managementUnits = "ManagementUnits"
        case realTimeAdherence = "RealTimeAdherence"
        case schedules = "Schedules"
        case buSchedules = "BuSchedules"
        case serviceGoalGroups = "ServiceGoalGroups"
        case serviceGoalTemplates = "ServiceGoalTemplates"
        case planningGroups = "PlanningGroups"
        case shiftTrading = "ShiftTrading"
        case shortTermForecasts = "ShortTermForecasts"
        case buShortTermForecasts = "BuShortTermForecasts"
        case timeOffRequests = "TimeOffRequests"
        case workPlans = "WorkPlans"
    }

    
    
    
    
    /**
     
     Get management units
     
     - parameter pageSize: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunits(pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getWorkforcemanagementManagementunits? = nil, feature: Feature_getWorkforcemanagementManagementunits? = nil, divisionId: String? = nil, completion: @escaping ((_ data: ManagementUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, expand: expand, feature: feature, divisionId: divisionId)
        requestBuilder.execute { (response: Response<ManagementUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management units
     
     - GET /api/v2/workforcemanagement/managementunits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "startDayOfWeek" : "aeiou",
    "settings" : {
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        }
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query)  (optional)
     - parameter pageNumber: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)

     - returns: RequestBuilder<ManagementUnitListing> 
     */
    open class func getWorkforcemanagementManagementunitsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getWorkforcemanagementManagementunits? = nil, feature: Feature_getWorkforcemanagementManagementunits? = nil, divisionId: String? = nil) -> RequestBuilder<ManagementUnitListing> {
        let path = "/api/v2/workforcemanagement/managementunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "expand": expand?.rawValue, 
            
            "feature": feature?.rawValue, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get management units across divisions
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return all divisions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitsDivisionviews(divisionId: [String]? = nil, completion: @escaping ((_ data: ManagementUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitsDivisionviewsWithRequestBuilder(divisionId: divisionId)
        requestBuilder.execute { (response: Response<ManagementUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management units across divisions
     
     - GET /api/v2/workforcemanagement/managementunits/divisionviews
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "startDayOfWeek" : "aeiou",
    "settings" : {
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        }
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return all divisions (optional)

     - returns: RequestBuilder<ManagementUnitListing> 
     */
    open class func getWorkforcemanagementManagementunitsDivisionviewsWithRequestBuilder(divisionId: [String]? = nil) -> RequestBuilder<ManagementUnitListing> {
        let path = "/api/v2/workforcemanagement/managementunits/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get a list of notifications for the current user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementNotifications(completion: @escaping ((_ data: NotificationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementNotificationsWithRequestBuilder()
        requestBuilder.execute { (response: Response<NotificationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of notifications for the current user
     
     - GET /api/v2/workforcemanagement/notifications
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "markedAsRead" : true,
    "mutableGroupId" : "aeiou",
    "otherNotificationIdsInGroup" : [ "aeiou" ],
    "timeOffRequest" : {
      "timeOffRequestId" : "aeiou",
      "isFullDayRequest" : true,
      "fullDayManagementUnitDates" : [ "aeiou" ],
      "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
      "user" : "",
      "status" : "aeiou"
    },
    "id" : "aeiou",
    "shiftTrade" : {
      "receivingUser" : "",
      "receivingShiftDate" : "2000-01-23T04:56:07.000+0000",
      "oneSided" : true,
      "weekDate" : "aeiou",
      "tradeId" : "aeiou",
      "newState" : "aeiou",
      "initiatingUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "initiatingShiftDate" : "2000-01-23T04:56:07.000+0000"
    },
    "type" : "aeiou",
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "agentNotification" : true
  } ]
}}]

     - returns: RequestBuilder<NotificationsResponse> 
     */
    open class func getWorkforcemanagementNotificationsWithRequestBuilder() -> RequestBuilder<NotificationsResponse> {
        let path = "/api/v2/workforcemanagement/notifications"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status of the scheduling job
     
     - parameter jobId: (path) The id of the scheduling job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementSchedulingjob(jobId: String, completion: @escaping ((_ data: SchedulingStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementSchedulingjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<SchedulingStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status of the scheduling job
     
     - GET /api/v2/workforcemanagement/schedulingjobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedulingResultUri" : "aeiou",
  "id" : "aeiou",
  "percentComplete" : 123,
  "status" : "aeiou",
  "errorDetails" : [ {
    "description" : "aeiou",
    "internalErrorCode" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) The id of the scheduling job 

     - returns: RequestBuilder<SchedulingStatusResponse> 
     */
    open class func getWorkforcemanagementSchedulingjobWithRequestBuilder(jobId: String) -> RequestBuilder<SchedulingStatusResponse> {
        var path = "/api/v2/workforcemanagement/schedulingjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SchedulingStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Gets all of my shift trades
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementShifttrades(completion: @escaping ((_ data: ShiftTradeListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementShifttradesWithRequestBuilder()
        requestBuilder.execute { (response: Response<ShiftTradeListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all of my shift trades
     
     - GET /api/v2/workforcemanagement/shifttrades
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "receivingShiftId" : "aeiou",
    "receivingUser" : "",
    "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "oneSided" : true,
    "reviewedBy" : "",
    "initiatingUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "schedule" : {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "acceptableIntervals" : [ "aeiou" ],
    "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "expiration" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "initiatingShiftId" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<ShiftTradeListResponse> 
     */
    open class func getWorkforcemanagementShifttradesWithRequestBuilder() -> RequestBuilder<ShiftTradeListResponse> {
        let path = "/api/v2/workforcemanagement/shifttrades"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a time off request for the current user
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementTimeoffrequest(timeOffRequestId: String, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: timeOffRequestId)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a time off request for the current user
     
     - GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter timeOffRequestId: (path) Time Off Request Id 

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func getWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: String) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}"
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a list of time off requests for the current user
     
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementTimeoffrequests(recentlyReviewed: Bool? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementTimeoffrequestsWithRequestBuilder(recentlyReviewed: recentlyReviewed)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of time off requests for the current user
     
     - GET /api/v2/workforcemanagement/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func getWorkforcemanagementTimeoffrequestsWithRequestBuilder(recentlyReviewed: Bool? = nil) -> RequestBuilder<TimeOffRequestList> {
        let path = "/api/v2/workforcemanagement/timeoffrequests"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "recentlyReviewed": recentlyReviewed
            
        ])

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the requested management unit
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunit(muId: String, body: UpdateManagementUnitRequest? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the requested management unit
     
     - PATCH /api/v2/workforcemanagement/managementunits/{muId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "startDayOfWeek" : "aeiou",
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      }
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func patchWorkforcemanagementManagementunitWithRequestBuilder(muId: String, body: UpdateManagementUnitRequest? = nil) -> RequestBuilder<ManagementUnit> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update an activity code
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitActivitycode(muId: String, acId: String, body: UpdateActivityCodeRequest? = nil, completion: @escaping ((_ data: ActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: muId, acId: acId, body: body)
        requestBuilder.execute { (response: Response<ActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an activity code
     
     - PATCH /api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "isDefault" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "isActive" : true,
  "category" : "aeiou"
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter acId: (path) The ID of the activity code to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ActivityCode> 
     */
    open class func patchWorkforcemanagementManagementunitActivitycodeWithRequestBuilder(muId: String, acId: String, body: UpdateActivityCodeRequest? = nil) -> RequestBuilder<ActivityCode> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/activitycodes/{acId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let acIdPreEscape = "\(acId)"
        let acIdPostEscape = acIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{acId}", with: acIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Marks a specific scheduling run as applied, allowing a new rescheduling run to be started
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitSchedulingRun(managementUnitId: String, runId: String, body: UpdateSchedulingRunRequest? = nil, completion: @escaping ((_ data: RescheduleResult?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: managementUnitId, runId: runId, body: body)
        requestBuilder.execute { (response: Response<RescheduleResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Marks a specific scheduling run as applied, allowing a new rescheduling run to be started
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit. 
     - parameter runId: (path) The ID of the schedule run 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<RescheduleResult> 
     */
    open class func patchWorkforcemanagementManagementunitSchedulingRunWithRequestBuilder(managementUnitId: String, runId: String, body: UpdateSchedulingRunRequest? = nil) -> RequestBuilder<RescheduleResult> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/scheduling/runs/{runId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RescheduleResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a service goal group
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitServicegoalgroup(managementUnitId: String, serviceGoalGroupId: String, body: ServiceGoalGroup? = nil, completion: @escaping ((_ data: ServiceGoalGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: managementUnitId, serviceGoalGroupId: serviceGoalGroupId, body: body)
        requestBuilder.execute { (response: Response<ServiceGoalGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a service goal group
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "queueMediaAssociations" : [ {
    "mediaTypes" : [ "aeiou" ],
    "id" : "aeiou",
    "delete" : true,
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "goals" : {
    "abandonRate" : {
      "include" : true,
      "percent" : 123
    },
    "averageSpeedOfAnswer" : {
      "include" : true,
      "seconds" : 123
    },
    "serviceLevel" : {
      "include" : true,
      "seconds" : 123,
      "percent" : 123
    }
  }
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter serviceGoalGroupId: (path) The ID of the service goal group to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ServiceGoalGroup> 
     */
    open class func patchWorkforcemanagementManagementunitServicegoalgroupWithRequestBuilder(managementUnitId: String, serviceGoalGroupId: String, body: ServiceGoalGroup? = nil) -> RequestBuilder<ServiceGoalGroup> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups/{serviceGoalGroupId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalGroupIdPreEscape = "\(serviceGoalGroupId)"
        let serviceGoalGroupIdPostEscape = serviceGoalGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalGroupId}", with: serviceGoalGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the settings for the requested management unit
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) config (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitSettings(muId: String, body: ManagementUnitSettingsRequest? = nil, completion: @escaping ((_ data: ManagementUnitSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitSettingsWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<ManagementUnitSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the settings for the requested management unit
     
     - PATCH /api/v2/workforcemanagement/managementunits/{muId}/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "shiftTrading" : {
    "weeklyMaxPaidViolations" : "aeiou",
    "unequalPaid" : "aeiou",
    "requiresMatchingLanguages" : true,
    "oneSided" : "aeiou",
    "allowDirectTrades" : true,
    "autoReview" : true,
    "enabled" : true,
    "weeklyMinPaidViolations" : "aeiou",
    "requiresMatchingSkills" : true,
    "requiresMatchingQueues" : true,
    "minHoursInFuture" : 123,
    "activityCategoryRules" : [ {
      "activityCodeIdReplacement" : "aeiou",
      "activityCategory" : "aeiou",
      "action" : "aeiou"
    } ],
    "requiresMatchingPlanningGroups" : true
  },
  "adherence" : {
    "ignoredActivityCategories" : {
      "values" : [ "aeiou" ]
    },
    "nonOnQueueActivitiesEquivalent" : true,
    "adherenceTargetPercent" : 123,
    "adherenceExceptionThresholdSeconds" : 123,
    "trackOnQueueActivity" : true,
    "severeAlertThresholdMinutes" : 123
  },
  "scheduling" : {
    "maxOccupancyPercentForDeferredWork" : 123,
    "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
    "shrinkageOverrides" : {
      "values" : [ {
        "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "intervalIndex" : 123
      } ],
      "clear" : true
    }
  },
  "timeOff" : {
    "submissionEarliestDaysFromNow" : 123,
    "submissionRangeEnforced" : true,
    "submissionLatestDaysFromNow" : 123
  },
  "shortTermForecasting" : {
    "defaultHistoryWeeks" : 123
  }
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) config (optional)

     - returns: RequestBuilder<ManagementUnitSettingsResponse> 
     */
    open class func patchWorkforcemanagementManagementunitSettingsWithRequestBuilder(muId: String, body: ManagementUnitSettingsRequest? = nil) -> RequestBuilder<ManagementUnitSettingsResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/settings"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnitSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update a time off request
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The id of the user the requested time off request belongs to 
     - parameter timeOffRequestId: (path) The id of the time off request to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitUserTimeoffrequest(muId: String, userId: String, timeOffRequestId: String, body: AdminTimeOffRequestPatch? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(muId: muId, userId: userId, timeOffRequestId: timeOffRequestId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a time off request
     
     - PATCH /api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The id of the user the requested time off request belongs to 
     - parameter timeOffRequestId: (path) The id of the time off request to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func patchWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(muId: String, userId: String, timeOffRequestId: String, body: AdminTimeOffRequestPatch? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/users/{userId}/timeoffrequests/{timeOffRequestId}"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Update a week schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to update. Use partial uploads of user schedules if activity count in schedule is greater than 17500 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitWeekSchedule(managementUnitId: String, weekId: String, scheduleId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: UpdateWeekScheduleRequest? = nil, completion: @escaping ((_ data: AsyncWeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, forceAsync: forceAsync, forceDownloadService: forceDownloadService, body: body)
        requestBuilder.execute { (response: Response<AsyncWeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a week schedule
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to update. Use partial uploads of user schedules if activity count in schedule is greater than 17500 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<AsyncWeekScheduleResponse> 
     */
    open class func patchWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: UpdateWeekScheduleRequest? = nil) -> RequestBuilder<AsyncWeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<AsyncWeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, body: WorkPlan? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a work plan
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainWeeklyPaidTime" : true,
  "constrainPaidTimeGranularity" : true,
  "enabled" : true,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "startTimeIsRelativeToShiftStart" : true,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "weeklyExactPaidMinutes" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func patchWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String, body: WorkPlan? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a time off request for the current user
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementTimeoffrequest(timeOffRequestId: String, body: AgentTimeOffRequestPatch? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: timeOffRequestId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a time off request for the current user
     
     - PATCH /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func patchWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: String, body: AgentTimeOffRequestPatch? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}"
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Request a historical adherence report for users across management units
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementAdherenceHistorical(body: WfmHistoricalAdherenceQueryForUsers? = nil, completion: @escaping ((_ data: WfmHistoricalAdherenceResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementAdherenceHistoricalWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WfmHistoricalAdherenceResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Request a historical adherence report for users across management units
     
     - POST /api/v2/workforcemanagement/adherence/historical
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadUrls" : [ "aeiou" ],
  "downloadUrl" : "aeiou",
  "queryState" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WfmHistoricalAdherenceResponse> 
     */
    open class func postWorkforcemanagementAdherenceHistoricalWithRequestBuilder(body: WfmHistoricalAdherenceQueryForUsers? = nil) -> RequestBuilder<WfmHistoricalAdherenceResponse> {
        let path = "/api/v2/workforcemanagement/adherence/historical"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmHistoricalAdherenceResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new activity code
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitActivitycodes(muId: String, body: CreateActivityCodeRequest? = nil, completion: @escaping ((_ data: ActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<ActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new activity code
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/activitycodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "isDefault" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "isActive" : true,
  "category" : "aeiou"
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ActivityCode> 
     */
    open class func postWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(muId: String, body: CreateActivityCodeRequest? = nil) -> RequestBuilder<ActivityCode> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/activitycodes"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Query published schedules for given given time range for set of users
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitAgentschedulesSearch(muId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: BuAsyncAgentSchedulesSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitAgentschedulesSearchWithRequestBuilder(muId: muId, body: body, forceAsync: forceAsync, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<BuAsyncAgentSchedulesSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query published schedules for given given time range for set of users
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/agentschedules/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "agentSchedules" : [ {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
        "paid" : true,
        "description" : "aeiou"
      } ],
      "shifts" : [ {
        "schedule" : {
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "weekDate" : "2000-01-23T04:56:07.000+0000"
        },
        "lengthMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "timeOffRequestId" : "aeiou",
          "lengthMinutes" : 123,
          "paid" : true,
          "description" : "aeiou",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "id" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "user" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "publishedSchedules" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000",
      "weekCount" : 123
    } ],
    "businessUnitTimeZone" : "aeiou"
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BuAsyncAgentSchedulesSearchResponse> 
     */
    open class func postWorkforcemanagementManagementunitAgentschedulesSearchWithRequestBuilder(muId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<BuAsyncAgentSchedulesSearchResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/agentschedules/search"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<BuAsyncAgentSchedulesSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Request a historical adherence report
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitHistoricaladherencequery(muId: String, body: WfmHistoricalAdherenceQuery? = nil, completion: @escaping ((_ data: WfmHistoricalAdherenceResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitHistoricaladherencequeryWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<WfmHistoricalAdherenceResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Request a historical adherence report
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/historicaladherencequery
     - The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadUrls" : [ "aeiou" ],
  "downloadUrl" : "aeiou",
  "queryState" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WfmHistoricalAdherenceResponse> 
     */
    open class func postWorkforcemanagementManagementunitHistoricaladherencequeryWithRequestBuilder(muId: String, body: WfmHistoricalAdherenceQuery? = nil) -> RequestBuilder<WfmHistoricalAdherenceResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/historicaladherencequery"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmHistoricalAdherenceResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get intraday data for the given date for the requested queueIds
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitIntraday(muId: String, body: IntradayQueryDataCommand? = nil, completion: @escaping ((_ data: IntradayResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitIntradayWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<IntradayResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get intraday data for the given date for the requested queueIds
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/intraday
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "queueIds" : [ "aeiou" ],
  "noDataReason" : "aeiou",
  "intradayDataGroupings" : [ {
    "forecastDataPerInterval" : [ {
      "averageAfterCallWorkSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "averageTalkTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "offered" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "historicalAgentDataPerInterval" : [ {
      "interactingTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "onQueueTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "scheduleDataPerInterval" : [ {
      "scheduledTimeSeconds" : 123,
      "onQueueTimeSeconds" : 123
    } ],
    "historicalQueueDataPerInterval" : [ {
      "averageAfterCallWorkSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "averageTalkTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "answered" : 123,
      "offered" : 123,
      "serviceLevelPercent" : 1.3579000000000001069366817318950779736042022705078125,
      "completed" : 123,
      "abandoned" : 123,
      "averageSpeedOfAnswerSeconds" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "performancePredictionQueueDataPerInterval" : [ {
      "serviceLevelPercent" : 1.3579000000000001069366817318950779736042022705078125,
      "averageSpeedOfAnswerSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "numberOfInteractions" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "mediaType" : "aeiou",
    "performancePredictionAgentDataPerInterval" : [ {
      "interactingTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125
    } ]
  } ],
  "numberOfIntervals" : 123,
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "metrics" : [ {
    "category" : "aeiou",
    "version" : "aeiou"
  } ],
  "startDate" : "2000-01-23T04:56:07.000+0000",
  "intervalLengthMinutes" : 123
}}]
     
     - parameter muId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<IntradayResponse> 
     */
    open class func postWorkforcemanagementManagementunitIntradayWithRequestBuilder(muId: String, body: IntradayQueryDataCommand? = nil) -> RequestBuilder<IntradayResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/intraday"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntradayResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Move the requested management unit to a new business unit
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitMove(muId: String, body: MoveManagementUnitRequest? = nil, completion: @escaping ((_ data: MoveManagementUnitResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitMoveWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<MoveManagementUnitResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Move the requested management unit to a new business unit
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/move
     - Returns status 200 if the management unit is already in the requested business unit
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter muId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<MoveManagementUnitResponse> 
     */
    open class func postWorkforcemanagementManagementunitMoveWithRequestBuilder(muId: String, body: MoveManagementUnitRequest? = nil) -> RequestBuilder<MoveManagementUnitResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/move"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MoveManagementUnitResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Query published schedules for given given time range for set of users
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitSchedulesSearch(muId: String, body: UserListScheduleRequestBody? = nil, completion: @escaping ((_ data: UserScheduleContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitSchedulesSearchWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<UserScheduleContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query published schedules for given given time range for set of users
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/schedules/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "managementUnitTimeZone" : "aeiou",
  "publishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "aeiou"
  } ],
  "userSchedules" : {
    "key" : {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "isPaid" : true,
        "lengthInMinutes" : 123,
        "description" : "aeiou",
        "managementUnitDate" : "aeiou",
        "delete" : true
      } ],
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "workPlanId" : "aeiou",
      "shifts" : [ {
        "lengthInMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "lengthInMinutes" : 123,
          "timeOffRequestId" : "aeiou",
          "description" : "aeiou",
          "isDstFallback" : true,
          "countsAsPaidTime" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "weekSchedule" : "",
        "id" : "aeiou",
        "delete" : true,
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "delete" : true
    }
  }
}}]
     
     - parameter muId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UserScheduleContainer> 
     */
    open class func postWorkforcemanagementManagementunitSchedulesSearchWithRequestBuilder(muId: String, body: UserListScheduleRequestBody? = nil) -> RequestBuilder<UserScheduleContainer> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/schedules/search"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserScheduleContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new service goal group
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitServicegoalgroups(managementUnitId: String, body: CreateServiceGoalGroupRequest? = nil, completion: @escaping ((_ data: ServiceGoalGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitServicegoalgroupsWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<ServiceGoalGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new service goal group
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "queueMediaAssociations" : [ {
    "mediaTypes" : [ "aeiou" ],
    "id" : "aeiou",
    "delete" : true,
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "goals" : {
    "abandonRate" : {
      "include" : true,
      "percent" : 123
    },
    "averageSpeedOfAnswer" : {
      "include" : true,
      "seconds" : 123
    },
    "serviceLevel" : {
      "include" : true,
      "seconds" : 123,
      "percent" : 123
    }
  }
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ServiceGoalGroup> 
     */
    open class func postWorkforcemanagementManagementunitServicegoalgroupsWithRequestBuilder(managementUnitId: String, body: CreateServiceGoalGroupRequest? = nil) -> RequestBuilder<ServiceGoalGroup> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/servicegoalgroups"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new time off request
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequests(muId: String, body: CreateAdminTimeOffRequest? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitTimeoffrequestsWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new time off request
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsWithRequestBuilder(muId: String, body: CreateAdminTimeOffRequest? = nil) -> RequestBuilder<TimeOffRequestList> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Gets a list of time off requests from lookup ids
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsFetchdetails(muId: String, body: TimeOffRequestLookupList? = nil, completion: @escaping ((_ data: TimeOffRequestEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitTimeoffrequestsFetchdetailsWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a list of time off requests from lookup ids
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests/fetchdetails
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestEntityList> 
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsFetchdetailsWithRequestBuilder(muId: String, body: TimeOffRequestLookupList? = nil) -> RequestBuilder<TimeOffRequestEntityList> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests/fetchdetails"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Gets the lookup ids to fetch the specified set of requests
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsQuery(muId: String, body: TimeOffRequestQueryBody? = nil, completion: @escaping ((_ data: TimeOffRequestLookupList?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitTimeoffrequestsQueryWithRequestBuilder(muId: muId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestLookupList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the lookup ids to fetch the specified set of requests
     
     - POST /api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter muId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestLookupList> 
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsQueryWithRequestBuilder(muId: String, body: TimeOffRequestQueryBody? = nil) -> RequestBuilder<TimeOffRequestLookupList> {
        var path = "/api/v2/workforcemanagement/managementunits/{muId}/timeoffrequests/query"
        let muIdPreEscape = "\(muId)"
        let muIdPostEscape = muIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{muId}", with: muIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestLookupList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Copy a week schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to copy from 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekScheduleCopy(managementUnitId: String, weekId: String, scheduleId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: CopyWeekScheduleRequest? = nil, completion: @escaping ((_ data: AsyncWeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekScheduleCopyWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, forceAsync: forceAsync, forceDownloadService: forceDownloadService, body: body)
        requestBuilder.execute { (response: Response<AsyncWeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Copy a week schedule
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to copy from 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<AsyncWeekScheduleResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekScheduleCopyWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: CopyWeekScheduleRequest? = nil) -> RequestBuilder<AsyncWeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<AsyncWeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Start a scheduling run to compute the reschedule. When the scheduling run finishes, a client can get the reschedule changes and then the client can apply them to the schedule, save the schedule, and mark the scheduling run as applied
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to re-optimize 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekScheduleReschedule(managementUnitId: String, weekId: String, scheduleId: String, body: RescheduleRequest? = nil, completion: @escaping ((_ data: AsyncWeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekScheduleRescheduleWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, body: body)
        requestBuilder.execute { (response: Response<AsyncWeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Start a scheduling run to compute the reschedule. When the scheduling run finishes, a client can get the reschedule changes and then the client can apply them to the schedule, save the schedule, and mark the scheduling run as applied
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to re-optimize 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<AsyncWeekScheduleResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekScheduleRescheduleWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String, body: RescheduleRequest? = nil) -> RequestBuilder<AsyncWeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncWeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Add a schedule for a week in management unit using imported data. Use partial uploads of user schedules if activity count in schedule is greater than 17500
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekSchedules(managementUnitId: String, weekId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: ImportWeekScheduleRequest? = nil, completion: @escaping ((_ data: AsyncWeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, forceAsync: forceAsync, forceDownloadService: forceDownloadService, body: body)
        requestBuilder.execute { (response: Response<AsyncWeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a schedule for a week in management unit using imported data. Use partial uploads of user schedules if activity count in schedule is greater than 17500
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<AsyncWeekScheduleResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: String, weekId: String, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, body: ImportWeekScheduleRequest? = nil) -> RequestBuilder<AsyncWeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<AsyncWeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Generate a week schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekSchedulesGenerate(managementUnitId: String, weekId: String, body: GenerateWeekScheduleRequest? = nil, completion: @escaping ((_ data: GenerateWeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekSchedulesGenerateWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, body: body)
        requestBuilder.execute { (response: Response<GenerateWeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Generate a week schedule
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/generate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<GenerateWeekScheduleResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekSchedulesGenerateWithRequestBuilder(managementUnitId: String, weekId: String, body: GenerateWeekScheduleRequest? = nil) -> RequestBuilder<GenerateWeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/generate"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GenerateWeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Partial upload of user schedules where activity count is greater than 17500
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekSchedulesPartialupload(managementUnitId: String, weekId: String, body: UserSchedulesPartialUploadRequest? = nil, completion: @escaping ((_ data: PartialUploadResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekSchedulesPartialuploadWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, body: body)
        requestBuilder.execute { (response: Response<PartialUploadResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Partial upload of user schedules where activity count is greater than 17500
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/partialupload
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<PartialUploadResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekSchedulesPartialuploadWithRequestBuilder(managementUnitId: String, weekId: String, body: UserSchedulesPartialUploadRequest? = nil) -> RequestBuilder<PartialUploadResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/partialupload"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PartialUploadResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Copy a short term forecast
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast to copy 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastCopy(managementUnitId: String, weekDateId: String, forecastId: String, body: CopyShortTermForecastRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: ShortTermForecastResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShorttermforecastCopyWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, forecastId: forecastId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<ShortTermForecastResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Copy a short term forecast
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "routeGroupResults" : [ {
        "routeGroup" : {
          "skills" : [ "" ],
          "mediaType" : "aeiou",
          "language" : "",
          "queue" : ""
        },
        "metricResults" : [ {
          "metric" : "aeiou",
          "forecastingMethod" : "aeiou"
        } ]
      } ]
    },
    "id" : "aeiou",
    "weekDate" : "aeiou",
    "sourceData" : {
      "values" : [ {
        "date" : "aeiou",
        "dataKey" : "aeiou",
        "fileName" : "aeiou",
        "dayOfWeek" : "aeiou",
        "weight" : 123
      } ]
    },
    "creationMethod" : "aeiou",
    "modifications" : {
      "values" : [ {
        "startIntervalIndex" : 123,
        "endIntervalIndex" : 123,
        "metric" : "aeiou",
        "values" : [ {
          "intervalIndex" : 123,
          "value" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "attributes" : {
          "mediaTypes" : [ "aeiou" ],
          "languages" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "queues" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "skillSets" : [ [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ] ]
        },
        "type" : "aeiou",
        "value" : 1.3579000000000001069366817318950779736042022705078125,
        "enabled" : true
      } ]
    }
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter forecastId: (path) The ID of the forecast to copy 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<ShortTermForecastResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastCopyWithRequestBuilder(managementUnitId: String, weekDateId: String, forecastId: String, body: CopyShortTermForecastRequest, forceAsync: Bool? = nil) -> RequestBuilder<ShortTermForecastResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<ShortTermForecastResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Import a short term forecast
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecasts(managementUnitId: String, weekDateId: String, body: ImportShortTermForecastRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: ShortTermForecastResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShorttermforecastsWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<ShortTermForecastResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Import a short term forecast
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "routeGroupResults" : [ {
        "routeGroup" : {
          "skills" : [ "" ],
          "mediaType" : "aeiou",
          "language" : "",
          "queue" : ""
        },
        "metricResults" : [ {
          "metric" : "aeiou",
          "forecastingMethod" : "aeiou"
        } ]
      } ]
    },
    "id" : "aeiou",
    "weekDate" : "aeiou",
    "sourceData" : {
      "values" : [ {
        "date" : "aeiou",
        "dataKey" : "aeiou",
        "fileName" : "aeiou",
        "dayOfWeek" : "aeiou",
        "weight" : 123
      } ]
    },
    "creationMethod" : "aeiou",
    "modifications" : {
      "values" : [ {
        "startIntervalIndex" : 123,
        "endIntervalIndex" : 123,
        "metric" : "aeiou",
        "values" : [ {
          "intervalIndex" : 123,
          "value" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "attributes" : {
          "mediaTypes" : [ "aeiou" ],
          "languages" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "queues" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "skillSets" : [ [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ] ]
        },
        "type" : "aeiou",
        "value" : 1.3579000000000001069366817318950779736042022705078125,
        "enabled" : true
      } ]
    }
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<ShortTermForecastResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastsWithRequestBuilder(managementUnitId: String, weekDateId: String, body: ImportShortTermForecastRequest, forceAsync: Bool? = nil) -> RequestBuilder<ShortTermForecastResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<ShortTermForecastResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Generate a short term forecast
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body)  
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastsGenerate(managementUnitId: String, weekDateId: String, body: GenerateShortTermForecastRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: GenerateShortTermForecastResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShorttermforecastsGenerateWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<GenerateShortTermForecastResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Generate a short term forecast
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/generate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "routeGroupResults" : [ {
        "routeGroup" : {
          "skills" : [ "" ],
          "mediaType" : "aeiou",
          "language" : "",
          "queue" : ""
        },
        "metricResults" : [ {
          "metric" : "aeiou",
          "forecastingMethod" : "aeiou"
        } ]
      } ]
    },
    "id" : "aeiou",
    "weekDate" : "aeiou",
    "sourceData" : {
      "values" : [ {
        "date" : "aeiou",
        "dataKey" : "aeiou",
        "fileName" : "aeiou",
        "dayOfWeek" : "aeiou",
        "weight" : 123
      } ]
    },
    "creationMethod" : "aeiou",
    "modifications" : {
      "values" : [ {
        "startIntervalIndex" : 123,
        "endIntervalIndex" : 123,
        "metric" : "aeiou",
        "values" : [ {
          "intervalIndex" : 123,
          "value" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "attributes" : {
          "mediaTypes" : [ "aeiou" ],
          "languages" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "queues" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "skillSets" : [ [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ] ]
        },
        "type" : "aeiou",
        "value" : 1.3579000000000001069366817318950779736042022705078125,
        "enabled" : true
      } ]
    }
  },
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body)  
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<GenerateShortTermForecastResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastsGenerateWithRequestBuilder(managementUnitId: String, weekDateId: String, body: GenerateShortTermForecastRequest, forceAsync: Bool? = nil) -> RequestBuilder<GenerateShortTermForecastResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/generate"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<GenerateShortTermForecastResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Import a short term forecast
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastsPartialupload(managementUnitId: String, weekDateId: String, body: RouteGroupList, completion: @escaping ((_ data: PartialUploadResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShorttermforecastsPartialuploadWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body)
        requestBuilder.execute { (response: Response<PartialUploadResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Import a short term forecast
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/partialupload
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format 
     - parameter body: (body) body 

     - returns: RequestBuilder<PartialUploadResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShorttermforecastsPartialuploadWithRequestBuilder(managementUnitId: String, weekDateId: String, body: RouteGroupList) -> RequestBuilder<PartialUploadResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shorttermforecasts/partialupload"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PartialUploadResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create a copy of work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to create a copy 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId: String, workPlanId: String, body: CopyWorkPlan? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplanCopyWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a copy of work plan
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainWeeklyPaidTime" : true,
  "constrainPaidTimeGranularity" : true,
  "enabled" : true,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "startTimeIsRelativeToShiftStart" : true,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "weeklyExactPaidMinutes" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to create a copy 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func postWorkforcemanagementManagementunitWorkplanCopyWithRequestBuilder(managementUnitId: String, workPlanId: String, body: CopyWorkPlan? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplans(managementUnitId: String, body: CreateWorkPlan? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new work plan
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainWeeklyPaidTime" : true,
  "constrainPaidTimeGranularity" : true,
  "enabled" : true,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "startTimeIsRelativeToShiftStart" : true,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "weeklyExactPaidMinutes" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func postWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: String, body: CreateWorkPlan? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add a management unit
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunits(body: CreateManagementUnitApiRequest? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a management unit
     
     - POST /api/v2/workforcemanagement/managementunits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "startDayOfWeek" : "aeiou",
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      }
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func postWorkforcemanagementManagementunitsWithRequestBuilder(body: CreateManagementUnitApiRequest? = nil) -> RequestBuilder<ManagementUnit> {
        let path = "/api/v2/workforcemanagement/managementunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Mark a list of notifications as read or unread
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementNotificationsUpdate(body: UpdateNotificationsRequest? = nil, completion: @escaping ((_ data: UpdateNotificationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementNotificationsUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UpdateNotificationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Mark a list of notifications as read or unread
     
     - POST /api/v2/workforcemanagement/notifications/update
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "mutableGroupId" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UpdateNotificationsResponse> 
     */
    open class func postWorkforcemanagementNotificationsUpdateWithRequestBuilder(body: UpdateNotificationsRequest? = nil) -> RequestBuilder<UpdateNotificationsResponse> {
        let path = "/api/v2/workforcemanagement/notifications/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateNotificationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get published schedule for the current user
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementSchedules(body: CurrentUserScheduleRequestBody? = nil, completion: @escaping ((_ data: UserScheduleContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementSchedulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserScheduleContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get published schedule for the current user
     
     - POST /api/v2/workforcemanagement/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "managementUnitTimeZone" : "aeiou",
  "publishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "aeiou"
  } ],
  "userSchedules" : {
    "key" : {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "isPaid" : true,
        "lengthInMinutes" : 123,
        "description" : "aeiou",
        "managementUnitDate" : "aeiou",
        "delete" : true
      } ],
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "workPlanId" : "aeiou",
      "shifts" : [ {
        "lengthInMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "lengthInMinutes" : 123,
          "timeOffRequestId" : "aeiou",
          "description" : "aeiou",
          "isDstFallback" : true,
          "countsAsPaidTime" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "weekSchedule" : "",
        "id" : "aeiou",
        "delete" : true,
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "delete" : true
    }
  }
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UserScheduleContainer> 
     */
    open class func postWorkforcemanagementSchedulesWithRequestBuilder(body: CurrentUserScheduleRequestBody? = nil) -> RequestBuilder<UserScheduleContainer> {
        let path = "/api/v2/workforcemanagement/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserScheduleContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a time off request for the current user
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementTimeoffrequests(body: CreateAgentTimeOffRequest? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementTimeoffrequestsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a time off request for the current user
     
     - POST /api/v2/workforcemanagement/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func postWorkforcemanagementTimeoffrequestsWithRequestBuilder(body: CreateAgentTimeOffRequest? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        let path = "/api/v2/workforcemanagement/timeoffrequests"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
