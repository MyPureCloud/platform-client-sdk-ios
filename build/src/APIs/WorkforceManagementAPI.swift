//
// WorkforceManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WorkforceManagementAPI {
    
    
    
    /**
     
     Delete business unit
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunit(businessUnitId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: businessUnitId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete business unit
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}
     - A business unit cannot be deleted if it contains one or more management units
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Deletes an activity code
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId: String, activityCodeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: businessUnitId, activityCodeId: activityCodeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes an activity code
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: String, activityCodeId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let activityCodeIdPreEscape = "\(activityCodeId)"
        let activityCodeIdPostEscape = activityCodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activityCodeId}", with: activityCodeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Deletes the planning group
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: String, planningGroupId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: businessUnitId, planningGroupId: planningGroupId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes the planning group
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: String, planningGroupId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let planningGroupIdPreEscape = "\(planningGroupId)"
        let planningGroupIdPostEscape = planningGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planningGroupId}", with: planningGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Cancel a scheduling run
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: String, runId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: businessUnitId, runId: runId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Cancel a scheduling run
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: String, runId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a service goal template
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of the service goal template to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: String, serviceGoalTemplateId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a service goal template
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of the service goal template to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: String, serviceGoalTemplateId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalTemplateIdPreEscape = "\(serviceGoalTemplateId)"
        let serviceGoalTemplateIdPostEscape = serviceGoalTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalTemplateId}", with: serviceGoalTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId: String, weekId: Date, scheduleId: String, completion: @escaping ((_ data: BuAsyncScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitWeekScheduleWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<BuAsyncScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a schedule
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "managementUnits" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "agentCount" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "agents" : [ "" ]
    } ],
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "messageCount" : 123,
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "weekCount" : 123
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 

     - returns: RequestBuilder<BuAsyncScheduleResponse> 
     */
    open class func deleteWorkforcemanagementBusinessunitWeekScheduleWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String) -> RequestBuilder<BuAsyncScheduleResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuAsyncScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a short term forecast
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId: String, weekDateId: Date, forecastId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementBusinessunitWeekShorttermforecastWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a short term forecast
     
     - DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}
     - Must not be tied to any schedules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementBusinessunitWeekShorttermforecastWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete management unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunit(managementUnitId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete management unit
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a work plan
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a work plan rotation
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: String, workPlanRotationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a work plan rotation
     
     - DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to be deleted 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: String, workPlanRotationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanRotationIdPreEscape = "\(workPlanRotationId)"
        let workPlanRotationIdPostEscape = workPlanRotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanRotationId}", with: workPlanRotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a list of UserScheduleAdherence records for the requested users
     
     - parameter userId: (query) User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAdherence(userId: [String], completion: @escaping ((_ data: [UserScheduleAdherence]?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAdherenceWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<[UserScheduleAdherence]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of UserScheduleAdherence records for the requested users
     
     - GET /api/v2/workforcemanagement/adherence
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "removedFromManagementUnit" : true,
  "organizationSecondaryPresenceId" : "aeiou",
  "impact" : "aeiou",
  "selfUri" : "aeiou",
  "adherenceState" : "aeiou",
  "team" : {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou"
  },
  "routingStatus" : "aeiou",
  "presenceUpdateTime" : "2000-01-23T04:56:07.000+0000",
  "isOutOfOffice" : true,
  "activeQueuesModifiedTime" : "2000-01-23T04:56:07.000+0000",
  "managementUnit" : {
    "startDayOfWeek" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "settings" : {
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "planningPeriod" : {
          "weekCount" : 123,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        },
        "startDayOfWeekend" : "aeiou"
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  },
  "timeOfAdherenceChange" : "2000-01-23T04:56:07.000+0000",
  "systemPresence" : "aeiou",
  "name" : "aeiou",
  "actualActivityCategory" : "aeiou",
  "scheduledActivityCategory" : "aeiou",
  "activeQueues" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "id" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
} ]}]
     
     - parameter userId: (query) User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request 

     - returns: RequestBuilder<[UserScheduleAdherence]> 
     */
    open class func getWorkforcemanagementAdherenceWithRequestBuilder(userId: [String]) -> RequestBuilder<[UserScheduleAdherence]> {
        let path = "/api/v2/workforcemanagement/adherence"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "userId": userId
            
        ])

        let requestBuilder: RequestBuilder<[UserScheduleAdherence]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status of the modeling job
     
     - parameter jobId: (path) The id of the modeling job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAdhocmodelingjob(jobId: String, completion: @escaping ((_ data: ModelingStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAdhocmodelingjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<ModelingStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status of the modeling job
     
     - GET /api/v2/workforcemanagement/adhocmodelingjobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "aeiou",
  "modelingResultUri" : "aeiou",
  "status" : "aeiou",
  "errorDetails" : [ {
    "description" : "aeiou",
    "internalErrorCode" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) The id of the modeling job 

     - returns: RequestBuilder<ModelingStatusResponse> 
     */
    open class func getWorkforcemanagementAdhocmodelingjobWithRequestBuilder(jobId: String) -> RequestBuilder<ModelingStatusResponse> {
        var path = "/api/v2/workforcemanagement/adhocmodelingjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelingStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the management unit to which the agent belongs
     
     - parameter agentId: (path) The ID of the agent to look up 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAgentManagementunit(agentId: String, completion: @escaping ((_ data: AgentManagementUnitReference?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAgentManagementunitWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<AgentManagementUnitReference>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the management unit to which the agent belongs
     
     - GET /api/v2/workforcemanagement/agents/{agentId}/managementunit
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "managementUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter agentId: (path) The ID of the agent to look up 

     - returns: RequestBuilder<AgentManagementUnitReference> 
     */
    open class func getWorkforcemanagementAgentManagementunitWithRequestBuilder(agentId: String) -> RequestBuilder<AgentManagementUnitReference> {
        var path = "/api/v2/workforcemanagement/agents/{agentId}/managementunit"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentManagementUnitReference>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the management unit to which the currently logged in agent belongs
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementAgentsMeManagementunit(completion: @escaping ((_ data: AgentManagementUnitReference?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementAgentsMeManagementunitWithRequestBuilder()
        requestBuilder.execute { (response: Response<AgentManagementUnitReference>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the management unit to which the currently logged in agent belongs
     
     - GET /api/v2/workforcemanagement/agents/me/managementunit
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "managementUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]

     - returns: RequestBuilder<AgentManagementUnitReference> 
     */
    open class func getWorkforcemanagementAgentsMeManagementunitWithRequestBuilder() -> RequestBuilder<AgentManagementUnitReference> {
        let path = "/api/v2/workforcemanagement/agents/me/managementunit"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentManagementUnitReference>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementBusinessunit: String { 
        case settings = "settings"
        case settingsTimezone = "settings.timeZone"
        case settingsStartdayofweek = "settings.startDayOfWeek"
        case settingsShorttermforecasting = "settings.shortTermForecasting"
    }

    
    
    /**
     
     Get business unit
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunit(businessUnitId: String, expand: [String]? = nil, completion: @escaping ((_ data: BusinessUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: businessUnitId, expand: expand)
        requestBuilder.execute { (response: Response<BusinessUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get business unit
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}
     - Expanding \"settings\" will retrieve all settings.  All other expands will retrieve only the requested settings field(s).
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "startDayOfWeek" : "aeiou",
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "timeZone" : "aeiou",
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<BusinessUnit> 
     */
    open class func getWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: String, expand: [String]? = nil) -> RequestBuilder<BusinessUnit> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<BusinessUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get an activity code
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitActivitycode(businessUnitId: String, activityCodeId: String, completion: @escaping ((_ data: BusinessUnitActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: businessUnitId, activityCodeId: activityCodeId)
        requestBuilder.execute { (response: Response<BusinessUnitActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an activity code
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "defaultCode" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "category" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to fetch 

     - returns: RequestBuilder<BusinessUnitActivityCode> 
     */
    open class func getWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: String, activityCodeId: String) -> RequestBuilder<BusinessUnitActivityCode> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let activityCodeIdPreEscape = "\(activityCodeId)"
        let activityCodeIdPostEscape = activityCodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activityCodeId}", with: activityCodeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnitActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get activity codes
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitActivitycodes(businessUnitId: String, completion: @escaping ((_ data: BusinessUnitActivityCodeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitActivitycodesWithRequestBuilder(businessUnitId: businessUnitId)
        requestBuilder.execute { (response: Response<BusinessUnitActivityCodeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get activity codes
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "lengthInMinutes" : 123,
    "defaultCode" : true,
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "countsAsWorkTime" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "countsAsPaidTime" : true,
    "agentTimeOffSelectable" : true,
    "category" : "aeiou"
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 

     - returns: RequestBuilder<BusinessUnitActivityCodeListing> 
     */
    open class func getWorkforcemanagementBusinessunitActivitycodesWithRequestBuilder(businessUnitId: String) -> RequestBuilder<BusinessUnitActivityCodeListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnitActivityCodeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get intraday planning groups for the given date
     
     - parameter businessUnitId: (path) The business unit ID of the business unit 
     - parameter date: (query) yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId: String, date: Date, completion: @escaping ((_ data: WfmIntradayPlanningGroupListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitIntradayPlanninggroupsWithRequestBuilder(businessUnitId: businessUnitId, date: date)
        requestBuilder.execute { (response: Response<WfmIntradayPlanningGroupListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get intraday planning groups for the given date
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noDataReason" : "aeiou",
  "entities" : [ {
    "serviceGoalTemplate" : {
      "abandonRate" : {
        "percent" : 123
      },
      "averageSpeedOfAnswer" : {
        "seconds" : 123
      },
      "serviceLevel" : {
        "seconds" : 123,
        "percent" : 123
      }
    },
    "name" : "aeiou",
    "id" : "aeiou",
    "routePaths" : [ {
      "skills" : [ {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      } ],
      "mediaType" : "aeiou",
      "language" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit 
     - parameter date: (query) yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<WfmIntradayPlanningGroupListing> 
     */
    open class func getWorkforcemanagementBusinessunitIntradayPlanninggroupsWithRequestBuilder(businessUnitId: String, date: Date) -> RequestBuilder<WfmIntradayPlanningGroupListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "date": date.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<WfmIntradayPlanningGroupListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Feature_getWorkforcemanagementBusinessunitManagementunits: String { 
        case agentSchedule = "AgentSchedule"
        case agentTimeOffRequest = "AgentTimeOffRequest"
        case coaching = "Coaching"
        case activityCodes = "ActivityCodes"
        case agents = "Agents"
        case buActivityCodes = "BuActivityCodes"
        case businessUnits = "BusinessUnits"
        case historicalAdherence = "HistoricalAdherence"
        case intradayMonitoring = "IntradayMonitoring"
        case buIntradayMonitoring = "BuIntradayMonitoring"
        case managementUnits = "ManagementUnits"
        case realTimeAdherence = "RealTimeAdherence"
        case schedules = "Schedules"
        case buSchedules = "BuSchedules"
        case serviceGoalTemplates = "ServiceGoalTemplates"
        case planningGroups = "PlanningGroups"
        case shiftTrading = "ShiftTrading"
        case shortTermForecasts = "ShortTermForecasts"
        case buShortTermForecasts = "BuShortTermForecasts"
        case timeOffPlans = "TimeOffPlans"
        case timeOffRequests = "TimeOffRequests"
        case timeOffLimits = "TimeOffLimits"
        case workPlanRotations = "WorkPlanRotations"
        case workPlans = "WorkPlans"
    }

    
    
    
    
    /**
     
     Get all authorized management units in the business unit
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitManagementunits(businessUnitId: String, feature: Feature_getWorkforcemanagementBusinessunitManagementunits? = nil, divisionId: String? = nil, completion: @escaping ((_ data: ManagementUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitManagementunitsWithRequestBuilder(businessUnitId: businessUnitId, feature: feature, divisionId: divisionId)
        requestBuilder.execute { (response: Response<ManagementUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all authorized management units in the business unit
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "startDayOfWeek" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "settings" : {
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "planningPeriod" : {
          "weekCount" : 123,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        },
        "startDayOfWeekend" : "aeiou"
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)

     - returns: RequestBuilder<ManagementUnitListing> 
     */
    open class func getWorkforcemanagementBusinessunitManagementunitsWithRequestBuilder(businessUnitId: String, feature: Feature_getWorkforcemanagementBusinessunitManagementunits? = nil, divisionId: String? = nil) -> RequestBuilder<ManagementUnitListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "feature": feature?.rawValue, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a planning group
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: String, planningGroupId: String, completion: @escaping ((_ data: PlanningGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: businessUnitId, planningGroupId: planningGroupId)
        requestBuilder.execute { (response: Response<PlanningGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a planning group
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "serviceGoalTemplate" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "routePaths" : [ {
    "skills" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "mediaType" : "aeiou",
    "language" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to fetch 

     - returns: RequestBuilder<PlanningGroup> 
     */
    open class func getWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: String, planningGroupId: String) -> RequestBuilder<PlanningGroup> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let planningGroupIdPreEscape = "\(planningGroupId)"
        let planningGroupIdPostEscape = planningGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planningGroupId}", with: planningGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanningGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets list of planning groups
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId: String, completion: @escaping ((_ data: PlanningGroupList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitPlanninggroupsWithRequestBuilder(businessUnitId: businessUnitId)
        requestBuilder.execute { (response: Response<PlanningGroupList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets list of planning groups
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "serviceGoalTemplate" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "routePaths" : [ {
      "skills" : [ {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      } ],
      "mediaType" : "aeiou",
      "language" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 

     - returns: RequestBuilder<PlanningGroupList> 
     */
    open class func getWorkforcemanagementBusinessunitPlanninggroupsWithRequestBuilder(businessUnitId: String) -> RequestBuilder<PlanningGroupList> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanningGroupList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a scheduling run
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: String, runId: String, completion: @escaping ((_ data: BuScheduleRun?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: businessUnitId, runId: runId)
        requestBuilder.execute { (response: Response<BuScheduleRun>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a scheduling run
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "messageCount" : 123,
  "targetWeek" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
  "schedulerRunId" : "aeiou",
  "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
  "weekCount" : 123,
  "schedule" : {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  },
  "schedulingCanceledBy" : "",
  "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
  "intradayRescheduling" : true,
  "scheduleDescription" : "aeiou",
  "reschedulingOptions" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "activityCodeIds" : [ "aeiou" ],
    "managementUnits" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "applied" : true
    } ],
    "doNotChangeManuallyEditedShifts" : true,
    "doNotChangeDailyPaidTime" : true,
    "doNotChangeShiftStartTimes" : true,
    "existingSchedule" : "",
    "agentCount" : 123,
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "doNotChangeWeeklyPaidTime" : true
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
  "schedulingStartedBy" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 

     - returns: RequestBuilder<BuScheduleRun> 
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: String, runId: String) -> RequestBuilder<BuScheduleRun> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuScheduleRun>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementBusinessunitSchedulingRunResult: String { 
        case headcountforecast = "headcountForecast"
        case generationresults = "generationResults"
        case agentschedules = "agentSchedules"
    }

    
    
    /**
     
     Get the result of a rescheduling operation
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter managementUnitIds: (query) The IDs of the management units for which to fetch the reschedule results 
     - parameter expand: (query) The fields to expand. Omitting will return an empty response 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId: String, runId: String, managementUnitIds: [String], expand: [String], completion: @escaping ((_ data: BuRescheduleResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitSchedulingRunResultWithRequestBuilder(businessUnitId: businessUnitId, runId: runId, managementUnitIds: managementUnitIds, expand: expand)
        requestBuilder.execute { (response: Response<BuRescheduleResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the result of a rescheduling operation
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headcountForecast" : {
    "entities" : [ {
      "requiredWithoutShrinkagePerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "requiredPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "planningGroup" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000"
  },
  "generationResultsDownloadUrl" : "aeiou",
  "agentSchedules" : [ {
    "downloadResult" : {
      "agentSchedules" : [ {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "timeOffRequestId" : "aeiou",
          "lengthMinutes" : 123,
          "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
          "paid" : true,
          "description" : "aeiou"
        } ],
        "shifts" : [ {
          "schedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "2000-01-23T04:56:07.000+0000"
          },
          "lengthMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "externalActivityType" : "aeiou",
            "timeOffRequestId" : "aeiou",
            "lengthMinutes" : 123,
            "externalActivityId" : "aeiou",
            "paid" : true,
            "description" : "aeiou",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "id" : "aeiou",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "workPlan" : {
          "managementUnit" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "user" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "workPlansPerWeek" : [ "" ]
      } ]
    },
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "downloadUrl" : "aeiou"
  } ],
  "generationResults" : {
    "messageCount" : 123,
    "messages" : [ {
      "arguments" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "type" : "aeiou"
    } ],
    "failed" : true,
    "runId" : "aeiou"
  },
  "headcountForecastDownloadUrl" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter managementUnitIds: (query) The IDs of the management units for which to fetch the reschedule results 
     - parameter expand: (query) The fields to expand. Omitting will return an empty response 

     - returns: RequestBuilder<BuRescheduleResult> 
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRunResultWithRequestBuilder(businessUnitId: String, runId: String, managementUnitIds: [String], expand: [String]) -> RequestBuilder<BuRescheduleResult> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "managementUnitIds": managementUnitIds, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<BuRescheduleResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the list of scheduling runs
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId: String, completion: @escaping ((_ data: BuScheduleRunListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitSchedulingRunsWithRequestBuilder(businessUnitId: businessUnitId)
        requestBuilder.execute { (response: Response<BuScheduleRunListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of scheduling runs
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "messageCount" : 123,
    "targetWeek" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
    "schedulerRunId" : "aeiou",
    "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
    "weekCount" : 123,
    "schedule" : {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "schedulingCanceledBy" : "",
    "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
    "intradayRescheduling" : true,
    "scheduleDescription" : "aeiou",
    "reschedulingOptions" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "activityCodeIds" : [ "aeiou" ],
      "managementUnits" : [ {
        "managementUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "applied" : true
      } ],
      "doNotChangeManuallyEditedShifts" : true,
      "doNotChangeDailyPaidTime" : true,
      "doNotChangeShiftStartTimes" : true,
      "existingSchedule" : "",
      "agentCount" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "doNotChangeWeeklyPaidTime" : true
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
    "schedulingStartedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 

     - returns: RequestBuilder<BuScheduleRunListing> 
     */
    open class func getWorkforcemanagementBusinessunitSchedulingRunsWithRequestBuilder(businessUnitId: String) -> RequestBuilder<BuScheduleRunListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuScheduleRunListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a service goal template
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of a service goal template to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: String, serviceGoalTemplateId: String, completion: @escaping ((_ data: ServiceGoalTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId)
        requestBuilder.execute { (response: Response<ServiceGoalTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a service goal template
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "abandonRate" : {
    "include" : true,
    "percent" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "averageSpeedOfAnswer" : {
    "include" : true,
    "seconds" : 123
  },
  "id" : "aeiou",
  "serviceLevel" : {
    "include" : true,
    "seconds" : 123,
    "percent" : 123
  }
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of a service goal template to fetch 

     - returns: RequestBuilder<ServiceGoalTemplate> 
     */
    open class func getWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: String, serviceGoalTemplateId: String) -> RequestBuilder<ServiceGoalTemplate> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalTemplateIdPreEscape = "\(serviceGoalTemplateId)"
        let serviceGoalTemplateIdPostEscape = serviceGoalTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalTemplateId}", with: serviceGoalTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets list of service goal templates
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId: String, completion: @escaping ((_ data: ServiceGoalTemplateList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitServicegoaltemplatesWithRequestBuilder(businessUnitId: businessUnitId)
        requestBuilder.execute { (response: Response<ServiceGoalTemplateList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets list of service goal templates
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "abandonRate" : {
      "include" : true,
      "percent" : 123
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "averageSpeedOfAnswer" : {
      "include" : true,
      "seconds" : 123
    },
    "id" : "aeiou",
    "serviceLevel" : {
      "include" : true,
      "seconds" : 123,
      "percent" : 123
    }
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 

     - returns: RequestBuilder<ServiceGoalTemplateList> 
     */
    open class func getWorkforcemanagementBusinessunitServicegoaltemplatesWithRequestBuilder(businessUnitId: String) -> RequestBuilder<ServiceGoalTemplateList> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalTemplateList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementBusinessunitWeekSchedule: String { 
        case managementunitsAgents = "managementUnits.agents"
    }

    
    
    /**
     
     Get the metadata for the schedule, describing which management units and agents are in the scheduleSchedule data can then be loaded with the query route
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId: String, weekId: Date, scheduleId: String, expand: Expand_getWorkforcemanagementBusinessunitWeekSchedule? = nil, completion: @escaping ((_ data: BuScheduleMetadata?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekScheduleWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, expand: expand)
        requestBuilder.execute { (response: Response<BuScheduleMetadata>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the metadata for the schedule, describing which management units and agents are in the scheduleSchedule data can then be loaded with the query route
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "managementUnits" : [ {
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "agentCount" : 123,
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "agents" : [ "" ]
  } ],
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "generationResults" : {
    "messageCount" : 123,
    "failed" : true,
    "runId" : "aeiou"
  },
  "id" : "aeiou",
  "published" : true,
  "weekDate" : "2000-01-23T04:56:07.000+0000",
  "shortTermForecast" : {
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  },
  "weekCount" : 123
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<BuScheduleMetadata> 
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, expand: Expand_getWorkforcemanagementBusinessunitWeekSchedule? = nil) -> RequestBuilder<BuScheduleMetadata> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<BuScheduleMetadata>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the generation results for a generated schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId: String, weekId: Date, scheduleId: String, completion: @escaping ((_ data: ScheduleGenerationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekScheduleGenerationresultsWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ScheduleGenerationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the generation results for a generated schedule
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "messageCount" : 123,
  "messages" : [ {
    "arguments" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ],
    "type" : "aeiou"
  } ],
  "failed" : true,
  "runId" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 

     - returns: RequestBuilder<ScheduleGenerationResult> 
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleGenerationresultsWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String) -> RequestBuilder<ScheduleGenerationResult> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ScheduleGenerationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the headcount forecast by planning group for the schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter forceDownload: (query) Whether to force the result to come via download url.  For testing purposes only (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId: String, weekId: Date, scheduleId: String, forceDownload: Bool? = nil, completion: @escaping ((_ data: BuHeadcountForecastResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, forceDownload: forceDownload)
        requestBuilder.execute { (response: Response<BuHeadcountForecastResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the headcount forecast by planning group for the schedule
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "entities" : [ {
      "requiredWithoutShrinkagePerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "requiredPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "planningGroup" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000"
  },
  "downloadUrl" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter forceDownload: (query) Whether to force the result to come via download url.  For testing purposes only (optional)

     - returns: RequestBuilder<BuHeadcountForecastResponse> 
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, forceDownload: Bool? = nil) -> RequestBuilder<BuHeadcountForecastResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceDownload": forceDownload
            
        ])

        let requestBuilder: RequestBuilder<BuHeadcountForecastResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Loads agent's schedule history.
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter agentId: (path) THe ID of the agent 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId: String, weekId: Date, scheduleId: String, agentId: String, completion: @escaping ((_ data: BuAgentScheduleHistoryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekScheduleHistoryAgentWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, agentId: agentId)
        requestBuilder.execute { (response: Response<BuAgentScheduleHistoryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Loads agent's schedule history.
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "basePublishedSchedule" : {
    "fullDayTimeOffMarkers" : [ {
      "activityCodeId" : "aeiou",
      "timeOffRequestId" : "aeiou",
      "lengthMinutes" : 123,
      "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
      "paid" : true,
      "description" : "aeiou"
    } ],
    "metadata" : {
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "deletes" : {
      "agentSchedule" : true,
      "shiftIds" : [ "aeiou" ],
      "fullDayTimeOffMarkerDates" : [ "2000-01-23T04:56:07.000+0000" ]
    },
    "shifts" : [ {
      "schedule" : "",
      "lengthMinutes" : 123,
      "activities" : [ {
        "activityCodeId" : "aeiou",
        "externalActivityType" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "externalActivityId" : "aeiou",
        "paid" : true,
        "description" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      } ],
      "id" : "aeiou",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "manuallyEdited" : true
    } ]
  },
  "priorPublishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "droppedChanges" : [ {
    "metadata" : "",
    "deletes" : "",
    "shiftIds" : [ "aeiou" ],
    "fullDayTimeOffMarkerDates" : [ "2000-01-23T04:56:07.000+0000" ]
  } ],
  "changes" : [ "" ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter agentId: (path) THe ID of the agent 

     - returns: RequestBuilder<BuAgentScheduleHistoryResponse> 
     */
    open class func getWorkforcemanagementBusinessunitWeekScheduleHistoryAgentWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, agentId: String) -> RequestBuilder<BuAgentScheduleHistoryResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuAgentScheduleHistoryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementBusinessunitWeekSchedules: String { 
        case forecastDescription = "forecast.description"
    }

    
    
    /**
     
     Get the list of week schedules for the specified week
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format, or &#39;recent&#39; to get recent schedules 
     - parameter includeOnlyPublished: (query) includeOnlyPublished (optional)
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, expand: Expand_getWorkforcemanagementBusinessunitWeekSchedules? = nil, completion: @escaping ((_ data: BuScheduleListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekSchedulesWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, includeOnlyPublished: includeOnlyPublished, expand: expand)
        requestBuilder.execute { (response: Response<BuScheduleListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of week schedules for the specified week
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules
     - Use \"recent\" for the `weekId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any schedule which spans the specified week
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "messageCount" : 123,
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "weekCount" : 123
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format, or &#39;recent&#39; to get recent schedules 
     - parameter includeOnlyPublished: (query) includeOnlyPublished (optional)
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<BuScheduleListing> 
     */
    open class func getWorkforcemanagementBusinessunitWeekSchedulesWithRequestBuilder(businessUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, expand: Expand_getWorkforcemanagementBusinessunitWeekSchedules? = nil) -> RequestBuilder<BuScheduleListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeOnlyPublished": includeOnlyPublished, 
            
            "expand": expand?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<BuScheduleListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementBusinessunitWeekShorttermforecast: String { 
        case planninggroups = "planningGroups"
        case generationresults = "generationResults"
    }

    
    
    /**
     
     Get a short term forecast
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId: String, weekDateId: Date, forecastId: String, expand: [String]? = nil, completion: @escaping ((_ data: BuShortTermForecast?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekShorttermforecastWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, expand: expand)
        requestBuilder.execute { (response: Response<BuShortTermForecast>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a short term forecast
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "legacy" : true,
  "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "timeZone" : "aeiou",
  "sourceDays" : [ {
    "date" : "aeiou",
    "dataKey" : "aeiou",
    "fileName" : "aeiou",
    "dayOfWeek" : "aeiou",
    "weight" : 123
  } ],
  "weekCount" : 123,
  "creationMethod" : "aeiou",
  "planningGroupsVersion" : 123,
  "planningGroups" : {
    "entities" : [ {
      "serviceGoalTemplate" : {
        "abandonRate" : {
          "percent" : 123
        },
        "averageSpeedOfAnswer" : {
          "seconds" : 123
        },
        "serviceLevel" : {
          "seconds" : 123,
          "percent" : 123
        }
      },
      "name" : "aeiou",
      "id" : "aeiou",
      "routePaths" : [ {
        "skills" : [ {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        } ],
        "mediaType" : "aeiou",
        "language" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      } ]
    } ]
  },
  "generationResults" : {
    "planningGroupResults" : [ {
      "planningGroupId" : "aeiou",
      "metricResults" : [ {
        "metric" : "aeiou",
        "forecastingMethod" : "aeiou"
      } ]
    } ]
  },
  "id" : "aeiou",
  "weekDate" : "2000-01-23T04:56:07.000+0000",
  "modifications" : [ {
    "startIntervalIndex" : 123,
    "legacyMetric" : "aeiou",
    "displayGranularity" : "aeiou",
    "endIntervalIndex" : 123,
    "metric" : "aeiou",
    "granularity" : "aeiou",
    "values" : [ {
      "intervalIndex" : 123,
      "value" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "type" : "aeiou",
    "planningGroupIds" : [ "aeiou" ],
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "enabled" : true
  } ]
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<BuShortTermForecast> 
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String, expand: [String]? = nil) -> RequestBuilder<BuShortTermForecast> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<BuShortTermForecast>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the result of a short term forecast calculation
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter weekNumber: (query) The week number to fetch (for multi-week forecasts) (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId: String, weekDateId: Date, forecastId: String, weekNumber: Int? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: BuForecastResultResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekShorttermforecastDataWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, weekNumber: weekNumber, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<BuForecastResultResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the result of a short term forecast calculation
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data
     - Includes modifications unless you pass the doNotApplyModifications query parameter
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "planningGroups" : [ {
      "averageHandleTimeSecondsPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ],
      "planningGroupId" : "aeiou",
      "offeredPerInterval" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    } ],
    "weekCount" : 123,
    "weekNumber" : 123
  },
  "downloadUrl" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter weekNumber: (query) The week number to fetch (for multi-week forecasts) (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BuForecastResultResponse> 
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastDataWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String, weekNumber: Int? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<BuForecastResultResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "weekNumber": weekNumber?.encodeToJSON(), 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<BuForecastResultResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets the forecast generation results
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId: String, weekDateId: Date, forecastId: String, completion: @escaping ((_ data: BuForecastGenerationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId)
        requestBuilder.execute { (response: Response<BuForecastGenerationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the forecast generation results
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "planningGroupResults" : [ {
    "planningGroupId" : "aeiou",
    "metricResults" : [ {
      "metric" : "aeiou",
      "forecastingMethod" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 

     - returns: RequestBuilder<BuForecastGenerationResult> 
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String) -> RequestBuilder<BuForecastGenerationResult> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuForecastGenerationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets the forecast planning group snapshot
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId: String, weekDateId: Date, forecastId: String, completion: @escaping ((_ data: ForecastPlanningGroupsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId)
        requestBuilder.execute { (response: Response<ForecastPlanningGroupsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the forecast planning group snapshot
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "serviceGoalTemplate" : {
      "abandonRate" : {
        "percent" : 123
      },
      "averageSpeedOfAnswer" : {
        "seconds" : 123
      },
      "serviceLevel" : {
        "seconds" : 123,
        "percent" : 123
      }
    },
    "name" : "aeiou",
    "id" : "aeiou",
    "routePaths" : [ {
      "skills" : [ {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      } ],
      "mediaType" : "aeiou",
      "language" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast 

     - returns: RequestBuilder<ForecastPlanningGroupsResponse> 
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String) -> RequestBuilder<ForecastPlanningGroupsResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ForecastPlanningGroupsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get short term forecasts
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format or &#39;recent&#39; to fetch recent forecasts 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId: String, weekDateId: String, completion: @escaping ((_ data: BuShortTermForecastListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitWeekShorttermforecastsWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId)
        requestBuilder.execute { (response: Response<BuShortTermForecastListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get short term forecasts
     
     - GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts
     - Use \"recent\" for the `weekDateId` path parameter to fetch all forecasts for +/- 26 weeks from the current date. Response will include any forecast which spans the specified week
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "legacy" : true,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "weekCount" : 123,
    "creationMethod" : "aeiou"
  } ]
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format or &#39;recent&#39; to fetch recent forecasts 

     - returns: RequestBuilder<BuShortTermForecastListing> 
     */
    open class func getWorkforcemanagementBusinessunitWeekShorttermforecastsWithRequestBuilder(businessUnitId: String, weekDateId: String) -> RequestBuilder<BuShortTermForecastListing> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuShortTermForecastListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Feature_getWorkforcemanagementBusinessunits: String { 
        case agentSchedule = "AgentSchedule"
        case agentTimeOffRequest = "AgentTimeOffRequest"
        case coaching = "Coaching"
        case activityCodes = "ActivityCodes"
        case agents = "Agents"
        case buActivityCodes = "BuActivityCodes"
        case businessUnits = "BusinessUnits"
        case historicalAdherence = "HistoricalAdherence"
        case intradayMonitoring = "IntradayMonitoring"
        case buIntradayMonitoring = "BuIntradayMonitoring"
        case managementUnits = "ManagementUnits"
        case realTimeAdherence = "RealTimeAdherence"
        case schedules = "Schedules"
        case buSchedules = "BuSchedules"
        case serviceGoalTemplates = "ServiceGoalTemplates"
        case planningGroups = "PlanningGroups"
        case shiftTrading = "ShiftTrading"
        case shortTermForecasts = "ShortTermForecasts"
        case buShortTermForecasts = "BuShortTermForecasts"
        case timeOffPlans = "TimeOffPlans"
        case timeOffRequests = "TimeOffRequests"
        case timeOffLimits = "TimeOffLimits"
        case workPlanRotations = "WorkPlanRotations"
        case workPlans = "WorkPlans"
    }

    
    
    
    
    /**
     
     Get business units
     
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunits(feature: Feature_getWorkforcemanagementBusinessunits? = nil, divisionId: String? = nil, completion: @escaping ((_ data: BusinessUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitsWithRequestBuilder(feature: feature, divisionId: divisionId)
        requestBuilder.execute { (response: Response<BusinessUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get business units
     
     - GET /api/v2/workforcemanagement/businessunits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "authorized" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)

     - returns: RequestBuilder<BusinessUnitListing> 
     */
    open class func getWorkforcemanagementBusinessunitsWithRequestBuilder(feature: Feature_getWorkforcemanagementBusinessunits? = nil, divisionId: String? = nil) -> RequestBuilder<BusinessUnitListing> {
        let path = "/api/v2/workforcemanagement/businessunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "feature": feature?.rawValue, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<BusinessUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get business units across divisions
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return business units in all divisions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementBusinessunitsDivisionviews(divisionId: [String]? = nil, completion: @escaping ((_ data: BusinessUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementBusinessunitsDivisionviewsWithRequestBuilder(divisionId: divisionId)
        requestBuilder.execute { (response: Response<BusinessUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get business units across divisions
     
     - GET /api/v2/workforcemanagement/businessunits/divisionviews
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "authorized" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return business units in all divisions (optional)

     - returns: RequestBuilder<BusinessUnitListing> 
     */
    open class func getWorkforcemanagementBusinessunitsDivisionviewsWithRequestBuilder(divisionId: [String]? = nil) -> RequestBuilder<BusinessUnitListing> {
        let path = "/api/v2/workforcemanagement/businessunits/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<BusinessUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Retrieves delete job status for historical data imports of the organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementHistoricaldataDeletejob(completion: @escaping ((_ data: HistoricalImportDeleteJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementHistoricaldataDeletejobWithRequestBuilder()
        requestBuilder.execute { (response: Response<HistoricalImportDeleteJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves delete job status for historical data imports of the organization
     
     - GET /api/v2/workforcemanagement/historicaldata/deletejob
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "status" : "aeiou"
}}]

     - returns: RequestBuilder<HistoricalImportDeleteJobResponse> 
     */
    open class func getWorkforcemanagementHistoricaldataDeletejobWithRequestBuilder() -> RequestBuilder<HistoricalImportDeleteJobResponse> {
        let path = "/api/v2/workforcemanagement/historicaldata/deletejob"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HistoricalImportDeleteJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Retrieves status of the historical data imports of the organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementHistoricaldataImportstatus(completion: @escaping ((_ data: HistoricalImportStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementHistoricaldataImportstatusWithRequestBuilder()
        requestBuilder.execute { (response: Response<HistoricalImportStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves status of the historical data imports of the organization
     
     - GET /api/v2/workforcemanagement/historicaldata/importstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "requestId" : "aeiou",
    "dateImportStarted" : "2000-01-23T04:56:07.000+0000",
    "active" : true,
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "dateImportEnded" : "2000-01-23T04:56:07.000+0000",
    "error" : "aeiou",
    "type" : "aeiou",
    "status" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<HistoricalImportStatusListing> 
     */
    open class func getWorkforcemanagementHistoricaldataImportstatusWithRequestBuilder() -> RequestBuilder<HistoricalImportStatusListing> {
        let path = "/api/v2/workforcemanagement/historicaldata/importstatus"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HistoricalImportStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunit: String { 
        case settings = "settings"
        case settingsAdherence = "settings.adherence"
        case settingsTimeoff = "settings.timeOff"
        case settingsScheduling = "settings.scheduling"
        case settingsShorttermforecasting = "settings.shortTermForecasting"
        case settingsShifttrading = "settings.shiftTrading"
    }

    
    
    /**
     
     Get management unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunit(managementUnitId: String, expand: [String]? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: managementUnitId, expand: expand)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}
     - settings.shortTermForecasting is deprecated and now lives on the business unit
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startDayOfWeek" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "planningPeriod" : {
        "weekCount" : 123,
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      },
      "startDayOfWeekend" : "aeiou"
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func getWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: String, expand: [String]? = nil) -> RequestBuilder<ManagementUnit> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get activity codes
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitActivitycodes(managementUnitId: String, completion: @escaping ((_ data: ActivityCodeContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<ActivityCodeContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get activity codes
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : "",
  "activityCodes" : {
    "key" : {
      "lengthInMinutes" : 123,
      "isDefault" : true,
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "countsAsWorkTime" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "countsAsPaidTime" : true,
      "agentTimeOffSelectable" : true,
      "isActive" : true,
      "category" : "aeiou"
    }
  }
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ActivityCodeContainer> 
     */
    open class func getWorkforcemanagementManagementunitActivitycodesWithRequestBuilder(managementUnitId: String) -> RequestBuilder<ActivityCodeContainer> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActivityCodeContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of user schedule adherence records for the requested management unit
     
     - parameter managementUnitId: (path) The management unit ID of the management unit. 
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitAdherence(managementUnitId: String, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: UserScheduleAdherenceListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitAdherenceWithRequestBuilder(managementUnitId: managementUnitId, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<UserScheduleAdherenceListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of user schedule adherence records for the requested management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "removedFromManagementUnit" : true,
    "organizationSecondaryPresenceId" : "aeiou",
    "impact" : "aeiou",
    "selfUri" : "aeiou",
    "adherenceState" : "aeiou",
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "routingStatus" : "aeiou",
    "presenceUpdateTime" : "2000-01-23T04:56:07.000+0000",
    "isOutOfOffice" : true,
    "activeQueuesModifiedTime" : "2000-01-23T04:56:07.000+0000",
    "managementUnit" : {
      "startDayOfWeek" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "settings" : {
        "metadata" : {
          "modifiedBy" : "",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "version" : 123
        },
        "shiftTrading" : {
          "weeklyMaxPaidViolations" : "aeiou",
          "unequalPaid" : "aeiou",
          "requiresMatchingLanguages" : true,
          "oneSided" : "aeiou",
          "allowDirectTrades" : true,
          "autoReview" : true,
          "enabled" : true,
          "weeklyMinPaidViolations" : "aeiou",
          "requiresMatchingSkills" : true,
          "requiresMatchingQueues" : true,
          "minHoursInFuture" : 123,
          "activityCategoryRules" : [ {
            "activityCodeIdReplacement" : "aeiou",
            "activityCategory" : "aeiou",
            "action" : "aeiou"
          } ],
          "requiresMatchingPlanningGroups" : true
        },
        "adherence" : {
          "ignoredActivityCategories" : {
            "values" : [ "aeiou" ]
          },
          "nonOnQueueActivitiesEquivalent" : true,
          "adherenceTargetPercent" : 123,
          "adherenceExceptionThresholdSeconds" : 123,
          "trackOnQueueActivity" : true,
          "severeAlertThresholdMinutes" : 123
        },
        "scheduling" : {
          "planningPeriod" : {
            "weekCount" : 123,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "maxOccupancyPercentForDeferredWork" : 123,
          "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "shrinkageOverrides" : {
            "values" : [ {
              "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
              "intervalIndex" : 123
            } ],
            "clear" : true
          },
          "startDayOfWeekend" : "aeiou"
        },
        "timeOff" : {
          "submissionEarliestDaysFromNow" : 123,
          "submissionRangeEnforced" : true,
          "submissionLatestDaysFromNow" : 123
        },
        "shortTermForecasting" : {
          "defaultHistoryWeeks" : 123
        }
      },
      "metadata" : "",
      "businessUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "timeZone" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "version" : 123
    },
    "timeOfAdherenceChange" : "2000-01-23T04:56:07.000+0000",
    "systemPresence" : "aeiou",
    "name" : "aeiou",
    "actualActivityCategory" : "aeiou",
    "scheduledActivityCategory" : "aeiou",
    "activeQueues" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "id" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit. 
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<UserScheduleAdherenceListing> 
     */
    open class func getWorkforcemanagementManagementunitAdherenceWithRequestBuilder(managementUnitId: String, forceDownloadService: Bool? = nil) -> RequestBuilder<UserScheduleAdherenceListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<UserScheduleAdherenceListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get data for agent in the management unit
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 
     - parameter excludeCapabilities: (query) Excludes all capabilities of the agent such as queues, languages, and skills (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitAgent(managementUnitId: String, agentId: String, excludeCapabilities: Bool? = nil, completion: @escaping ((_ data: WfmAgent?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitAgentWithRequestBuilder(managementUnitId: managementUnitId, agentId: agentId, excludeCapabilities: excludeCapabilities)
        requestBuilder.execute { (response: Response<WfmAgent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get data for agent in the management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "skills" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "languages" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "schedulable" : true,
  "queues" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "workPlan" : {
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "workPlanRotation" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "acceptDirectShiftTrades" : true
}}]
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 
     - parameter excludeCapabilities: (query) Excludes all capabilities of the agent such as queues, languages, and skills (optional)

     - returns: RequestBuilder<WfmAgent> 
     */
    open class func getWorkforcemanagementManagementunitAgentWithRequestBuilder(managementUnitId: String, agentId: String, excludeCapabilities: Bool? = nil) -> RequestBuilder<WfmAgent> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "excludeCapabilities": excludeCapabilities
            
        ])

        let requestBuilder: RequestBuilder<WfmAgent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Gets all the shift trades for a given agent
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId: String, agentId: String, completion: @escaping ((_ data: ShiftTradeListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitAgentShifttradesWithRequestBuilder(managementUnitId: managementUnitId, agentId: agentId)
        requestBuilder.execute { (response: Response<ShiftTradeListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all the shift trades for a given agent
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "receivingShiftId" : "aeiou",
    "receivingUser" : "",
    "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "oneSided" : true,
    "reviewedBy" : "",
    "initiatingUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "schedule" : {
      "businessUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "acceptableIntervals" : [ "aeiou" ],
    "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "expiration" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "initiatingShiftId" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The id of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter agentId: (path) The agent id 

     - returns: RequestBuilder<ShiftTradeListResponse> 
     */
    open class func getWorkforcemanagementManagementunitAgentShifttradesWithRequestBuilder(managementUnitId: String, agentId: String) -> RequestBuilder<ShiftTradeListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets a summary of all shift trades in the matched state
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId: String, completion: @escaping ((_ data: ShiftTradeMatchesSummaryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitShifttradesMatchedWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<ShiftTradeMatchesSummaryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a summary of all shift trades in the matched state
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "count" : 123,
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<ShiftTradeMatchesSummaryResponse> 
     */
    open class func getWorkforcemanagementManagementunitShifttradesMatchedWithRequestBuilder(managementUnitId: String) -> RequestBuilder<ShiftTradeMatchesSummaryResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeMatchesSummaryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets list of users available for whom you can send direct shift trade requests
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId: String, completion: @escaping ((_ data: WfmUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitShifttradesUsersWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<WfmUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets list of users available for whom you can send direct shift trade requests
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : "",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<WfmUserEntityListing> 
     */
    open class func getWorkforcemanagementManagementunitShifttradesUsersWithRequestBuilder(managementUnitId: String) -> RequestBuilder<WfmUserEntityListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a time off request
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId: String, userId: String, timeOffRequestId: String, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(managementUnitId: managementUnitId, userId: userId, timeOffRequestId: timeOffRequestId)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a time off request
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter timeOffRequestId: (path) Time Off Request Id 

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(managementUnitId: String, userId: String, timeOffRequestId: String) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of time off requests for a given user
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId: String, userId: String, recentlyReviewed: Bool? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUserTimeoffrequestsWithRequestBuilder(managementUnitId: managementUnitId, userId: userId, recentlyReviewed: recentlyReviewed)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of time off requests for a given user
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The userId to whom the Time Off Request applies. 
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func getWorkforcemanagementManagementunitUserTimeoffrequestsWithRequestBuilder(managementUnitId: String, userId: String, recentlyReviewed: Bool? = nil) -> RequestBuilder<TimeOffRequestList> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "recentlyReviewed": recentlyReviewed
            
        ])

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get users in the management unit
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitUsers(managementUnitId: String, completion: @escaping ((_ data: WfmUserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitUsersWithRequestBuilder(managementUnitId: managementUnitId)
        requestBuilder.execute { (response: Response<WfmUserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get users in the management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : "",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 

     - returns: RequestBuilder<WfmUserEntityListing> 
     */
    open class func getWorkforcemanagementManagementunitUsersWithRequestBuilder(managementUnitId: String) -> RequestBuilder<WfmUserEntityListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmUserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunitWeekSchedule: String { 
        case generationresults = "generationResults"
        case headcountforecast = "headcountForecast"
    }

    
    
    
    
    /**
     
     Deprecated.  Use the equivalent business unit resource instead. Get a week schedule
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekSchedule(managementUnitId: String, weekId: String, scheduleId: String, expand: Expand_getWorkforcemanagementManagementunitWeekSchedule? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: WeekScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, expand: expand, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<WeekScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deprecated.  Use the equivalent business unit resource instead. Get a week schedule
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "headcountForecast" : {
      "requiredWithoutShrinkage" : [ "" ],
      "required" : [ {
        "interval" : "2000-01-23T04:56:07.000+0000",
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ]
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    },
    "agentSchedulesVersion" : 123,
    "userSchedules" : {
      "key" : {
        "fullDayTimeOffMarkers" : [ {
          "activityCodeId" : "aeiou",
          "isPaid" : true,
          "lengthInMinutes" : 123,
          "description" : "aeiou",
          "managementUnitDate" : "aeiou",
          "delete" : true
        } ],
        "metadata" : "",
        "workPlanId" : "aeiou",
        "shifts" : [ {
          "lengthInMinutes" : 123,
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthInMinutes" : 123,
            "timeOffRequestId" : "aeiou",
            "description" : "aeiou",
            "isDstFallback" : true,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ],
          "weekSchedule" : {
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "weekDate" : "aeiou"
          },
          "id" : "aeiou",
          "delete" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "manuallyEdited" : true
        } ],
        "delete" : true
      }
    }
  },
  "downloadUrl" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter scheduleId: (path) The ID of the schedule to fetch 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<WeekScheduleResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekScheduleWithRequestBuilder(managementUnitId: String, weekId: String, scheduleId: String, expand: Expand_getWorkforcemanagementManagementunitWeekSchedule? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<WeekScheduleResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<WeekScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Deprecated.  Use the equivalent business unit resource instead. Get the list of schedules in a week in management unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter includeOnlyPublished: (query) Return only published schedules (optional)
     - parameter earliestWeekDate: (query) The start date of the earliest week to query in yyyy-MM-dd format (optional)
     - parameter latestWeekDate: (query) The start date of the latest week to query in yyyy-MM-dd format (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekSchedules(managementUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, earliestWeekDate: String? = nil, latestWeekDate: String? = nil, completion: @escaping ((_ data: WeekScheduleListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: managementUnitId, weekId: weekId, includeOnlyPublished: includeOnlyPublished, earliestWeekDate: earliestWeekDate, latestWeekDate: latestWeekDate)
        requestBuilder.execute { (response: Response<WeekScheduleListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deprecated.  Use the equivalent business unit resource instead. Get the list of schedules in a week in management unit
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "agentWarningCount" : 123,
      "agentWarnings" : [ {
        "unableToScheduleRequiredDays" : [ "aeiou" ],
        "userNotLicensed" : true,
        "unableToMeetMaxDays" : true,
        "noNeedDays" : [ "aeiou" ],
        "unableToMeetMaxPaidForTheWeek" : true,
        "unableToMeetMinPaidForTheWeek" : true,
        "userId" : "aeiou",
        "shiftsTooCloseTogether" : true
      } ],
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "aeiou",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. 
     - parameter includeOnlyPublished: (query) Return only published schedules (optional)
     - parameter earliestWeekDate: (query) The start date of the earliest week to query in yyyy-MM-dd format (optional)
     - parameter latestWeekDate: (query) The start date of the latest week to query in yyyy-MM-dd format (optional)

     - returns: RequestBuilder<WeekScheduleListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekSchedulesWithRequestBuilder(managementUnitId: String, weekId: String, includeOnlyPublished: Bool? = nil, earliestWeekDate: String? = nil, latestWeekDate: String? = nil) -> RequestBuilder<WeekScheduleListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeOnlyPublished": includeOnlyPublished, 
            
            "earliestWeekDate": earliestWeekDate, 
            
            "latestWeekDate": latestWeekDate
            
        ])

        let requestBuilder: RequestBuilder<WeekScheduleListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets all the shift trades for a given week
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter evaluateMatches: (query) Whether to evaluate the matches for violations (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId: String, weekDateId: Date, evaluateMatches: Bool? = nil, completion: @escaping ((_ data: WeekShiftTradeListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWeekShifttradesWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, evaluateMatches: evaluateMatches)
        requestBuilder.execute { (response: Response<WeekShiftTradeListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all the shift trades for a given week
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "trade" : {
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
      "receivingShiftId" : "aeiou",
      "receivingUser" : "",
      "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
      "oneSided" : true,
      "reviewedBy" : "",
      "initiatingUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "schedule" : {
        "businessUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "weekDate" : "2000-01-23T04:56:07.000+0000"
      },
      "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
      "acceptableIntervals" : [ "aeiou" ],
      "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
      "expiration" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000",
      "reviewedDate" : "2000-01-23T04:56:07.000+0000",
      "initiatingShiftId" : "aeiou"
    },
    "matchReview" : {
      "receivingUser" : "",
      "violations" : [ {
        "type" : "aeiou",
        "params" : {
          "key" : "aeiou"
        }
      } ],
      "adminReviewViolations" : [ "" ],
      "initiatingUser" : {
        "postTradeNewShift" : {
          "activities" : [ {
            "activityCodeId" : "aeiou",
            "lengthMinutes" : 123,
            "countsAsPaidTime" : true,
            "startDate" : "2000-01-23T04:56:07.000+0000"
          } ]
        },
        "weeklyMaximumPaidMinutes" : 123,
        "weeklyMinimumPaidMinutes" : 123,
        "preTradeSchedulePaidMinutes" : 123,
        "postTradeSchedulePaidMinutes" : 123
      }
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter evaluateMatches: (query) Whether to evaluate the matches for violations (optional, default to true)

     - returns: RequestBuilder<WeekShiftTradeListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWeekShifttradesWithRequestBuilder(managementUnitId: String, weekDateId: Date, evaluateMatches: Bool? = nil) -> RequestBuilder<WeekShiftTradeListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "evaluateMatches": evaluateMatches
            
        ])

        let requestBuilder: RequestBuilder<WeekShiftTradeListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a work plan
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maximumDaysOffPerPlanningPeriod" : 123,
  "minimumPaidMinutesPerPlanningPeriod" : 123,
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "constrainWeeklyPaidTime" : true,
  "enabled" : true,
  "valid" : true,
  "minimumShiftStartDistanceMinutes" : 123,
  "constrainMaximumConsecutiveWorkingDays" : true,
  "maximumConsecutiveWorkingDays" : 123,
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "validationId" : "aeiou",
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "earliestStopTimeMinutesFromMidnight" : 123,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "validationId" : "aeiou",
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "minimumLengthFromShiftStartMinutes" : 123,
      "startTimeIsRelativeToShiftStart" : true,
      "minimumLengthFromShiftEndMinutes" : 123,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "constrainEarliestStopTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "maximumConsecutiveWorkingWeekends" : 123,
  "weeklyExactPaidMinutes" : 123,
  "shiftStartVarianceType" : "aeiou",
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "minimumConsecutiveNonWorkingMinutesPerWeek" : 123,
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainPaidTimeGranularity" : true,
  "maximumPaidMinutesPerPlanningPeriod" : 123,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "minimumDaysOffPerPlanningPeriod" : 123,
  "constrainMaximumConsecutiveWorkingWeekends" : true
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to fetch 

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func getWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a work plan rotation
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: String, workPlanRotationId: String, completion: @escaping ((_ data: WorkPlanRotationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId)
        requestBuilder.execute { (response: Response<WorkPlanRotationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a work plan rotation
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "dateRange" : {
    "startBusinessUnitDate" : "2000-01-23T04:56:07.000+0000",
    "endBusinessUnitDate" : "2000-01-23T04:56:07.000+0000"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : {
    "workPlans" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "id" : "aeiou",
  "agentCount" : 123,
  "enabled" : true,
  "agents" : [ {
    "dateRange" : "",
    "position" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to fetch 

     - returns: RequestBuilder<WorkPlanRotationResponse> 
     */
    open class func getWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: String, workPlanRotationId: String) -> RequestBuilder<WorkPlanRotationResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanRotationIdPreEscape = "\(workPlanRotationId)"
        let workPlanRotationIdPostEscape = workPlanRotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanRotationId}", with: workPlanRotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlanRotationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunitWorkplanrotations: String { 
        case agents = "agents"
    }

    
    
    /**
     
     Get work plan rotations
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId: String, expand: [String]? = nil, completion: @escaping ((_ data: WorkPlanRotationListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplanrotationsWithRequestBuilder(managementUnitId: managementUnitId, expand: expand)
        requestBuilder.execute { (response: Response<WorkPlanRotationListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get work plan rotations
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "dateRange" : {
      "startBusinessUnitDate" : "2000-01-23T04:56:07.000+0000",
      "endBusinessUnitDate" : "2000-01-23T04:56:07.000+0000"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "pattern" : {
      "workPlans" : [ {
        "managementUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "id" : "aeiou",
    "agentCount" : 123,
    "enabled" : true,
    "agents" : [ {
      "dateRange" : "",
      "position" : 123,
      "user" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<WorkPlanRotationListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWorkplanrotationsWithRequestBuilder(managementUnitId: String, expand: [String]? = nil) -> RequestBuilder<WorkPlanRotationListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkPlanRotationListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunitWorkplans: String { 
        case agentcount = "agentCount"
        case agents = "agents"
        case optionaldays = "optionalDays"
        case shifts = "shifts"
        case shiftstartvariances = "shiftStartVariances"
        case details = "details"
    }

    
    
    /**
     
     Get work plans
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitWorkplans(managementUnitId: String, expand: [String]? = nil, completion: @escaping ((_ data: WorkPlanListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: managementUnitId, expand: expand)
        requestBuilder.execute { (response: Response<WorkPlanListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get work plans
     
     - GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans
     - \"expand=details\" is deprecated
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "maximumDaysOffPerPlanningPeriod" : 123,
    "minimumPaidMinutesPerPlanningPeriod" : 123,
    "optionalDays" : {
      "values" : [ "aeiou" ]
    },
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "flexibleWeeklyPaidTime" : true,
    "shiftStartVariances" : {
      "values" : [ {
        "applicableDays" : [ "aeiou" ],
        "maxShiftStartVarianceMinutes" : 123
      } ]
    },
    "constrainWeeklyPaidTime" : true,
    "enabled" : true,
    "valid" : true,
    "minimumShiftStartDistanceMinutes" : 123,
    "constrainMaximumConsecutiveWorkingDays" : true,
    "maximumConsecutiveWorkingDays" : 123,
    "constrainMinimumTimeBetweenShifts" : true,
    "shifts" : [ {
      "exactStartTimeMinutesFromMidnight" : 123,
      "validationId" : "aeiou",
      "maximumContiguousWorkTimeMinutes" : 123,
      "startIncrementMinutes" : 123,
      "flexiblePaidTime" : true,
      "constrainContiguousWorkTime" : true,
      "delete" : true,
      "constrainLatestStopTime" : true,
      "latestStartTimeMinutesFromMidnight" : 123,
      "constrainStopTime" : true,
      "earliestStopTimeMinutesFromMidnight" : 123,
      "latestStopTimeMinutesFromMidnight" : 123,
      "activities" : [ {
        "startTimeIncrementMinutes" : 123,
        "validationId" : "aeiou",
        "lengthMinutes" : 123,
        "earliestStartTimeMinutes" : 123,
        "description" : "aeiou",
        "latestStartTimeMinutes" : 123,
        "countsAsPaidTime" : true,
        "delete" : true,
        "activityCodeId" : "aeiou",
        "minimumLengthFromShiftStartMinutes" : 123,
        "startTimeIsRelativeToShiftStart" : true,
        "minimumLengthFromShiftEndMinutes" : 123,
        "exactStartTimeMinutes" : 123,
        "countsAsContiguousWorkTime" : true,
        "id" : "aeiou",
        "flexibleStartTime" : true
      } ],
      "maximumPaidTimeMinutes" : 123,
      "name" : "aeiou",
      "days" : "",
      "id" : "aeiou",
      "minimumContiguousWorkTimeMinutes" : 123,
      "exactPaidTimeMinutes" : 123,
      "earliestStartTimeMinutesFromMidnight" : 123,
      "flexibleStartTime" : true,
      "constrainEarliestStopTime" : true,
      "minimumPaidTimeMinutes" : 123
    } ],
    "weeklyMinimumPaidMinutes" : 123,
    "id" : "aeiou",
    "paidTimeGranularityMinutes" : 123,
    "maximumConsecutiveWorkingWeekends" : 123,
    "weeklyExactPaidMinutes" : 123,
    "shiftStartVarianceType" : "aeiou",
    "maximumDays" : 123,
    "minimumWorkingDaysPerWeek" : 123,
    "minimumConsecutiveNonWorkingMinutesPerWeek" : 123,
    "selfUri" : "aeiou",
    "minimumTimeBetweenShiftsMinutes" : 123,
    "constrainPaidTimeGranularity" : true,
    "maximumPaidMinutesPerPlanningPeriod" : 123,
    "agents" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "delete" : true
    } ],
    "weeklyMaximumPaidMinutes" : 123,
    "name" : "aeiou",
    "minimumDaysOffPerPlanningPeriod" : 123,
    "constrainMaximumConsecutiveWorkingWeekends" : true,
    "agentCount" : 123
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<WorkPlanListResponse> 
     */
    open class func getWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: String, expand: [String]? = nil) -> RequestBuilder<WorkPlanListResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkPlanListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getWorkforcemanagementManagementunits: String { 
        case details = "details"
    }

    
    
    
    public enum Feature_getWorkforcemanagementManagementunits: String { 
        case agentSchedule = "AgentSchedule"
        case agentTimeOffRequest = "AgentTimeOffRequest"
        case coaching = "Coaching"
        case activityCodes = "ActivityCodes"
        case agents = "Agents"
        case buActivityCodes = "BuActivityCodes"
        case businessUnits = "BusinessUnits"
        case historicalAdherence = "HistoricalAdherence"
        case intradayMonitoring = "IntradayMonitoring"
        case buIntradayMonitoring = "BuIntradayMonitoring"
        case managementUnits = "ManagementUnits"
        case realTimeAdherence = "RealTimeAdherence"
        case schedules = "Schedules"
        case buSchedules = "BuSchedules"
        case serviceGoalTemplates = "ServiceGoalTemplates"
        case planningGroups = "PlanningGroups"
        case shiftTrading = "ShiftTrading"
        case shortTermForecasts = "ShortTermForecasts"
        case buShortTermForecasts = "BuShortTermForecasts"
        case timeOffPlans = "TimeOffPlans"
        case timeOffRequests = "TimeOffRequests"
        case timeOffLimits = "TimeOffLimits"
        case workPlanRotations = "WorkPlanRotations"
        case workPlans = "WorkPlans"
    }

    
    
    
    
    /**
     
     Get management units
     
     - parameter pageSize: (query) Deprecated, paging is not supported (optional)
     - parameter pageNumber: (query) Deprecated, paging is not supported (optional)
     - parameter expand: (query) Deprecated, expand settings on the single MU route (optional)
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunits(pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getWorkforcemanagementManagementunits? = nil, feature: Feature_getWorkforcemanagementManagementunits? = nil, divisionId: String? = nil, completion: @escaping ((_ data: ManagementUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, expand: expand, feature: feature, divisionId: divisionId)
        requestBuilder.execute { (response: Response<ManagementUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management units
     
     - GET /api/v2/workforcemanagement/managementunits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "startDayOfWeek" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "settings" : {
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "planningPeriod" : {
          "weekCount" : 123,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        },
        "startDayOfWeekend" : "aeiou"
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Deprecated, paging is not supported (optional)
     - parameter pageNumber: (query) Deprecated, paging is not supported (optional)
     - parameter expand: (query) Deprecated, expand settings on the single MU route (optional)
     - parameter feature: (query)  (optional)
     - parameter divisionId: (query)  (optional)

     - returns: RequestBuilder<ManagementUnitListing> 
     */
    open class func getWorkforcemanagementManagementunitsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getWorkforcemanagementManagementunits? = nil, feature: Feature_getWorkforcemanagementManagementunits? = nil, divisionId: String? = nil) -> RequestBuilder<ManagementUnitListing> {
        let path = "/api/v2/workforcemanagement/managementunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "expand": expand?.rawValue, 
            
            "feature": feature?.rawValue, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get management units across divisions
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return all divisions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementManagementunitsDivisionviews(divisionId: [String]? = nil, completion: @escaping ((_ data: ManagementUnitListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementManagementunitsDivisionviewsWithRequestBuilder(divisionId: divisionId)
        requestBuilder.execute { (response: Response<ManagementUnitListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get management units across divisions
     
     - GET /api/v2/workforcemanagement/managementunits/divisionviews
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "startDayOfWeek" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "settings" : {
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shiftTrading" : {
        "weeklyMaxPaidViolations" : "aeiou",
        "unequalPaid" : "aeiou",
        "requiresMatchingLanguages" : true,
        "oneSided" : "aeiou",
        "allowDirectTrades" : true,
        "autoReview" : true,
        "enabled" : true,
        "weeklyMinPaidViolations" : "aeiou",
        "requiresMatchingSkills" : true,
        "requiresMatchingQueues" : true,
        "minHoursInFuture" : 123,
        "activityCategoryRules" : [ {
          "activityCodeIdReplacement" : "aeiou",
          "activityCategory" : "aeiou",
          "action" : "aeiou"
        } ],
        "requiresMatchingPlanningGroups" : true
      },
      "adherence" : {
        "ignoredActivityCategories" : {
          "values" : [ "aeiou" ]
        },
        "nonOnQueueActivitiesEquivalent" : true,
        "adherenceTargetPercent" : 123,
        "adherenceExceptionThresholdSeconds" : 123,
        "trackOnQueueActivity" : true,
        "severeAlertThresholdMinutes" : 123
      },
      "scheduling" : {
        "planningPeriod" : {
          "weekCount" : 123,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "maxOccupancyPercentForDeferredWork" : 123,
        "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
        "shrinkageOverrides" : {
          "values" : [ {
            "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
            "intervalIndex" : 123
          } ],
          "clear" : true
        },
        "startDayOfWeekend" : "aeiou"
      },
      "timeOff" : {
        "submissionEarliestDaysFromNow" : 123,
        "submissionRangeEnforced" : true,
        "submissionLatestDaysFromNow" : 123
      },
      "shortTermForecasting" : {
        "defaultHistoryWeeks" : 123
      }
    },
    "metadata" : "",
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "timeZone" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter divisionId: (query) The divisionIds to filter by. If omitted, will return all divisions (optional)

     - returns: RequestBuilder<ManagementUnitListing> 
     */
    open class func getWorkforcemanagementManagementunitsDivisionviewsWithRequestBuilder(divisionId: [String]? = nil) -> RequestBuilder<ManagementUnitListing> {
        let path = "/api/v2/workforcemanagement/managementunits/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<ManagementUnitListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get a list of notifications for the current user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementNotifications(completion: @escaping ((_ data: NotificationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementNotificationsWithRequestBuilder()
        requestBuilder.execute { (response: Response<NotificationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of notifications for the current user
     
     - GET /api/v2/workforcemanagement/notifications
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "markedAsRead" : true,
    "mutableGroupId" : "aeiou",
    "otherNotificationIdsInGroup" : [ "aeiou" ],
    "timeOffRequest" : {
      "timeOffRequestId" : "aeiou",
      "isFullDayRequest" : true,
      "fullDayManagementUnitDates" : [ "aeiou" ],
      "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
      "user" : "",
      "status" : "aeiou"
    },
    "id" : "aeiou",
    "shiftTrade" : {
      "receivingUser" : "",
      "receivingShiftDate" : "2000-01-23T04:56:07.000+0000",
      "oneSided" : true,
      "weekDate" : "aeiou",
      "tradeId" : "aeiou",
      "newState" : "aeiou",
      "initiatingUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "initiatingShiftDate" : "2000-01-23T04:56:07.000+0000"
    },
    "type" : "aeiou",
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "agentNotification" : true
  } ]
}}]

     - returns: RequestBuilder<NotificationsResponse> 
     */
    open class func getWorkforcemanagementNotificationsWithRequestBuilder() -> RequestBuilder<NotificationsResponse> {
        let path = "/api/v2/workforcemanagement/notifications"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NotificationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status of the scheduling job
     
     - parameter jobId: (path) The id of the scheduling job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementSchedulingjob(jobId: String, completion: @escaping ((_ data: SchedulingStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementSchedulingjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<SchedulingStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status of the scheduling job
     
     - GET /api/v2/workforcemanagement/schedulingjobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedulingResultUri" : "aeiou",
  "id" : "aeiou",
  "percentComplete" : 123,
  "status" : "aeiou",
  "errorDetails" : [ {
    "description" : "aeiou",
    "internalErrorCode" : "aeiou"
  } ]
}}]
     
     - parameter jobId: (path) The id of the scheduling job 

     - returns: RequestBuilder<SchedulingStatusResponse> 
     */
    open class func getWorkforcemanagementSchedulingjobWithRequestBuilder(jobId: String) -> RequestBuilder<SchedulingStatusResponse> {
        var path = "/api/v2/workforcemanagement/schedulingjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SchedulingStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Gets all of my shift trades
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementShifttrades(completion: @escaping ((_ data: ShiftTradeListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementShifttradesWithRequestBuilder()
        requestBuilder.execute { (response: Response<ShiftTradeListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all of my shift trades
     
     - GET /api/v2/workforcemanagement/shifttrades
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "receivingShiftId" : "aeiou",
    "receivingUser" : "",
    "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "oneSided" : true,
    "reviewedBy" : "",
    "initiatingUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "schedule" : {
      "businessUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "acceptableIntervals" : [ "aeiou" ],
    "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "expiration" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "initiatingShiftId" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<ShiftTradeListResponse> 
     */
    open class func getWorkforcemanagementShifttradesWithRequestBuilder() -> RequestBuilder<ShiftTradeListResponse> {
        let path = "/api/v2/workforcemanagement/shifttrades"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a time off request for the current user
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementTimeoffrequest(timeOffRequestId: String, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: timeOffRequestId)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a time off request for the current user
     
     - GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter timeOffRequestId: (path) Time Off Request Id 

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func getWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: String) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}"
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a list of time off requests for the current user
     
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkforcemanagementTimeoffrequests(recentlyReviewed: Bool? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWorkforcemanagementTimeoffrequestsWithRequestBuilder(recentlyReviewed: recentlyReviewed)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of time off requests for the current user
     
     - GET /api/v2/workforcemanagement/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter recentlyReviewed: (query) Limit results to requests that have been reviewed within the preceding 30 days (optional, default to false)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func getWorkforcemanagementTimeoffrequestsWithRequestBuilder(recentlyReviewed: Bool? = nil) -> RequestBuilder<TimeOffRequestList> {
        let path = "/api/v2/workforcemanagement/timeoffrequests"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "recentlyReviewed": recentlyReviewed
            
        ])

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update business unit
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementBusinessunit(businessUnitId: String, body: UpdateBusinessUnitRequest? = nil, completion: @escaping ((_ data: BusinessUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: businessUnitId, body: body)
        requestBuilder.execute { (response: Response<BusinessUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update business unit
     
     - PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "startDayOfWeek" : "aeiou",
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "timeZone" : "aeiou",
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<BusinessUnit> 
     */
    open class func patchWorkforcemanagementBusinessunitWithRequestBuilder(businessUnitId: String, body: UpdateBusinessUnitRequest? = nil) -> RequestBuilder<BusinessUnit> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update an activity code
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementBusinessunitActivitycode(businessUnitId: String, activityCodeId: String, body: UpdateActivityCodeRequest? = nil, completion: @escaping ((_ data: BusinessUnitActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: businessUnitId, activityCodeId: activityCodeId, body: body)
        requestBuilder.execute { (response: Response<BusinessUnitActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an activity code
     
     - PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "defaultCode" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "category" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter activityCodeId: (path) The ID of the activity code to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<BusinessUnitActivityCode> 
     */
    open class func patchWorkforcemanagementBusinessunitActivitycodeWithRequestBuilder(businessUnitId: String, activityCodeId: String, body: UpdateActivityCodeRequest? = nil) -> RequestBuilder<BusinessUnitActivityCode> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let activityCodeIdPreEscape = "\(activityCodeId)"
        let activityCodeIdPostEscape = activityCodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activityCodeId}", with: activityCodeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnitActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Updates the planning group
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: String, planningGroupId: String, body: UpdatePlanningGroupRequest? = nil, completion: @escaping ((_ data: PlanningGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: businessUnitId, planningGroupId: planningGroupId, body: body)
        requestBuilder.execute { (response: Response<PlanningGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates the planning group
     
     - PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "serviceGoalTemplate" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "routePaths" : [ {
    "skills" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "mediaType" : "aeiou",
    "language" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter planningGroupId: (path) The ID of a planning group to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<PlanningGroup> 
     */
    open class func patchWorkforcemanagementBusinessunitPlanninggroupWithRequestBuilder(businessUnitId: String, planningGroupId: String, body: UpdatePlanningGroupRequest? = nil) -> RequestBuilder<PlanningGroup> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let planningGroupIdPreEscape = "\(planningGroupId)"
        let planningGroupIdPostEscape = planningGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{planningGroupId}", with: planningGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanningGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Mark a schedule run as applied
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: String, runId: String, body: PatchBuScheduleRunRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: businessUnitId, runId: runId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Mark a schedule run as applied
     
     - PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter runId: (path) The ID of the schedule run 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchWorkforcemanagementBusinessunitSchedulingRunWithRequestBuilder(businessUnitId: String, runId: String, body: PatchBuScheduleRunRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Updates a service goal template
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of a service goal template to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: String, serviceGoalTemplateId: String, body: UpdateServiceGoalTemplate? = nil, completion: @escaping ((_ data: ServiceGoalTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId, body: body)
        requestBuilder.execute { (response: Response<ServiceGoalTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates a service goal template
     
     - PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "abandonRate" : {
    "include" : true,
    "percent" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "averageSpeedOfAnswer" : {
    "include" : true,
    "seconds" : 123
  },
  "id" : "aeiou",
  "serviceLevel" : {
    "include" : true,
    "seconds" : 123,
    "percent" : 123
  }
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter serviceGoalTemplateId: (path) The ID of a service goal template to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ServiceGoalTemplate> 
     */
    open class func patchWorkforcemanagementBusinessunitServicegoaltemplateWithRequestBuilder(businessUnitId: String, serviceGoalTemplateId: String, body: UpdateServiceGoalTemplate? = nil) -> RequestBuilder<ServiceGoalTemplate> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let serviceGoalTemplateIdPreEscape = "\(serviceGoalTemplateId)"
        let serviceGoalTemplateIdPostEscape = serviceGoalTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{serviceGoalTemplateId}", with: serviceGoalTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the requested management unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunit(managementUnitId: String, body: UpdateManagementUnitRequest? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the requested management unit
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startDayOfWeek" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "planningPeriod" : {
        "weekCount" : 123,
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      },
      "startDayOfWeekend" : "aeiou"
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func patchWorkforcemanagementManagementunitWithRequestBuilder(managementUnitId: String, body: UpdateManagementUnitRequest? = nil) -> RequestBuilder<ManagementUnit> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update a time off request
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The id of the user the requested time off request belongs to 
     - parameter timeOffRequestId: (path) The id of the time off request to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId: String, userId: String, timeOffRequestId: String, body: AdminTimeOffRequestPatch? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(managementUnitId: managementUnitId, userId: userId, timeOffRequestId: timeOffRequestId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a time off request
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter userId: (path) The id of the user the requested time off request belongs to 
     - parameter timeOffRequestId: (path) The id of the time off request to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func patchWorkforcemanagementManagementunitUserTimeoffrequestWithRequestBuilder(managementUnitId: String, userId: String, timeOffRequestId: String, body: AdminTimeOffRequestPatch? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Updates a shift trade. This route can only be called by the initiating agent
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter tradeId: (path) The ID of the shift trade to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId: String, weekDateId: Date, body: PatchShiftTradeRequest, tradeId: String, completion: @escaping ((_ data: ShiftTradeResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWeekShifttradeWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, tradeId: tradeId)
        requestBuilder.execute { (response: Response<ShiftTradeResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates a shift trade. This route can only be called by the initiating agent
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
  "receivingShiftId" : "aeiou",
  "receivingUser" : "",
  "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
  "oneSided" : true,
  "reviewedBy" : "",
  "initiatingUser" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "schedule" : {
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  },
  "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
  "acceptableIntervals" : [ "aeiou" ],
  "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
  "expiration" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "weekDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "initiatingShiftId" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter tradeId: (path) The ID of the shift trade to update 

     - returns: RequestBuilder<ShiftTradeResponse> 
     */
    open class func patchWorkforcemanagementManagementunitWeekShifttradeWithRequestBuilder(managementUnitId: String, weekDateId: Date, body: PatchShiftTradeRequest, tradeId: String) -> RequestBuilder<ShiftTradeResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let tradeIdPreEscape = "\(tradeId)"
        let tradeIdPostEscape = tradeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tradeId}", with: tradeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum ValidationMode_patchWorkforcemanagementManagementunitWorkplan: String { 
        case ignore = "Ignore"
    }

    
    
    /**
     
     Update a work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to update 
     - parameter body: (body) body (optional)
     - parameter validationMode: (query) Allows to update work plan even if validation result is invalid (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitWorkplan(managementUnitId: String, workPlanId: String, body: WorkPlan? = nil, validationMode: ValidationMode_patchWorkforcemanagementManagementunitWorkplan? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body, validationMode: validationMode)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a work plan
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maximumDaysOffPerPlanningPeriod" : 123,
  "minimumPaidMinutesPerPlanningPeriod" : 123,
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "constrainWeeklyPaidTime" : true,
  "enabled" : true,
  "valid" : true,
  "minimumShiftStartDistanceMinutes" : 123,
  "constrainMaximumConsecutiveWorkingDays" : true,
  "maximumConsecutiveWorkingDays" : 123,
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "validationId" : "aeiou",
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "earliestStopTimeMinutesFromMidnight" : 123,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "validationId" : "aeiou",
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "minimumLengthFromShiftStartMinutes" : 123,
      "startTimeIsRelativeToShiftStart" : true,
      "minimumLengthFromShiftEndMinutes" : 123,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "constrainEarliestStopTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "maximumConsecutiveWorkingWeekends" : 123,
  "weeklyExactPaidMinutes" : 123,
  "shiftStartVarianceType" : "aeiou",
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "minimumConsecutiveNonWorkingMinutesPerWeek" : 123,
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainPaidTimeGranularity" : true,
  "maximumPaidMinutesPerPlanningPeriod" : 123,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "minimumDaysOffPerPlanningPeriod" : 123,
  "constrainMaximumConsecutiveWorkingWeekends" : true
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to update 
     - parameter body: (body) body (optional)
     - parameter validationMode: (query) Allows to update work plan even if validation result is invalid (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func patchWorkforcemanagementManagementunitWorkplanWithRequestBuilder(managementUnitId: String, workPlanId: String, body: WorkPlan? = nil, validationMode: ValidationMode_patchWorkforcemanagementManagementunitWorkplan? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "validationMode": validationMode?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a work plan rotation
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to update 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: String, workPlanRotationId: String, body: UpdateWorkPlanRotationRequest? = nil, completion: @escaping ((_ data: WorkPlanRotationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId, body: body)
        requestBuilder.execute { (response: Response<WorkPlanRotationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a work plan rotation
     
     - PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "dateRange" : {
    "startBusinessUnitDate" : "2000-01-23T04:56:07.000+0000",
    "endBusinessUnitDate" : "2000-01-23T04:56:07.000+0000"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : {
    "workPlans" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "id" : "aeiou",
  "agentCount" : 123,
  "enabled" : true,
  "agents" : [ {
    "dateRange" : "",
    "position" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to update 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlanRotationResponse> 
     */
    open class func patchWorkforcemanagementManagementunitWorkplanrotationWithRequestBuilder(managementUnitId: String, workPlanRotationId: String, body: UpdateWorkPlanRotationRequest? = nil) -> RequestBuilder<WorkPlanRotationResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanRotationIdPreEscape = "\(workPlanRotationId)"
        let workPlanRotationIdPostEscape = workPlanRotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanRotationId}", with: workPlanRotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlanRotationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a time off request for the current user
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWorkforcemanagementTimeoffrequest(timeOffRequestId: String, body: AgentTimeOffRequestPatch? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: timeOffRequestId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a time off request for the current user
     
     - PATCH /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter timeOffRequestId: (path) Time Off Request Id 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func patchWorkforcemanagementTimeoffrequestWithRequestBuilder(timeOffRequestId: String, body: AgentTimeOffRequestPatch? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        var path = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}"
        let timeOffRequestIdPreEscape = "\(timeOffRequestId)"
        let timeOffRequestIdPostEscape = timeOffRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timeOffRequestId}", with: timeOffRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Request a historical adherence report for users across management units
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementAdherenceHistorical(body: WfmHistoricalAdherenceQueryForUsers? = nil, completion: @escaping ((_ data: WfmHistoricalAdherenceResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementAdherenceHistoricalWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WfmHistoricalAdherenceResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Request a historical adherence report for users across management units
     
     - POST /api/v2/workforcemanagement/adherence/historical
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadResult" : {
    "lookupIdToSecondaryPresenceId" : {
      "key" : "aeiou"
    },
    "data" : [ {
      "actuals" : [ {
        "startOffsetSeconds" : 123,
        "actualActivityCategory" : "aeiou",
        "endOffsetSeconds" : 123
      } ],
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "impact" : "aeiou",
      "dayMetrics" : [ {
        "exceptionDurationSecs" : 123,
        "impactSeconds" : 123,
        "conformanceScheduleSecs" : 123,
        "adherenceScheduleSecs" : 123,
        "exceptionCount" : 123,
        "conformanceActualSecs" : 123,
        "actualLengthSecs" : 123,
        "conformancePercentage" : 1.3579000000000001069366817318950779736042022705078125,
        "dayStartOffsetSecs" : 123,
        "adherencePercentage" : 1.3579000000000001069366817318950779736042022705078125,
        "scheduleLengthSecs" : 123
      } ],
      "conformancePercentage" : 1.3579000000000001069366817318950779736042022705078125,
      "userId" : "aeiou",
      "adherencePercentage" : 1.3579000000000001069366817318950779736042022705078125,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "exceptionInfo" : [ {
        "secondaryPresenceLookupId" : "aeiou",
        "scheduledActivityCodeId" : "aeiou",
        "startOffsetSeconds" : 123,
        "systemPresence" : "aeiou",
        "impact" : "aeiou",
        "actualActivityCategory" : "aeiou",
        "endOffsetSeconds" : 123,
        "scheduledActivityCategory" : "aeiou",
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        }
      } ]
    } ],
    "entityId" : "aeiou"
  },
  "downloadUrls" : [ "aeiou" ],
  "downloadUrl" : "aeiou",
  "queryState" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WfmHistoricalAdherenceResponse> 
     */
    open class func postWorkforcemanagementAdherenceHistoricalWithRequestBuilder(body: WfmHistoricalAdherenceQueryForUsers? = nil) -> RequestBuilder<WfmHistoricalAdherenceResponse> {
        let path = "/api/v2/workforcemanagement/adherence/historical"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmHistoricalAdherenceResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get published schedule for the current user
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementAgentschedulesMine(body: BuGetCurrentAgentScheduleRequest? = nil, completion: @escaping ((_ data: BuCurrentAgentScheduleSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementAgentschedulesMineWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BuCurrentAgentScheduleSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get published schedule for the current user
     
     - POST /api/v2/workforcemanagement/agentschedules/mine
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "agentSchedules" : [ {
    "fullDayTimeOffMarkers" : [ {
      "activityCodeId" : "aeiou",
      "timeOffRequestId" : "aeiou",
      "lengthMinutes" : 123,
      "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
      "paid" : true,
      "description" : "aeiou"
    } ],
    "shifts" : [ {
      "schedule" : {
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "weekDate" : "2000-01-23T04:56:07.000+0000"
      },
      "lengthMinutes" : 123,
      "activities" : [ {
        "activityCodeId" : "aeiou",
        "externalActivityType" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "externalActivityId" : "aeiou",
        "paid" : true,
        "description" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      } ],
      "id" : "aeiou",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "manuallyEdited" : true
    } ],
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "publishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "weekCount" : 123
  } ],
  "updates" : [ {
    "type" : "aeiou",
    "shiftStartDates" : [ "2000-01-23T04:56:07.000+0000" ]
  } ],
  "businessUnitTimeZone" : "aeiou",
  "startDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<BuCurrentAgentScheduleSearchResponse> 
     */
    open class func postWorkforcemanagementAgentschedulesMineWithRequestBuilder(body: BuGetCurrentAgentScheduleRequest? = nil) -> RequestBuilder<BuCurrentAgentScheduleSearchResponse> {
        let path = "/api/v2/workforcemanagement/agentschedules/mine"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuCurrentAgentScheduleSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new activity code
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitActivitycodes(businessUnitId: String, body: CreateActivityCodeRequest? = nil, completion: @escaping ((_ data: BusinessUnitActivityCode?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitActivitycodesWithRequestBuilder(businessUnitId: businessUnitId, body: body)
        requestBuilder.execute { (response: Response<BusinessUnitActivityCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new activity code
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lengthInMinutes" : 123,
  "defaultCode" : true,
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "countsAsWorkTime" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "countsAsPaidTime" : true,
  "agentTimeOffSelectable" : true,
  "category" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit, or &#39;mine&#39; for the business unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<BusinessUnitActivityCode> 
     */
    open class func postWorkforcemanagementBusinessunitActivitycodesWithRequestBuilder(businessUnitId: String, body: CreateActivityCodeRequest? = nil) -> RequestBuilder<BusinessUnitActivityCode> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnitActivityCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Search published schedules
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: BuAsyncAgentSchedulesSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitAgentschedulesSearchWithRequestBuilder(businessUnitId: businessUnitId, body: body, forceAsync: forceAsync, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<BuAsyncAgentSchedulesSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search published schedules
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "agentSchedules" : [ {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
        "paid" : true,
        "description" : "aeiou"
      } ],
      "shifts" : [ {
        "schedule" : {
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "weekDate" : "2000-01-23T04:56:07.000+0000"
        },
        "lengthMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "externalActivityType" : "aeiou",
          "timeOffRequestId" : "aeiou",
          "lengthMinutes" : 123,
          "externalActivityId" : "aeiou",
          "paid" : true,
          "description" : "aeiou",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "id" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "user" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "publishedSchedules" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000",
      "weekCount" : 123
    } ],
    "businessUnitTimeZone" : "aeiou"
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BuAsyncAgentSchedulesSearchResponse> 
     */
    open class func postWorkforcemanagementBusinessunitAgentschedulesSearchWithRequestBuilder(businessUnitId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<BuAsyncAgentSchedulesSearchResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<BuAsyncAgentSchedulesSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get intraday data for the given date for the requested planningGroupIds
     
     - parameter businessUnitId: (path) The business unit ID of the business unit 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitIntraday(businessUnitId: String, forceAsync: Bool? = nil, body: IntradayPlanningGroupRequest? = nil, completion: @escaping ((_ data: AsyncIntradayResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitIntradayWithRequestBuilder(businessUnitId: businessUnitId, forceAsync: forceAsync, body: body)
        requestBuilder.execute { (response: Response<AsyncIntradayResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get intraday data for the given date for the requested planningGroupIds
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "schedule" : {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "noDataReason" : "aeiou",
    "intradayDataGroupings" : [ {
      "forecastDataPerInterval" : [ "" ],
      "scheduleDataPerInterval" : [ "" ],
      "performancePredictionDataPerInterval" : [ "" ],
      "mediaType" : "aeiou",
      "forecastDataSummary" : {
        "averageHandleTimeSeconds" : 1.3579000000000001069366817318950779736042022705078125,
        "offered" : 1.3579000000000001069366817318950779736042022705078125
      },
      "scheduleDataSummary" : {
        "onQueueTimeSeconds" : 123456789
      },
      "performancePredictionDataSummary" : {
        "serviceLevelPercent" : 1.3579000000000001069366817318950779736042022705078125,
        "occupancyPercent" : 1.3579000000000001069366817318950779736042022705078125,
        "averageSpeedOfAnswerSeconds" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ],
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "categories" : [ "aeiou" ],
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "intervalLengthMinutes" : 123
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<AsyncIntradayResponse> 
     */
    open class func postWorkforcemanagementBusinessunitIntradayWithRequestBuilder(businessUnitId: String, forceAsync: Bool? = nil, body: IntradayPlanningGroupRequest? = nil) -> RequestBuilder<AsyncIntradayResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<AsyncIntradayResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Adds a new planning group
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId: String, body: CreatePlanningGroupRequest? = nil, completion: @escaping ((_ data: PlanningGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitPlanninggroupsWithRequestBuilder(businessUnitId: businessUnitId, body: body)
        requestBuilder.execute { (response: Response<PlanningGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Adds a new planning group
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "serviceGoalTemplate" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "routePaths" : [ {
    "skills" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ],
    "mediaType" : "aeiou",
    "language" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<PlanningGroup> 
     */
    open class func postWorkforcemanagementBusinessunitPlanninggroupsWithRequestBuilder(businessUnitId: String, body: CreatePlanningGroupRequest? = nil) -> RequestBuilder<PlanningGroup> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PlanningGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Adds a new service goal template
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId: String, body: CreateServiceGoalTemplate? = nil, completion: @escaping ((_ data: ServiceGoalTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitServicegoaltemplatesWithRequestBuilder(businessUnitId: businessUnitId, body: body)
        requestBuilder.execute { (response: Response<ServiceGoalTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Adds a new service goal template
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "abandonRate" : {
    "include" : true,
    "percent" : 123
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "averageSpeedOfAnswer" : {
    "include" : true,
    "seconds" : 123
  },
  "id" : "aeiou",
  "serviceLevel" : {
    "include" : true,
    "seconds" : 123,
    "percent" : 123
  }
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ServiceGoalTemplate> 
     */
    open class func postWorkforcemanagementBusinessunitServicegoaltemplatesWithRequestBuilder(businessUnitId: String, body: CreateServiceGoalTemplate? = nil) -> RequestBuilder<ServiceGoalTemplate> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceGoalTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Loads agent schedule data from the schedule. Used in combination with the metadata route
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId: String, weekId: Date, scheduleId: String, body: BuQueryAgentSchedulesRequest, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: BuAsyncAgentSchedulesQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body, forceAsync: forceAsync, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<BuAsyncAgentSchedulesQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Loads agent schedule data from the schedule. Used in combination with the metadata route
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "agentSchedules" : [ {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
        "paid" : true,
        "description" : "aeiou"
      } ],
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "shifts" : [ {
        "schedule" : {
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "weekDate" : "2000-01-23T04:56:07.000+0000"
        },
        "lengthMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "externalActivityType" : "aeiou",
          "timeOffRequestId" : "aeiou",
          "lengthMinutes" : 123,
          "externalActivityId" : "aeiou",
          "paid" : true,
          "description" : "aeiou",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "id" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "workPlan" : {
        "managementUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "user" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "workPlansPerWeek" : [ "" ]
    } ],
    "businessUnitTimeZone" : "aeiou"
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BuAsyncAgentSchedulesQueryResponse> 
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, body: BuQueryAgentSchedulesRequest, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<BuAsyncAgentSchedulesQueryResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<BuAsyncAgentSchedulesQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Copy a schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule to copy 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId: String, weekId: Date, scheduleId: String, body: BuCopyScheduleRequest, completion: @escaping ((_ data: BuAsyncScheduleResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekScheduleCopyWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body)
        requestBuilder.execute { (response: Response<BuAsyncScheduleResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Copy a schedule
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "managementUnits" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "agentCount" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "agents" : [ "" ]
    } ],
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "generationResults" : {
      "messageCount" : 123,
      "failed" : true,
      "runId" : "aeiou"
    },
    "id" : "aeiou",
    "published" : true,
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "shortTermForecast" : {
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "weekCount" : 123
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule to copy 
     - parameter body: (body) body 

     - returns: RequestBuilder<BuAsyncScheduleResponse> 
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleCopyWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, body: BuCopyScheduleRequest) -> RequestBuilder<BuAsyncScheduleResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuAsyncScheduleResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Start a rescheduling run
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId: String, weekId: Date, scheduleId: String, body: BuRescheduleRequest, completion: @escaping ((_ data: BuAsyncScheduleRunResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekScheduleRescheduleWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body)
        requestBuilder.execute { (response: Response<BuAsyncScheduleRunResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Start a rescheduling run
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "messageCount" : 123,
    "targetWeek" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
    "schedulerRunId" : "aeiou",
    "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
    "weekCount" : 123,
    "schedule" : {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "schedulingCanceledBy" : "",
    "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
    "intradayRescheduling" : true,
    "scheduleDescription" : "aeiou",
    "reschedulingOptions" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "activityCodeIds" : [ "aeiou" ],
      "managementUnits" : [ {
        "managementUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "applied" : true
      } ],
      "doNotChangeManuallyEditedShifts" : true,
      "doNotChangeDailyPaidTime" : true,
      "doNotChangeShiftStartTimes" : true,
      "existingSchedule" : "",
      "agentCount" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "doNotChangeWeeklyPaidTime" : true
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
    "schedulingStartedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter scheduleId: (path) The ID of the schedule 
     - parameter body: (body) body 

     - returns: RequestBuilder<BuAsyncScheduleRunResponse> 
     */
    open class func postWorkforcemanagementBusinessunitWeekScheduleRescheduleWithRequestBuilder(businessUnitId: String, weekId: Date, scheduleId: String, body: BuRescheduleRequest) -> RequestBuilder<BuAsyncScheduleRunResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuAsyncScheduleRunResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create a blank schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId: String, weekId: Date, body: BuCreateBlankScheduleRequest, completion: @escaping ((_ data: BuScheduleMetadata?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekSchedulesWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, body: body)
        requestBuilder.execute { (response: Response<BuScheduleMetadata>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a blank schedule
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "managementUnits" : [ {
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "agentCount" : 123,
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "agents" : [ "" ]
  } ],
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "generationResults" : {
    "messageCount" : 123,
    "failed" : true,
    "runId" : "aeiou"
  },
  "id" : "aeiou",
  "published" : true,
  "weekDate" : "2000-01-23T04:56:07.000+0000",
  "shortTermForecast" : {
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  },
  "weekCount" : 123
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 

     - returns: RequestBuilder<BuScheduleMetadata> 
     */
    open class func postWorkforcemanagementBusinessunitWeekSchedulesWithRequestBuilder(businessUnitId: String, weekId: Date, body: BuCreateBlankScheduleRequest) -> RequestBuilder<BuScheduleMetadata> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuScheduleMetadata>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Generate a schedule
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId: String, weekId: Date, body: BuGenerateScheduleRequest, completion: @escaping ((_ data: BuAsyncScheduleRunResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekSchedulesGenerateWithRequestBuilder(businessUnitId: businessUnitId, weekId: weekId, body: body)
        requestBuilder.execute { (response: Response<BuAsyncScheduleRunResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Generate a schedule
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "messageCount" : 123,
    "targetWeek" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "schedulingStartTime" : "2000-01-23T04:56:07.000+0000",
    "schedulerRunId" : "aeiou",
    "percentComplete" : 1.3579000000000001069366817318950779736042022705078125,
    "weekCount" : 123,
    "schedule" : {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "schedulingCanceledBy" : "",
    "schedulingCompletedTime" : "2000-01-23T04:56:07.000+0000",
    "intradayRescheduling" : true,
    "scheduleDescription" : "aeiou",
    "reschedulingOptions" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "activityCodeIds" : [ "aeiou" ],
      "managementUnits" : [ {
        "managementUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "applied" : true
      } ],
      "doNotChangeManuallyEditedShifts" : true,
      "doNotChangeDailyPaidTime" : true,
      "doNotChangeShiftStartTimes" : true,
      "existingSchedule" : "",
      "agentCount" : 123,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "doNotChangeWeeklyPaidTime" : true
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "reschedulingResultExpiration" : "2000-01-23T04:56:07.000+0000",
    "schedulingStartedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The ID of the business unit 
     - parameter weekId: (path) First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 

     - returns: RequestBuilder<BuAsyncScheduleRunResponse> 
     */
    open class func postWorkforcemanagementBusinessunitWeekSchedulesGenerateWithRequestBuilder(businessUnitId: String, weekId: Date, body: BuGenerateScheduleRequest) -> RequestBuilder<BuAsyncScheduleRunResponse> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekIdPreEscape = "\(weekId)"
        let weekIdPostEscape = weekIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekId}", with: weekIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuAsyncScheduleRunResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Copy a short term forecast
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast to copy 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId: String, weekDateId: Date, forecastId: String, body: CopyBuForecastRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: AsyncForecastOperationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekShorttermforecastCopyWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<AsyncForecastOperationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Copy a short term forecast
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "legacy" : true,
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "timeZone" : "aeiou",
    "sourceDays" : [ {
      "date" : "aeiou",
      "dataKey" : "aeiou",
      "fileName" : "aeiou",
      "dayOfWeek" : "aeiou",
      "weight" : 123
    } ],
    "weekCount" : 123,
    "creationMethod" : "aeiou",
    "planningGroupsVersion" : 123,
    "planningGroups" : {
      "entities" : [ {
        "serviceGoalTemplate" : {
          "abandonRate" : {
            "percent" : 123
          },
          "averageSpeedOfAnswer" : {
            "seconds" : 123
          },
          "serviceLevel" : {
            "seconds" : 123,
            "percent" : 123
          }
        },
        "name" : "aeiou",
        "id" : "aeiou",
        "routePaths" : [ {
          "skills" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "mediaType" : "aeiou",
          "language" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        } ]
      } ]
    },
    "generationResults" : {
      "planningGroupResults" : [ {
        "planningGroupId" : "aeiou",
        "metricResults" : [ {
          "metric" : "aeiou",
          "forecastingMethod" : "aeiou"
        } ]
      } ]
    },
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "modifications" : [ {
      "startIntervalIndex" : 123,
      "legacyMetric" : "aeiou",
      "displayGranularity" : "aeiou",
      "endIntervalIndex" : 123,
      "metric" : "aeiou",
      "granularity" : "aeiou",
      "values" : [ {
        "intervalIndex" : 123,
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "type" : "aeiou",
      "planningGroupIds" : [ "aeiou" ],
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "enabled" : true
    } ]
  },
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter forecastId: (path) The ID of the forecast to copy 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<AsyncForecastOperationResult> 
     */
    open class func postWorkforcemanagementBusinessunitWeekShorttermforecastCopyWithRequestBuilder(businessUnitId: String, weekDateId: Date, forecastId: String, body: CopyBuForecastRequest, forceAsync: Bool? = nil) -> RequestBuilder<AsyncForecastOperationResult> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let forecastIdPreEscape = "\(forecastId)"
        let forecastIdPostEscape = forecastIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{forecastId}", with: forecastIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<AsyncForecastOperationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Generate a short term forecast
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body)  
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId: String, weekDateId: Date, body: GenerateBuForecastRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: AsyncForecastOperationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateWithRequestBuilder(businessUnitId: businessUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<AsyncForecastOperationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Generate a short term forecast
     
     - POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "legacy" : true,
    "referenceStartDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "timeZone" : "aeiou",
    "sourceDays" : [ {
      "date" : "aeiou",
      "dataKey" : "aeiou",
      "fileName" : "aeiou",
      "dayOfWeek" : "aeiou",
      "weight" : 123
    } ],
    "weekCount" : 123,
    "creationMethod" : "aeiou",
    "planningGroupsVersion" : 123,
    "planningGroups" : {
      "entities" : [ {
        "serviceGoalTemplate" : {
          "abandonRate" : {
            "percent" : 123
          },
          "averageSpeedOfAnswer" : {
            "seconds" : 123
          },
          "serviceLevel" : {
            "seconds" : 123,
            "percent" : 123
          }
        },
        "name" : "aeiou",
        "id" : "aeiou",
        "routePaths" : [ {
          "skills" : [ {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          } ],
          "mediaType" : "aeiou",
          "language" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        } ]
      } ]
    },
    "generationResults" : {
      "planningGroupResults" : [ {
        "planningGroupId" : "aeiou",
        "metricResults" : [ {
          "metric" : "aeiou",
          "forecastingMethod" : "aeiou"
        } ]
      } ]
    },
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "modifications" : [ {
      "startIntervalIndex" : 123,
      "legacyMetric" : "aeiou",
      "displayGranularity" : "aeiou",
      "endIntervalIndex" : 123,
      "metric" : "aeiou",
      "granularity" : "aeiou",
      "values" : [ {
        "intervalIndex" : 123,
        "value" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "type" : "aeiou",
      "planningGroupIds" : [ "aeiou" ],
      "value" : 1.3579000000000001069366817318950779736042022705078125,
      "enabled" : true
    } ]
  },
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter businessUnitId: (path) The business unit ID of the business unit to which the forecast belongs 
     - parameter weekDateId: (path) The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body)  
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<AsyncForecastOperationResult> 
     */
    open class func postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateWithRequestBuilder(businessUnitId: String, weekDateId: Date, body: GenerateBuForecastRequest, forceAsync: Bool? = nil) -> RequestBuilder<AsyncForecastOperationResult> {
        var path = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate"
        let businessUnitIdPreEscape = "\(businessUnitId)"
        let businessUnitIdPostEscape = businessUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{businessUnitId}", with: businessUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<AsyncForecastOperationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add a new business unit
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementBusinessunits(body: CreateBusinessUnitRequest? = nil, completion: @escaping ((_ data: BusinessUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementBusinessunitsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BusinessUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a new business unit
     
     - POST /api/v2/workforcemanagement/businessunits
     - It may take a minute or two for a new business unit to be available for api operations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "startDayOfWeek" : "aeiou",
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "timeZone" : "aeiou",
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<BusinessUnit> 
     */
    open class func postWorkforcemanagementBusinessunitsWithRequestBuilder(body: CreateBusinessUnitRequest? = nil) -> RequestBuilder<BusinessUnit> {
        let path = "/api/v2/workforcemanagement/businessunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BusinessUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     
     Delete the entries of the historical data imports in the organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementHistoricaldataDeletejob(completion: @escaping ((_ data: HistoricalImportDeleteJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementHistoricaldataDeletejobWithRequestBuilder()
        requestBuilder.execute { (response: Response<HistoricalImportDeleteJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the entries of the historical data imports in the organization
     
     - POST /api/v2/workforcemanagement/historicaldata/deletejob
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "status" : "aeiou"
}}]

     - returns: RequestBuilder<HistoricalImportDeleteJobResponse> 
     */
    open class func postWorkforcemanagementHistoricaldataDeletejobWithRequestBuilder() -> RequestBuilder<HistoricalImportDeleteJobResponse> {
        let path = "/api/v2/workforcemanagement/historicaldata/deletejob"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HistoricalImportDeleteJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Trigger validation process for historical import
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementHistoricaldataValidate(body: ValidationServiceRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementHistoricaldataValidateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Trigger validation process for historical import
     
     - POST /api/v2/workforcemanagement/historicaldata/validate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postWorkforcemanagementHistoricaldataValidateWithRequestBuilder(body: ValidationServiceRequest? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/workforcemanagement/historicaldata/validate"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Query published schedules for given given time range for set of users
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil, completion: @escaping ((_ data: BuAsyncAgentSchedulesSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitAgentschedulesSearchWithRequestBuilder(managementUnitId: managementUnitId, body: body, forceAsync: forceAsync, forceDownloadService: forceDownloadService)
        requestBuilder.execute { (response: Response<BuAsyncAgentSchedulesSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query published schedules for given given time range for set of users
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "agentSchedules" : [ {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "timeOffRequestId" : "aeiou",
        "lengthMinutes" : 123,
        "businessUnitDate" : "2000-01-23T04:56:07.000+0000",
        "paid" : true,
        "description" : "aeiou"
      } ],
      "shifts" : [ {
        "schedule" : {
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "weekDate" : "2000-01-23T04:56:07.000+0000"
        },
        "lengthMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "externalActivityType" : "aeiou",
          "timeOffRequestId" : "aeiou",
          "lengthMinutes" : 123,
          "externalActivityId" : "aeiou",
          "paid" : true,
          "description" : "aeiou",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "id" : "aeiou",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "user" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "publishedSchedules" : [ {
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000",
      "weekCount" : 123
    } ],
    "businessUnitTimeZone" : "aeiou"
  },
  "downloadUrl" : "aeiou",
  "operationId" : "aeiou",
  "progress" : 123,
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter forceDownloadService: (query) Force the result of this operation to be sent via download service.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BuAsyncAgentSchedulesSearchResponse> 
     */
    open class func postWorkforcemanagementManagementunitAgentschedulesSearchWithRequestBuilder(managementUnitId: String, body: BuSearchAgentSchedulesRequest? = nil, forceAsync: Bool? = nil, forceDownloadService: Bool? = nil) -> RequestBuilder<BuAsyncAgentSchedulesSearchResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync, 
            
            "forceDownloadService": forceDownloadService
            
        ])

        let requestBuilder: RequestBuilder<BuAsyncAgentSchedulesSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Request a historical adherence report
     
     - parameter managementUnitId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId: String, body: WfmHistoricalAdherenceQuery? = nil, completion: @escaping ((_ data: WfmHistoricalAdherenceResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitHistoricaladherencequeryWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<WfmHistoricalAdherenceResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Request a historical adherence report
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery
     - The maximum supported range for historical adherence queries is 31 days, or 7 days with includeExceptions = true
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadResult" : {
    "lookupIdToSecondaryPresenceId" : {
      "key" : "aeiou"
    },
    "data" : [ {
      "actuals" : [ {
        "startOffsetSeconds" : 123,
        "actualActivityCategory" : "aeiou",
        "endOffsetSeconds" : 123
      } ],
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "impact" : "aeiou",
      "dayMetrics" : [ {
        "exceptionDurationSecs" : 123,
        "impactSeconds" : 123,
        "conformanceScheduleSecs" : 123,
        "adherenceScheduleSecs" : 123,
        "exceptionCount" : 123,
        "conformanceActualSecs" : 123,
        "actualLengthSecs" : 123,
        "conformancePercentage" : 1.3579000000000001069366817318950779736042022705078125,
        "dayStartOffsetSecs" : 123,
        "adherencePercentage" : 1.3579000000000001069366817318950779736042022705078125,
        "scheduleLengthSecs" : 123
      } ],
      "conformancePercentage" : 1.3579000000000001069366817318950779736042022705078125,
      "userId" : "aeiou",
      "adherencePercentage" : 1.3579000000000001069366817318950779736042022705078125,
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "exceptionInfo" : [ {
        "secondaryPresenceLookupId" : "aeiou",
        "scheduledActivityCodeId" : "aeiou",
        "startOffsetSeconds" : 123,
        "systemPresence" : "aeiou",
        "impact" : "aeiou",
        "actualActivityCategory" : "aeiou",
        "endOffsetSeconds" : 123,
        "scheduledActivityCategory" : "aeiou",
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        }
      } ]
    } ],
    "entityId" : "aeiou"
  },
  "downloadUrls" : [ "aeiou" ],
  "downloadUrl" : "aeiou",
  "queryState" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WfmHistoricalAdherenceResponse> 
     */
    open class func postWorkforcemanagementManagementunitHistoricaladherencequeryWithRequestBuilder(managementUnitId: String, body: WfmHistoricalAdherenceQuery? = nil) -> RequestBuilder<WfmHistoricalAdherenceResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WfmHistoricalAdherenceResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Move the requested management unit to a new business unit
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitMove(managementUnitId: String, body: MoveManagementUnitRequest? = nil, completion: @escaping ((_ data: MoveManagementUnitResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitMoveWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<MoveManagementUnitResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Move the requested management unit to a new business unit
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/move
     - Returns status 200 if the management unit is already in the requested business unit
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<MoveManagementUnitResponse> 
     */
    open class func postWorkforcemanagementManagementunitMoveWithRequestBuilder(managementUnitId: String, body: MoveManagementUnitRequest? = nil) -> RequestBuilder<MoveManagementUnitResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/move"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MoveManagementUnitResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Query published schedules for given given time range for set of users
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId: String, body: UserListScheduleRequestBody? = nil, completion: @escaping ((_ data: UserScheduleContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitSchedulesSearchWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<UserScheduleContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query published schedules for given given time range for set of users
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "managementUnitTimeZone" : "aeiou",
  "publishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "aeiou"
  } ],
  "userSchedules" : {
    "key" : {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "isPaid" : true,
        "lengthInMinutes" : 123,
        "description" : "aeiou",
        "managementUnitDate" : "aeiou",
        "delete" : true
      } ],
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "workPlanId" : "aeiou",
      "shifts" : [ {
        "lengthInMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "lengthInMinutes" : 123,
          "timeOffRequestId" : "aeiou",
          "description" : "aeiou",
          "isDstFallback" : true,
          "countsAsPaidTime" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "weekSchedule" : "",
        "id" : "aeiou",
        "delete" : true,
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "delete" : true
    }
  }
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UserScheduleContainer> 
     */
    open class func postWorkforcemanagementManagementunitSchedulesSearchWithRequestBuilder(managementUnitId: String, body: UserListScheduleRequestBody? = nil) -> RequestBuilder<UserScheduleContainer> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserScheduleContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new time off request
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId: String, body: CreateAdminTimeOffRequest? = nil, completion: @escaping ((_ data: TimeOffRequestList?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitTimeoffrequestsWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new time off request
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "timeOffRequests" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestList> 
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsWithRequestBuilder(managementUnitId: String, body: CreateAdminTimeOffRequest? = nil) -> RequestBuilder<TimeOffRequestList> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Fetches time off requests matching the conditions specified in the request body
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId: String, body: TimeOffRequestQueryBody? = nil, completion: @escaping ((_ data: TimeOffRequestListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitTimeoffrequestsQueryWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetches time off requests matching the conditions specified in the request body
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query
     - Request body requires one of the following: User ID is specified, statuses == [Pending] or date range to be specified and less than or equal to 33 days.  All other fields are filters
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "submittedBy" : "",
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "notes" : "aeiou",
    "selfUri" : "aeiou",
    "fullDayManagementUnitDates" : [ "aeiou" ],
    "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
    "submittedDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedBy" : "",
    "activityCodeId" : "aeiou",
    "isFullDayRequest" : true,
    "markedAsRead" : true,
    "dailyDurationMinutes" : 123,
    "id" : "aeiou",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "status" : "aeiou"
  } ]
}}]
     
     - parameter managementUnitId: (path) The muId of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestListing> 
     */
    open class func postWorkforcemanagementManagementunitTimeoffrequestsQueryWithRequestBuilder(managementUnitId: String, body: TimeOffRequestQueryBody? = nil) -> RequestBuilder<TimeOffRequestListing> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Matches a shift trade. This route can only be called by the receiving agent
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter tradeId: (path) The ID of the shift trade to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId: String, weekDateId: Date, body: MatchShiftTradeRequest, tradeId: String, completion: @escaping ((_ data: MatchShiftTradeResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShifttradeMatchWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, tradeId: tradeId)
        requestBuilder.execute { (response: Response<MatchShiftTradeResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Matches a shift trade. This route can only be called by the receiving agent
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "trade" : {
    "metadata" : {
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "receivingShiftId" : "aeiou",
    "receivingUser" : "",
    "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "oneSided" : true,
    "reviewedBy" : "",
    "initiatingUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "schedule" : {
      "businessUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000"
    },
    "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
    "acceptableIntervals" : [ "aeiou" ],
    "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
    "expiration" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000",
    "reviewedDate" : "2000-01-23T04:56:07.000+0000",
    "initiatingShiftId" : "aeiou"
  },
  "violations" : [ {
    "type" : "aeiou",
    "params" : {
      "key" : "aeiou"
    }
  } ],
  "adminReviewViolations" : [ "" ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter tradeId: (path) The ID of the shift trade to update 

     - returns: RequestBuilder<MatchShiftTradeResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradeMatchWithRequestBuilder(managementUnitId: String, weekDateId: Date, body: MatchShiftTradeRequest, tradeId: String) -> RequestBuilder<MatchShiftTradeResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let tradeIdPreEscape = "\(tradeId)"
        let tradeIdPostEscape = tradeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tradeId}", with: tradeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MatchShiftTradeResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Adds a shift trade
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId: String, weekDateId: Date, body: AddShiftTradeRequest, completion: @escaping ((_ data: ShiftTradeResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShifttradesWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body)
        requestBuilder.execute { (response: Response<ShiftTradeResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Adds a shift trade
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
  "receivingShiftId" : "aeiou",
  "receivingUser" : "",
  "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
  "oneSided" : true,
  "reviewedBy" : "",
  "initiatingUser" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "schedule" : {
    "businessUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "2000-01-23T04:56:07.000+0000"
  },
  "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
  "acceptableIntervals" : [ "aeiou" ],
  "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
  "expiration" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "weekDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "initiatingShiftId" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 

     - returns: RequestBuilder<ShiftTradeResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradesWithRequestBuilder(managementUnitId: String, weekDateId: Date, body: AddShiftTradeRequest) -> RequestBuilder<ShiftTradeResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ShiftTradeResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Searches for potential shift trade matches for the current agent
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId: String, weekDateId: Date, body: SearchShiftTradesRequest, completion: @escaping ((_ data: SearchShiftTradesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShifttradesSearchWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body)
        requestBuilder.execute { (response: Response<SearchShiftTradesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Searches for potential shift trade matches for the current agent
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "trades" : [ {
    "preview" : {
      "activities" : [ {
        "activityCodeId" : "aeiou",
        "lengthMinutes" : 123,
        "countsAsPaidTime" : true,
        "startDate" : "2000-01-23T04:56:07.000+0000"
      } ]
    },
    "trade" : {
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "receivingShiftEnd" : "2000-01-23T04:56:07.000+0000",
      "receivingShiftId" : "aeiou",
      "receivingUser" : "",
      "receivingShiftStart" : "2000-01-23T04:56:07.000+0000",
      "oneSided" : true,
      "reviewedBy" : "",
      "initiatingUser" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "schedule" : {
        "businessUnit" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "id" : "aeiou",
        "weekDate" : "2000-01-23T04:56:07.000+0000"
      },
      "initiatingShiftEnd" : "2000-01-23T04:56:07.000+0000",
      "acceptableIntervals" : [ "aeiou" ],
      "initiatingShiftStart" : "2000-01-23T04:56:07.000+0000",
      "expiration" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "weekDate" : "2000-01-23T04:56:07.000+0000",
      "reviewedDate" : "2000-01-23T04:56:07.000+0000",
      "initiatingShiftId" : "aeiou"
    },
    "matchingReceivingShiftIds" : [ "aeiou" ]
  } ]
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 

     - returns: RequestBuilder<SearchShiftTradesResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradesSearchWithRequestBuilder(managementUnitId: String, weekDateId: Date, body: SearchShiftTradesRequest) -> RequestBuilder<SearchShiftTradesResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchShiftTradesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Updates the state of a batch of shift trades
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId: String, weekDateId: Date, body: BulkShiftTradeStateUpdateRequest, forceAsync: Bool? = nil, completion: @escaping ((_ data: BulkUpdateShiftTradeStateResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWeekShifttradesStateBulkWithRequestBuilder(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync)
        requestBuilder.execute { (response: Response<BulkUpdateShiftTradeStateResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates the state of a batch of shift trades
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk
     - Admin functionality is not supported with \"mine\".
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "result" : {
    "entities" : [ {
      "metadata" : {
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "failureReason" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "reviewedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "reviewedDate" : "2000-01-23T04:56:07.000+0000"
    } ]
  },
  "operationId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter managementUnitId: (path) The management unit ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter weekDateId: (path) The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter body: (body) body 
     - parameter forceAsync: (query) Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes (optional)

     - returns: RequestBuilder<BulkUpdateShiftTradeStateResponse> 
     */
    open class func postWorkforcemanagementManagementunitWeekShifttradesStateBulkWithRequestBuilder(managementUnitId: String, weekDateId: Date, body: BulkShiftTradeStateUpdateRequest, forceAsync: Bool? = nil) -> RequestBuilder<BulkUpdateShiftTradeStateResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let weekDateIdPreEscape = "\(weekDateId)"
        let weekDateIdPostEscape = weekDateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{weekDateId}", with: weekDateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceAsync": forceAsync
            
        ])

        let requestBuilder: RequestBuilder<BulkUpdateShiftTradeStateResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create a copy of work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to create a copy 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId: String, workPlanId: String, body: CopyWorkPlan? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplanCopyWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a copy of work plan
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maximumDaysOffPerPlanningPeriod" : 123,
  "minimumPaidMinutesPerPlanningPeriod" : 123,
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "constrainWeeklyPaidTime" : true,
  "enabled" : true,
  "valid" : true,
  "minimumShiftStartDistanceMinutes" : 123,
  "constrainMaximumConsecutiveWorkingDays" : true,
  "maximumConsecutiveWorkingDays" : 123,
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "validationId" : "aeiou",
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "earliestStopTimeMinutesFromMidnight" : 123,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "validationId" : "aeiou",
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "minimumLengthFromShiftStartMinutes" : 123,
      "startTimeIsRelativeToShiftStart" : true,
      "minimumLengthFromShiftEndMinutes" : 123,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "constrainEarliestStopTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "maximumConsecutiveWorkingWeekends" : 123,
  "weeklyExactPaidMinutes" : 123,
  "shiftStartVarianceType" : "aeiou",
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "minimumConsecutiveNonWorkingMinutesPerWeek" : 123,
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainPaidTimeGranularity" : true,
  "maximumPaidMinutesPerPlanningPeriod" : 123,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "minimumDaysOffPerPlanningPeriod" : 123,
  "constrainMaximumConsecutiveWorkingWeekends" : true
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to create a copy 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func postWorkforcemanagementManagementunitWorkplanCopyWithRequestBuilder(managementUnitId: String, workPlanId: String, body: CopyWorkPlan? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_postWorkforcemanagementManagementunitWorkplanValidate: String { 
        case messages = "messages"
    }

    
    
    /**
     
     Validate Work Plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to validate. For new work plan, use the word &#39;new&#39; for the ID. 
     - parameter body: (body) body (optional)
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId: String, workPlanId: String, body: WorkPlanValidationRequest? = nil, expand: [String]? = nil, completion: @escaping ((_ data: ValidateWorkPlanResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplanValidateWithRequestBuilder(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body, expand: expand)
        requestBuilder.execute { (response: Response<ValidateWorkPlanResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Validate Work Plan
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "valid" : true,
  "messages" : {
    "violationMessages" : [ {
      "severity" : "aeiou",
      "arguments" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "type" : "aeiou"
    } ],
    "constraintConflictMessage" : {
      "conflictedConstraintMessages" : [ {
        "arguments" : [ "" ],
        "type" : "aeiou"
      } ],
      "message" : {
        "arguments" : [ "" ],
        "type" : "aeiou"
      }
    }
  },
  "workPlan" : {
    "managementUnit" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanId: (path) The ID of the work plan to validate. For new work plan, use the word &#39;new&#39; for the ID. 
     - parameter body: (body) body (optional)
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<ValidateWorkPlanResponse> 
     */
    open class func postWorkforcemanagementManagementunitWorkplanValidateWithRequestBuilder(managementUnitId: String, workPlanId: String, body: WorkPlanValidationRequest? = nil, expand: [String]? = nil) -> RequestBuilder<ValidateWorkPlanResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanIdPreEscape = "\(workPlanId)"
        let workPlanIdPostEscape = workPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanId}", with: workPlanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<ValidateWorkPlanResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create a copy of work plan rotation
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to create a copy 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId: String, workPlanRotationId: String, body: CopyWorkPlanRotationRequest? = nil, completion: @escaping ((_ data: WorkPlanRotationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplanrotationCopyWithRequestBuilder(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId, body: body)
        requestBuilder.execute { (response: Response<WorkPlanRotationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a copy of work plan rotation
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "dateRange" : {
    "startBusinessUnitDate" : "2000-01-23T04:56:07.000+0000",
    "endBusinessUnitDate" : "2000-01-23T04:56:07.000+0000"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : {
    "workPlans" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "id" : "aeiou",
  "agentCount" : 123,
  "enabled" : true,
  "agents" : [ {
    "dateRange" : "",
    "position" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter workPlanRotationId: (path) The ID of the work plan rotation to create a copy 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlanRotationResponse> 
     */
    open class func postWorkforcemanagementManagementunitWorkplanrotationCopyWithRequestBuilder(managementUnitId: String, workPlanRotationId: String, body: CopyWorkPlanRotationRequest? = nil) -> RequestBuilder<WorkPlanRotationResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let workPlanRotationIdPreEscape = "\(workPlanRotationId)"
        let workPlanRotationIdPostEscape = workPlanRotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workPlanRotationId}", with: workPlanRotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlanRotationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a new work plan rotation
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId: String, body: AddWorkPlanRotationRequest? = nil, completion: @escaping ((_ data: WorkPlanRotationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplanrotationsWithRequestBuilder(managementUnitId: managementUnitId, body: body)
        requestBuilder.execute { (response: Response<WorkPlanRotationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new work plan rotation
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "dateRange" : {
    "startBusinessUnitDate" : "2000-01-23T04:56:07.000+0000",
    "endBusinessUnitDate" : "2000-01-23T04:56:07.000+0000"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : {
    "workPlans" : [ {
      "managementUnit" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "id" : "aeiou",
  "agentCount" : 123,
  "enabled" : true,
  "agents" : [ {
    "dateRange" : "",
    "position" : 123,
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<WorkPlanRotationResponse> 
     */
    open class func postWorkforcemanagementManagementunitWorkplanrotationsWithRequestBuilder(managementUnitId: String, body: AddWorkPlanRotationRequest? = nil) -> RequestBuilder<WorkPlanRotationResponse> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkPlanRotationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum ValidationMode_postWorkforcemanagementManagementunitWorkplans: String { 
        case ignore = "Ignore"
    }

    
    
    /**
     
     Create a new work plan
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter validationMode: (query) Allows to create work plan even if the validation result is invalid (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunitWorkplans(managementUnitId: String, body: CreateWorkPlan? = nil, validationMode: ValidationMode_postWorkforcemanagementManagementunitWorkplans? = nil, completion: @escaping ((_ data: WorkPlan?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: managementUnitId, body: body, validationMode: validationMode)
        requestBuilder.execute { (response: Response<WorkPlan>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new work plan
     
     - POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maximumDaysOffPerPlanningPeriod" : 123,
  "minimumPaidMinutesPerPlanningPeriod" : 123,
  "optionalDays" : {
    "values" : [ "aeiou" ]
  },
  "metadata" : {
    "modifiedBy" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "flexibleWeeklyPaidTime" : true,
  "shiftStartVariances" : {
    "values" : [ {
      "applicableDays" : [ "aeiou" ],
      "maxShiftStartVarianceMinutes" : 123
    } ]
  },
  "constrainWeeklyPaidTime" : true,
  "enabled" : true,
  "valid" : true,
  "minimumShiftStartDistanceMinutes" : 123,
  "constrainMaximumConsecutiveWorkingDays" : true,
  "maximumConsecutiveWorkingDays" : 123,
  "constrainMinimumTimeBetweenShifts" : true,
  "shifts" : [ {
    "exactStartTimeMinutesFromMidnight" : 123,
    "validationId" : "aeiou",
    "maximumContiguousWorkTimeMinutes" : 123,
    "startIncrementMinutes" : 123,
    "flexiblePaidTime" : true,
    "constrainContiguousWorkTime" : true,
    "delete" : true,
    "constrainLatestStopTime" : true,
    "latestStartTimeMinutesFromMidnight" : 123,
    "constrainStopTime" : true,
    "earliestStopTimeMinutesFromMidnight" : 123,
    "latestStopTimeMinutesFromMidnight" : 123,
    "activities" : [ {
      "startTimeIncrementMinutes" : 123,
      "validationId" : "aeiou",
      "lengthMinutes" : 123,
      "earliestStartTimeMinutes" : 123,
      "description" : "aeiou",
      "latestStartTimeMinutes" : 123,
      "countsAsPaidTime" : true,
      "delete" : true,
      "activityCodeId" : "aeiou",
      "minimumLengthFromShiftStartMinutes" : 123,
      "startTimeIsRelativeToShiftStart" : true,
      "minimumLengthFromShiftEndMinutes" : 123,
      "exactStartTimeMinutes" : 123,
      "countsAsContiguousWorkTime" : true,
      "id" : "aeiou",
      "flexibleStartTime" : true
    } ],
    "maximumPaidTimeMinutes" : 123,
    "name" : "aeiou",
    "days" : "",
    "id" : "aeiou",
    "minimumContiguousWorkTimeMinutes" : 123,
    "exactPaidTimeMinutes" : 123,
    "earliestStartTimeMinutesFromMidnight" : 123,
    "flexibleStartTime" : true,
    "constrainEarliestStopTime" : true,
    "minimumPaidTimeMinutes" : 123
  } ],
  "weeklyMinimumPaidMinutes" : 123,
  "id" : "aeiou",
  "paidTimeGranularityMinutes" : 123,
  "maximumConsecutiveWorkingWeekends" : 123,
  "weeklyExactPaidMinutes" : 123,
  "shiftStartVarianceType" : "aeiou",
  "maximumDays" : 123,
  "minimumWorkingDaysPerWeek" : 123,
  "minimumConsecutiveNonWorkingMinutesPerWeek" : 123,
  "selfUri" : "aeiou",
  "minimumTimeBetweenShiftsMinutes" : 123,
  "constrainPaidTimeGranularity" : true,
  "maximumPaidMinutesPerPlanningPeriod" : 123,
  "agents" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "delete" : true
  } ],
  "weeklyMaximumPaidMinutes" : 123,
  "name" : "aeiou",
  "minimumDaysOffPerPlanningPeriod" : 123,
  "constrainMaximumConsecutiveWorkingWeekends" : true
}}]
     
     - parameter managementUnitId: (path) The ID of the management unit, or &#39;mine&#39; for the management unit of the logged-in user. 
     - parameter body: (body) body (optional)
     - parameter validationMode: (query) Allows to create work plan even if the validation result is invalid (optional)

     - returns: RequestBuilder<WorkPlan> 
     */
    open class func postWorkforcemanagementManagementunitWorkplansWithRequestBuilder(managementUnitId: String, body: CreateWorkPlan? = nil, validationMode: ValidationMode_postWorkforcemanagementManagementunitWorkplans? = nil) -> RequestBuilder<WorkPlan> {
        var path = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans"
        let managementUnitIdPreEscape = "\(managementUnitId)"
        let managementUnitIdPostEscape = managementUnitIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{managementUnitId}", with: managementUnitIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "validationMode": validationMode?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<WorkPlan>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add a management unit
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementManagementunits(body: CreateManagementUnitApiRequest? = nil, completion: @escaping ((_ data: ManagementUnit?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementManagementunitsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ManagementUnit>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a management unit
     
     - POST /api/v2/workforcemanagement/managementunits
     - It may take a minute or two for a new management unit to be available for api operations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startDayOfWeek" : "aeiou",
  "division" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "settings" : {
    "metadata" : {
      "modifiedBy" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "version" : 123
    },
    "shiftTrading" : {
      "weeklyMaxPaidViolations" : "aeiou",
      "unequalPaid" : "aeiou",
      "requiresMatchingLanguages" : true,
      "oneSided" : "aeiou",
      "allowDirectTrades" : true,
      "autoReview" : true,
      "enabled" : true,
      "weeklyMinPaidViolations" : "aeiou",
      "requiresMatchingSkills" : true,
      "requiresMatchingQueues" : true,
      "minHoursInFuture" : 123,
      "activityCategoryRules" : [ {
        "activityCodeIdReplacement" : "aeiou",
        "activityCategory" : "aeiou",
        "action" : "aeiou"
      } ],
      "requiresMatchingPlanningGroups" : true
    },
    "adherence" : {
      "ignoredActivityCategories" : {
        "values" : [ "aeiou" ]
      },
      "nonOnQueueActivitiesEquivalent" : true,
      "adherenceTargetPercent" : 123,
      "adherenceExceptionThresholdSeconds" : 123,
      "trackOnQueueActivity" : true,
      "severeAlertThresholdMinutes" : 123
    },
    "scheduling" : {
      "planningPeriod" : {
        "weekCount" : 123,
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "maxOccupancyPercentForDeferredWork" : 123,
      "defaultShrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
      "shrinkageOverrides" : {
        "values" : [ {
          "shrinkagePercent" : 1.3579000000000001069366817318950779736042022705078125,
          "intervalIndex" : 123
        } ],
        "clear" : true
      },
      "startDayOfWeekend" : "aeiou"
    },
    "timeOff" : {
      "submissionEarliestDaysFromNow" : 123,
      "submissionRangeEnforced" : true,
      "submissionLatestDaysFromNow" : 123
    },
    "shortTermForecasting" : {
      "defaultHistoryWeeks" : 123
    }
  },
  "metadata" : "",
  "businessUnit" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<ManagementUnit> 
     */
    open class func postWorkforcemanagementManagementunitsWithRequestBuilder(body: CreateManagementUnitApiRequest? = nil) -> RequestBuilder<ManagementUnit> {
        let path = "/api/v2/workforcemanagement/managementunits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ManagementUnit>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Mark a list of notifications as read or unread
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementNotificationsUpdate(body: UpdateNotificationsRequest? = nil, completion: @escaping ((_ data: UpdateNotificationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementNotificationsUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UpdateNotificationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Mark a list of notifications as read or unread
     
     - POST /api/v2/workforcemanagement/notifications/update
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "mutableGroupId" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UpdateNotificationsResponse> 
     */
    open class func postWorkforcemanagementNotificationsUpdateWithRequestBuilder(body: UpdateNotificationsRequest? = nil) -> RequestBuilder<UpdateNotificationsResponse> {
        let path = "/api/v2/workforcemanagement/notifications/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdateNotificationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get published schedule for the current user
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementSchedules(body: CurrentUserScheduleRequestBody? = nil, completion: @escaping ((_ data: UserScheduleContainer?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementSchedulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserScheduleContainer>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get published schedule for the current user
     
     - POST /api/v2/workforcemanagement/schedules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "managementUnitTimeZone" : "aeiou",
  "publishedSchedules" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "weekDate" : "aeiou"
  } ],
  "userSchedules" : {
    "key" : {
      "fullDayTimeOffMarkers" : [ {
        "activityCodeId" : "aeiou",
        "isPaid" : true,
        "lengthInMinutes" : 123,
        "description" : "aeiou",
        "managementUnitDate" : "aeiou",
        "delete" : true
      } ],
      "metadata" : {
        "modifiedBy" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "version" : 123
      },
      "workPlanId" : "aeiou",
      "shifts" : [ {
        "lengthInMinutes" : 123,
        "activities" : [ {
          "activityCodeId" : "aeiou",
          "lengthInMinutes" : 123,
          "timeOffRequestId" : "aeiou",
          "description" : "aeiou",
          "isDstFallback" : true,
          "countsAsPaidTime" : true,
          "startDate" : "2000-01-23T04:56:07.000+0000"
        } ],
        "weekSchedule" : "",
        "id" : "aeiou",
        "delete" : true,
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "manuallyEdited" : true
      } ],
      "delete" : true
    }
  }
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<UserScheduleContainer> 
     */
    open class func postWorkforcemanagementSchedulesWithRequestBuilder(body: CurrentUserScheduleRequestBody? = nil) -> RequestBuilder<UserScheduleContainer> {
        let path = "/api/v2/workforcemanagement/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserScheduleContainer>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a time off request for the current user
     
     - parameter body: (body) body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkforcemanagementTimeoffrequests(body: CreateAgentTimeOffRequest? = nil, completion: @escaping ((_ data: TimeOffRequestResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWorkforcemanagementTimeoffrequestsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TimeOffRequestResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a time off request for the current user
     
     - POST /api/v2/workforcemanagement/timeoffrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "submittedBy" : "",
  "metadata" : {
    "modifiedBy" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123
  },
  "notes" : "aeiou",
  "selfUri" : "aeiou",
  "fullDayManagementUnitDates" : [ "aeiou" ],
  "partialDayStartDateTimes" : [ "2000-01-23T04:56:07.000+0000" ],
  "submittedDate" : "2000-01-23T04:56:07.000+0000",
  "reviewedBy" : "",
  "activityCodeId" : "aeiou",
  "isFullDayRequest" : true,
  "markedAsRead" : true,
  "dailyDurationMinutes" : 123,
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "reviewedDate" : "2000-01-23T04:56:07.000+0000",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "status" : "aeiou"
}}]
     
     - parameter body: (body) body (optional)

     - returns: RequestBuilder<TimeOffRequestResponse> 
     */
    open class func postWorkforcemanagementTimeoffrequestsWithRequestBuilder(body: CreateAgentTimeOffRequest? = nil) -> RequestBuilder<TimeOffRequestResponse> {
        let path = "/api/v2/workforcemanagement/timeoffrequests"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeOffRequestResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
