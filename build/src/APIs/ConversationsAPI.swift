//
// ConversationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ConversationsAPI {
    
    
    
    /**
     
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete/cancel an async request
     
     - DELETE /api/v2/analytics/conversations/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a code used to add a communication to this participant
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter addCommunicationCode: (path) addCommunicationCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationParticipantCode(conversationId: String, participantId: String, addCommunicationCode: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationParticipantCodeWithRequestBuilder(conversationId: conversationId, participantId: participantId, addCommunicationCode: addCommunicationCode)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a code used to add a communication to this participant
     
     - DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter addCommunicationCode: (path) addCommunicationCode 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationParticipantCodeWithRequestBuilder(conversationId: String, participantId: String, addCommunicationCode: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let addCommunicationCodePreEscape = "\(addCommunicationCode)"
        let addCommunicationCodePostEscape = addCommunicationCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addCommunicationCode}", with: addCommunicationCodePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Remove flagged reason from conversation participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationParticipantFlaggedreason(conversationId: String, participantId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationParticipantFlaggedreasonWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove flagged reason from conversation participant.
     
     - DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationParticipantFlaggedreasonWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Cancel the transfer
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsCallParticipantConsult(conversationId: String, participantId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsCallParticipantConsultWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Cancel the transfer
     
     - DELETE /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationsCallParticipantConsultWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete attachment from draft
     
     - parameter conversationId: (path) conversationId 
     - parameter attachmentId: (path) attachmentId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsEmailMessagesDraftAttachment(conversationId: String, attachmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsEmailMessagesDraftAttachmentWithRequestBuilder(conversationId: conversationId, attachmentId: attachmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete attachment from draft
     
     - DELETE /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter attachmentId: (path) attachmentId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationsEmailMessagesDraftAttachmentWithRequestBuilder(conversationId: String, attachmentId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(attachmentId)"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a Facebook messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Facebook messaging integration
     
     - DELETE /api/v2/conversations/messaging/integrations/facebook/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a LINE messenger integration
     
     - DELETE /api/v2/conversations/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a Twitter messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Twitter messaging integration
     
     - DELETE /api/v2/conversations/messaging/integrations/twitter/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationsMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messaging/integrations/twitter/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a WhatsApp messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: String, completion: @escaping ((_ data: WhatsAppIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<WhatsAppIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a WhatsApp messaging integration
     
     - DELETE /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "activationStatusCode" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "activationErrorInfo" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<WhatsAppIntegration> 
     */
    open class func deleteConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<WhatsAppIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WhatsAppIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a conversation by id
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationDetails(conversationId: String, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributes?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationDetailsWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributes>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a conversation by id
     
     - GET /api/v2/analytics/conversations/{conversationId}/details
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationStart" : "2000-01-23T04:56:07.000+0000",
  "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
  "evaluations" : [ {
    "formId" : "aeiou",
    "queueId" : "aeiou",
    "oTotalScore" : 123456789,
    "oTotalCriticalScore" : 123456789,
    "contextId" : "aeiou",
    "userId" : "aeiou",
    "evaluationId" : "aeiou",
    "deleted" : true,
    "formName" : "aeiou",
    "eventTime" : "2000-01-23T04:56:07.000+0000",
    "rescored" : true,
    "evaluatorId" : "aeiou",
    "calibrationId" : "aeiou"
  } ],
  "conversationId" : "aeiou",
  "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
  "surveys" : [ {
    "queueId" : "aeiou",
    "surveyStatus" : "aeiou",
    "oSurveyTotalScore" : 123456789,
    "surveyId" : "aeiou",
    "surveyFormName" : "aeiou",
    "eventTime" : "2000-01-23T04:56:07.000+0000",
    "surveyFormId" : "aeiou",
    "surveyFormContextId" : "aeiou",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "surveyPromoterScore" : 123
  } ],
  "conversationEnd" : "2000-01-23T04:56:07.000+0000",
  "originatingDirection" : "aeiou",
  "divisionIds" : [ "aeiou" ],
  "participants" : [ {
    "participantId" : "aeiou",
    "sessions" : [ {
      "usedRouting" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "cobrowseRole" : "aeiou",
      "videoAddressSelf" : "aeiou",
      "proposedAgents" : [ {
        "proposedAgentId" : "aeiou",
        "agentRank" : 123
      } ],
      "addressSelf" : "aeiou",
      "skipEnabled" : true,
      "journeyActionMapId" : "aeiou",
      "remote" : "aeiou",
      "roomId" : "aeiou",
      "messageType" : "aeiou",
      "requestedRoutings" : [ "aeiou" ],
      "mediaCount" : 123,
      "dnis" : "aeiou",
      "videoRoomId" : "aeiou",
      "flow" : {
        "entryType" : "aeiou",
        "issuedCallback" : true,
        "exitReason" : "aeiou",
        "transferTargetName" : "aeiou",
        "flowVersion" : "aeiou",
        "flowName" : "aeiou",
        "transferTargetAddress" : "aeiou",
        "outcomes" : [ {
          "flowOutcomeId" : "aeiou",
          "flowOutcome" : "aeiou",
          "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
          "flowOutcomeValue" : "aeiou",
          "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
        } ],
        "transferType" : "aeiou",
        "entryReason" : "aeiou",
        "endingLanguage" : "aeiou",
        "flowId" : "aeiou",
        "startingLanguage" : "aeiou",
        "flowType" : "aeiou"
      },
      "dispositionAnalyzer" : "aeiou",
      "addressOther" : "aeiou",
      "cobrowseRoomId" : "aeiou",
      "protocolCallId" : "aeiou",
      "mediaType" : "aeiou",
      "monitoredSessionId" : "aeiou",
      "flowOutType" : "aeiou",
      "outboundCampaignId" : "aeiou",
      "addressTo" : "aeiou",
      "edgeId" : "aeiou",
      "timeoutSeconds" : 123,
      "metrics" : [ {
        "name" : "aeiou",
        "emitDate" : "2000-01-23T04:56:07.000+0000",
        "value" : 123456789
      } ],
      "mediaBridgeId" : "aeiou",
      "journeyActionMapVersion" : "aeiou",
      "screenShareRoomId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "outboundContactId" : "aeiou",
      "peerId" : "aeiou",
      "remoteNameDisplayable" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "callbackNumbers" : [ "aeiou" ],
      "recording" : true,
      "screenShareAddressSelf" : "aeiou",
      "sharingScreen" : true,
      "sessionDnis" : "aeiou",
      "segments" : [ {
        "queueId" : "aeiou",
        "conference" : true,
        "subject" : "aeiou",
        "sourceConversationId" : "aeiou",
        "groupId" : "aeiou",
        "errorCode" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+0000",
        "wrapUpNote" : "aeiou",
        "destinationSessionId" : "aeiou",
        "disconnectType" : "aeiou",
        "segmentStart" : "2000-01-23T04:56:07.000+0000",
        "requestedRoutingUserIds" : [ "aeiou" ],
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "videoMuted" : true,
        "q850ResponseCodes" : [ 123456789 ],
        "audioMuted" : true,
        "wrapUpCode" : "aeiou",
        "destinationConversationId" : "aeiou",
        "wrapUpTags" : [ "aeiou" ],
        "sourceSessionId" : "aeiou",
        "sipResponseCodes" : [ 123456789 ],
        "requestedLanguageId" : "aeiou",
        "segmentType" : "aeiou",
        "properties" : [ {
          "propertyType" : "aeiou",
          "property" : "aeiou",
          "value" : "aeiou"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "aeiou",
      "provider" : "aeiou",
      "journeyCustomerIdType" : "aeiou",
      "journeyCustomerId" : "aeiou",
      "callbackUserName" : "aeiou",
      "addressFrom" : "aeiou",
      "flowInType" : "aeiou",
      "ani" : "aeiou",
      "direction" : "aeiou",
      "journeyCustomerSessionId" : "aeiou",
      "sessionId" : "aeiou",
      "journeyActionId" : "aeiou",
      "dispositionName" : "disposition.classification.callable.machine",
      "scriptId" : "aeiou",
      "selectedAgentId" : "aeiou",
      "mediaEndpointStats" : [ {
        "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
        "underrunPackets" : 123456789,
        "overrunPackets" : 123456789,
        "minMos" : 1.3579000000000001069366817318950779736042022705078125,
        "maxLatencyMs" : 123456789,
        "codecs" : [ "aeiou" ],
        "receivedPackets" : 123456789,
        "duplicatePackets" : 123456789,
        "invalidPackets" : 123456789,
        "discardedPackets" : 123456789
      } ],
      "selectedAgentRank" : 123,
      "outboundContactListId" : "aeiou"
    } ],
    "externalContactId" : "aeiou",
    "purpose" : "aeiou",
    "teamId" : "aeiou",
    "externalOrganizationId" : "aeiou",
    "participantName" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou"
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributes> 
     */
    open class func getAnalyticsConversationDetailsWithRequestBuilder(conversationId: String) -> RequestBuilder<AnalyticsConversationWithoutAttributes> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributes>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets multiple conversations by id
     
     - parameter _id: (query) Comma-separated conversation ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetails(_id: [String]? = nil, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets multiple conversations by id
     
     - GET /api/v2/analytics/conversations/details
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter _id: (query) Comma-separated conversation ids (optional)

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func getAnalyticsConversationsDetailsWithRequestBuilder(_id: [String]? = nil) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {
        let path = "/api/v2/analytics/conversations/details"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status for async query for conversation details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status for async query for conversation details
     
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "aeiou",
  "submissionDate" : "2000-01-23T04:56:07.000+0000",
  "completionDate" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "expirationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsConversationAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsConversationAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch a page of results for an async query
     
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}/results
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000",
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsConversationAsyncQueryResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsConversationAsyncQueryResponse> {
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "cursor": cursor, 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Lookup the datalake availability date and time
     
     - GET /api/v2/analytics/conversations/details/jobs/availability
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+0000"
}}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {
        let path = "/api/v2/analytics/conversations/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get conversation
     
     - parameter conversationId: (path) conversation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversation(conversationId: String, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get conversation
     
     - GET /api/v2/conversations/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversation ID 

     - returns: RequestBuilder<Conversation> 
     */
    open class func getConversationWithRequestBuilder(conversationId: String) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Fetch info on a secure session
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter secureSessionId: (path) secure IVR session ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationParticipantSecureivrsession(conversationId: String, participantId: String, secureSessionId: String, completion: @escaping ((_ data: SecureSession?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationParticipantSecureivrsessionWithRequestBuilder(conversationId: conversationId, participantId: participantId, secureSessionId: secureSessionId)
        requestBuilder.execute { (response: Response<SecureSession>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch info on a secure session
     
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "disconnect" : true,
  "userData" : "aeiou",
  "selfUri" : "aeiou",
  "sourceParticipantId" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "flow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter secureSessionId: (path) secure IVR session ID 

     - returns: RequestBuilder<SecureSession> 
     */
    open class func getConversationParticipantSecureivrsessionWithRequestBuilder(conversationId: String, participantId: String, secureSessionId: String) -> RequestBuilder<SecureSession> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let secureSessionIdPreEscape = "\(secureSessionId)"
        let secureSessionIdPostEscape = secureSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{secureSessionId}", with: secureSessionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SecureSession>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of secure sessions for this participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationParticipantSecureivrsessions(conversationId: String, participantId: String, completion: @escaping ((_ data: SecureSessionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationParticipantSecureivrsessionsWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<SecureSessionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of secure sessions for this participant.
     
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "disconnect" : true,
    "userData" : "aeiou",
    "selfUri" : "aeiou",
    "sourceParticipantId" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "flow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ]
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 

     - returns: RequestBuilder<SecureSessionEntityListing> 
     */
    open class func getConversationParticipantSecureivrsessionsWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<SecureSessionEntityListing> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SecureSessionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get active conversations for the logged in user
     
     - parameter communicationType: (query) Call or Chat communication filtering (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversations(communicationType: String? = nil, completion: @escaping ((_ data: ConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsWithRequestBuilder(communicationType: communicationType)
        requestBuilder.execute { (response: Response<ConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active conversations for the logged in user
     
     - GET /api/v2/conversations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "mediaType" : [ "aeiou" ],
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : "",
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ],
    "maxParticipants" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter communicationType: (query) Call or Chat communication filtering (optional)

     - returns: RequestBuilder<ConversationEntityListing> 
     */
    open class func getConversationsWithRequestBuilder(communicationType: String? = nil) -> RequestBuilder<ConversationEntityListing> {
        let path = "/api/v2/conversations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "communicationType": communicationType
            
        ])

        let requestBuilder: RequestBuilder<ConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get call conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCall(conversationId: String, completion: @escaping ((_ data: CallConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<CallConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get call conversation
     
     - GET /api/v2/conversations/calls/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "monitoredParticipantId" : "aeiou",
    "confined" : true,
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "recording" : true,
    "alertingTimeoutMs" : 123,
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "dnis" : "aeiou",
    "faxStatus" : {
      "baudRate" : 123456789,
      "expectedPages" : 123456789,
      "lineErrors" : 123456789,
      "pageErrors" : 123456789,
      "activePage" : 123456789,
      "linesTransmitted" : 123456789,
      "bytesTransmitted" : 123456789,
      "direction" : "aeiou"
    },
    "uuiData" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "muted" : true,
    "ani" : "aeiou",
    "direction" : "aeiou",
    "group" : "",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "consultParticipantId" : "aeiou",
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "documentId" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<CallConversation> 
     */
    open class func getConversationsCallWithRequestBuilder(conversationId: String) -> RequestBuilder<CallConversation> {
        var path = "/api/v2/conversations/calls/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsCallParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsCallParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get callback conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallback(conversationId: String, completion: @escaping ((_ data: CallbackConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallbackWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<CallbackConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get callback conversation
     
     - GET /api/v2/conversations/callbacks/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "outboundPreview" : {
      "contactId" : "aeiou",
      "campaignId" : "aeiou",
      "phoneNumberColumns" : [ {
        "type" : "aeiou",
        "columnName" : "aeiou"
      } ],
      "contactListId" : "aeiou",
      "id" : "aeiou"
    },
    "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "callbackNumbers" : [ "aeiou" ],
    "skipEnabled" : true,
    "alertingTimeoutMs" : 123,
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "automatedCallbackConfigId" : "aeiou",
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "externalCampaign" : true,
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "callbackUserName" : "aeiou",
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "voicemail" : {
      "uploadStatus" : "aeiou",
      "id" : "aeiou"
    },
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "timeoutSeconds" : 123,
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<CallbackConversation> 
     */
    open class func getConversationsCallbackWithRequestBuilder(conversationId: String) -> RequestBuilder<CallbackConversation> {
        var path = "/api/v2/conversations/callbacks/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallbackConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallbackParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallbackParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsCallbackParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallbackParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallbackParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsCallbackParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active callback conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallbacks(completion: @escaping ((_ data: CallbackConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallbacksWithRequestBuilder()
        requestBuilder.execute { (response: Response<CallbackConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active callback conversations for the logged in user
     
     - GET /api/v2/conversations/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "outboundPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "alertingTimeoutMs" : 123,
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "externalCampaign" : true,
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "callbackUserName" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "direction" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "externalContact" : "",
      "team" : "",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "timeoutSeconds" : 123,
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<CallbackConversationEntityListing> 
     */
    open class func getConversationsCallbacksWithRequestBuilder() -> RequestBuilder<CallbackConversationEntityListing> {
        let path = "/api/v2/conversations/callbacks"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallbackConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active call conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCalls(completion: @escaping ((_ data: CallConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallsWithRequestBuilder()
        requestBuilder.execute { (response: Response<CallConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active call conversations for the logged in user
     
     - GET /api/v2/conversations/calls
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "monitoredParticipantId" : "aeiou",
      "confined" : true,
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "recording" : true,
      "alertingTimeoutMs" : 123,
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "dnis" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "muted" : true,
      "ani" : "aeiou",
      "direction" : "aeiou",
      "group" : "",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "externalContact" : "",
      "team" : "",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "consultParticipantId" : "aeiou",
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "documentId" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ],
    "maxParticipants" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<CallConversationEntityListing> 
     */
    open class func getConversationsCallsWithRequestBuilder() -> RequestBuilder<CallConversationEntityListing> {
        let path = "/api/v2/conversations/calls"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getConversationsCallsHistory: String { 
        case externalorganization = "externalorganization"
        case externalcontact = "externalcontact"
        case user = "user"
        case queue = "queue"
        case group = "group"
    }

    
    
    /**
     
     Get call history
     
     - parameter pageSize: (query) Page size, maximum 50 (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallsHistory(pageSize: Int? = nil, pageNumber: Int? = nil, interval: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: CallHistoryConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallsHistoryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, interval: interval, expand: expand)
        requestBuilder.execute { (response: Response<CallHistoryConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get call history
     
     - GET /api/v2/conversations/calls/history
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "wasConference" : true,
    "hadScreenShare" : true,
    "selfUri" : "aeiou",
    "hadCobrowse" : true,
    "wentToVoicemail" : true,
    "name" : "aeiou",
    "wasCallback" : true,
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "missedCall" : true,
    "wasOutboundCampaign" : true,
    "participants" : [ {
      "address" : "aeiou",
      "purpose" : "aeiou",
      "outboundCampaign" : {
        "callableTimeSet" : "",
        "phoneColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "edgeGroup" : "",
        "callAnalysisResponseSet" : "",
        "previewTimeOutSeconds" : 123456789,
        "dncLists" : [ "" ],
        "callerName" : "aeiou",
        "contactListFilters" : [ "" ],
        "division" : "",
        "alwaysRunning" : true,
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "contactSorts" : [ "" ],
        "campaignStatus" : "aeiou",
        "outboundLineCount" : 123,
        "id" : "aeiou",
        "noAnswerTimeout" : 123,
        "dialingMode" : "aeiou",
        "callerAddress" : "(555) 555-5555",
        "skipPreviewDisabled" : true,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "callAnalysisLanguage" : "aeiou",
        "priority" : 123,
        "version" : 123,
        "ruleSets" : [ "" ],
        "script" : "",
        "contactSort" : {
          "fieldName" : "aeiou",
          "numeric" : true,
          "direction" : "aeiou"
        },
        "contactList" : "",
        "site" : "",
        "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou",
        "queue" : "",
        "errors" : [ {
          "details" : "aeiou",
          "error" : "aeiou"
        } ]
      },
      "externalContact" : {
        "schema" : "",
        "lastName" : "aeiou",
        "workEmail" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "title" : "aeiou",
        "twitterId" : {
          "profileUrl" : "aeiou",
          "name" : "aeiou",
          "verified" : true,
          "id" : "aeiou",
          "screenName" : "aeiou"
        },
        "personalEmail" : "aeiou",
        "externalSystemUrl" : "aeiou",
        "id" : "aeiou",
        "otherEmail" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000",
        "address" : {
          "address2" : "aeiou",
          "city" : "aeiou",
          "address1" : "aeiou",
          "countryCode" : "aeiou",
          "postalCode" : "aeiou",
          "state" : "aeiou"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "homePhone" : "",
        "facebookId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "scopedId" : "aeiou"
          } ]
        },
        "selfUri" : "aeiou",
        "lineId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "userId" : "aeiou"
          } ]
        },
        "externalOrganization" : {
          "schema" : {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "jsonSchema" : {
              "$schema" : "aeiou",
              "description" : "aeiou",
              "id" : "aeiou",
              "additionalProperties" : "{}",
              "title" : "aeiou",
              "type" : "aeiou",
              "required" : [ "aeiou" ],
              "properties" : {
                "key" : "{}"
              }
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "appliesTo" : [ "aeiou" ],
            "id" : "aeiou",
            "version" : 123,
            "enabled" : true
          },
          "address" : "",
          "modifyDate" : "2000-01-23T04:56:07.000+0000",
          "companyType" : "aeiou",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "aeiou",
          "industry" : "aeiou",
          "employeeCount" : 123456789,
          "tickers" : [ {
            "symbol" : "aeiou",
            "exchange" : "aeiou"
          } ],
          "twitterId" : "",
          "primaryContactId" : "aeiou",
          "tags" : [ "aeiou" ],
          "revenue" : 123456789,
          "phoneNumber" : "",
          "externalSystemUrl" : "aeiou",
          "externalDataSources" : [ {
            "platform" : "aeiou",
            "url" : "aeiou"
          } ],
          "name" : "aeiou",
          "faxNumber" : "",
          "trustor" : {
            "authorization" : {
              "permissions" : [ "aeiou" ]
            },
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : {
              "addresses" : [ "" ],
              "acdAutoAnswer" : true,
              "routingStatus" : "",
              "title" : "aeiou",
              "division" : "",
              "authorization" : "",
              "skills" : [ "" ],
              "station" : "",
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : "",
              "lastTokenIssued" : "",
              "email" : "aeiou",
              "images" : [ "" ],
              "manager" : "",
              "employerInfo" : "",
              "languages" : [ "" ],
              "conversationSummary" : "",
              "groups" : [ "" ],
              "primaryContactInfo" : [ "" ],
              "biography" : "",
              "team" : "",
              "certifications" : [ "aeiou" ],
              "version" : 123,
              "outOfOffice" : "",
              "languagePreference" : "aeiou",
              "profileSkills" : [ "aeiou" ],
              "chat" : "",
              "organization" : {
                "defaultCountryCode" : "aeiou",
                "selfUri" : "aeiou",
                "thirdPartyURI" : "aeiou",
                "version" : 123,
                "thirdPartyOrgName" : "aeiou",
                "features" : {
                  "key" : true
                },
                "defaultLanguage" : "aeiou",
                "defaultSiteId" : "aeiou",
                "supportURI" : "aeiou",
                "domain" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "voicemailEnabled" : true,
                "productPlatform" : "aeiou"
              },
              "name" : "aeiou",
              "locations" : [ "" ],
              "username" : "aeiou",
              "geolocation" : ""
            },
            "organization" : "",
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "enabled" : true
          },
          "websites" : [ "aeiou" ],
          "id" : "aeiou",
          "createDate" : "2000-01-23T04:56:07.000+0000"
        },
        "firstName" : "aeiou",
        "otherPhone" : "",
        "whatsAppId" : {
          "phoneNumber" : "",
          "displayName" : "aeiou"
        },
        "externalDataSources" : [ "" ],
        "middleName" : "aeiou",
        "workPhone" : {
          "extension" : 123456789,
          "e164" : "aeiou",
          "acceptsSMS" : true,
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "userInput" : "aeiou"
        },
        "salutation" : "aeiou",
        "cellPhone" : "",
        "surveyOptOut" : true
      },
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "name" : "aeiou",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "sipResponseCodes" : [ 123456789 ],
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "user" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "direction" : "aeiou",
      "group" : "",
      "didInteract" : true
    } ],
    "direction" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size, maximum 50 (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<CallHistoryConversationEntityListing> 
     */
    open class func getConversationsCallsHistoryWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, interval: String? = nil, expand: [String]? = nil) -> RequestBuilder<CallHistoryConversationEntityListing> {
        let path = "/api/v2/conversations/calls/history"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "interval": interval, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<CallHistoryConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the maximum number of participants that this user can have on a conference
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCallsMaximumconferenceparties(completion: @escaping ((_ data: MaxParticipants?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCallsMaximumconferencepartiesWithRequestBuilder()
        requestBuilder.execute { (response: Response<MaxParticipants>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the maximum number of participants that this user can have on a conference
     
     - GET /api/v2/conversations/calls/maximumconferenceparties
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maxParticipants" : 123
}}]

     - returns: RequestBuilder<MaxParticipants> 
     */
    open class func getConversationsCallsMaximumconferencepartiesWithRequestBuilder() -> RequestBuilder<MaxParticipants> {
        let path = "/api/v2/conversations/calls/maximumconferenceparties"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaxParticipants>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get chat conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChat(conversationId: String, completion: @escaping ((_ data: ChatConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<ChatConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get chat conversation
     
     - GET /api/v2/conversations/chats/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "avatarImageUrl" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "roomId" : "aeiou",
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<ChatConversation> 
     */
    open class func getConversationsChatWithRequestBuilder(conversationId: String) -> RequestBuilder<ChatConversation> {
        var path = "/api/v2/conversations/chats/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a web chat conversation message
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChatMessage(conversationId: String, messageId: String, completion: @escaping ((_ data: WebChatMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatMessageWithRequestBuilder(conversationId: conversationId, messageId: messageId)
        requestBuilder.execute { (response: Response<WebChatMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a web chat conversation message
     
     - GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}
     - The current user must be involved with the conversation to get its messages.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "bodyType" : "aeiou",
  "sender" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "body" : "aeiou",
  "conversation" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : {
      "lastName" : "aeiou",
      "role" : "aeiou",
      "displayName" : "aeiou",
      "customFields" : {
        "key" : "aeiou"
      },
      "avatarImageUrl" : "aeiou",
      "firstName" : "aeiou",
      "phoneNumber" : "aeiou",
      "joinDate" : "2000-01-23T04:56:07.000+0000",
      "leaveDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "authenticatedGuest" : true,
      "email" : "aeiou"
    },
    "id" : "aeiou"
  },
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<WebChatMessage> 
     */
    open class func getConversationsChatMessageWithRequestBuilder(conversationId: String, messageId: String) -> RequestBuilder<WebChatMessage> {
        var path = "/api/v2/conversations/chats/{conversationId}/messages/{messageId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum SortOrder_getConversationsChatMessages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    /**
     
     Get the messages of a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter after: (query) If specified, get the messages chronologically after the id of this message (optional)
     - parameter before: (query) If specified, get the messages chronologically before the id of this message (optional)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter maxResults: (query) Limit the returned number of messages, up to a maximum of 100 (optional, default to 100)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChatMessages(conversationId: String, after: String? = nil, before: String? = nil, sortOrder: SortOrder_getConversationsChatMessages? = nil, maxResults: Int? = nil, completion: @escaping ((_ data: WebChatMessageEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatMessagesWithRequestBuilder(conversationId: conversationId, after: after, before: before, sortOrder: sortOrder, maxResults: maxResults)
        requestBuilder.execute { (response: Response<WebChatMessageEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the messages of a chat conversation.
     
     - GET /api/v2/conversations/chats/{conversationId}/messages
     - The current user must be involved with the conversation to get its messages.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "next" : "aeiou",
  "previousPage" : "aeiou",
  "entities" : [ {
    "bodyType" : "aeiou",
    "sender" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "body" : "aeiou",
    "conversation" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "member" : {
        "lastName" : "aeiou",
        "role" : "aeiou",
        "displayName" : "aeiou",
        "customFields" : {
          "key" : "aeiou"
        },
        "avatarImageUrl" : "aeiou",
        "firstName" : "aeiou",
        "phoneNumber" : "aeiou",
        "joinDate" : "2000-01-23T04:56:07.000+0000",
        "leaveDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "state" : "aeiou",
        "authenticatedGuest" : true,
        "email" : "aeiou"
      },
      "id" : "aeiou"
    },
    "timestamp" : "2000-01-23T04:56:07.000+0000"
  } ],
  "selfUri" : "aeiou",
  "pageSize" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter after: (query) If specified, get the messages chronologically after the id of this message (optional)
     - parameter before: (query) If specified, get the messages chronologically before the id of this message (optional)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter maxResults: (query) Limit the returned number of messages, up to a maximum of 100 (optional, default to 100)

     - returns: RequestBuilder<WebChatMessageEntityList> 
     */
    open class func getConversationsChatMessagesWithRequestBuilder(conversationId: String, after: String? = nil, before: String? = nil, sortOrder: SortOrder_getConversationsChatMessages? = nil, maxResults: Int? = nil) -> RequestBuilder<WebChatMessageEntityList> {
        var path = "/api/v2/conversations/chats/{conversationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "after": after, 
            
            "before": before, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "maxResults": maxResults?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<WebChatMessageEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChatParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsChatParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChatParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsChatParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active chat conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsChats(completion: @escaping ((_ data: ChatConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsChatsWithRequestBuilder()
        requestBuilder.execute { (response: Response<ChatConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active chat conversations for the logged in user
     
     - GET /api/v2/conversations/chats
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "alertingTimeoutMs" : 123,
      "roomId" : "aeiou",
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "direction" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "externalContact" : "",
      "team" : "",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<ChatConversationEntityListing> 
     */
    open class func getConversationsChatsWithRequestBuilder() -> RequestBuilder<ChatConversationEntityListing> {
        let path = "/api/v2/conversations/chats"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get cobrowse conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCobrowsesession(conversationId: String, completion: @escaping ((_ data: CobrowseConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCobrowsesessionWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<CobrowseConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get cobrowse conversation
     
     - GET /api/v2/conversations/cobrowsesessions/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "cobrowseRole" : "aeiou",
    "cobrowseSessionId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "providerEventTime" : "2000-01-23T04:56:07.000+0000",
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "controlling" : [ "aeiou" ],
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "viewerUrl" : "aeiou",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<CobrowseConversation> 
     */
    open class func getConversationsCobrowsesessionWithRequestBuilder(conversationId: String) -> RequestBuilder<CobrowseConversation> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CobrowseConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCobrowsesessionParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCobrowsesessionParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsCobrowsesessionParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCobrowsesessionParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCobrowsesessionParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsCobrowsesessionParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active cobrowse conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsCobrowsesessions(completion: @escaping ((_ data: CobrowseConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsCobrowsesessionsWithRequestBuilder()
        requestBuilder.execute { (response: Response<CobrowseConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active cobrowse conversations for the logged in user
     
     - GET /api/v2/conversations/cobrowsesessions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "alertingTimeoutMs" : 123,
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "controlling" : [ "aeiou" ],
      "direction" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "externalContact" : "",
      "team" : "",
      "viewerUrl" : "aeiou",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<CobrowseConversationEntityListing> 
     */
    open class func getConversationsCobrowsesessionsWithRequestBuilder() -> RequestBuilder<CobrowseConversationEntityListing> {
        let path = "/api/v2/conversations/cobrowsesessions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CobrowseConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get email conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmail(conversationId: String, completion: @escaping ((_ data: EmailConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<EmailConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get email conversation
     
     - GET /api/v2/conversations/emails/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "draftAttachments" : [ {
      "inlineImage" : true,
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "messagesSent" : 123,
    "messageId" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "autoGenerated" : true,
    "spam" : true,
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<EmailConversation> 
     */
    open class func getConversationsEmailWithRequestBuilder(conversationId: String) -> RequestBuilder<EmailConversation> {
        var path = "/api/v2/conversations/emails/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get conversation message
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmailMessage(conversationId: String, messageId: String, completion: @escaping ((_ data: EmailMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailMessageWithRequestBuilder(conversationId: conversationId, messageId: messageId)
        requestBuilder.execute { (response: Response<EmailMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get conversation message
     
     - GET /api/v2/conversations/emails/{conversationId}/messages/{messageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "inlineImage" : true,
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "textBody" : "aeiou",
  "htmlBody" : "aeiou",
  "historyIncluded" : true,
  "name" : "aeiou",
  "from" : "",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<EmailMessage> 
     */
    open class func getConversationsEmailMessageWithRequestBuilder(conversationId: String, messageId: String) -> RequestBuilder<EmailMessage> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages/{messageId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get conversation messages
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmailMessages(conversationId: String, completion: @escaping ((_ data: EmailMessageListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailMessagesWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<EmailMessageListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get conversation messages
     
     - GET /api/v2/conversations/emails/{conversationId}/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "cc" : [ "" ],
    "bcc" : [ "" ],
    "attachments" : [ {
      "inlineImage" : true,
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "selfUri" : "aeiou",
    "textBody" : "aeiou",
    "htmlBody" : "aeiou",
    "historyIncluded" : true,
    "name" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<EmailMessageListing> 
     */
    open class func getConversationsEmailMessagesWithRequestBuilder(conversationId: String) -> RequestBuilder<EmailMessageListing> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessageListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get conversation draft reply
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmailMessagesDraft(conversationId: String, completion: @escaping ((_ data: EmailMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailMessagesDraftWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<EmailMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get conversation draft reply
     
     - GET /api/v2/conversations/emails/{conversationId}/messages/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "inlineImage" : true,
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "textBody" : "aeiou",
  "htmlBody" : "aeiou",
  "historyIncluded" : true,
  "name" : "aeiou",
  "from" : "",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<EmailMessage> 
     */
    open class func getConversationsEmailMessagesDraftWithRequestBuilder(conversationId: String) -> RequestBuilder<EmailMessage> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages/draft"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmailParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsEmailParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmailParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsEmailParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active email conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsEmails(completion: @escaping ((_ data: EmailConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsEmailsWithRequestBuilder()
        requestBuilder.execute { (response: Response<EmailConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active email conversations for the logged in user
     
     - GET /api/v2/conversations/emails
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "alertingTimeoutMs" : 123,
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "direction" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "messagesSent" : 123,
      "messageId" : "aeiou",
      "externalContact" : "",
      "team" : "",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "spam" : true,
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<EmailConversationEntityListing> 
     */
    open class func getConversationsEmailsWithRequestBuilder() -> RequestBuilder<EmailConversationEntityListing> {
        let path = "/api/v2/conversations/emails"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get message conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessage(conversationId: String, completion: @escaping ((_ data: MessageConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessageWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<MessageConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get message conversation
     
     - GET /api/v2/conversations/messages/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "type" : "aeiou",
    "alertingTimeoutMs" : 123,
    "toAddress" : {
      "addressDisplayable" : "aeiou",
      "addressNormalized" : "aeiou",
      "name" : "aeiou",
      "addressRaw" : "aeiou",
      "nameRaw" : "aeiou"
    },
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "recipientType" : "aeiou",
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "fromAddress" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "messages" : [ {
      "messageStatus" : "aeiou",
      "messageTime" : "2000-01-23T04:56:07.000+0000",
      "messageId" : "aeiou",
      "stickers" : [ {
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "media" : [ {
        "contentLengthBytes" : 123,
        "name" : "aeiou",
        "mediaType" : "aeiou",
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "messageURI" : "aeiou",
      "messageSegmentCount" : 123
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "recipientCountry" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<MessageConversation> 
     */
    open class func getConversationsMessageWithRequestBuilder(conversationId: String) -> RequestBuilder<MessageConversation> {
        var path = "/api/v2/conversations/messages/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get media
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter mediaId: (path) mediaId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessageCommunicationMessagesMediaMediaId(conversationId: String, communicationId: String, mediaId: String, completion: @escaping ((_ data: MessageMediaData?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessageCommunicationMessagesMediaMediaIdWithRequestBuilder(conversationId: conversationId, communicationId: communicationId, mediaId: mediaId)
        requestBuilder.execute { (response: Response<MessageMediaData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get media
     
     - GET /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contentLengthBytes" : 123,
  "uploadUrl" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mediaType" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter mediaId: (path) mediaId 

     - returns: RequestBuilder<MessageMediaData> 
     */
    open class func getConversationsMessageCommunicationMessagesMediaMediaIdWithRequestBuilder(conversationId: String, communicationId: String, mediaId: String) -> RequestBuilder<MessageMediaData> {
        var path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let mediaIdPreEscape = "\(mediaId)"
        let mediaIdPostEscape = mediaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mediaId}", with: mediaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageMediaData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get message
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessageMessage(conversationId: String, messageId: String, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessageMessageWithRequestBuilder(conversationId: conversationId, messageId: messageId)
        requestBuilder.execute { (response: Response<MessageData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get message
     
     - GET /api/v2/conversations/messages/{conversationId}/messages/{messageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "providerMessageId" : "aeiou",
  "selfUri" : "aeiou",
  "messengerType" : "aeiou",
  "textBody" : "aeiou",
  "media" : [ {
    "contentLengthBytes" : 123,
    "name" : "aeiou",
    "mediaType" : "aeiou",
    "id" : "aeiou",
    "url" : "aeiou"
  } ],
  "toAddress" : "aeiou",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "name" : "aeiou",
  "fromAddress" : "aeiou",
  "stickers" : [ {
    "id" : "aeiou",
    "url" : "aeiou"
  } ],
  "id" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+0000",
  "direction" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<MessageData> 
     */
    open class func getConversationsMessageMessageWithRequestBuilder(conversationId: String, messageId: String) -> RequestBuilder<MessageData> {
        var path = "/api/v2/conversations/messages/{conversationId}/messages/{messageId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessageParticipantWrapup(conversationId: String, participantId: String, provisional: Bool? = nil, completion: @escaping ((_ data: AssignedWrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessageParticipantWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional)
        requestBuilder.execute { (response: Response<AssignedWrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up for this conversation participant. 
     
     - GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "code" : "aeiou",
  "notes" : "aeiou",
  "durationSeconds" : 123,
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<AssignedWrapupCode> 
     */
    open class func getConversationsMessageParticipantWrapupWithRequestBuilder(conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<AssignedWrapupCode> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "provisional": provisional
            
        ])

        let requestBuilder: RequestBuilder<AssignedWrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessageParticipantWrapupcodes(conversationId: String, participantId: String, completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessageParticipantWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes for this conversation participant
     
     - GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func getConversationsMessageParticipantWrapupcodesWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get active message conversations for the logged in user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessages(completion: @escaping ((_ data: MessageConversationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagesWithRequestBuilder()
        requestBuilder.execute { (response: Response<MessageConversationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get active message conversations for the logged in user
     
     - GET /api/v2/conversations/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "alertingTimeoutMs" : 123,
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "provider" : "aeiou",
      "peer" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "direction" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "messagesSent" : 123,
      "messageId" : "aeiou",
      "externalContact" : "",
      "team" : "",
      "externalOrganization" : "",
      "flaggedReason" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "spam" : true,
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<MessageConversationEntityListing> 
     */
    open class func getConversationsMessagesWithRequestBuilder() -> RequestBuilder<MessageConversationEntityListing> {
        let path = "/api/v2/conversations/messages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageConversationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get Genesys Facebook App Id
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingFacebookApp(completion: @escaping ((_ data: FacebookAppCredentials?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingFacebookAppWithRequestBuilder()
        requestBuilder.execute { (response: Response<FacebookAppCredentials>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Genesys Facebook App Id
     
     - GET /api/v2/conversations/messaging/facebook/app
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<FacebookAppCredentials> 
     */
    open class func getConversationsMessagingFacebookAppWithRequestBuilder() -> RequestBuilder<FacebookAppCredentials> {
        let path = "/api/v2/conversations/messaging/facebook/app"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookAppCredentials>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrations(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: MessagingIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<MessagingIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Integrations
     
     - GET /api/v2/conversations/messaging/integrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "messengerType" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123,
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<MessagingIntegrationEntityListing> 
     */
    open class func getConversationsMessagingIntegrationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<MessagingIntegrationEntityListing> {
        let path = "/api/v2/conversations/messaging/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<MessagingIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Facebook Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsFacebook(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: FacebookIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsFacebookWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<FacebookIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Facebook Integrations
     
     - GET /api/v2/conversations/messaging/integrations/facebook
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "createError" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "pageId" : "aeiou",
    "createStatus" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "appId" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<FacebookIntegrationEntityListing> 
     */
    open class func getConversationsMessagingIntegrationsFacebookWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<FacebookIntegrationEntityListing> {
        let path = "/api/v2/conversations/messaging/integrations/facebook"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<FacebookIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Facebook messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: String, completion: @escaping ((_ data: FacebookIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<FacebookIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Facebook messaging integration
     
     - GET /api/v2/conversations/messaging/integrations/facebook/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "pageId" : "aeiou",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "appId" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<FacebookIntegration> 
     */
    open class func getConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<FacebookIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of LINE messenger Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsLine(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: LineIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsLineWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<LineIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of LINE messenger Integrations
     
     - GET /api/v2/conversations/messaging/integrations/line
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "webhookUri" : "aeiou",
    "selfUri" : "aeiou",
    "createError" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createStatus" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "channelId" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<LineIntegrationEntityListing> 
     */
    open class func getConversationsMessagingIntegrationsLineWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<LineIntegrationEntityListing> {
        let path = "/api/v2/conversations/messaging/integrations/line"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<LineIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsLineIntegrationId(integrationId: String, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a LINE messenger integration
     
     - GET /api/v2/conversations/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func getConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<LineIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Twitter Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsTwitter(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TwitterIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsTwitterWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TwitterIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Twitter Integrations
     
     - GET /api/v2/conversations/messaging/integrations/twitter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "accessTokenKey" : "aeiou",
    "selfUri" : "aeiou",
    "createError" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createStatus" : "aeiou",
    "userId" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "tier" : "aeiou",
    "createdBy" : "",
    "envName" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "consumerKey" : "aeiou",
    "username" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TwitterIntegrationEntityListing> 
     */
    open class func getConversationsMessagingIntegrationsTwitterWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TwitterIntegrationEntityListing> {
        let path = "/api/v2/conversations/messaging/integrations/twitter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TwitterIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Twitter messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId: String, completion: @escaping ((_ data: TwitterIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<TwitterIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Twitter messaging integration
     
     - GET /api/v2/conversations/messaging/integrations/twitter/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessTokenKey" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "userId" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "tier" : "aeiou",
  "createdBy" : "",
  "envName" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "consumerKey" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<TwitterIntegration> 
     */
    open class func getConversationsMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<TwitterIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/twitter/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of WhatsApp Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsWhatsapp(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: WhatsAppIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsWhatsappWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<WhatsAppIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of WhatsApp Integrations
     
     - GET /api/v2/conversations/messaging/integrations/whatsapp
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "activationStatusCode" : "aeiou",
    "selfUri" : "aeiou",
    "createError" : "",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createStatus" : "aeiou",
    "version" : 123,
    "phoneNumber" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "activationErrorInfo" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<WhatsAppIntegrationEntityListing> 
     */
    open class func getConversationsMessagingIntegrationsWhatsappWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<WhatsAppIntegrationEntityListing> {
        let path = "/api/v2/conversations/messaging/integrations/whatsapp"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<WhatsAppIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a WhatsApp messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: String, completion: @escaping ((_ data: WhatsAppIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<WhatsAppIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a WhatsApp messaging integration
     
     - GET /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "activationStatusCode" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "activationErrorInfo" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<WhatsAppIntegration> 
     */
    open class func getConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<WhatsAppIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WhatsAppIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of Messaging Stickers
     
     - parameter messengerType: (path) Messenger Type 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationsMessagingSticker(messengerType: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: MessagingStickerEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationsMessagingStickerWithRequestBuilder(messengerType: messengerType, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<MessagingStickerEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Messaging Stickers
     
     - GET /api/v2/conversations/messaging/stickers/{messengerType}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "providerPackageId" : 123,
    "providerVersion" : 123456789,
    "uriLocation" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "providerStickerId" : 123,
    "messengerType" : "aeiou",
    "id" : "aeiou",
    "packageName" : "aeiou",
    "stickerType" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter messengerType: (path) Messenger Type 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<MessagingStickerEntityListing> 
     */
    open class func getConversationsMessagingStickerWithRequestBuilder(messengerType: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<MessagingStickerEntityListing> {
        var path = "/api/v2/conversations/messaging/stickers/{messengerType}"
        let messengerTypePreEscape = "\(messengerType)"
        let messengerTypePostEscape = messengerTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messengerType}", with: messengerTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<MessagingStickerEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a participant.
     
     - PATCH /api/v2/conversations/{conversationId}/participants/{participantId}
     - Update conversation participant.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Update request 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Participant attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Participant attributes 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by setting it's recording state, merging in other conversations to create a conference, or disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCall(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by setting it's recording state, merging in other conversations to create a conference, or disconnecting all of the participants
     
     - PATCH /api/v2/conversations/calls/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsCallWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/calls/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant request 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCallParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCallParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsCallParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Change who can speak
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) new speak to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallParticipantConsult(conversationId: String, participantId: String, body: ConsultTransferUpdate, completion: @escaping ((_ data: ConsultTransferResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallParticipantConsultWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<ConsultTransferResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Change who can speak
     
     - PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "destinationParticipantId" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) new speak to 

     - returns: RequestBuilder<ConsultTransferResponse> 
     */
    open class func patchConversationsCallParticipantConsultWithRequestBuilder(conversationId: String, participantId: String, body: ConsultTransferUpdate) -> RequestBuilder<ConsultTransferResponse> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConsultTransferResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallback(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallbackWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by disconnecting all of the participants
     
     - PATCH /api/v2/conversations/callbacks/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsCallbackWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/callbacks/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallbackParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallbackParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCallbackParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallbackParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallbackParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Attributes 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCallbackParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCallbackParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCallbackParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsCallbackParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsChat(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsChatWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by disconnecting all of the participants
     
     - PATCH /api/v2/conversations/chats/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsChatWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/chats/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsChatParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsChatParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Update request 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsChatParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsChatParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsChatParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsChatParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsChatParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsChatParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsChatParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCobrowsesession(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCobrowsesessionWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by disconnecting all of the participants
     
     - PATCH /api/v2/conversations/cobrowsesessions/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsCobrowsesessionWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCobrowsesessionParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCobrowsesessionParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCobrowsesessionParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCobrowsesessionParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCobrowsesessionParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsCobrowsesessionParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsCobrowsesessionParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsCobrowsesessionParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsCobrowsesessionParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsEmail(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsEmailWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by disconnecting all of the participants
     
     - PATCH /api/v2/conversations/emails/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsEmailWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/emails/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsEmailParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsEmailParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Update request 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsEmailParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsEmailParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsEmailParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Participant attributes 

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsEmailParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsEmailParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsEmailParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsEmailParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a conversation by disconnecting all of the participants
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessage(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessageWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a conversation by disconnecting all of the participants
     
     - PATCH /api/v2/conversations/messages/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func patchConversationsMessageWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/messages/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update conversation participant
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessageParticipant(conversationId: String, participantId: String, body: MediaParticipantRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessageParticipantWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant
     
     - PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsMessageParticipantWithRequestBuilder(conversationId: String, participantId: String, body: MediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessageParticipantAttributes(conversationId: String, participantId: String, body: ParticipantAttributes? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessageParticipantAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the attributes on a conversation participant.
     
     - PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchConversationsMessageParticipantAttributesWithRequestBuilder(conversationId: String, participantId: String, body: ParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessageParticipantCommunication(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessageParticipantCommunicationWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation participant's communication by disconnecting it.
     
     - PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path)  conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Participant 

     - returns: RequestBuilder<Empty> 
     */
    open class func patchConversationsMessageParticipantCommunicationWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: MediaParticipantRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update Facebook messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) FacebookIntegrationUpdateRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: String, body: FacebookIntegrationUpdateRequest, completion: @escaping ((_ data: FacebookIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<FacebookIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Facebook messaging integration
     
     - PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "pageId" : "aeiou",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "appId" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) FacebookIntegrationUpdateRequest 

     - returns: RequestBuilder<FacebookIntegration> 
     */
    open class func patchConversationsMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: String, body: FacebookIntegrationUpdateRequest) -> RequestBuilder<FacebookIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Activate a WhatsApp messaging integration.
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) WhatsAppIntegrationUpdateRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: String, body: WhatsAppIntegrationUpdateRequest, completion: @escaping ((_ data: WhatsAppIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = patchConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<WhatsAppIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Activate a WhatsApp messaging integration.
     
     - PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}
     - The following steps are required in order to fully activate a Whatsapp Integration: Initially, you will need to get an activation code by sending: an action set to Activate, and an authenticationMethod choosing from Sms or Voice. Finally, once you have been informed of an activation code on selected authenticationMethod, you will need to confirm the code by sending: an action set to Confirm, and the confirmationCode you have received from Whatsapp.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "activationStatusCode" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "activationErrorInfo" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) WhatsAppIntegrationUpdateRequest 

     - returns: RequestBuilder<WhatsAppIntegration> 
     */
    open class func patchConversationsMessagingIntegrationsWhatsappIntegrationIdWithRequestBuilder(integrationId: String, body: WhatsAppIntegrationUpdateRequest) -> RequestBuilder<WhatsAppIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WhatsAppIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Index conversation properties
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationDetailsProperties(conversationId: String, body: PropertyIndexRequest, completion: @escaping ((_ data: PropertyIndexRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<PropertyIndexRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Index conversation properties
     
     - POST /api/v2/analytics/conversations/{conversationId}/details/properties
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "targetDate" : "2000-01-23T04:56:07.000+0000",
  "sessionId" : "aeiou",
  "properties" : [ {
    "propertyType" : "aeiou",
    "property" : "aeiou",
    "value" : "aeiou"
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 

     - returns: RequestBuilder<PropertyIndexRequest> 
     */
    open class func postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: String, body: PropertyIndexRequest) -> RequestBuilder<PropertyIndexRequest> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details/properties"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PropertyIndexRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsAggregatesQuery(body: ConversationAggregationQuery, completion: @escaping ((_ data: ConversationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ConversationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation aggregates
     
     - POST /api/v2/analytics/conversations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ConversationAggregateQueryResponse> 
     */
    open class func postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: ConversationAggregationQuery) -> RequestBuilder<ConversationAggregateQueryResponse> {
        let path = "/api/v2/analytics/conversations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConversationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsJobs(body: AsyncConversationQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation details asynchronously
     
     - POST /api/v2/analytics/conversations/details/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: AsyncConversationQuery) -> RequestBuilder<AsyncQueryResponse> {
        let path = "/api/v2/analytics/conversations/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for conversation details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsQuery(body: ConversationQuery, completion: @escaping ((_ data: AnalyticsConversationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for conversation details
     
     - POST /api/v2/analytics/conversations/details/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "aggregations" : [ {
    "metric" : "aeiou",
    "count" : 123456789,
    "type" : "aeiou",
    "dimension" : "aeiou",
    "results" : [ {
      "count" : 123456789,
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "value" : "aeiou"
    } ]
  } ],
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "evaluatorId" : "aeiou",
      "calibrationId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "surveyPromoterScore" : 123
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "usedRouting" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "cobrowseRole" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "protocolCallId" : "aeiou",
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "flowOutType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "mediaBridgeId" : "aeiou",
        "journeyActionMapVersion" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "audioMuted" : true,
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "dispositionName" : "disposition.classification.callable.machine",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "maxLatencyMs" : 123456789,
          "codecs" : [ "aeiou" ],
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsConversationQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: ConversationQuery) -> RequestBuilder<AnalyticsConversationQueryResponse> {
        let path = "/api/v2/analytics/conversations/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Attempts to manually assign a specified conversation to a specified agent.  Ignores bullseye ring, PAR score, skills, and languages.
     
     - parameter conversationId: (path) conversation ID 
     - parameter body: (body) Targeted user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationAssign(conversationId: String, body: ConversationUser, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationAssignWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Attempts to manually assign a specified conversation to a specified agent.  Ignores bullseye ring, PAR score, skills, and languages.
     
     - POST /api/v2/conversations/{conversationId}/assign
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter body: (body) Targeted user 

     - returns: RequestBuilder<String> 
     */
    open class func postConversationAssignWithRequestBuilder(conversationId: String, body: ConversationUser) -> RequestBuilder<String> {
        var path = "/api/v2/conversations/{conversationId}/assign"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.
     
     - parameter conversationId: (path) conversation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationDisconnect(conversationId: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationDisconnectWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.
     
     - POST /api/v2/conversations/{conversationId}/disconnect
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter conversationId: (path) conversation ID 

     - returns: RequestBuilder<String> 
     */
    open class func postConversationDisconnectWithRequestBuilder(conversationId: String) -> RequestBuilder<String> {
        var path = "/api/v2/conversations/{conversationId}/disconnect"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create a new callback for the specified participant on the conversation.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationParticipantCallbacks(conversationId: String, participantId: String, body: CreateCallbackOnConversationCommand? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationParticipantCallbacksWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new callback for the specified participant on the conversation.
     
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationParticipantCallbacksWithRequestBuilder(conversationId: String, participantId: String, body: CreateCallbackOnConversationCommand? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/callbacks"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Sends DTMF to the participant
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Digits (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationParticipantDigits(conversationId: String, participantId: String, body: Digits? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationParticipantDigitsWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Sends DTMF to the participant
     
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/digits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Digits (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationParticipantDigitsWithRequestBuilder(conversationId: String, participantId: String, body: Digits? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/digits"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationParticipantSecureivrsessions(conversationId: String, participantId: String, body: CreateSecureSession? = nil, completion: @escaping ((_ data: SecureSession?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationParticipantSecureivrsessionsWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<SecureSession>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.
     
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "disconnect" : true,
  "userData" : "aeiou",
  "selfUri" : "aeiou",
  "sourceParticipantId" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "flow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SecureSession> 
     */
    open class func postConversationParticipantSecureivrsessionsWithRequestBuilder(conversationId: String, participantId: String, body: CreateSecureSession? = nil) -> RequestBuilder<SecureSession> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SecureSession>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Place a new call as part of a callback conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCall(conversationId: String, body: CallCommand, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Place a new call as part of a callback conversation.
     
     - POST /api/v2/conversations/calls/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func postConversationsCallWithRequestBuilder(conversationId: String, body: CallCommand) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/calls/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Initiate and update consult transfer
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Destination address &amp; initial speak to 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallParticipantConsult(conversationId: String, participantId: String, body: ConsultTransfer, completion: @escaping ((_ data: ConsultTransferResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallParticipantConsultWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<ConsultTransferResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Initiate and update consult transfer
     
     - POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "destinationParticipantId" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Destination address &amp; initial speak to 

     - returns: RequestBuilder<ConsultTransferResponse> 
     */
    open class func postConversationsCallParticipantConsultWithRequestBuilder(conversationId: String, participantId: String, body: ConsultTransfer) -> RequestBuilder<ConsultTransferResponse> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConsultTransferResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Listen in on the conversation from the point of view of a given participant.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallParticipantMonitor(conversationId: String, participantId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallParticipantMonitorWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Listen in on the conversation from the point of view of a given participant.
     
     - POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsCallParticipantMonitorWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsCallParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add participants to a conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallParticipants(conversationId: String, body: Conversation, completion: @escaping ((_ data: Conversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallParticipantsWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Conversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add participants to a conversation
     
     - POST /api/v2/conversations/calls/{conversationId}/participants
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "state" : "aeiou",
  "divisions" : [ {
    "division" : "",
    "entities" : [ "" ]
  } ],
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "afterCallWorkRequired" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "automatedCallbackConfigId" : "aeiou",
      "provider" : "aeiou",
      "externalCampaign" : true,
      "callbackUserName" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "voicemail" : {
        "uploadStatus" : "aeiou",
        "id" : "aeiou"
      },
      "scriptId" : "aeiou",
      "timeoutSeconds" : 123,
      "startHoldTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "videos" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "videoMuted" : true,
      "peerCount" : 123,
      "msids" : [ "aeiou" ],
      "afterCallWorkRequired" : true,
      "audioMuted" : true,
      "sharingScreen" : true,
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "self" : "",
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "externalOrganizationId" : "aeiou",
    "locale" : "aeiou",
    "cobrowsesessions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "cobrowseRole" : "aeiou",
      "cobrowseSessionId" : "aeiou",
      "afterCallWorkRequired" : true,
      "viewerUrl" : "aeiou",
      "segments" : [ "" ],
      "providerEventTime" : "2000-01-23T04:56:07.000+0000",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "self" : "",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "controlling" : [ "aeiou" ]
    } ],
    "alertingTimeoutMs" : 123,
    "emails" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "draftAttachments" : [ {
        "inlineImage" : true,
        "contentUri" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "messagesSent" : 123,
      "afterCallWorkRequired" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "messageId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "autoGenerated" : true,
      "recordingId" : "aeiou",
      "spam" : true,
      "direction" : "aeiou"
    } ],
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "aniName" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "mediaType" : [ "aeiou" ],
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "conversationDate" : "2000-01-23T04:56:07.000+0000",
      "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "id" : "aeiou",
      "rescore" : true,
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "enableManualAssignment" : true,
        "description" : "aeiou",
        "autoAnswerOnly" : true,
        "routingRules" : [ {
          "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
          "threshold" : 123,
          "operator" : "aeiou"
        } ],
        "skillEvaluationMethod" : "aeiou",
        "defaultScripts" : {
          "key" : {
            "variables" : "{}",
            "selfUri" : "aeiou",
            "customActions" : "{}",
            "versionDate" : "2000-01-23T04:56:07.000+0000",
            "features" : "{}",
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "pages" : [ {
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "rootContainer" : {
                "key" : "{}"
              },
              "properties" : {
                "key" : "{}"
              }
            } ],
            "startPageName" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "startPageId" : "aeiou",
            "id" : "aeiou",
            "publishedDate" : "2000-01-23T04:56:07.000+0000"
          }
        },
        "division" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "callingPartyNumber" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "whisperPrompt" : "",
        "enableTranscription" : true,
        "outboundEmailAddress" : {
          "route" : {
            "replyEmailAddress" : "",
            "selfUri" : "aeiou",
            "pattern" : "aeiou",
            "language" : "",
            "autoBcc" : [ {
              "name" : "aeiou",
              "email" : "aeiou"
            } ],
            "priority" : 123,
            "fromEmail" : "aeiou",
            "skills" : [ "" ],
            "name" : "aeiou",
            "fromName" : "aeiou",
            "id" : "aeiou",
            "queue" : "",
            "flow" : "",
            "spamFlow" : ""
          },
          "domain" : ""
        },
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "outboundMessagingAddresses" : {
          "smsAddress" : ""
        },
        "createdBy" : "aeiou",
        "name" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "nextUri" : "aeiou",
          "previousUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "visibilityCondition" : "",
          "name" : "aeiou",
          "questions" : [ {
            "helpText" : "aeiou",
            "commentsRequired" : true,
            "visibilityCondition" : {
              "combiningOperation" : "aeiou",
              "predicates" : [ "{}" ]
            },
            "isCritical" : true,
            "id" : "aeiou",
            "text" : "aeiou",
            "type" : "aeiou",
            "isKill" : true,
            "naEnabled" : true,
            "answerOptions" : [ {
              "id" : "aeiou",
              "text" : "aeiou",
              "value" : 123
            } ]
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : "",
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "flaggedReason" : "aeiou",
    "consultParticipantId" : "aeiou",
    "screenRecordingState" : "aeiou",
    "queueName" : "aeiou",
    "coachedParticipantId" : "aeiou",
    "calls" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "other" : "",
      "confined" : true,
      "held" : true,
      "afterCallWorkRequired" : true,
      "recording" : true,
      "errorInfo" : {
        "code" : "aeiou",
        "message" : "aeiou"
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "provider" : "aeiou",
      "afterCallWork" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou"
      },
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "faxStatus" : {
        "baudRate" : 123456789,
        "expectedPages" : 123456789,
        "lineErrors" : 123456789,
        "pageErrors" : 123456789,
        "activePage" : 123456789,
        "linesTransmitted" : 123456789,
        "bytesTransmitted" : 123456789,
        "direction" : "aeiou"
      },
      "uuiData" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "recordingState" : "aeiou",
      "self" : {
        "addressDisplayable" : "aeiou",
        "addressNormalized" : "aeiou",
        "name" : "aeiou",
        "addressRaw" : "aeiou",
        "nameRaw" : "aeiou"
      },
      "documentId" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "agentAssistantId" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "teamId" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "avatarImageUrl" : "aeiou",
      "afterCallWorkRequired" : true,
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : {
        "customerSession" : {
          "id" : "aeiou",
          "type" : "aeiou"
        },
        "triggeringAction" : {
          "actionMap" : {
            "id" : "aeiou",
            "version" : 123
          },
          "id" : "aeiou"
        },
        "customer" : {
          "idType" : "aeiou",
          "id" : "aeiou"
        }
      },
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "messages" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "held" : true,
      "afterCallWorkRequired" : true,
      "errorInfo" : "",
      "type" : "aeiou",
      "toAddress" : "",
      "segments" : [ "" ],
      "recipientType" : "aeiou",
      "provider" : "aeiou",
      "journeyContext" : "",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "fromAddress" : "",
      "state" : "aeiou",
      "id" : "aeiou",
      "direction" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "scriptId" : "aeiou",
      "messages" : [ {
        "messageStatus" : "aeiou",
        "messageTime" : "2000-01-23T04:56:07.000+0000",
        "messageId" : "aeiou",
        "stickers" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "media" : [ {
          "contentLengthBytes" : 123,
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageURI" : "aeiou",
        "messageSegmentCount" : 123
      } ],
      "recipientCountry" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "held" : true,
      "afterCallWorkRequired" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "socialMediaHub" : "aeiou",
      "provider" : "aeiou",
      "afterCallWork" : "",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "screenshares" : [ {
      "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
      "peerId" : "aeiou",
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : "",
      "peerCount" : 123,
      "afterCallWorkRequired" : true,
      "sharing" : true,
      "segments" : [ "" ],
      "provider" : "aeiou",
      "context" : "aeiou",
      "afterCallWork" : "",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Conversation 

     - returns: RequestBuilder<Conversation> 
     */
    open class func postConversationsCallParticipantsWithRequestBuilder(conversationId: String, body: Conversation) -> RequestBuilder<Conversation> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Conversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallbackParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallbackParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsCallbackParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a Callback
     
     - parameter body: (body) Callback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCallbacks(body: CreateCallbackCommand, completion: @escaping ((_ data: CreateCallbackResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallbacksWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateCallbackResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Callback
     
     - POST /api/v2/conversations/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callbackIdentifiers" : [ {
    "id" : "aeiou",
    "type" : "aeiou"
  } ],
  "conversation" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter body: (body) Callback 

     - returns: RequestBuilder<CreateCallbackResponse> 
     */
    open class func postConversationsCallbacksWithRequestBuilder(body: CreateCallbackCommand) -> RequestBuilder<CreateCallbackResponse> {
        let path = "/api/v2/conversations/callbacks"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateCallbackResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a call conversation
     
     - parameter body: (body) Call request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCalls(body: CreateCallRequest, completion: @escaping ((_ data: CreateCallResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCallsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateCallResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a call conversation
     
     - POST /api/v2/conversations/calls
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) Call request 

     - returns: RequestBuilder<CreateCallResponse> 
     */
    open class func postConversationsCallsWithRequestBuilder(body: CreateCallRequest) -> RequestBuilder<CreateCallResponse> {
        let path = "/api/v2/conversations/calls"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateCallResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Send a message on behalf of a communication in a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsChatCommunicationMessages(conversationId: String, communicationId: String, body: CreateWebChatMessageRequest, completion: @escaping ((_ data: WebChatMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsChatCommunicationMessagesWithRequestBuilder(conversationId: conversationId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<WebChatMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send a message on behalf of a communication in a chat conversation.
     
     - POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "bodyType" : "aeiou",
  "sender" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "body" : "aeiou",
  "conversation" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : {
      "lastName" : "aeiou",
      "role" : "aeiou",
      "displayName" : "aeiou",
      "customFields" : {
        "key" : "aeiou"
      },
      "avatarImageUrl" : "aeiou",
      "firstName" : "aeiou",
      "phoneNumber" : "aeiou",
      "joinDate" : "2000-01-23T04:56:07.000+0000",
      "leaveDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "authenticatedGuest" : true,
      "email" : "aeiou"
    },
    "id" : "aeiou"
  },
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Message 

     - returns: RequestBuilder<WebChatMessage> 
     */
    open class func postConversationsChatCommunicationMessagesWithRequestBuilder(conversationId: String, communicationId: String, body: CreateWebChatMessageRequest) -> RequestBuilder<WebChatMessage> {
        var path = "/api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Send a typing-indicator on behalf of a communication in a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsChatCommunicationTyping(conversationId: String, communicationId: String, completion: @escaping ((_ data: WebChatTyping?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsChatCommunicationTypingWithRequestBuilder(conversationId: conversationId, communicationId: communicationId)
        requestBuilder.execute { (response: Response<WebChatTyping>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send a typing-indicator on behalf of a communication in a chat conversation.
     
     - POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sender" : "",
  "id" : "aeiou",
  "conversation" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : {
      "lastName" : "aeiou",
      "role" : "aeiou",
      "displayName" : "aeiou",
      "customFields" : {
        "key" : "aeiou"
      },
      "avatarImageUrl" : "aeiou",
      "firstName" : "aeiou",
      "phoneNumber" : "aeiou",
      "joinDate" : "2000-01-23T04:56:07.000+0000",
      "leaveDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "authenticatedGuest" : true,
      "email" : "aeiou"
    },
    "id" : "aeiou"
  },
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 

     - returns: RequestBuilder<WebChatTyping> 
     */
    open class func postConversationsChatCommunicationTypingWithRequestBuilder(conversationId: String, communicationId: String) -> RequestBuilder<WebChatTyping> {
        var path = "/api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatTyping>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsChatParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsChatParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsChatParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a web chat conversation
     
     - parameter body: (body) Create web chat request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsChats(body: CreateWebChatRequest, completion: @escaping ((_ data: ChatConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsChatsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ChatConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a web chat conversation
     
     - POST /api/v2/conversations/chats
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "avatarImageUrl" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "roomId" : "aeiou",
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter body: (body) Create web chat request 

     - returns: RequestBuilder<ChatConversation> 
     */
    open class func postConversationsChatsWithRequestBuilder(body: CreateWebChatRequest) -> RequestBuilder<ChatConversation> {
        let path = "/api/v2/conversations/chats"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsCobrowsesessionParticipantReplace(conversationId: String, participantId: String, body: TransferRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsCobrowsesessionParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsCobrowsesessionParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Send external email reply 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsEmailInboundmessages(conversationId: String, body: InboundMessageRequest, completion: @escaping ((_ data: EmailConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsEmailInboundmessagesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<EmailConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.
     
     - POST /api/v2/conversations/emails/{conversationId}/inboundmessages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "draftAttachments" : [ {
      "inlineImage" : true,
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "messagesSent" : 123,
    "messageId" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "autoGenerated" : true,
    "spam" : true,
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Send external email reply 

     - returns: RequestBuilder<EmailConversation> 
     */
    open class func postConversationsEmailInboundmessagesWithRequestBuilder(conversationId: String, body: InboundMessageRequest) -> RequestBuilder<EmailConversation> {
        var path = "/api/v2/conversations/emails/{conversationId}/inboundmessages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Send an email reply
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Reply 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsEmailMessages(conversationId: String, body: EmailMessage, completion: @escaping ((_ data: EmailMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsEmailMessagesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<EmailMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send an email reply
     
     - POST /api/v2/conversations/emails/{conversationId}/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "inlineImage" : true,
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "textBody" : "aeiou",
  "htmlBody" : "aeiou",
  "historyIncluded" : true,
  "name" : "aeiou",
  "from" : "",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Reply 

     - returns: RequestBuilder<EmailMessage> 
     */
    open class func postConversationsEmailMessagesWithRequestBuilder(conversationId: String, body: EmailMessage) -> RequestBuilder<EmailMessage> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Copy attachments from an email message to the current draft.
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Copy Attachment Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsEmailMessagesDraftAttachmentsCopy(conversationId: String, body: CopyAttachmentsRequest, completion: @escaping ((_ data: EmailMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsEmailMessagesDraftAttachmentsCopyWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<EmailMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Copy attachments from an email message to the current draft.
     
     - POST /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "inlineImage" : true,
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "textBody" : "aeiou",
  "htmlBody" : "aeiou",
  "historyIncluded" : true,
  "name" : "aeiou",
  "from" : "",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Copy Attachment Request 

     - returns: RequestBuilder<EmailMessage> 
     */
    open class func postConversationsEmailMessagesDraftAttachmentsCopyWithRequestBuilder(conversationId: String, body: CopyAttachmentsRequest) -> RequestBuilder<EmailMessage> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsEmailParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsEmailParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsEmailParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an email conversation
     
     - parameter body: (body) Create email request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsEmails(body: CreateEmailRequest, completion: @escaping ((_ data: EmailConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsEmailsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EmailConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an email conversation
     
     - POST /api/v2/conversations/emails
     - If the direction of the request is INBOUND, this will create an external conversation with a third party provider. If the direction of the the request is OUTBOUND, this will create a conversation to send outbound emails on behalf of a queue.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "draftAttachments" : [ {
      "inlineImage" : true,
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "alertingTimeoutMs" : 123,
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "messagesSent" : 123,
    "messageId" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "autoGenerated" : true,
    "spam" : true,
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter body: (body) Create email request 

     - returns: RequestBuilder<EmailConversation> 
     */
    open class func postConversationsEmailsWithRequestBuilder(body: CreateEmailRequest) -> RequestBuilder<EmailConversation> {
        let path = "/api/v2/conversations/emails"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Fax Conversation
     
     - parameter body: (body) Fax 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsFaxes(body: FaxSendRequest, completion: @escaping ((_ data: FaxSendResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsFaxesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FaxSendResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Fax Conversation
     
     - POST /api/v2/conversations/faxes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "uploadMethodType" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter body: (body) Fax 

     - returns: RequestBuilder<FaxSendResponse> 
     */
    open class func postConversationsFaxesWithRequestBuilder(body: FaxSendRequest) -> RequestBuilder<FaxSendResponse> {
        let path = "/api/v2/conversations/faxes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FaxSendResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Send message
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessageCommunicationMessages(conversationId: String, communicationId: String, body: AdditionalMessage, completion: @escaping ((_ data: MessageData?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessageCommunicationMessagesWithRequestBuilder(conversationId: conversationId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<MessageData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send message
     
     - POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages
     - Send message on existing conversation/communication. Only one message body field can be accepted, per request. Example: 1 textBody, 1 mediaId, 1 stickerId, or 1 messageTemplate.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "providerMessageId" : "aeiou",
  "selfUri" : "aeiou",
  "messengerType" : "aeiou",
  "textBody" : "aeiou",
  "media" : [ {
    "contentLengthBytes" : 123,
    "name" : "aeiou",
    "mediaType" : "aeiou",
    "id" : "aeiou",
    "url" : "aeiou"
  } ],
  "toAddress" : "aeiou",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "name" : "aeiou",
  "fromAddress" : "aeiou",
  "stickers" : [ {
    "id" : "aeiou",
    "url" : "aeiou"
  } ],
  "id" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+0000",
  "direction" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) Message 

     - returns: RequestBuilder<MessageData> 
     */
    open class func postConversationsMessageCommunicationMessagesWithRequestBuilder(conversationId: String, communicationId: String, body: AdditionalMessage) -> RequestBuilder<MessageData> {
        var path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create media
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessageCommunicationMessagesMedia(conversationId: String, communicationId: String, completion: @escaping ((_ data: MessageMediaData?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessageCommunicationMessagesMediaWithRequestBuilder(conversationId: conversationId, communicationId: communicationId)
        requestBuilder.execute { (response: Response<MessageMediaData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create media
     
     - POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contentLengthBytes" : 123,
  "uploadUrl" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mediaType" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter communicationId: (path) communicationId 

     - returns: RequestBuilder<MessageMediaData> 
     */
    open class func postConversationsMessageCommunicationMessagesMediaWithRequestBuilder(conversationId: String, communicationId: String) -> RequestBuilder<MessageMediaData> {
        var path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageMediaData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get messages in batch
     
     - parameter conversationId: (path)  
     - parameter body: (body) messageIds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessageMessagesBulk(conversationId: String, body: [String]? = nil, completion: @escaping ((_ data: TextMessageListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessageMessagesBulkWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<TextMessageListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get messages in batch
     
     - POST /api/v2/conversations/messages/{conversationId}/messages/bulk
     - The path parameter [conversationId] should contain the conversationId of the conversation being filtered. The body should contain the messageId(s) of messages being requested. For example: [\"a3069a33b-bbb1-4703-9d68-061d9e9db96e\", \"55bc6be3-078c-4a49-a4e6-1e05776ed7e8\"]
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "providerMessageId" : "aeiou",
    "selfUri" : "aeiou",
    "messengerType" : "aeiou",
    "textBody" : "aeiou",
    "media" : [ {
      "contentLengthBytes" : 123,
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "toAddress" : "aeiou",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "name" : "aeiou",
    "fromAddress" : "aeiou",
    "stickers" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "id" : "aeiou",
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter conversationId: (path)  
     - parameter body: (body) messageIds (optional)

     - returns: RequestBuilder<TextMessageListing> 
     */
    open class func postConversationsMessageMessagesBulkWithRequestBuilder(conversationId: String, body: [String]? = nil) -> RequestBuilder<TextMessageListing> {
        var path = "/api/v2/conversations/messages/{conversationId}/messages/bulk"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TextMessageListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessageParticipantReplace(conversationId: String, participantId: String, body: TransferRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessageParticipantReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace this participant with the specified user and/or address
     
     - POST /api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter body: (body) Transfer request 

     - returns: RequestBuilder<Void> 
     */
    open class func postConversationsMessageParticipantReplaceWithRequestBuilder(conversationId: String, participantId: String, body: TransferRequest) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an outbound messaging conversation.
     
     - parameter body: (body) Create outbound messaging conversation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessages(body: CreateOutboundMessagingConversationRequest, completion: @escaping ((_ data: MessageConversation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<MessageConversation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an outbound messaging conversation.
     
     - POST /api/v2/conversations/messages
     - If there is an existing conversation between the remote address and the address associated with the queue specified in createOutboundRequest then the result of this request depends on the state of that conversation and the useExistingConversation field of createOutboundRequest. If the existing conversation is in alerting or connected state, then the request will fail. If the existing conversation is disconnected but still within the conversation window then the request will fail unless useExistingConversation is set to true.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "code" : "aeiou",
      "message" : "aeiou"
    },
    "type" : "aeiou",
    "alertingTimeoutMs" : 123,
    "toAddress" : {
      "addressDisplayable" : "aeiou",
      "addressNormalized" : "aeiou",
      "name" : "aeiou",
      "addressRaw" : "aeiou",
      "nameRaw" : "aeiou"
    },
    "conversationRoutingData" : {
      "skills" : [ "" ],
      "language" : "",
      "scoredAgents" : [ {
        "score" : 123,
        "agent" : ""
      } ],
      "priority" : 123,
      "queue" : {
        "selfUri" : "aeiou",
        "id" : "aeiou"
      }
    },
    "recipientType" : "aeiou",
    "provider" : "aeiou",
    "peer" : "aeiou",
    "journeyContext" : {
      "customerSession" : {
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "triggeringAction" : {
        "actionMap" : {
          "id" : "aeiou",
          "version" : 123
        },
        "id" : "aeiou"
      },
      "customer" : {
        "idType" : "aeiou",
        "id" : "aeiou"
      }
    },
    "endAcwTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "fromAddress" : "",
    "id" : "aeiou",
    "state" : "aeiou",
    "startAcwTime" : "2000-01-23T04:56:07.000+0000",
    "direction" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "externalContact" : "",
    "team" : "",
    "externalOrganization" : "",
    "flaggedReason" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "messages" : [ {
      "messageStatus" : "aeiou",
      "messageTime" : "2000-01-23T04:56:07.000+0000",
      "messageId" : "aeiou",
      "stickers" : [ {
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "media" : [ {
        "contentLengthBytes" : 123,
        "name" : "aeiou",
        "mediaType" : "aeiou",
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "messageURI" : "aeiou",
      "messageSegmentCount" : 123
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "recipientCountry" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter body: (body) Create outbound messaging conversation 

     - returns: RequestBuilder<MessageConversation> 
     */
    open class func postConversationsMessagesWithRequestBuilder(body: CreateOutboundMessagingConversationRequest) -> RequestBuilder<MessageConversation> {
        let path = "/api/v2/conversations/messages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageConversation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Send an agentless outbound message
     
     - parameter body: (body) Create agentless outbound messaging request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessagesAgentless(body: SendAgentlessOutboundMessageRequest, completion: @escaping ((_ data: SendAgentlessOutboundMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagesAgentlessWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SendAgentlessOutboundMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send an agentless outbound message
     
     - POST /api/v2/conversations/messages/agentless
     - Send an agentlesss (api participant) outbound message using a client credential grant. In order to call this endpoint you will need OAuth token generated using OAuth client credentials authorized with at least messaging scope. This will generate a new Conversation, if there is an existing active Conversation between the fromAddress and toAddress already, then this POST will fail.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "messengerType" : "aeiou",
  "fromAddress" : "aeiou",
  "textBody" : "aeiou",
  "id" : "aeiou",
  "toAddress" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) Create agentless outbound messaging request 

     - returns: RequestBuilder<SendAgentlessOutboundMessageResponse> 
     */
    open class func postConversationsMessagesAgentlessWithRequestBuilder(body: SendAgentlessOutboundMessageRequest) -> RequestBuilder<SendAgentlessOutboundMessageResponse> {
        let path = "/api/v2/conversations/messages/agentless"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SendAgentlessOutboundMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a Facebook Integration
     
     - parameter body: (body) FacebookIntegrationRequest 
     - parameter async: (query) Create a Facebook integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new Facebook integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessagingIntegrationsFacebook(body: FacebookIntegrationRequest, async: Bool? = nil, completion: @escaping ((_ data: FacebookIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagingIntegrationsFacebookWithRequestBuilder(body: body, async: async)
        requestBuilder.execute { (response: Response<FacebookIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Facebook Integration
     
     - POST /api/v2/conversations/messaging/integrations/facebook
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "pageId" : "aeiou",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "appId" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) FacebookIntegrationRequest 
     - parameter async: (query) Create a Facebook integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new Facebook integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)

     - returns: RequestBuilder<FacebookIntegration> 
     */
    open class func postConversationsMessagingIntegrationsFacebookWithRequestBuilder(body: FacebookIntegrationRequest, async: Bool? = nil) -> RequestBuilder<FacebookIntegration> {
        let path = "/api/v2/conversations/messaging/integrations/facebook"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "async": async
            
        ])

        let requestBuilder: RequestBuilder<FacebookIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a LINE messenger Integration
     
     - parameter body: (body) LineIntegrationRequest 
     - parameter async: (query) Create a LINE integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new LINE integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessagingIntegrationsLine(body: LineIntegrationRequest, async: Bool? = nil, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagingIntegrationsLineWithRequestBuilder(body: body, async: async)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a LINE messenger Integration
     
     - POST /api/v2/conversations/messaging/integrations/line
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) LineIntegrationRequest 
     - parameter async: (query) Create a LINE integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new LINE integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func postConversationsMessagingIntegrationsLineWithRequestBuilder(body: LineIntegrationRequest, async: Bool? = nil) -> RequestBuilder<LineIntegration> {
        let path = "/api/v2/conversations/messaging/integrations/line"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "async": async
            
        ])

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a Twitter Integration
     
     - parameter body: (body) TwitterIntegrationRequest 
     - parameter async: (query) Create a Twitter integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new Twitter integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessagingIntegrationsTwitter(body: TwitterIntegrationRequest, async: Bool? = nil, completion: @escaping ((_ data: TwitterIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagingIntegrationsTwitterWithRequestBuilder(body: body, async: async)
        requestBuilder.execute { (response: Response<TwitterIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Twitter Integration
     
     - POST /api/v2/conversations/messaging/integrations/twitter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessTokenKey" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "userId" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "tier" : "aeiou",
  "createdBy" : "",
  "envName" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "consumerKey" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) TwitterIntegrationRequest 
     - parameter async: (query) Create a Twitter integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new Twitter integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)

     - returns: RequestBuilder<TwitterIntegration> 
     */
    open class func postConversationsMessagingIntegrationsTwitterWithRequestBuilder(body: TwitterIntegrationRequest, async: Bool? = nil) -> RequestBuilder<TwitterIntegration> {
        let path = "/api/v2/conversations/messaging/integrations/twitter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "async": async
            
        ])

        let requestBuilder: RequestBuilder<TwitterIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a WhatsApp Integration
     
     - parameter body: (body) WhatsAppIntegrationRequest 
     - parameter async: (query) Create a WhatsApp integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new WhatsApp integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsMessagingIntegrationsWhatsapp(body: WhatsAppIntegrationRequest, async: Bool? = nil, completion: @escaping ((_ data: WhatsAppIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsMessagingIntegrationsWhatsappWithRequestBuilder(body: body, async: async)
        requestBuilder.execute { (response: Response<WhatsAppIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a WhatsApp Integration
     
     - POST /api/v2/conversations/messaging/integrations/whatsapp
     - You must be approved by WhatsApp to use this feature. Your approved e164-formatted phone number and valid WhatsApp certificate for your number are required. Your WhatsApp certificate must have valid base64 encoding. Please paste carefully and do not add any leading or trailing spaces. Do not alter any characters. An integration must be activated within 7 days of certificate generation. If you cannot complete the addition and activation of the number within 7 days, please obtain a new certificate before creating the integration. Integrations created with an invalid number or certificate may immediately incur additional integration fees. Please carefully enter your number and certificate as described.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "activationStatusCode" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : "",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "activationErrorInfo" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) WhatsAppIntegrationRequest 
     - parameter async: (query) Create a WhatsApp integration in an asynchronous manner. If the parameter value is true, this initiates the generation of a new WhatsApp integration. An integration ID is returned, it can be used to query the integration. Check the integration&#39;s createStatus for Completed or Error to detect the create is finished. (optional, default to false)

     - returns: RequestBuilder<WhatsAppIntegration> 
     */
    open class func postConversationsMessagingIntegrationsWhatsappWithRequestBuilder(body: WhatsAppIntegrationRequest, async: Bool? = nil) -> RequestBuilder<WhatsAppIntegration> {
        let path = "/api/v2/conversations/messaging/integrations/whatsapp"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "async": async
            
        ])

        let requestBuilder: RequestBuilder<WhatsAppIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Set flagged reason on conversation participant to indicate bad conversation quality.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationParticipantFlaggedreason(conversationId: String, participantId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationParticipantFlaggedreasonWithRequestBuilder(conversationId: conversationId, participantId: participantId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Set flagged reason on conversation participant to indicate bad conversation quality.
     
     - PUT /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 

     - returns: RequestBuilder<Void> 
     */
    open class func putConversationParticipantFlaggedreasonWithRequestBuilder(conversationId: String, participantId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Set uuiData to be sent on future commands.
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) UUIData Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationsCallParticipantCommunicationUuidata(conversationId: String, participantId: String, communicationId: String, body: SetUuiDataRequest, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationsCallParticipantCommunicationUuidataWithRequestBuilder(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Set uuiData to be sent on future commands.
     
     - PUT /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter conversationId: (path) conversationId 
     - parameter participantId: (path) participantId 
     - parameter communicationId: (path) communicationId 
     - parameter body: (body) UUIData Request 

     - returns: RequestBuilder<Empty> 
     */
    open class func putConversationsCallParticipantCommunicationUuidataWithRequestBuilder(conversationId: String, participantId: String, communicationId: String, body: SetUuiDataRequest) -> RequestBuilder<Empty> {
        var path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(participantId)"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update conversation draft reply
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Draft 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationsEmailMessagesDraft(conversationId: String, body: EmailMessage, completion: @escaping ((_ data: EmailMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationsEmailMessagesDraftWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<EmailMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update conversation draft reply
     
     - PUT /api/v2/conversations/emails/{conversationId}/messages/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "inlineImage" : true,
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "textBody" : "aeiou",
  "htmlBody" : "aeiou",
  "historyIncluded" : true,
  "name" : "aeiou",
  "from" : "",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) Draft 

     - returns: RequestBuilder<EmailMessage> 
     */
    open class func putConversationsEmailMessagesDraftWithRequestBuilder(conversationId: String, body: EmailMessage) -> RequestBuilder<EmailMessage> {
        var path = "/api/v2/conversations/emails/{conversationId}/messages/draft"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) LineIntegrationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationsMessagingIntegrationsLineIntegrationId(integrationId: String, body: LineIntegrationRequest, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a LINE messenger integration
     
     - PUT /api/v2/conversations/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "selfUri" : "aeiou",
  "createError" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createStatus" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) LineIntegrationRequest 

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func putConversationsMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String, body: LineIntegrationRequest) -> RequestBuilder<LineIntegration> {
        var path = "/api/v2/conversations/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
