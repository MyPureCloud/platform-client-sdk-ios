//
// TaskManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TaskManagementAPI {
    
    
    /**
     Delete a workbin
     
     - parameter workbinId: (path) Workbin ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorkbin(workbinId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorkbinWithRequestBuilder(workbinId: workbinId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a workbin
     - DELETE /api/v2/taskmanagement/workbins/{workbinId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workbinId: (path) Workbin ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorkbinWithRequestBuilder(workbinId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorkitem(workitemId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorkitemWithRequestBuilder(workitemId: workitemId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a workitem
     - DELETE /api/v2/taskmanagement/workitems/{workitemId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workitemId: (path) Workitem ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorkitemWithRequestBuilder(workitemId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a bulk add job
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorkitemsBulkAddJob(bulkJobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a bulk add job
     - DELETE /api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a Bulk job
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorkitemsBulkTerminateJob(bulkJobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Bulk job
     - DELETE /api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorkitemsSchema(schemaId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a schema
     - DELETE /api/v2/taskmanagement/workitems/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Delete a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorktype(worktypeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorktypeWithRequestBuilder(worktypeId: worktypeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a worktype
     - DELETE /api/v2/taskmanagement/worktypes/{worktypeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter worktypeId: (path) Worktype id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorktypeWithRequestBuilder(worktypeId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a date based rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorktypeFlowsDatebasedRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a date based rule
     - DELETE /api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a rule
     - DELETE /api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorktypeFlowsOncreateRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a rule
     - DELETE /api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a status
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTaskmanagementWorktypeStatus(worktypeId: String, statusId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: worktypeId, statusId: statusId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a status
     - DELETE /api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: String, statusId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a workbin
     
     - parameter workbinId: (path) Workbin ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkbin(workbinId: String, completion: @escaping ((_ data: Workbin?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkbinWithRequestBuilder(workbinId: workbinId)
        requestBuilder.execute { (response: Response<Workbin>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a workbin
     - GET /api/v2/taskmanagement/workbins/{workbinId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter workbinId: (path) Workbin ID 

     - returns: RequestBuilder<Workbin> 
     */
    open class func getTaskmanagementWorkbinWithRequestBuilder(workbinId: String) -> RequestBuilder<Workbin> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workbin>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkbinHistory: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get a listing of a workbin's attribute change history
     
     - parameter workbinId: (path) Workbin ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkbinHistory(workbinId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkbinHistory? = nil, completion: @escaping ((_ data: WorkbinChangeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkbinHistoryWithRequestBuilder(workbinId: workbinId, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkbinChangeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a listing of a workbin's attribute change history
     - GET /api/v2/taskmanagement/workbins/{workbinId}/history
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  }, {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter workbinId: (path) Workbin ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkbinChangeListing> 
     */
    open class func getTaskmanagementWorkbinHistoryWithRequestBuilder(workbinId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkbinHistory? = nil) -> RequestBuilder<WorkbinChangeListing> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}/history"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkbinChangeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a version of a workbin
     
     - parameter workbinId: (path) Workbin ID 
     - parameter entityVersion: (path) Workbin version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkbinVersion(workbinId: String, entityVersion: Int, completion: @escaping ((_ data: WorkbinVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkbinVersionWithRequestBuilder(workbinId: workbinId, entityVersion: entityVersion)
        requestBuilder.execute { (response: Response<WorkbinVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a version of a workbin
     - GET /api/v2/taskmanagement/workbins/{workbinId}/versions/{entityVersion}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter workbinId: (path) Workbin ID 
     - parameter entityVersion: (path) Workbin version 

     - returns: RequestBuilder<WorkbinVersion> 
     */
    open class func getTaskmanagementWorkbinVersionWithRequestBuilder(workbinId: String, entityVersion: Int) -> RequestBuilder<WorkbinVersion> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}/versions/{entityVersion}"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let entityVersionPreEscape = "\(entityVersion)"
        let entityVersionPostEscape = entityVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{entityVersion}", with: entityVersionPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkbinVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkbinVersions: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get all versions of a workbin
     
     - parameter workbinId: (path) Workbin ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkbinVersions(workbinId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkbinVersions? = nil, completion: @escaping ((_ data: WorkbinVersionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkbinVersionsWithRequestBuilder(workbinId: workbinId, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkbinVersionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of a workbin
     - GET /api/v2/taskmanagement/workbins/{workbinId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "version" : 0
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "version" : 0
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter workbinId: (path) Workbin ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkbinVersionListing> 
     */
    open class func getTaskmanagementWorkbinVersionsWithRequestBuilder(workbinId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkbinVersions? = nil) -> RequestBuilder<WorkbinVersionListing> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}/versions"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkbinVersionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    public enum Expands_getTaskmanagementWorkitem: String { 
        case type = "type"
        case workbin = "workbin"
        case status = "status"
        case queue = "queue"
        case assignee = "assignee"
    }
    
    
    /**
     Get a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter expands: (query) Which fields to expand. Comma separated if more than one. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitem(workitemId: String, expands: Expands_getTaskmanagementWorkitem? = nil, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemWithRequestBuilder(workitemId: workitemId, expands: expands)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a workitem
     - GET /api/v2/taskmanagement/workitems/{workitemId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter expands: (query) Which fields to expand. Comma separated if more than one. (optional)

     - returns: RequestBuilder<Workitem> 
     */
    open class func getTaskmanagementWorkitemWithRequestBuilder(workitemId: String, expands: Expands_getTaskmanagementWorkitem? = nil) -> RequestBuilder<Workitem> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expands": expands?.rawValue
        ])

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkitemHistory: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get a listing of a workitem's attribute change history
     
     - parameter workitemId: (path) Workitem ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemHistory(workitemId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemHistory? = nil, completion: @escaping ((_ data: WorkitemChangeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemHistoryWithRequestBuilder(workitemId: workitemId, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkitemChangeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a listing of a workitem's attribute change history
     - GET /api/v2/taskmanagement/workitems/{workitemId}/history
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  }, {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkitemChangeListing> 
     */
    open class func getTaskmanagementWorkitemHistoryWithRequestBuilder(workitemId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemHistory? = nil) -> RequestBuilder<WorkitemChangeListing> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/history"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkitemChangeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    public enum Expands_getTaskmanagementWorkitemUserWrapups: String { 
        case wrapupcode = "wrapupCode"
    }
    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkitemUserWrapups: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get all wrapup codes added for the given user for a workitem.
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter userId: (path) The ID of the user 
     - parameter expands: (query) Which fields, if any, to expand. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemUserWrapups(workitemId: String, userId: String, expands: Expands_getTaskmanagementWorkitemUserWrapups? = nil, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemUserWrapups? = nil, completion: @escaping ((_ data: WorkitemWrapup?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemUserWrapupsWithRequestBuilder(workitemId: workitemId, userId: userId, expands: expands, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkitemWrapup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all wrapup codes added for the given user for a workitem.
     - GET /api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "wrapupCode" : "{}",
  "workitem" : "{}",
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter userId: (path) The ID of the user 
     - parameter expands: (query) Which fields, if any, to expand. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkitemWrapup> 
     */
    open class func getTaskmanagementWorkitemUserWrapupsWithRequestBuilder(workitemId: String, userId: String, expands: Expands_getTaskmanagementWorkitemUserWrapups? = nil, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemUserWrapups? = nil) -> RequestBuilder<WorkitemWrapup> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expands": expands?.rawValue, 
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkitemWrapup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a version of a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter entityVersion: (path) Workitem version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemVersion(workitemId: String, entityVersion: Int, completion: @escaping ((_ data: WorkitemVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemVersionWithRequestBuilder(workitemId: workitemId, entityVersion: entityVersion)
        requestBuilder.execute { (response: Response<WorkitemVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a version of a workitem
     - GET /api/v2/taskmanagement/workitems/{workitemId}/versions/{entityVersion}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "version" : 5,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter entityVersion: (path) Workitem version 

     - returns: RequestBuilder<WorkitemVersion> 
     */
    open class func getTaskmanagementWorkitemVersionWithRequestBuilder(workitemId: String, entityVersion: Int) -> RequestBuilder<WorkitemVersion> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/versions/{entityVersion}"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let entityVersionPreEscape = "\(entityVersion)"
        let entityVersionPostEscape = entityVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{entityVersion}", with: entityVersionPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkitemVersions: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get all versions of a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemVersions(workitemId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemVersions? = nil, completion: @escaping ((_ data: WorkitemVersionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemVersionsWithRequestBuilder(workitemId: workitemId, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkitemVersionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of a workitem
     - GET /api/v2/taskmanagement/workitems/{workitemId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "preferredAgents" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "schema" : "{}",
    "durationSeconds" : 6,
    "customFields" : {
      "key" : "{}"
    },
    "description" : "description",
    "language" : "{}",
    "externalTag" : "externalTag",
    "type" : "{}",
    "statusCategory" : "Open",
    "dateClosed" : "2000-01-23T04:56:07.000+00:00",
    "division" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateExpires" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "scoredAgents" : [ {
      "score" : 5,
      "agent" : "{}"
    }, {
      "score" : 5,
      "agent" : "{}"
    } ],
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reporter" : "{}",
    "externalContact" : "{}",
    "priority" : 0,
    "ttl" : 1,
    "version" : 5,
    "script" : "{}",
    "autoStatusTransitionDetail" : "{}",
    "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
    "alertTimeoutSeconds" : 5,
    "assignmentState" : "Unknown",
    "utilizationLabel" : "{}",
    "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "autoStatusTransition" : true,
    "assignee" : "{}",
    "workbin" : "{}",
    "queue" : "{}",
    "status" : "{}"
  }, {
    "preferredAgents" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "schema" : "{}",
    "durationSeconds" : 6,
    "customFields" : {
      "key" : "{}"
    },
    "description" : "description",
    "language" : "{}",
    "externalTag" : "externalTag",
    "type" : "{}",
    "statusCategory" : "Open",
    "dateClosed" : "2000-01-23T04:56:07.000+00:00",
    "division" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateExpires" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "scoredAgents" : [ {
      "score" : 5,
      "agent" : "{}"
    }, {
      "score" : 5,
      "agent" : "{}"
    } ],
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reporter" : "{}",
    "externalContact" : "{}",
    "priority" : 0,
    "ttl" : 1,
    "version" : 5,
    "script" : "{}",
    "autoStatusTransitionDetail" : "{}",
    "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
    "alertTimeoutSeconds" : 5,
    "assignmentState" : "Unknown",
    "utilizationLabel" : "{}",
    "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "autoStatusTransition" : true,
    "assignee" : "{}",
    "workbin" : "{}",
    "queue" : "{}",
    "status" : "{}"
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkitemVersionListing> 
     */
    open class func getTaskmanagementWorkitemVersionsWithRequestBuilder(workitemId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemVersions? = nil) -> RequestBuilder<WorkitemVersionListing> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/versions"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkitemVersionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    public enum Expands_getTaskmanagementWorkitemWrapups: String { 
        case wrapupcode = "wrapupCode"
    }
    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkitemWrapups: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get all wrapup codes added for all users for a workitem.
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter expands: (query) Which fields, if any, to expand. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemWrapups(workitemId: String, expands: Expands_getTaskmanagementWorkitemWrapups? = nil, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemWrapups? = nil, completion: @escaping ((_ data: WorkitemWrapupEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemWrapupsWithRequestBuilder(workitemId: workitemId, expands: expands, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorkitemWrapupEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all wrapup codes added for all users for a workitem.
     - GET /api/v2/taskmanagement/workitems/{workitemId}/wrapups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "wrapupCode" : "{}",
    "workitem" : "{}",
    "modifiedBy" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "user" : "{}"
  }, {
    "wrapupCode" : "{}",
    "workitem" : "{}",
    "modifiedBy" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "user" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter expands: (query) Which fields, if any, to expand. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorkitemWrapupEntityListing> 
     */
    open class func getTaskmanagementWorkitemWrapupsWithRequestBuilder(workitemId: String, expands: Expands_getTaskmanagementWorkitemWrapups? = nil, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemWrapups? = nil) -> RequestBuilder<WorkitemWrapupEntityListing> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/wrapups"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expands": expands?.rawValue, 
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkitemWrapupEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get the bulk add job associated with the job id.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsBulkAddJob(bulkJobId: String, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the bulk add job associated with the job id.
     - GET /api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func getTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: String) -> RequestBuilder<BulkJob> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get bulk add job results.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsBulkAddJobResults(bulkJobId: String, completion: @escaping ((_ data: BulkJobAddResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsBulkAddJobResultsWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<BulkJobAddResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get bulk add job results.
     - GET /api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "error" : "{}",
    "entity" : "{}"
  }, {
    "error" : "{}",
    "entity" : "{}"
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<BulkJobAddResponse> 
     */
    open class func getTaskmanagementWorkitemsBulkAddJobResultsWithRequestBuilder(bulkJobId: String) -> RequestBuilder<BulkJobAddResponse> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}/results"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJobAddResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorkitemsBulkJobsUsersMe: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    
    public enum Action_getTaskmanagementWorkitemsBulkJobsUsersMe: String { 
        case terminateWorkitems = "TerminateWorkitems"
        case addWorkitems = "AddWorkitems"
    }
    
    
    /**
     Get bulk jobs created by the currently logged in user.
     
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter action: (query) The bulk job action. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsBulkJobsUsersMe(after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemsBulkJobsUsersMe? = nil, action: Action_getTaskmanagementWorkitemsBulkJobsUsersMe? = nil, completion: @escaping ((_ data: BulkJobsListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsBulkJobsUsersMeWithRequestBuilder(after: after, pageSize: pageSize, sortOrder: sortOrder, action: action)
        requestBuilder.execute { (response: Response<BulkJobsListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get bulk jobs created by the currently logged in user.
     - GET /api/v2/taskmanagement/workitems/bulk/jobs/users/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "failedCount" : 1,
    "dateStarted" : "2000-01-23T04:56:07.000+00:00",
    "successfulCount" : 6,
    "dateFinished" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "action" : "TerminateWorkitems",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Idle",
    "totalCount" : 0
  }, {
    "failedCount" : 1,
    "dateStarted" : "2000-01-23T04:56:07.000+00:00",
    "successfulCount" : 6,
    "dateFinished" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "action" : "TerminateWorkitems",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Idle",
    "totalCount" : 0
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter action: (query) The bulk job action. (optional)

     - returns: RequestBuilder<BulkJobsListing> 
     */
    open class func getTaskmanagementWorkitemsBulkJobsUsersMeWithRequestBuilder(after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorkitemsBulkJobsUsersMe? = nil, action: Action_getTaskmanagementWorkitemsBulkJobsUsersMe? = nil) -> RequestBuilder<BulkJobsListing> {        
        let path = "/api/v2/taskmanagement/workitems/bulk/jobs/users/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "action": action?.rawValue
        ])

        let requestBuilder: RequestBuilder<BulkJobsListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get the bulk job associated with the job id.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsBulkTerminateJob(bulkJobId: String, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the bulk job associated with the job id.
     - GET /api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func getTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: String) -> RequestBuilder<BulkJob> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get bulk terminate job results.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsBulkTerminateJobResults(bulkJobId: String, completion: @escaping ((_ data: BulkJobTerminateResultsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsBulkTerminateJobResultsWithRequestBuilder(bulkJobId: bulkJobId)
        requestBuilder.execute { (response: Response<BulkJobTerminateResultsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get bulk terminate job results.
     - GET /api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "error" : "{}",
    "entity" : "{}"
  }, {
    "error" : "{}",
    "entity" : "{}"
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 

     - returns: RequestBuilder<BulkJobTerminateResultsResponse> 
     */
    open class func getTaskmanagementWorkitemsBulkTerminateJobResultsWithRequestBuilder(bulkJobId: String) -> RequestBuilder<BulkJobTerminateResultsResponse> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}/results"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJobTerminateResultsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get the workitem query job associated with the job id.
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsQueryJob(jobId: String, completion: @escaping ((_ data: WorkitemQueryJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsQueryJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<WorkitemQueryJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the workitem query job associated with the job id.
     - GET /api/v2/taskmanagement/workitems/query/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Queued",
  "error" : "{}"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<WorkitemQueryJobResponse> 
     */
    open class func getTaskmanagementWorkitemsQueryJobWithRequestBuilder(jobId: String) -> RequestBuilder<WorkitemQueryJobResponse> {        
        var path = "/api/v2/taskmanagement/workitems/query/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemQueryJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get results from for workitem query job 
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsQueryJobResults(jobId: String, completion: @escaping ((_ data: WorkitemPagedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsQueryJobResultsWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<WorkitemPagedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get results from for workitem query job 
     - GET /api/v2/taskmanagement/workitems/query/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "preferredAgents" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "schema" : "{}",
    "durationSeconds" : 6,
    "customFields" : {
      "key" : "{}"
    },
    "description" : "description",
    "language" : "{}",
    "externalTag" : "externalTag",
    "type" : "{}",
    "statusCategory" : "Open",
    "dateClosed" : "2000-01-23T04:56:07.000+00:00",
    "division" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateExpires" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "scoredAgents" : [ {
      "score" : 5,
      "agent" : "{}"
    }, {
      "score" : 5,
      "agent" : "{}"
    } ],
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reporter" : "{}",
    "externalContact" : "{}",
    "priority" : 0,
    "ttl" : 1,
    "script" : "{}",
    "autoStatusTransitionDetail" : "{}",
    "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
    "alertTimeoutSeconds" : 5,
    "assignmentState" : "Unknown",
    "utilizationLabel" : "{}",
    "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "autoStatusTransition" : true,
    "assignee" : "{}",
    "workbin" : "{}",
    "queue" : "{}",
    "status" : "{}"
  }, {
    "preferredAgents" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "schema" : "{}",
    "durationSeconds" : 6,
    "customFields" : {
      "key" : "{}"
    },
    "description" : "description",
    "language" : "{}",
    "externalTag" : "externalTag",
    "type" : "{}",
    "statusCategory" : "Open",
    "dateClosed" : "2000-01-23T04:56:07.000+00:00",
    "division" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateExpires" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "scoredAgents" : [ {
      "score" : 5,
      "agent" : "{}"
    }, {
      "score" : 5,
      "agent" : "{}"
    } ],
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reporter" : "{}",
    "externalContact" : "{}",
    "priority" : 0,
    "ttl" : 1,
    "script" : "{}",
    "autoStatusTransitionDetail" : "{}",
    "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
    "alertTimeoutSeconds" : 5,
    "assignmentState" : "Unknown",
    "utilizationLabel" : "{}",
    "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "autoStatusTransition" : true,
    "assignee" : "{}",
    "workbin" : "{}",
    "queue" : "{}",
    "status" : "{}"
  } ],
  "pageSize" : 0
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<WorkitemPagedEntityListing> 
     */
    open class func getTaskmanagementWorkitemsQueryJobResultsWithRequestBuilder(jobId: String) -> RequestBuilder<WorkitemPagedEntityListing> {        
        var path = "/api/v2/taskmanagement/workitems/query/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemPagedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchema(schemaId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a schema
     - GET /api/v2/taskmanagement/workitems/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a specific version of a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemaVersion(schemaId: String, versionId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemaVersionWithRequestBuilder(schemaId: schemaId, versionId: versionId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific version of a schema
     - GET /api/v2/taskmanagement/workitems/schemas/{schemaId}/versions/{versionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getTaskmanagementWorkitemsSchemaVersionWithRequestBuilder(schemaId: String, versionId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions/{versionId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get all versions of a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemaVersions(schemaId: String, completion: @escaping ((_ data: DataSchemaListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemaVersionsWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchemaListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of a schema
     - GET /api/v2/taskmanagement/workitems/schemas/{schemaId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchemaListing> 
     */
    open class func getTaskmanagementWorkitemsSchemaVersionsWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchemaListing> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchemaListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get a list of schemas.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemas(completion: @escaping ((_ data: DataSchemaListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemasWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataSchemaListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of schemas.
     - GET /api/v2/taskmanagement/workitems/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<DataSchemaListing> 
     */
    open class func getTaskmanagementWorkitemsSchemasWithRequestBuilder() -> RequestBuilder<DataSchemaListing> {        
        let path = "/api/v2/taskmanagement/workitems/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchemaListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a specific named core type.
     
     - parameter coreTypeName: (path) Name of the core type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemasCoretype(coreTypeName: String, completion: @escaping ((_ data: Coretype?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemasCoretypeWithRequestBuilder(coreTypeName: coreTypeName)
        requestBuilder.execute { (response: Response<Coretype>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific named core type.
     - GET /api/v2/taskmanagement/workitems/schemas/coretypes/{coreTypeName}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "current" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0,
  "itemValidationFields" : [ "itemValidationFields", "itemValidationFields" ],
  "itemValidationLimits" : "\"validationLimits\": {\n     \"minLength\": {\"min\": 1, \"max\": 100},\n     \"maxLength\": {\"min\": 1, \"max\": 100}\n}",
  "validationFields" : [ "validationFields", "validationFields" ],
  "validationLimits" : "\"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}"
}, statusCode=200}]
     
     - parameter coreTypeName: (path) Name of the core type 

     - returns: RequestBuilder<Coretype> 
     */
    open class func getTaskmanagementWorkitemsSchemasCoretypeWithRequestBuilder(coreTypeName: String) -> RequestBuilder<Coretype> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/coretypes/{coreTypeName}"
        let coreTypeNamePreEscape = "\(coreTypeName)"
        let coreTypeNamePostEscape = coreTypeNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{coreTypeName}", with: coreTypeNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Coretype>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get the core types from which all schemas are built.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemasCoretypes(completion: @escaping ((_ data: CoretypeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemasCoretypesWithRequestBuilder()
        requestBuilder.execute { (response: Response<CoretypeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the core types from which all schemas are built.
     - GET /api/v2/taskmanagement/workitems/schemas/coretypes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "schema" : "{}",
    "current" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "version" : 0,
    "itemValidationFields" : [ "itemValidationFields", "itemValidationFields" ],
    "itemValidationLimits" : "\"validationLimits\": {\n     \"minLength\": {\"min\": 1, \"max\": 100},\n     \"maxLength\": {\"min\": 1, \"max\": 100}\n}",
    "validationFields" : [ "validationFields", "validationFields" ],
    "validationLimits" : "\"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}"
  }, {
    "schema" : "{}",
    "current" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "version" : 0,
    "itemValidationFields" : [ "itemValidationFields", "itemValidationFields" ],
    "itemValidationLimits" : "\"validationLimits\": {\n     \"minLength\": {\"min\": 1, \"max\": 100},\n     \"maxLength\": {\"min\": 1, \"max\": 100}\n}",
    "validationFields" : [ "validationFields", "validationFields" ],
    "validationLimits" : "\"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<CoretypeListing> 
     */
    open class func getTaskmanagementWorkitemsSchemasCoretypesWithRequestBuilder() -> RequestBuilder<CoretypeListing> {        
        let path = "/api/v2/taskmanagement/workitems/schemas/coretypes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CoretypeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get quantitative limits on schemas
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorkitemsSchemasLimits(completion: @escaping ((_ data: SchemaQuantityLimits?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorkitemsSchemasLimitsWithRequestBuilder()
        requestBuilder.execute { (response: Response<SchemaQuantityLimits>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get quantitative limits on schemas
     - GET /api/v2/taskmanagement/workitems/schemas/limits
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "minSchemaDescriptionCharacters" : 7,
  "maxFieldDescriptionCharacters" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "minFieldDescriptionCharacters" : 1,
  "maxNumberOfFieldsPerSchema" : 2,
  "minSchemaNameCharacters" : 5,
  "minFieldNameCharacters" : 0,
  "maxNumberOfSchemasPerOrg" : 3,
  "name" : "name",
  "id" : "id",
  "maxFieldNameCharacters" : 6,
  "maxSchemaDescriptionCharacters" : 9,
  "maxSchemaNameCharacters" : 2,
  "maxNumberOfFieldsPerOrg" : 4
}, statusCode=200}]

     - returns: RequestBuilder<SchemaQuantityLimits> 
     */
    open class func getTaskmanagementWorkitemsSchemasLimitsWithRequestBuilder() -> RequestBuilder<SchemaQuantityLimits> {        
        let path = "/api/v2/taskmanagement/workitems/schemas/limits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SchemaQuantityLimits>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    public enum Expands_getTaskmanagementWorktype: String { 
        case defaultqueue = "defaultQueue"
        case defaultskills = "defaultSkills"
        case defaultlanguage = "defaultLanguage"
        case schema = "schema"
        case flow = "flow"
        case defaultscript = "defaultScript"
    }
    
    /**
     Get a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter expands: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktype(worktypeId: String, expands: [String]? = nil, completion: @escaping ((_ data: Worktype?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeWithRequestBuilder(worktypeId: worktypeId, expands: expands)
        requestBuilder.execute { (response: Response<Worktype>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "defaultDueDurationSeconds" : 1,
  "defaultTtlSeconds" : 5,
  "ruleSettings" : "{}",
  "description" : "description",
  "defaultWorkbin" : "{}",
  "division" : "{}",
  "defaultStatus" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}",
  "serviceLevelTarget" : 2,
  "defaultSkills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "defaultPriority" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "defaultQueue" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "defaultExpirationSeconds" : 6,
  "defaultScript" : "{}",
  "name" : "name",
  "statuses" : [ {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  }, {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  } ],
  "defaultDurationSeconds" : 0,
  "assignmentEnabled" : true
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter expands: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<Worktype> 
     */
    open class func getTaskmanagementWorktypeWithRequestBuilder(worktypeId: String, expands: [String]? = nil) -> RequestBuilder<Worktype> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "expands": expands
        ])

        let requestBuilder: RequestBuilder<Worktype>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a date based rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsDatebasedRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: WorkitemDateBasedRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<WorkitemDateBasedRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a date based rule
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<WorkitemDateBasedRule> 
     */
    open class func getTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<WorkitemDateBasedRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemDateBasedRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get all date based rules for a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsDatebasedRules(worktypeId: String, after: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: WorkitemDateBasedRuleListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsDatebasedRulesWithRequestBuilder(worktypeId: worktypeId, after: after, pageSize: pageSize)
        requestBuilder.execute { (response: Response<WorkitemDateBasedRuleListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all date based rules for a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "condition" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  }, {
    "condition" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)

     - returns: RequestBuilder<WorkitemDateBasedRuleListing> 
     */
    open class func getTaskmanagementWorktypeFlowsDatebasedRulesWithRequestBuilder(worktypeId: String, after: String? = nil, pageSize: Int? = nil) -> RequestBuilder<WorkitemDateBasedRuleListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WorkitemDateBasedRuleListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get an attribute change rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: WorkitemOnAttributeChangeRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<WorkitemOnAttributeChangeRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an attribute change rule
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<WorkitemOnAttributeChangeRule> 
     */
    open class func getTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<WorkitemOnAttributeChangeRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnAttributeChangeRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get all attribute-change rules for a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsOnattributechangeRules(worktypeId: String, after: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: WorkitemOnAttributeChangeRuleListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsOnattributechangeRulesWithRequestBuilder(worktypeId: worktypeId, after: after, pageSize: pageSize)
        requestBuilder.execute { (response: Response<WorkitemOnAttributeChangeRuleListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all attribute-change rules for a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "condition" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  }, {
    "condition" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)

     - returns: RequestBuilder<WorkitemOnAttributeChangeRuleListing> 
     */
    open class func getTaskmanagementWorktypeFlowsOnattributechangeRulesWithRequestBuilder(worktypeId: String, after: String? = nil, pageSize: Int? = nil) -> RequestBuilder<WorkitemOnAttributeChangeRuleListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WorkitemOnAttributeChangeRuleListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get an on-create rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsOncreateRule(worktypeId: String, ruleId: String, completion: @escaping ((_ data: WorkitemOnCreateRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId)
        requestBuilder.execute { (response: Response<WorkitemOnCreateRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an on-create rule
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<WorkitemOnCreateRule> 
     */
    open class func getTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: String, ruleId: String) -> RequestBuilder<WorkitemOnCreateRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnCreateRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Get all on-create rules for a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeFlowsOncreateRules(worktypeId: String, after: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: WorkitemOnCreateRuleListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeFlowsOncreateRulesWithRequestBuilder(worktypeId: worktypeId, after: after, pageSize: pageSize)
        requestBuilder.execute { (response: Response<WorkitemOnCreateRuleListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all on-create rules for a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "action" : "{}",
    "worktype" : "{}",
    "id" : "id",
    "type" : "OnCreate"
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)

     - returns: RequestBuilder<WorkitemOnCreateRuleListing> 
     */
    open class func getTaskmanagementWorktypeFlowsOncreateRulesWithRequestBuilder(worktypeId: String, after: String? = nil, pageSize: Int? = nil) -> RequestBuilder<WorkitemOnCreateRuleListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WorkitemOnCreateRuleListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorktypeHistory: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    
    
    public enum Fields_getTaskmanagementWorktypeHistory: String { 
        case name = "name"
        case serviceleveltarget = "serviceLevelTarget"
        case defaultworkbinid = "defaultWorkbinId"
        case defaultduedurationseconds = "defaultDueDurationSeconds"
        case defaultexpirationseconds = "defaultExpirationSeconds"
        case defaultpriority = "defaultPriority"
        case defaultlanguageid = "defaultLanguageId"
        case defaultskillids = "defaultSkillIds"
        case defaultqueueid = "defaultQueueId"
        case assignmentenabled = "assignmentEnabled"
        case defaultstatusid = "defaultStatusId"
        case statuses = "statuses"
    }
    
    /**
     Get a listing of a worktype's attribute change history
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter fields: (query) Comma-separated list of fields. The response will contain only versions created as a result of changes to these fields. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeHistory(worktypeId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorktypeHistory? = nil, fields: [String]? = nil, completion: @escaping ((_ data: WorktypeChangeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeHistoryWithRequestBuilder(worktypeId: worktypeId, after: after, pageSize: pageSize, sortOrder: sortOrder, fields: fields)
        requestBuilder.execute { (response: Response<WorktypeChangeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a listing of a worktype's attribute change history
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/history
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  }, {
    "delta" : "{}",
    "modifiedBy" : "{}",
    "version" : 0
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter fields: (query) Comma-separated list of fields. The response will contain only versions created as a result of changes to these fields. (optional)

     - returns: RequestBuilder<WorktypeChangeListing> 
     */
    open class func getTaskmanagementWorktypeHistoryWithRequestBuilder(worktypeId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorktypeHistory? = nil, fields: [String]? = nil) -> RequestBuilder<WorktypeChangeListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/history"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<WorktypeChangeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a status
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeStatus(worktypeId: String, statusId: String, completion: @escaping ((_ data: WorkitemStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: worktypeId, statusId: statusId)
        requestBuilder.execute { (response: Response<WorkitemStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a status
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultDestinationStatus" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "worktype" : "{}",
  "destinationStatuses" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "id" : "id",
  "category" : "Open",
  "statusTransitionDelaySeconds" : 0,
  "autoTerminateWorkitem" : true,
  "statusTransitionTime" : "statusTransitionTime"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 

     - returns: RequestBuilder<WorkitemStatus> 
     */
    open class func getTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: String, statusId: String) -> RequestBuilder<WorkitemStatus> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get list of statuses for this worktype.
     
     - parameter worktypeId: (path) Worktype id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeStatuses(worktypeId: String, completion: @escaping ((_ data: WorkitemStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeStatusesWithRequestBuilder(worktypeId: worktypeId)
        requestBuilder.execute { (response: Response<WorkitemStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of statuses for this worktype.
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/statuses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  }, {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 

     - returns: RequestBuilder<WorkitemStatusListing> 
     */
    open class func getTaskmanagementWorktypeStatusesWithRequestBuilder(worktypeId: String) -> RequestBuilder<WorkitemStatusListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a version of a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter entityVersion: (path) Worktype version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeVersion(worktypeId: String, entityVersion: Int, completion: @escaping ((_ data: WorktypeVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeVersionWithRequestBuilder(worktypeId: worktypeId, entityVersion: entityVersion)
        requestBuilder.execute { (response: Response<WorktypeVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a version of a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/versions/{entityVersion}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "defaultDueDurationSeconds" : 1,
  "defaultTtlSeconds" : 5,
  "ruleSettings" : "{}",
  "description" : "description",
  "defaultWorkbin" : "{}",
  "division" : "{}",
  "defaultStatus" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}",
  "serviceLevelTarget" : 2,
  "defaultSkills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "defaultPriority" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "defaultQueue" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 7,
  "defaultExpirationSeconds" : 6,
  "defaultScript" : "{}",
  "name" : "name",
  "statuses" : [ {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  }, {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  } ],
  "defaultDurationSeconds" : 0,
  "assignmentEnabled" : true
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter entityVersion: (path) Worktype version 

     - returns: RequestBuilder<WorktypeVersion> 
     */
    open class func getTaskmanagementWorktypeVersionWithRequestBuilder(worktypeId: String, entityVersion: Int) -> RequestBuilder<WorktypeVersion> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/versions/{entityVersion}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let entityVersionPreEscape = "\(entityVersion)"
        let entityVersionPostEscape = entityVersionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{entityVersion}", with: entityVersionPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorktypeVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortOrder_getTaskmanagementWorktypeVersions: String { 
        case ascending = "ascending"
        case descending = "descending"
    }
    
    
    /**
     Get all versions of a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskmanagementWorktypeVersions(worktypeId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorktypeVersions? = nil, completion: @escaping ((_ data: WorktypeVersionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTaskmanagementWorktypeVersionsWithRequestBuilder(worktypeId: worktypeId, after: after, pageSize: pageSize, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<WorktypeVersionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of a worktype
     - GET /api/v2/taskmanagement/worktypes/{worktypeId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "schema" : "{}",
    "defaultDueDurationSeconds" : 1,
    "defaultTtlSeconds" : 5,
    "ruleSettings" : "{}",
    "description" : "description",
    "defaultWorkbin" : "{}",
    "division" : "{}",
    "defaultStatus" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}",
    "serviceLevelTarget" : 2,
    "defaultSkills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "defaultPriority" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "defaultQueue" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 7,
    "defaultExpirationSeconds" : 6,
    "defaultScript" : "{}",
    "name" : "name",
    "statuses" : [ {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    }, {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    } ],
    "defaultDurationSeconds" : 0,
    "assignmentEnabled" : true
  }, {
    "schema" : "{}",
    "defaultDueDurationSeconds" : 1,
    "defaultTtlSeconds" : 5,
    "ruleSettings" : "{}",
    "description" : "description",
    "defaultWorkbin" : "{}",
    "division" : "{}",
    "defaultStatus" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}",
    "serviceLevelTarget" : 2,
    "defaultSkills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "defaultPriority" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "defaultQueue" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 7,
    "defaultExpirationSeconds" : 6,
    "defaultScript" : "{}",
    "name" : "name",
    "statuses" : [ {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    }, {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    } ],
    "defaultDurationSeconds" : 0,
    "assignmentEnabled" : true
  } ],
  "selfUri" : "selfUri",
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an &#x60;after&#x60; key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200. (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<WorktypeVersionListing> 
     */
    open class func getTaskmanagementWorktypeVersionsWithRequestBuilder(worktypeId: String, after: String? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getTaskmanagementWorktypeVersions? = nil) -> RequestBuilder<WorktypeVersionListing> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/versions"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorktypeVersionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update the attributes of a workbin
     
     - parameter workbinId: (path) Workbin ID 
     - parameter body: (body) Json with attributes and their new values: {\&quot;description\&quot;:\&quot;new description\&quot;, \&quot;name\&quot;:\&quot;new name\&quot;}. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkbin(workbinId: String, body: WorkbinUpdate, completion: @escaping ((_ data: Workbin?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkbinWithRequestBuilder(workbinId: workbinId, body: body)
        requestBuilder.execute { (response: Response<Workbin>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a workbin
     - PATCH /api/v2/taskmanagement/workbins/{workbinId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter workbinId: (path) Workbin ID 
     - parameter body: (body) Json with attributes and their new values: {\&quot;description\&quot;:\&quot;new description\&quot;, \&quot;name\&quot;:\&quot;new name\&quot;}. 

     - returns: RequestBuilder<Workbin> 
     */
    open class func patchTaskmanagementWorkbinWithRequestBuilder(workbinId: String, body: WorkbinUpdate) -> RequestBuilder<Workbin> {        
        var path = "/api/v2/taskmanagement/workbins/{workbinId}"
        let workbinIdPreEscape = "\(workbinId)"
        let workbinIdPostEscape = workbinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workbinId}", with: workbinIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workbin>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update the attributes of a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Workitem 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitem(workitemId: String, body: WorkitemUpdate, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemWithRequestBuilder(workitemId: workitemId, body: body)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a workitem
     - PATCH /api/v2/taskmanagement/workitems/{workitemId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Workitem 

     - returns: RequestBuilder<Workitem> 
     */
    open class func patchTaskmanagementWorkitemWithRequestBuilder(workitemId: String, body: WorkitemUpdate) -> RequestBuilder<Workitem> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Attempts to manually assign a specified workitem to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Targeted user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitemAssignment(workitemId: String, body: WorkitemManualAssign, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemAssignmentWithRequestBuilder(workitemId: workitemId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Attempts to manually assign a specified workitem to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.
     - PATCH /api/v2/taskmanagement/workitems/{workitemId}/assignment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Targeted user 

     - returns: RequestBuilder<Void> 
     */
    open class func patchTaskmanagementWorkitemAssignmentWithRequestBuilder(workitemId: String, body: WorkitemManualAssign) -> RequestBuilder<Void> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/assignment"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Add/Remove a wrapup code for a given user in a workitem.
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter userId: (path) The ID of the user 
     - parameter body: (body) Request body to add/remove a wrapup code for a workitem 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitemUserWrapups(workitemId: String, userId: String, body: WorkitemWrapupUpdate, completion: @escaping ((_ data: WorkitemWrapup?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemUserWrapupsWithRequestBuilder(workitemId: workitemId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<WorkitemWrapup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add/Remove a wrapup code for a given user in a workitem.
     - PATCH /api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "wrapupCode" : "{}",
  "workitem" : "{}",
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter userId: (path) The ID of the user 
     - parameter body: (body) Request body to add/remove a wrapup code for a workitem 

     - returns: RequestBuilder<WorkitemWrapup> 
     */
    open class func patchTaskmanagementWorkitemUserWrapupsWithRequestBuilder(workitemId: String, userId: String, body: WorkitemWrapupUpdate) -> RequestBuilder<WorkitemWrapup> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemWrapup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add/Remove a wrapup code for the current user in a workitem.
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter body: (body) Request body to add/remove the wrapup code for workitem 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitemUsersMeWrapups(workitemId: String, body: WorkitemWrapupUpdate, completion: @escaping ((_ data: WorkitemWrapup?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemUsersMeWrapupsWithRequestBuilder(workitemId: workitemId, body: body)
        requestBuilder.execute { (response: Response<WorkitemWrapup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add/Remove a wrapup code for the current user in a workitem.
     - PATCH /api/v2/taskmanagement/workitems/{workitemId}/users/me/wrapups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "wrapupCode" : "{}",
  "workitem" : "{}",
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) The ID of the Workitem. 
     - parameter body: (body) Request body to add/remove the wrapup code for workitem 

     - returns: RequestBuilder<WorkitemWrapup> 
     */
    open class func patchTaskmanagementWorkitemUsersMeWrapupsWithRequestBuilder(workitemId: String, body: WorkitemWrapupUpdate) -> RequestBuilder<WorkitemWrapup> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/users/me/wrapups"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemWrapup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update workitem bulk add job.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter body: (body) Bulk add job update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitemsBulkAddJob(bulkJobId: String, body: BulkJobUpdate, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: bulkJobId, body: body)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update workitem bulk add job.
     - PATCH /api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter body: (body) Bulk add job update request 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func patchTaskmanagementWorkitemsBulkAddJobWithRequestBuilder(bulkJobId: String, body: BulkJobUpdate) -> RequestBuilder<BulkJob> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update workitem bulk terminate job.
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter body: (body) Bulk job update request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorkitemsBulkTerminateJob(bulkJobId: String, body: BulkJobUpdate, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: bulkJobId, body: body)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update workitem bulk terminate job.
     - PATCH /api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter bulkJobId: (path) Bulk job id 
     - parameter body: (body) Bulk job update request 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func patchTaskmanagementWorkitemsBulkTerminateJobWithRequestBuilder(bulkJobId: String, body: BulkJobUpdate) -> RequestBuilder<BulkJob> {        
        var path = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}"
        let bulkJobIdPreEscape = "\(bulkJobId)"
        let bulkJobIdPostEscape = bulkJobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bulkJobId}", with: bulkJobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update the attributes of a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Worktype 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorktype(worktypeId: String, body: WorktypeUpdate, completion: @escaping ((_ data: Worktype?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorktypeWithRequestBuilder(worktypeId: worktypeId, body: body)
        requestBuilder.execute { (response: Response<Worktype>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a worktype
     - PATCH /api/v2/taskmanagement/worktypes/{worktypeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "defaultDueDurationSeconds" : 1,
  "defaultTtlSeconds" : 5,
  "ruleSettings" : "{}",
  "description" : "description",
  "defaultWorkbin" : "{}",
  "division" : "{}",
  "defaultStatus" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}",
  "serviceLevelTarget" : 2,
  "defaultSkills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "defaultPriority" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "defaultQueue" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "defaultExpirationSeconds" : 6,
  "defaultScript" : "{}",
  "name" : "name",
  "statuses" : [ {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  }, {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  } ],
  "defaultDurationSeconds" : 0,
  "assignmentEnabled" : true
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Worktype 

     - returns: RequestBuilder<Worktype> 
     */
    open class func patchTaskmanagementWorktypeWithRequestBuilder(worktypeId: String, body: WorktypeUpdate) -> RequestBuilder<Worktype> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Worktype>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the attributes of a date based rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorktypeFlowsDatebasedRule(worktypeId: String, ruleId: String, body: WorkitemDateBasedRuleUpdate, completion: @escaping ((_ data: WorkitemDateBasedRule?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId, body: body)
        requestBuilder.execute { (response: Response<WorkitemDateBasedRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a date based rule
     - PATCH /api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemDateBasedRule> 
     */
    open class func patchTaskmanagementWorktypeFlowsDatebasedRuleWithRequestBuilder(worktypeId: String, ruleId: String, body: WorkitemDateBasedRuleUpdate) -> RequestBuilder<WorkitemDateBasedRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemDateBasedRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the attributes of a rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId: String, ruleId: String, body: WorkitemOnAttributeChangeRuleUpdate, completion: @escaping ((_ data: WorkitemOnAttributeChangeRule?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId, body: body)
        requestBuilder.execute { (response: Response<WorkitemOnAttributeChangeRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a rule
     - PATCH /api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemOnAttributeChangeRule> 
     */
    open class func patchTaskmanagementWorktypeFlowsOnattributechangeRuleWithRequestBuilder(worktypeId: String, ruleId: String, body: WorkitemOnAttributeChangeRuleUpdate) -> RequestBuilder<WorkitemOnAttributeChangeRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnAttributeChangeRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the attributes of a rule
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorktypeFlowsOncreateRule(worktypeId: String, ruleId: String, body: WorkitemOnCreateRuleUpdate, completion: @escaping ((_ data: WorkitemOnCreateRule?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: worktypeId, ruleId: ruleId, body: body)
        requestBuilder.execute { (response: Response<WorkitemOnCreateRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a rule
     - PATCH /api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter ruleId: (path) ruleId 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemOnCreateRule> 
     */
    open class func patchTaskmanagementWorktypeFlowsOncreateRuleWithRequestBuilder(worktypeId: String, ruleId: String, body: WorkitemOnCreateRuleUpdate) -> RequestBuilder<WorkitemOnCreateRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnCreateRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Update the attributes of a status
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 
     - parameter body: (body) Status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTaskmanagementWorktypeStatus(worktypeId: String, statusId: String, body: WorkitemStatusUpdate, completion: @escaping ((_ data: WorkitemStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: worktypeId, statusId: statusId, body: body)
        requestBuilder.execute { (response: Response<WorkitemStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the attributes of a status
     - PATCH /api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultDestinationStatus" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "worktype" : "{}",
  "destinationStatuses" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "id" : "id",
  "category" : "Open",
  "statusTransitionDelaySeconds" : 0,
  "autoTerminateWorkitem" : true,
  "statusTransitionTime" : "statusTransitionTime"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter statusId: (path) Status id 
     - parameter body: (body) Status 

     - returns: RequestBuilder<WorkitemStatus> 
     */
    open class func patchTaskmanagementWorktypeStatusWithRequestBuilder(worktypeId: String, statusId: String, body: WorkitemStatusUpdate) -> RequestBuilder<WorkitemStatus> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a workbin
     
     - parameter body: (body) Workbin 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkbins(body: WorkbinCreate, completion: @escaping ((_ data: Workbin?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkbinsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Workbin>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a workbin
     - POST /api/v2/taskmanagement/workbins
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=201}]
     
     - parameter body: (body) Workbin 

     - returns: RequestBuilder<Workbin> 
     */
    open class func postTaskmanagementWorkbinsWithRequestBuilder(body: WorkbinCreate) -> RequestBuilder<Workbin> {        
        let path = "/api/v2/taskmanagement/workbins"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workbin>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for workbins
     
     - parameter body: (body) QueryPostRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkbinsQuery(body: WorkbinQueryRequest, completion: @escaping ((_ data: WorkbinQueryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkbinsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WorkbinQueryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for workbins
     - POST /api/v2/taskmanagement/workbins/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id"
  } ],
  "selfUri" : "selfUri",
  "count" : 0,
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter body: (body) QueryPostRequest 

     - returns: RequestBuilder<WorkbinQueryEntityListing> 
     */
    open class func postTaskmanagementWorkbinsQueryWithRequestBuilder(body: WorkbinQueryRequest) -> RequestBuilder<WorkbinQueryEntityListing> {        
        let path = "/api/v2/taskmanagement/workbins/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkbinQueryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Cancel the assignment process for a workitem that is currently queued for assignment through ACD.
     
     - parameter workitemId: (path) Workitem ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemAcdCancel(workitemId: String, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemAcdCancelWithRequestBuilder(workitemId: workitemId)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Cancel the assignment process for a workitem that is currently queued for assignment through ACD.
     - POST /api/v2/taskmanagement/workitems/{workitemId}/acd/cancel
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 

     - returns: RequestBuilder<Workitem> 
     */
    open class func postTaskmanagementWorkitemAcdCancelWithRequestBuilder(workitemId: String) -> RequestBuilder<Workitem> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/acd/cancel"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Disconnect the assignee of the workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemDisconnect(workitemId: String, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemDisconnectWithRequestBuilder(workitemId: workitemId)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Disconnect the assignee of the workitem
     - POST /api/v2/taskmanagement/workitems/{workitemId}/disconnect
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 

     - returns: RequestBuilder<Workitem> 
     */
    open class func postTaskmanagementWorkitemDisconnectWithRequestBuilder(workitemId: String) -> RequestBuilder<Workitem> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/disconnect"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Terminate a workitem
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Terminated request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemTerminate(workitemId: String, body: WorkitemTerminate? = nil, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemTerminateWithRequestBuilder(workitemId: workitemId, body: body)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Terminate a workitem
     - POST /api/v2/taskmanagement/workitems/{workitemId}/terminate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter workitemId: (path) Workitem ID 
     - parameter body: (body) Terminated request (optional)

     - returns: RequestBuilder<Workitem> 
     */
    open class func postTaskmanagementWorkitemTerminateWithRequestBuilder(workitemId: String, body: WorkitemTerminate? = nil) -> RequestBuilder<Workitem> {        
        var path = "/api/v2/taskmanagement/workitems/{workitemId}/terminate"
        let workitemIdPreEscape = "\(workitemId)"
        let workitemIdPostEscape = workitemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workitemId}", with: workitemIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a workitem
     
     - parameter body: (body) Workitem 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitems(body: WorkitemCreate, completion: @escaping ((_ data: Workitem?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Workitem>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a workitem
     - POST /api/v2/taskmanagement/workitems
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preferredAgents" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "schema" : "{}",
  "durationSeconds" : 6,
  "customFields" : {
    "key" : "{}"
  },
  "description" : "description",
  "language" : "{}",
  "externalTag" : "externalTag",
  "type" : "{}",
  "statusCategory" : "Open",
  "dateClosed" : "2000-01-23T04:56:07.000+00:00",
  "division" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateExpires" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "scoredAgents" : [ {
    "score" : 5,
    "agent" : "{}"
  }, {
    "score" : 5,
    "agent" : "{}"
  } ],
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reporter" : "{}",
  "externalContact" : "{}",
  "priority" : 0,
  "ttl" : 1,
  "script" : "{}",
  "autoStatusTransitionDetail" : "{}",
  "dateStatusChanged" : "2000-01-23T04:56:07.000+00:00",
  "alertTimeoutSeconds" : 5,
  "assignmentState" : "Unknown",
  "utilizationLabel" : "{}",
  "dateAssignmentStateChanged" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "autoStatusTransition" : true,
  "assignee" : "{}",
  "workbin" : "{}",
  "queue" : "{}",
  "status" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Workitem 

     - returns: RequestBuilder<Workitem> 
     */
    open class func postTaskmanagementWorkitemsWithRequestBuilder(body: WorkitemCreate) -> RequestBuilder<Workitem> {        
        let path = "/api/v2/taskmanagement/workitems"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workitem>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a workitem bulk add job.
     
     - parameter body: (body) Bulk job definition. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemsBulkAddJobs(body: BulkJobAddRequest, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemsBulkAddJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a workitem bulk add job.
     - POST /api/v2/taskmanagement/workitems/bulk/add/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Bulk job definition. 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func postTaskmanagementWorkitemsBulkAddJobsWithRequestBuilder(body: BulkJobAddRequest) -> RequestBuilder<BulkJob> {        
        let path = "/api/v2/taskmanagement/workitems/bulk/add/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a workitem bulk terminate job.
     
     - parameter body: (body) Bulk job definition. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemsBulkTerminateJobs(body: BulkJobTerminateRequest, completion: @escaping ((_ data: BulkJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemsBulkTerminateJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a workitem bulk terminate job.
     - POST /api/v2/taskmanagement/workitems/bulk/terminate/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failedCount" : 1,
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "successfulCount" : 6,
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "action" : "TerminateWorkitems",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Idle",
  "totalCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Bulk job definition. 

     - returns: RequestBuilder<BulkJob> 
     */
    open class func postTaskmanagementWorkitemsBulkTerminateJobsWithRequestBuilder(body: BulkJobTerminateRequest) -> RequestBuilder<BulkJob> {        
        let path = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a workitem query job
     
     - parameter body: (body) WorkitemQueryJobCreate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemsQueryJobs(body: WorkitemQueryJobCreate, completion: @escaping ((_ data: WorkitemQueryJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemsQueryJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WorkitemQueryJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a workitem query job
     - POST /api/v2/taskmanagement/workitems/query/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "dateFinished" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "Queued",
  "error" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) WorkitemQueryJobCreate 

     - returns: RequestBuilder<WorkitemQueryJobResponse> 
     */
    open class func postTaskmanagementWorkitemsQueryJobsWithRequestBuilder(body: WorkitemQueryJobCreate) -> RequestBuilder<WorkitemQueryJobResponse> {        
        let path = "/api/v2/taskmanagement/workitems/query/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemQueryJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a schema
     
     - parameter body: (body) Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorkitemsSchemas(body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorkitemsSchemasWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a schema
     - POST /api/v2/taskmanagement/workitems/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func postTaskmanagementWorkitemsSchemasWithRequestBuilder(body: DataSchema) -> RequestBuilder<DataSchema> {        
        let path = "/api/v2/taskmanagement/workitems/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add a date based rule to a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypeFlowsDatebasedRules(worktypeId: String, body: WorkitemDateBasedRuleCreate, completion: @escaping ((_ data: WorkitemDateBasedRule?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypeFlowsDatebasedRulesWithRequestBuilder(worktypeId: worktypeId, body: body)
        requestBuilder.execute { (response: Response<WorkitemDateBasedRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add a date based rule to a worktype
     - POST /api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemDateBasedRule> 
     */
    open class func postTaskmanagementWorktypeFlowsDatebasedRulesWithRequestBuilder(worktypeId: String, body: WorkitemDateBasedRuleCreate) -> RequestBuilder<WorkitemDateBasedRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemDateBasedRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add an attribute-change rule to a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypeFlowsOnattributechangeRules(worktypeId: String, body: WorkitemOnAttributeChangeRuleCreate, completion: @escaping ((_ data: WorkitemOnAttributeChangeRule?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypeFlowsOnattributechangeRulesWithRequestBuilder(worktypeId: worktypeId, body: body)
        requestBuilder.execute { (response: Response<WorkitemOnAttributeChangeRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add an attribute-change rule to a worktype
     - POST /api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "condition" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemOnAttributeChangeRule> 
     */
    open class func postTaskmanagementWorktypeFlowsOnattributechangeRulesWithRequestBuilder(worktypeId: String, body: WorkitemOnAttributeChangeRuleCreate) -> RequestBuilder<WorkitemOnAttributeChangeRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnAttributeChangeRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add an on-create rule to a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypeFlowsOncreateRules(worktypeId: String, body: WorkitemOnCreateRuleCreate, completion: @escaping ((_ data: WorkitemOnCreateRule?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypeFlowsOncreateRulesWithRequestBuilder(worktypeId: worktypeId, body: body)
        requestBuilder.execute { (response: Response<WorkitemOnCreateRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add an on-create rule to a worktype
     - POST /api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "action" : "{}",
  "worktype" : "{}",
  "id" : "id",
  "type" : "OnCreate"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Rule 

     - returns: RequestBuilder<WorkitemOnCreateRule> 
     */
    open class func postTaskmanagementWorktypeFlowsOncreateRulesWithRequestBuilder(worktypeId: String, body: WorkitemOnCreateRuleCreate) -> RequestBuilder<WorkitemOnCreateRule> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemOnCreateRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add a status to a worktype
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypeStatuses(worktypeId: String, body: WorkitemStatusCreate, completion: @escaping ((_ data: WorkitemStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypeStatusesWithRequestBuilder(worktypeId: worktypeId, body: body)
        requestBuilder.execute { (response: Response<WorkitemStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add a status to a worktype
     - POST /api/v2/taskmanagement/worktypes/{worktypeId}/statuses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultDestinationStatus" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "worktype" : "{}",
  "destinationStatuses" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "id" : "id",
  "category" : "Open",
  "statusTransitionDelaySeconds" : 0,
  "autoTerminateWorkitem" : true,
  "statusTransitionTime" : "statusTransitionTime"
}, statusCode=200}]
     
     - parameter worktypeId: (path) Worktype id 
     - parameter body: (body) Status 

     - returns: RequestBuilder<WorkitemStatus> 
     */
    open class func postTaskmanagementWorktypeStatusesWithRequestBuilder(worktypeId: String, body: WorkitemStatusCreate) -> RequestBuilder<WorkitemStatus> {        
        var path = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses"
        let worktypeIdPreEscape = "\(worktypeId)"
        let worktypeIdPostEscape = worktypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worktypeId}", with: worktypeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkitemStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a worktype
     
     - parameter body: (body) Worktype 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypes(body: WorktypeCreate, completion: @escaping ((_ data: Worktype?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Worktype>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a worktype
     - POST /api/v2/taskmanagement/worktypes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "defaultDueDurationSeconds" : 1,
  "defaultTtlSeconds" : 5,
  "ruleSettings" : "{}",
  "description" : "description",
  "defaultWorkbin" : "{}",
  "division" : "{}",
  "defaultStatus" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}",
  "serviceLevelTarget" : 2,
  "defaultSkills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "defaultPriority" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "defaultQueue" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "defaultExpirationSeconds" : 6,
  "defaultScript" : "{}",
  "name" : "name",
  "statuses" : [ {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  }, {
    "defaultDestinationStatus" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "worktype" : "{}",
    "destinationStatuses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "id" : "id",
    "category" : "Open",
    "statusTransitionDelaySeconds" : 0,
    "autoTerminateWorkitem" : true,
    "statusTransitionTime" : "statusTransitionTime"
  } ],
  "defaultDurationSeconds" : 0,
  "assignmentEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Worktype 

     - returns: RequestBuilder<Worktype> 
     */
    open class func postTaskmanagementWorktypesWithRequestBuilder(body: WorktypeCreate) -> RequestBuilder<Worktype> {        
        let path = "/api/v2/taskmanagement/worktypes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Worktype>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Query for worktypes
     
     - parameter body: (body) QueryPostRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTaskmanagementWorktypesQuery(body: WorktypeQueryRequest, completion: @escaping ((_ data: WorktypeQueryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postTaskmanagementWorktypesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WorktypeQueryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for worktypes
     - POST /api/v2/taskmanagement/worktypes/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "schema" : "{}",
    "defaultDueDurationSeconds" : 1,
    "defaultTtlSeconds" : 5,
    "ruleSettings" : "{}",
    "description" : "description",
    "defaultWorkbin" : "{}",
    "division" : "{}",
    "defaultStatus" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}",
    "serviceLevelTarget" : 2,
    "defaultSkills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "defaultPriority" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "defaultQueue" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "defaultExpirationSeconds" : 6,
    "defaultScript" : "{}",
    "name" : "name",
    "statuses" : [ {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    }, {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    } ],
    "defaultDurationSeconds" : 0,
    "assignmentEnabled" : true
  }, {
    "schema" : "{}",
    "defaultDueDurationSeconds" : 1,
    "defaultTtlSeconds" : 5,
    "ruleSettings" : "{}",
    "description" : "description",
    "defaultWorkbin" : "{}",
    "division" : "{}",
    "defaultStatus" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}",
    "serviceLevelTarget" : 2,
    "defaultSkills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "defaultPriority" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "defaultQueue" : "{}",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "defaultExpirationSeconds" : 6,
    "defaultScript" : "{}",
    "name" : "name",
    "statuses" : [ {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    }, {
      "defaultDestinationStatus" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "worktype" : "{}",
      "destinationStatuses" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "id" : "id",
      "category" : "Open",
      "statusTransitionDelaySeconds" : 0,
      "autoTerminateWorkitem" : true,
      "statusTransitionTime" : "statusTransitionTime"
    } ],
    "defaultDurationSeconds" : 0,
    "assignmentEnabled" : true
  } ],
  "selfUri" : "selfUri",
  "count" : 7,
  "after" : "after",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter body: (body) QueryPostRequest 

     - returns: RequestBuilder<WorktypeQueryEntityListing> 
     */
    open class func postTaskmanagementWorktypesQueryWithRequestBuilder(body: WorktypeQueryRequest) -> RequestBuilder<WorktypeQueryEntityListing> {        
        let path = "/api/v2/taskmanagement/worktypes/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorktypeQueryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putTaskmanagementWorkitemsSchema(schemaId: String, body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = putTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: schemaId, body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a schema
     - PUT /api/v2/taskmanagement/workitems/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func putTaskmanagementWorkitemsSchemaWithRequestBuilder(schemaId: String, body: DataSchema) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/taskmanagement/workitems/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
