//
// AuthorizationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AuthorizationAPI {
    
    
    
    
    
    /**
     
     Delete a division.
     
     - parameter divisionId: (path) Division ID 
     - parameter force: (query) Force delete this division as well as the grants and objects associated with it (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationDivision(divisionId: String, force: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAuthorizationDivisionWithRequestBuilder(divisionId: divisionId, force: force)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a division.
     
     - DELETE /api/v2/authorization/divisions/{divisionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter divisionId: (path) Division ID 
     - parameter force: (query) Force delete this division as well as the grants and objects associated with it (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationDivisionWithRequestBuilder(divisionId: String, force: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/divisions/{divisionId}"
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "force": force
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationRole(roleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAuthorizationRoleWithRequestBuilder(roleId: roleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an organization role.
     
     - DELETE /api/v2/authorization/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roleId: (path) Role ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationRoleWithRequestBuilder(roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a grant of a role in a division
     
     - DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Returns an authorization division.
     
     - parameter divisionId: (path) Division ID 
     - parameter objectCount: (query) Get count of objects in this division, grouped by type (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivision(divisionId: String, objectCount: Bool? = nil, completion: @escaping ((_ data: AuthzDivision?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionWithRequestBuilder(divisionId: divisionId, objectCount: objectCount)
        requestBuilder.execute { (response: Response<AuthzDivision>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns an authorization division.
     
     - GET /api/v2/authorization/divisions/{divisionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
}}]
     
     - parameter divisionId: (path) Division ID 
     - parameter objectCount: (query) Get count of objects in this division, grouped by type (optional, default to false)

     - returns: RequestBuilder<AuthzDivision> 
     */
    open class func getAuthorizationDivisionWithRequestBuilder(divisionId: String, objectCount: Bool? = nil) -> RequestBuilder<AuthzDivision> {
        var path = "/api/v2/authorization/divisions/{divisionId}"
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "objectCount": objectCount
            
        ])

        let requestBuilder: RequestBuilder<AuthzDivision>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets all grants for a given division.
     
     - parameter divisionId: (path) Division ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionGrants(divisionId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AuthzDivisionGrantEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionGrantsWithRequestBuilder(divisionId: divisionId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AuthzDivisionGrantEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all grants for a given division.
     
     - GET /api/v2/authorization/divisions/{divisionId}/grants
     - Returns all grants assigned to a given division. Maximum page size is 500.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "objectCounts" : {
        "key" : 123456789
      },
      "id" : "aeiou",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+0000",
    "role" : {
      "default" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "policies" : [ {
        "condition" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "actions" : [ "aeiou" ]
      } ],
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "subjectId" : "aeiou"
  } ],
  "pageSize" : 123
}}]
     
     - parameter divisionId: (path) Division ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<AuthzDivisionGrantEntityListing> 
     */
    open class func getAuthorizationDivisionGrantsWithRequestBuilder(divisionId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<AuthzDivisionGrantEntityListing> {
        var path = "/api/v2/authorization/divisions/{divisionId}/grants"
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<AuthzDivisionGrantEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Retrieve a list of all divisions defined for the organization
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter objectCount: (query) Include the count of objects contained in the division (optional, default to false)
     - parameter _id: (query) Optionally request specific divisions by their IDs (optional)
     - parameter name: (query) Search term to filter by division name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisions(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, objectCount: Bool? = nil, _id: [String]? = nil, name: String? = nil, completion: @escaping ((_ data: AuthzDivisionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, objectCount: objectCount, _id: _id, name: name)
        requestBuilder.execute { (response: Response<AuthzDivisionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve a list of all divisions defined for the organization
     
     - GET /api/v2/authorization/divisions
     - Request specific divisions by id using a query param \"id\", e.g.  ?id=5f777167-63be-4c24-ad41-374155d9e28b&id=72e9fb25-c484-488d-9312-7acba82435b3
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "objectCounts" : {
      "key" : 123456789
    },
    "id" : "aeiou",
    "homeDivision" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter objectCount: (query) Include the count of objects contained in the division (optional, default to false)
     - parameter _id: (query) Optionally request specific divisions by their IDs (optional)
     - parameter name: (query) Search term to filter by division name (optional)

     - returns: RequestBuilder<AuthzDivisionEntityListing> 
     */
    open class func getAuthorizationDivisionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, objectCount: Bool? = nil, _id: [String]? = nil, name: String? = nil) -> RequestBuilder<AuthzDivisionEntityListing> {
        let path = "/api/v2/authorization/divisions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "objectCount": objectCount, 
            
            "id": _id, 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<AuthzDivisionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Retrieve the home division for the organization.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionsHome(completion: @escaping ((_ data: AuthzDivision?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionsHomeWithRequestBuilder()
        requestBuilder.execute { (response: Response<AuthzDivision>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve the home division for the organization.
     
     - GET /api/v2/authorization/divisions/home
     - Will not include object counts.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
}}]

     - returns: RequestBuilder<AuthzDivision> 
     */
    open class func getAuthorizationDivisionsHomeWithRequestBuilder() -> RequestBuilder<AuthzDivision> {
        let path = "/api/v2/authorization/divisions/home"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzDivision>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Returns the maximum allowed number of divisions.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionsLimit(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionsLimitWithRequestBuilder()
        requestBuilder.execute { (response: Response<Int>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns the maximum allowed number of divisions.
     
     - GET /api/v2/authorization/divisions/limit
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=123}]

     - returns: RequestBuilder<Int> 
     */
    open class func getAuthorizationDivisionsLimitWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/api/v2/authorization/divisions/limit"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Int>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedMe(permission: String, name: String? = nil, completion: @escaping ((_ data: [AuthzDivision]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: permission, name: name)
        requestBuilder.execute { (response: Response<[AuthzDivision]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the current user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/me
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
} ]}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)

     - returns: RequestBuilder<[AuthzDivision]> 
     */
    open class func getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: String, name: String? = nil) -> RequestBuilder<[AuthzDivision]> {
        let path = "/api/v2/authorization/divisionspermitted/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "name": name, 
            
            "permission": permission
            
        ])

        let requestBuilder: RequestBuilder<[AuthzDivision]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedMe(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the current user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/paged/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "allDivsPermitted" : true,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "objectCounts" : {
      "key" : 123456789
    },
    "id" : "aeiou",
    "homeDivision" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {
        let path = "/api/v2/authorization/divisionspermitted/paged/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "permission": permission, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Returns which divisions the specified user has the given permission in.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectId(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: subjectId, permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns which divisions the specified user has the given permission in.
     
     - GET /api/v2/authorization/divisionspermitted/paged/{subjectId}
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "allDivsPermitted" : true,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "objectCounts" : {
      "key" : 123456789
    },
    "id" : "aeiou",
    "homeDivision" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {
        var path = "/api/v2/authorization/divisionspermitted/paged/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "permission": permission, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum QueryType_getAuthorizationPermissions: String { 
        case domain = "domain"
        case permission = "permission"
    }

    
    
    
    
    /**
     
     Get all permissions.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter queryType: (query) Query filter type (optional)
     - parameter query: (query) Comma-separated list of permissions or domains to query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationPermissions(pageSize: Int? = nil, pageNumber: Int? = nil, queryType: QueryType_getAuthorizationPermissions? = nil, query: String? = nil, completion: @escaping ((_ data: PermissionCollectionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationPermissionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, queryType: queryType, query: query)
        requestBuilder.execute { (response: Response<PermissionCollectionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all permissions.
     
     - GET /api/v2/authorization/permissions
     - Retrieve a list of all permission defined in the system.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "domain" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "permissionMap" : {
      "key" : [ {
        "divisionAware" : true,
        "entityType" : "aeiou",
        "domain" : "aeiou",
        "action" : "aeiou",
        "label" : "aeiou",
        "allowsConditions" : true
      } ]
    },
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter queryType: (query) Query filter type (optional)
     - parameter query: (query) Comma-separated list of permissions or domains to query (optional)

     - returns: RequestBuilder<PermissionCollectionEntityListing> 
     */
    open class func getAuthorizationPermissionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, queryType: QueryType_getAuthorizationPermissions? = nil, query: String? = nil) -> RequestBuilder<PermissionCollectionEntityListing> {
        let path = "/api/v2/authorization/permissions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "queryType": queryType?.rawValue, 
            
            "query": query
            
        ])

        let requestBuilder: RequestBuilder<PermissionCollectionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the list of enabled products
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationProducts(completion: @escaping ((_ data: OrganizationProductEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationProductsWithRequestBuilder()
        requestBuilder.execute { (response: Response<OrganizationProductEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of enabled products
     
     - GET /api/v2/authorization/products
     - Gets the list of enabled products. Some example product names are: collaborateFree, collaboratePro, communicate, and engage.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "id" : "aeiou"
  } ],
  "pageSize" : 123
}}]

     - returns: RequestBuilder<OrganizationProductEntityListing> 
     */
    open class func getAuthorizationProductsWithRequestBuilder() -> RequestBuilder<OrganizationProductEntityListing> {
        let path = "/api/v2/authorization/products"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationProductEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getAuthorizationRole: String { 
        case unusedpermissions = "unusedPermissions"
    }

    
    
    /**
     
     Get a single organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter expand: (query) Which fields, if any, to expand. \&quot;unusedPermissions\&quot; returns the permissions not used for the role (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationRole(roleId: String, expand: [String]? = nil, completion: @escaping ((_ data: DomainOrganizationRole?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationRoleWithRequestBuilder(roleId: roleId, expand: expand)
        requestBuilder.execute { (response: Response<DomainOrganizationRole>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a single organization role.
     
     - GET /api/v2/authorization/roles/{roleId}
     - Get the organization role specified by its ID.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "unusedPermissions" : [ "aeiou" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou",
  "base" : true
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter expand: (query) Which fields, if any, to expand. \&quot;unusedPermissions\&quot; returns the permissions not used for the role (optional)

     - returns: RequestBuilder<DomainOrganizationRole> 
     */
    open class func getAuthorizationRoleWithRequestBuilder(roleId: String, expand: [String]? = nil) -> RequestBuilder<DomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<DomainOrganizationRole>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get an org role to default role comparison
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationRoleComparedefaultRightRoleId(leftRoleId: String, rightRoleId: String, completion: @escaping ((_ data: DomainOrgRoleDifference?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationRoleComparedefaultRightRoleIdWithRequestBuilder(leftRoleId: leftRoleId, rightRoleId: rightRoleId)
        requestBuilder.execute { (response: Response<DomainOrgRoleDifference>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an org role to default role comparison
     
     - GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}
     - Compares any organization role to a default role id and show differences
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addedPermissionPolicies" : [ "" ],
  "samePermissionPolicies" : [ "" ],
  "roleFromDefault" : "",
  "removedPermissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "userOrgRole" : {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  }
}}]
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 

     - returns: RequestBuilder<DomainOrgRoleDifference> 
     */
    open class func getAuthorizationRoleComparedefaultRightRoleIdWithRequestBuilder(leftRoleId: String, rightRoleId: String) -> RequestBuilder<DomainOrgRoleDifference> {
        var path = "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}"
        let leftRoleIdPreEscape = "\(leftRoleId)"
        let leftRoleIdPostEscape = leftRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leftRoleId}", with: leftRoleIdPostEscape, options: .literal, range: nil)
        let rightRoleIdPreEscape = "\(rightRoleId)"
        let rightRoleIdPostEscape = rightRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rightRoleId}", with: rightRoleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainOrgRoleDifference>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the subjects' granted divisions in the specified role.
     
     - parameter roleId: (path) Role ID 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationRoleSubjectgrants(roleId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: SubjectDivisionGrantsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationRoleSubjectgrantsWithRequestBuilder(roleId: roleId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<SubjectDivisionGrantsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the subjects' granted divisions in the specified role.
     
     - GET /api/v2/authorization/roles/{roleId}/subjectgrants
     - Includes the divisions for which the subject has a grant.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "divisions" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<SubjectDivisionGrantsEntityListing> 
     */
    open class func getAuthorizationRoleSubjectgrantsWithRequestBuilder(roleId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<SubjectDivisionGrantsEntityListing> {
        var path = "/api/v2/authorization/roles/{roleId}/subjectgrants"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<SubjectDivisionGrantsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of the users in a specified role.
     
     - parameter roleId: (path) Role ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationRoleUsers(roleId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationRoleUsersWithRequestBuilder(roleId: roleId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of the users in a specified role.
     
     - GET /api/v2/authorization/roles/{roleId}/users
     - Get an array of the UUIDs of the users in the specified role.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getAuthorizationRoleUsersWithRequestBuilder(roleId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<UserEntityListing> {
        var path = "/api/v2/authorization/roles/{roleId}/users"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Retrieve a list of all roles defined for the organization
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query)  (optional)
     - parameter permission: (query)  (optional)
     - parameter defaultRoleId: (query)  (optional)
     - parameter userCount: (query)  (optional, default to true)
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationRoles(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, permission: [String]? = nil, defaultRoleId: [String]? = nil, userCount: Bool? = nil, _id: [String]? = nil, completion: @escaping ((_ data: OrganizationRoleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationRolesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, permission: permission, defaultRoleId: defaultRoleId, userCount: userCount, _id: _id)
        requestBuilder.execute { (response: Response<OrganizationRoleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve a list of all roles defined for the organization
     
     - GET /api/v2/authorization/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query)  (optional)
     - parameter permission: (query)  (optional)
     - parameter defaultRoleId: (query)  (optional)
     - parameter userCount: (query)  (optional, default to true)
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<OrganizationRoleEntityListing> 
     */
    open class func getAuthorizationRolesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, permission: [String]? = nil, defaultRoleId: [String]? = nil, userCount: Bool? = nil, _id: [String]? = nil) -> RequestBuilder<OrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "name": name, 
            
            "permission": permission, 
            
            "defaultRoleId": defaultRoleId, 
            
            "userCount": userCount, 
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<OrganizationRoleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Returns a listing of roles and permissions for a user.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubject(subjectId: String, completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectWithRequestBuilder(subjectId: subjectId)
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for a user.
     
     - GET /api/v2/authorization/subjects/{subjectId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "objectCounts" : {
        "key" : 123456789
      },
      "id" : "aeiou",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+0000",
    "role" : {
      "default" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "policies" : [ {
        "condition" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "actions" : [ "aeiou" ]
      } ],
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "subjectId" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter subjectId: (path) Subject ID (user or group) 

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectWithRequestBuilder(subjectId: String) -> RequestBuilder<AuthzSubject> {
        var path = "/api/v2/authorization/subjects/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Returns a listing of roles and permissions for the currently authenticated user.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubjectsMe(completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectsMeWithRequestBuilder()
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for the currently authenticated user.
     
     - GET /api/v2/authorization/subjects/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "objectCounts" : {
        "key" : 123456789
      },
      "id" : "aeiou",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+0000",
    "role" : {
      "default" : true,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "policies" : [ {
        "condition" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "actions" : [ "aeiou" ]
      } ],
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "subjectId" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123
}}]

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectsMeWithRequestBuilder() -> RequestBuilder<AuthzSubject> {
        let path = "/api/v2/authorization/subjects/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the count of roles granted to a list of subjects
     
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubjectsRolecounts(_id: [String]? = nil, completion: @escaping ((_ data: [String:JSON]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectsRolecountsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<[String:JSON]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the count of roles granted to a list of subjects
     
     - GET /api/v2/authorization/subjects/rolecounts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "key" : "{}"
}}]
     
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<[String:JSON]> 
     */
    open class func getAuthorizationSubjectsRolecountsWithRequestBuilder(_id: [String]? = nil) -> RequestBuilder<[String:JSON]> {
        let path = "/api/v2/authorization/subjects/rolecounts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<[String:JSON]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Returns a listing of roles and permissions for a user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoles(userId: String, completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRolesWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Returns a listing of roles and permissions for a user.
     
     - GET /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func getUserRolesWithRequestBuilder(userId: String) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Patch Organization Role for needsUpdate Field
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Organization role 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchAuthorizationRole(roleId: String, body: DomainOrganizationRole, completion: @escaping ((_ data: DomainOrganizationRole?,_ error: Error?) -> Void)) {
        let requestBuilder = patchAuthorizationRoleWithRequestBuilder(roleId: roleId, body: body)
        requestBuilder.execute { (response: Response<DomainOrganizationRole>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch Organization Role for needsUpdate Field
     
     - PATCH /api/v2/authorization/roles/{roleId}
     - Patch Organization Role for needsUpdate Field
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "unusedPermissions" : [ "aeiou" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou",
  "base" : true
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Organization role 

     - returns: RequestBuilder<DomainOrganizationRole> 
     */
    open class func patchAuthorizationRoleWithRequestBuilder(roleId: String, body: DomainOrganizationRole) -> RequestBuilder<DomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainOrganizationRole>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    public enum ObjectType_postAuthorizationDivisionObject: String { 
        case queue = "QUEUE"
        case campaign = "CAMPAIGN"
        case contactlist = "CONTACTLIST"
        case dnclist = "DNCLIST"
        case messagingcampaign = "MESSAGINGCAMPAIGN"
        case managementunit = "MANAGEMENTUNIT"
        case businessunit = "BUSINESSUNIT"
        case flow = "FLOW"
        case user = "USER"
    }

    
    
    
    
    /**
     
     Assign a list of objects to a division
     
     - parameter divisionId: (path) Division ID 
     - parameter objectType: (path) The type of the objects. Must be one of the valid object types 
     - parameter body: (body) Object Id List 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationDivisionObject(divisionId: String, objectType: ObjectType_postAuthorizationDivisionObject, body: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationDivisionObjectWithRequestBuilder(divisionId: divisionId, objectType: objectType, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Assign a list of objects to a division
     
     - POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}
     - Set the division of a specified list of objects. The objects must all be of the same type, one of:  CAMPAIGN, MANAGEMENTUNIT, FLOW, QUEUE, or USER.  The body of the request is a list of object IDs, which are expected to be  GUIDs, e.g. [\"206ce31f-61ec-40ed-a8b1-be6f06303998\",\"250a754e-f5e4-4f51-800f-a92f09d3bf8c\"]
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter divisionId: (path) Division ID 
     - parameter objectType: (path) The type of the objects. Must be one of the valid object types 
     - parameter body: (body) Object Id List 

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationDivisionObjectWithRequestBuilder(divisionId: String, objectType: ObjectType_postAuthorizationDivisionObject, body: [String]) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/divisions/{divisionId}/objects/{objectType}"
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let objectTypePreEscape = "\(objectType.rawValue)"
        let objectTypePostEscape = objectTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{objectType}", with: objectTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a division.
     
     - parameter body: (body) Division 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationDivisions(body: AuthzDivision, completion: @escaping ((_ data: AuthzDivision?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationDivisionsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AuthzDivision>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a division.
     
     - POST /api/v2/authorization/divisions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
}}]
     
     - parameter body: (body) Division 

     - returns: RequestBuilder<AuthzDivision> 
     */
    open class func postAuthorizationDivisionsWithRequestBuilder(body: AuthzDivision) -> RequestBuilder<AuthzDivision> {
        let path = "/api/v2/authorization/divisions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzDivision>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Bulk-grant subjects and divisions with an organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Subjects and Divisions 
     - parameter subjectType: (query) what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationRole(roleId: String, body: SubjectDivisions, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationRoleWithRequestBuilder(roleId: roleId, body: body, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk-grant subjects and divisions with an organization role.
     
     - POST /api/v2/authorization/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Subjects and Divisions 
     - parameter subjectType: (query) what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationRoleWithRequestBuilder(roleId: String, body: SubjectDivisions, subjectType: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "subjectType": subjectType
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get an unsaved org role to default role comparison
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter body: (body) Organization role 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationRoleComparedefaultRightRoleId(leftRoleId: String, rightRoleId: String, body: DomainOrganizationRole, completion: @escaping ((_ data: DomainOrgRoleDifference?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationRoleComparedefaultRightRoleIdWithRequestBuilder(leftRoleId: leftRoleId, rightRoleId: rightRoleId, body: body)
        requestBuilder.execute { (response: Response<DomainOrgRoleDifference>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an unsaved org role to default role comparison
     
     - POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}
     - Allows users to compare their existing roles in an unsaved state to its default role
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addedPermissionPolicies" : [ "" ],
  "samePermissionPolicies" : [ "" ],
  "roleFromDefault" : "",
  "removedPermissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "userOrgRole" : {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  }
}}]
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter body: (body) Organization role 

     - returns: RequestBuilder<DomainOrgRoleDifference> 
     */
    open class func postAuthorizationRoleComparedefaultRightRoleIdWithRequestBuilder(leftRoleId: String, rightRoleId: String, body: DomainOrganizationRole) -> RequestBuilder<DomainOrgRoleDifference> {
        var path = "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}"
        let leftRoleIdPreEscape = "\(leftRoleId)"
        let leftRoleIdPostEscape = leftRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{leftRoleId}", with: leftRoleIdPostEscape, options: .literal, range: nil)
        let rightRoleIdPreEscape = "\(rightRoleId)"
        let rightRoleIdPostEscape = rightRoleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{rightRoleId}", with: rightRoleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainOrgRoleDifference>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an organization role.
     
     - parameter body: (body) Organization role 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationRoles(body: DomainOrganizationRoleCreate, completion: @escaping ((_ data: DomainOrganizationRole?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationRolesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DomainOrganizationRole>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an organization role.
     
     - POST /api/v2/authorization/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "unusedPermissions" : [ "aeiou" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou",
  "base" : true
}}]
     
     - parameter body: (body) Organization role 

     - returns: RequestBuilder<DomainOrganizationRole> 
     */
    open class func postAuthorizationRolesWithRequestBuilder(body: DomainOrganizationRoleCreate) -> RequestBuilder<DomainOrganizationRole> {
        let path = "/api/v2/authorization/roles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainOrganizationRole>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Restores all default roles
     
     - parameter force: (query) Restore default roles (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationRolesDefault(force: Bool? = nil, completion: @escaping ((_ data: OrganizationRoleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationRolesDefaultWithRequestBuilder(force: force)
        requestBuilder.execute { (response: Response<OrganizationRoleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Restores all default roles
     
     - POST /api/v2/authorization/roles/default
     - This endpoint serves several purposes. 1. It provides the org with default roles. This is important for default roles that will be added after go-live (they can retroactively add the new default-role). Note: When not using a query param of force=true, it only adds the default roles not configured for the org; it does not overwrite roles. 2. Using the query param force=true, you can restore all default roles. Note: This does not have an effect on custom roles.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter force: (query) Restore default roles (optional, default to false)

     - returns: RequestBuilder<OrganizationRoleEntityListing> 
     */
    open class func postAuthorizationRolesDefaultWithRequestBuilder(force: Bool? = nil) -> RequestBuilder<OrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles/default"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "force": force
            
        ])

        let requestBuilder: RequestBuilder<OrganizationRoleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Bulk-grant roles and divisions to a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkadd(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: subjectId, body: body, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk-grant roles and divisions to a subject.
     
     - POST /api/v2/authorization/subjects/{subjectId}/bulkadd
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional, default to PC_USER)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkadd"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "subjectType": subjectType
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Bulk-remove grants from a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkremove(subjectId: String, body: RoleDivisionGrants, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: subjectId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk-remove grants from a subject.
     
     - POST /api/v2/authorization/subjects/{subjectId}/bulkremove
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: String, body: RoleDivisionGrants) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkremove"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Make a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional, default to PC_USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Make a grant of a role in a division
     
     - POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional, default to PC_USER)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "subjectType": subjectType
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a division.
     
     - parameter divisionId: (path) Division ID 
     - parameter body: (body) Updated division data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizationDivision(divisionId: String, body: AuthzDivision, completion: @escaping ((_ data: AuthzDivision?,_ error: Error?) -> Void)) {
        let requestBuilder = putAuthorizationDivisionWithRequestBuilder(divisionId: divisionId, body: body)
        requestBuilder.execute { (response: Response<AuthzDivision>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a division.
     
     - PUT /api/v2/authorization/divisions/{divisionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "objectCounts" : {
    "key" : 123456789
  },
  "id" : "aeiou",
  "homeDivision" : true
}}]
     
     - parameter divisionId: (path) Division ID 
     - parameter body: (body) Updated division data 

     - returns: RequestBuilder<AuthzDivision> 
     */
    open class func putAuthorizationDivisionWithRequestBuilder(divisionId: String, body: AuthzDivision) -> RequestBuilder<AuthzDivision> {
        var path = "/api/v2/authorization/divisions/{divisionId}"
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzDivision>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Organization role 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizationRole(roleId: String, body: DomainOrganizationRoleUpdate, completion: @escaping ((_ data: DomainOrganizationRole?,_ error: Error?) -> Void)) {
        let requestBuilder = putAuthorizationRoleWithRequestBuilder(roleId: roleId, body: body)
        requestBuilder.execute { (response: Response<DomainOrganizationRole>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an organization role.
     
     - PUT /api/v2/authorization/roles/{roleId}
     - Update
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "unusedPermissions" : [ "aeiou" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou",
  "base" : true
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) Organization role 

     - returns: RequestBuilder<DomainOrganizationRole> 
     */
    open class func putAuthorizationRoleWithRequestBuilder(roleId: String, body: DomainOrganizationRoleUpdate) -> RequestBuilder<DomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainOrganizationRole>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Sets the users for the role
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) List of user IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizationRoleUsersAdd(roleId: String, body: [String], completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = putAuthorizationRoleUsersAddWithRequestBuilder(roleId: roleId, body: body)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Sets the users for the role
     
     - PUT /api/v2/authorization/roles/{roleId}/users/add
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) List of user IDs 

     - returns: RequestBuilder<[String]> 
     */
    open class func putAuthorizationRoleUsersAddWithRequestBuilder(roleId: String, body: [String]) -> RequestBuilder<[String]> {
        var path = "/api/v2/authorization/roles/{roleId}/users/add"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Removes the users from the role
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) List of user IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizationRoleUsersRemove(roleId: String, body: [String], completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = putAuthorizationRoleUsersRemoveWithRequestBuilder(roleId: roleId, body: body)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Removes the users from the role
     
     - PUT /api/v2/authorization/roles/{roleId}/users/remove
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body) List of user IDs 

     - returns: RequestBuilder<[String]> 
     */
    open class func putAuthorizationRoleUsersRemoveWithRequestBuilder(roleId: String, body: [String]) -> RequestBuilder<[String]> {
        var path = "/api/v2/authorization/roles/{roleId}/users/remove"
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Restore specified default roles
     
     - parameter body: (body) Organization roles list 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAuthorizationRolesDefault(body: [DomainOrganizationRole], completion: @escaping ((_ data: OrganizationRoleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = putAuthorizationRolesDefaultWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<OrganizationRoleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Restore specified default roles
     
     - PUT /api/v2/authorization/roles/default
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "unusedPermissions" : [ "aeiou" ],
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou",
    "base" : true
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter body: (body) Organization roles list 

     - returns: RequestBuilder<OrganizationRoleEntityListing> 
     */
    open class func putAuthorizationRolesDefaultWithRequestBuilder(body: [DomainOrganizationRole]) -> RequestBuilder<OrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles/default"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrganizationRoleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Sets the user's roles
     
     - parameter userId: (path) User ID 
     - parameter body: (body) List of roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoles(userId: String, body: [String], completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRolesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Sets the user's roles
     
     - PUT /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ "" ],
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) List of roles 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func putUserRolesWithRequestBuilder(userId: String, body: [String]) -> RequestBuilder<UserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
