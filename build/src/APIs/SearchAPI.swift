//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SearchAPI {
    
    
    
    /**
     
     Search gkn documentation using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentationGknSearch(q64: String, completion: @escaping ((_ data: GKNDocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDocumentationGknSearchWithRequestBuilder(q64: q64)
        requestBuilder.execute { (response: Response<GKNDocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search gkn documentation using the q64 value returned from a previous search
     
     - GET /api/v2/documentation/gkn/search
     - 
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "link" : "aeiou",
    "_type" : "aeiou",
    "title" : "aeiou",
    "content" : "aeiou"
  } ]
}}]
     
     - parameter q64: (query) q64 

     - returns: RequestBuilder<GKNDocumentationSearchResponse> 
     */
    open class func getDocumentationGknSearchWithRequestBuilder(q64: String) -> RequestBuilder<GKNDocumentationSearchResponse> {
        let path = "/api/v2/documentation/gkn/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64
            
        ])

        let requestBuilder: RequestBuilder<GKNDocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Search documentation using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentationSearch(q64: String, completion: @escaping ((_ data: DocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDocumentationSearchWithRequestBuilder(q64: q64)
        requestBuilder.execute { (response: Response<DocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search documentation using the q64 value returned from a previous search
     
     - GET /api/v2/documentation/search
     - 
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "releasenote_category" : [ 123 ],
    "facet_role" : [ 123 ],
    "link" : "aeiou",
    "service-area" : [ 123 ],
    "description" : "aeiou",
    "facet_service" : [ 123 ],
    "title" : "aeiou",
    "facet_feature" : [ 123 ],
    "content" : "aeiou",
    "releasenote_tag" : [ 123 ],
    "get_type" : "aeiou",
    "service" : [ 123 ],
    "faq_categories" : [ 123 ],
    "name" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+0000",
    "id" : 123,
    "categories" : [ 123 ],
    "video_categories" : [ 123 ],
    "excerpt" : "aeiou",
    "slug" : "aeiou"
  } ]
}}]
     
     - parameter q64: (query) q64 

     - returns: RequestBuilder<DocumentationSearchResponse> 
     */
    open class func getDocumentationSearchWithRequestBuilder(q64: String) -> RequestBuilder<DocumentationSearchResponse> {
        let path = "/api/v2/documentation/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64
            
        ])

        let requestBuilder: RequestBuilder<DocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search groups using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupsSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupsSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search groups using the q64 value returned from a previous search
     
     - GET /api/v2/groups/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : "",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ]
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func getGroupsSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<GroupsSearchResponse> {
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getLocationsSearch: String { 
        case images = "images"
        case addressverificationdetails = "addressVerificationDetails"
    }

    
    
    /**
     
     Search locations using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Provides more details about a specified resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLocationsSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: LocationsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLocationsSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<LocationsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search locations using the q64 value returned from a previous search
     
     - GET /api/v2/locations/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : "aeiou",
    "address" : {
      "zipcode" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street1" : "aeiou",
      "countryName" : "aeiou",
      "state" : "aeiou",
      "street2" : "aeiou"
    },
    "notes" : "aeiou",
    "floorplanImage" : [ "" ],
    "addressVerificationDetails" : {
      "dateStarted" : "2000-01-23T04:56:07.000+0000",
      "dateFinished" : "2000-01-23T04:56:07.000+0000",
      "service" : "smartystreets-us",
      "status" : "aeiou"
    },
    "selfUri" : "aeiou",
    "profileImage" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "emergencyNumber" : {
      "number" : "aeiou",
      "e164" : "aeiou",
      "type" : "aeiou"
    },
    "version" : 123,
    "path" : [ "aeiou" ],
    "addressStored" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "contactUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "state" : "aeiou",
    "addressVerified" : true
  } ]
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Provides more details about a specified resource (optional)

     - returns: RequestBuilder<LocationsSearchResponse> 
     */
    open class func getLocationsSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<LocationsSearchResponse> {
        let path = "/api/v2/locations/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<LocationsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getSearch: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
        case calleruserRoutingstatus = "callerUser.routingStatus"
        case calleruserPrimarypresence = "callerUser.primaryPresence"
        case calleruserConversationsummary = "callerUser.conversationSummary"
        case calleruserOutofoffice = "callerUser.outOfOffice"
        case calleruserGeolocation = "callerUser.geolocation"
        case images = "images"
        case addressverificationdetails = "addressVerificationDetails"
    }

    
    
    
    
    /**
     
     Search using the q64 value returned from a previous search.
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSearch(q64: String, expand: [String]? = nil, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSearchWithRequestBuilder(q64: q64, expand: expand, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search using the q64 value returned from a previous search.
     
     - GET /api/v2/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : { },
  "aggregations" : ""
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional, default to true)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func getSearchWithRequestBuilder(q64: String, expand: [String]? = nil, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {
        let path = "/api/v2/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand, 
            
            "profile": profile
            
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getSearchSuggest: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case team = "team"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
        case calleruserRoutingstatus = "callerUser.routingStatus"
        case calleruserPrimarypresence = "callerUser.primaryPresence"
        case calleruserConversationsummary = "callerUser.conversationSummary"
        case calleruserOutofoffice = "callerUser.outOfOffice"
        case calleruserGeolocation = "callerUser.geolocation"
        case images = "images"
        case addressverificationdetails = "addressVerificationDetails"
    }

    
    
    
    
    /**
     
     Suggest resources using the q64 value returned from a previous suggest query.
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSearchSuggest(q64: String, expand: [String]? = nil, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSearchSuggestWithRequestBuilder(q64: q64, expand: expand, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Suggest resources using the q64 value returned from a previous suggest query.
     
     - GET /api/v2/search/suggest
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : { },
  "aggregations" : ""
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional, default to true)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func getSearchSuggestWithRequestBuilder(q64: String, expand: [String]? = nil, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {
        let path = "/api/v2/search/suggest"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand, 
            
            "profile": profile
            
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum IntegrationPresenceSource_getUsersSearch: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case ringCentral = "RingCentral"
    }

    
    
    /**
     
     Search users using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersSearch(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersSearchWithRequestBuilder(q64: q64, expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search users using the q64 value returned from a previous search
     
     - GET /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : "",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func getUsersSearchWithRequestBuilder(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil) -> RequestBuilder<UsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand, 
            
            "integrationPresenceSource": integrationPresenceSource?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search voicemails using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVoicemailSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: VoicemailsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getVoicemailSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<VoicemailsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search voicemails using the q64 value returned from a previous search
     
     - GET /api/v2/voicemail/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "callerAddress" : "aeiou",
    "note" : "aeiou",
    "audioRecordingSizeBytes" : 123456789,
    "copiedTo" : [ "" ],
    "read" : true,
    "selfUri" : "aeiou",
    "callerUser" : "",
    "deleteRetentionPolicy" : {
      "numberOfDays" : 123,
      "voicemailRetentionPolicyType" : "aeiou"
    },
    "callerName" : "aeiou",
    "copiedFrom" : {
      "date" : "2000-01-23T04:56:07.000+0000",
      "user" : "",
      "group" : ""
    },
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "audioRecordingDurationSeconds" : 123,
    "user" : "",
    "conversation" : {
      "address" : "aeiou",
      "selfUri" : "aeiou",
      "externalTag" : "aeiou",
      "divisions" : [ {
        "division" : "",
        "entities" : [ "" ]
      } ],
      "maxParticipants" : 123,
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "callerId" : "aeiou",
          "callerIdName" : "aeiou"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : ""
          } ],
          "priority" : 123,
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "redacted" : true,
          "selfUri" : "aeiou",
          "answers" : {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "mediaType" : [ "aeiou" ],
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "neverRelease" : true,
          "agentHasRead" : true,
          "conversationDate" : "2000-01-23T04:56:07.000+0000",
          "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "id" : "aeiou",
          "rescore" : true,
          "calibration" : {
            "agent" : "",
            "evaluations" : [ "" ],
            "selfUri" : "aeiou",
            "evaluators" : [ "" ],
            "contextId" : "aeiou",
            "averageScore" : 123,
            "calibrator" : "",
            "highScore" : 123,
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "scoringIndex" : "",
            "expertEvaluator" : "",
            "name" : "aeiou",
            "id" : "aeiou",
            "lowScore" : 123,
            "conversation" : "",
            "evaluationForm" : ""
          },
          "conversation" : "",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          },
          "isScoringIndex" : true,
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : "",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : "",
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ]
      } ]
    },
    "queue" : "",
    "group" : ""
  } ]
}}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<VoicemailsSearchResponse> 
     */
    open class func getVoicemailSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<VoicemailsSearchResponse> {
        let path = "/api/v2/voicemail/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "q64": q64, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<VoicemailsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsTranscriptsQuery(body: TranscriptConversationDetailSearchRequest, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search resources.
     
     - POST /api/v2/analytics/conversations/transcripts/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "mediaStatsMinConversationMos" : 1.3579000000000001069366817318950779736042022705078125,
    "evaluations" : [ {
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "oTotalScore" : 123456789,
      "oTotalCriticalScore" : 123456789,
      "contextId" : "aeiou",
      "userId" : "aeiou",
      "evaluationId" : "aeiou",
      "deleted" : true,
      "formName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "rescored" : true,
      "calibrationId" : "aeiou",
      "evaluatorId" : "aeiou"
    } ],
    "conversationId" : "aeiou",
    "mediaStatsMinConversationRFactor" : 1.3579000000000001069366817318950779736042022705078125,
    "surveys" : [ {
      "queueId" : "aeiou",
      "surveyStatus" : "aeiou",
      "oSurveyTotalScore" : 123456789,
      "surveyId" : "aeiou",
      "surveyFormName" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "surveyFormId" : "aeiou",
      "surveyFormContextId" : "aeiou",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+0000",
      "surveyPromoterScore" : 123,
      "userId" : "aeiou"
    } ],
    "conversationEnd" : "2000-01-23T04:56:07.000+0000",
    "externalTag" : "aeiou",
    "resolutions" : [ {
      "queueId" : "aeiou",
      "eventTime" : "2000-01-23T04:56:07.000+0000",
      "nNextContactAvoided" : 123456789,
      "userId" : "aeiou"
    } ],
    "originatingDirection" : "aeiou",
    "divisionIds" : [ "aeiou" ],
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "aeiou",
        "cobrowseRole" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "videoAddressSelf" : "aeiou",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 123 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "aeiou",
          "agentRank" : 123
        } ],
        "addressSelf" : "aeiou",
        "skipEnabled" : true,
        "journeyActionMapId" : "aeiou",
        "remote" : "aeiou",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+0000",
        "roomId" : "aeiou",
        "messageType" : "aeiou",
        "removedSkillIds" : [ "aeiou" ],
        "requestedRoutings" : [ "aeiou" ],
        "mediaCount" : 123,
        "dnis" : "aeiou",
        "videoRoomId" : "aeiou",
        "flow" : {
          "entryType" : "aeiou",
          "issuedCallback" : true,
          "exitReason" : "aeiou",
          "transferTargetName" : "aeiou",
          "flowVersion" : "aeiou",
          "flowName" : "aeiou",
          "transferTargetAddress" : "aeiou",
          "outcomes" : [ {
            "flowOutcomeId" : "aeiou",
            "flowOutcome" : "aeiou",
            "flowOutcomeStartTimestamp" : "2000-01-23T04:56:07.000+0000",
            "flowOutcomeValue" : "aeiou",
            "flowOutcomeEndTimestamp" : "2000-01-23T04:56:07.000+0000"
          } ],
          "transferType" : "aeiou",
          "entryReason" : "aeiou",
          "endingLanguage" : "aeiou",
          "recognitionFailureReason" : "aeiou",
          "flowId" : "aeiou",
          "startingLanguage" : "aeiou",
          "flowType" : "aeiou"
        },
        "dispositionAnalyzer" : "aeiou",
        "addressOther" : "aeiou",
        "cobrowseRoomId" : "aeiou",
        "activeSkillIds" : [ "aeiou" ],
        "protocolCallId" : "aeiou",
        "flowOutType" : "aeiou",
        "mediaType" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "addressTo" : "aeiou",
        "edgeId" : "aeiou",
        "timeoutSeconds" : 123,
        "metrics" : [ {
          "name" : "aeiou",
          "emitDate" : "2000-01-23T04:56:07.000+0000",
          "value" : 123456789
        } ],
        "journeyActionMapVersion" : 123,
        "mediaBridgeId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "deliveryStatus" : "aeiou",
        "screenShareRoomId" : "aeiou",
        "assignerId" : "aeiou",
        "outboundContactId" : "aeiou",
        "peerId" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "agentBullseyeRing" : 123,
        "callbackNumbers" : [ "aeiou" ],
        "recording" : true,
        "screenShareAddressSelf" : "aeiou",
        "sharingScreen" : true,
        "sessionDnis" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "groupId" : "aeiou",
          "sourceConversationId" : "aeiou",
          "errorCode" : "aeiou",
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "disconnectType" : "aeiou",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "scoredAgents" : [ {
            "scoredAgentId" : "aeiou",
            "agentScore" : 123
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 123456789 ],
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "sourceSessionId" : "aeiou",
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "aeiou",
        "provider" : "aeiou",
        "journeyCustomerIdType" : "aeiou",
        "journeyCustomerId" : "aeiou",
        "callbackUserName" : "aeiou",
        "addressFrom" : "aeiou",
        "flowInType" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou",
        "routingRing" : 123,
        "journeyCustomerSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "journeyActionId" : "aeiou",
        "eligibleAgentCounts" : [ 123 ],
        "dispositionName" : "aeiou",
        "scriptId" : "aeiou",
        "selectedAgentId" : "aeiou",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 1.3579000000000001069366817318950779736042022705078125,
          "underrunPackets" : 123456789,
          "overrunPackets" : 123456789,
          "maxLatencyMs" : 123456789,
          "minMos" : 1.3579000000000001069366817318950779736042022705078125,
          "codecs" : [ "aeiou" ],
          "eventTime" : "2000-01-23T04:56:07.000+0000",
          "receivedPackets" : 123456789,
          "duplicatePackets" : 123456789,
          "invalidPackets" : 123456789,
          "discardedPackets" : 123456789
        } ],
        "selectedAgentRank" : 123,
        "outboundContactListId" : "aeiou"
      } ],
      "externalContactId" : "aeiou",
      "purpose" : "aeiou",
      "teamId" : "aeiou",
      "externalOrganizationId" : "aeiou",
      "participantName" : "aeiou",
      "flaggedReason" : "aeiou",
      "userId" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: TranscriptConversationDetailSearchRequest) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {
        let path = "/api/v2/analytics/conversations/transcripts/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search gkn documentation
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocumentationGknSearch(body: GKNDocumentationSearchRequest, completion: @escaping ((_ data: GKNDocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDocumentationGknSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GKNDocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search gkn documentation
     
     - POST /api/v2/documentation/gkn/search
     - 
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "link" : "aeiou",
    "_type" : "aeiou",
    "title" : "aeiou",
    "content" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<GKNDocumentationSearchResponse> 
     */
    open class func postDocumentationGknSearchWithRequestBuilder(body: GKNDocumentationSearchRequest) -> RequestBuilder<GKNDocumentationSearchResponse> {
        let path = "/api/v2/documentation/gkn/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GKNDocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search documentation
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocumentationSearch(body: DocumentationSearchRequest, completion: @escaping ((_ data: DocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDocumentationSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search documentation
     
     - POST /api/v2/documentation/search
     - 
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "releasenote_category" : [ 123 ],
    "facet_role" : [ 123 ],
    "link" : "aeiou",
    "service-area" : [ 123 ],
    "description" : "aeiou",
    "facet_service" : [ 123 ],
    "title" : "aeiou",
    "facet_feature" : [ 123 ],
    "content" : "aeiou",
    "releasenote_tag" : [ 123 ],
    "get_type" : "aeiou",
    "service" : [ 123 ],
    "faq_categories" : [ 123 ],
    "name" : "aeiou",
    "modified" : "2000-01-23T04:56:07.000+0000",
    "id" : 123,
    "categories" : [ 123 ],
    "video_categories" : [ 123 ],
    "excerpt" : "aeiou",
    "slug" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<DocumentationSearchResponse> 
     */
    open class func postDocumentationSearchWithRequestBuilder(body: DocumentationSearchRequest) -> RequestBuilder<DocumentationSearchResponse> {
        let path = "/api/v2/documentation/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search groups
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGroupsSearch(body: GroupSearchRequest, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postGroupsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search groups
     
     - POST /api/v2/groups/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "addresses" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "owners" : [ {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ "" ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ "" ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : "",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ],
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func postGroupsSearchWithRequestBuilder(body: GroupSearchRequest) -> RequestBuilder<GroupsSearchResponse> {
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search Documents
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseSearch(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil, completion: @escaping ((_ data: KnowledgeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, body: body)
        requestBuilder.execute { (response: Response<KnowledgeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search Documents
     
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "pageCount" : 123,
  "pageNumber" : 123,
  "searchId" : "aeiou",
  "pageSize" : 123,
  "results" : [ {
    "externalUrl" : "aeiou",
    "confidence" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "languageCode" : "aeiou",
    "type" : "aeiou",
    "article" : {
      "alternatives" : [ "aeiou" ],
      "title" : "aeiou",
      "content" : {
        "body" : {
          "locationUrl" : "aeiou"
        }
      }
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "knowledgeBase" : "",
    "faq" : {
      "question" : "aeiou",
      "answer" : "aeiou",
      "alternatives" : [ "aeiou" ]
    },
    "name" : "aeiou",
    "id" : "aeiou",
    "categories" : [ {
      "knowledgeBase" : {
        "dateDocumentLastModified" : "2000-01-23T04:56:07.000+0000",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "faqCount" : 123,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "coreLanguage" : "en-us",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "articleCount" : 123,
        "id" : "aeiou",
        "published" : true
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "languageCode" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<KnowledgeSearchResponse> 
     */
    open class func postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil) -> RequestBuilder<KnowledgeSearchResponse> {
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search locations
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLocationsSearch(body: LocationSearchRequest, completion: @escaping ((_ data: LocationsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLocationsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LocationsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search locations
     
     - POST /api/v2/locations/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : "aeiou",
    "address" : {
      "zipcode" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street1" : "aeiou",
      "countryName" : "aeiou",
      "state" : "aeiou",
      "street2" : "aeiou"
    },
    "notes" : "aeiou",
    "floorplanImage" : [ "" ],
    "addressVerificationDetails" : {
      "dateStarted" : "2000-01-23T04:56:07.000+0000",
      "dateFinished" : "2000-01-23T04:56:07.000+0000",
      "service" : "smartystreets-us",
      "status" : "aeiou"
    },
    "selfUri" : "aeiou",
    "profileImage" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "emergencyNumber" : {
      "number" : "aeiou",
      "e164" : "aeiou",
      "type" : "aeiou"
    },
    "version" : 123,
    "path" : [ "aeiou" ],
    "addressStored" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "contactUser" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "state" : "aeiou",
    "addressVerified" : true
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<LocationsSearchResponse> 
     */
    open class func postLocationsSearchWithRequestBuilder(body: LocationSearchRequest) -> RequestBuilder<LocationsSearchResponse> {
        let path = "/api/v2/locations/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocationsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSearch(body: SearchRequest, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSearchWithRequestBuilder(body: body, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search resources.
     
     - POST /api/v2/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : { },
  "aggregations" : ""
}}]
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional, default to true)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func postSearchWithRequestBuilder(body: SearchRequest, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {
        let path = "/api/v2/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "profile": profile
            
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Suggest resources.
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSearchSuggest(body: SuggestSearchRequest, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSearchSuggestWithRequestBuilder(body: body, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Suggest resources.
     
     - POST /api/v2/search/suggest
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : { },
  "aggregations" : ""
}}]
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional, default to true)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func postSearchSuggestWithRequestBuilder(body: SuggestSearchRequest, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {
        let path = "/api/v2/search/suggest"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "profile": profile
            
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsTranscriptsSearch(body: TranscriptSearchRequest, completion: @escaping ((_ data: JsonSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JsonSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search resources.
     
     - POST /api/v2/speechandtextanalytics/transcripts/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "pageSize" : 123,
  "results" : { },
  "aggregations" : ""
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<JsonSearchResponse> 
     */
    open class func postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: TranscriptSearchRequest) -> RequestBuilder<JsonSearchResponse> {
        let path = "/api/v2/speechandtextanalytics/transcripts/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search users
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearch(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search users
     
     - POST /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : "",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Search voicemails
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postVoicemailSearch(body: VoicemailSearchRequest, completion: @escaping ((_ data: VoicemailsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postVoicemailSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<VoicemailsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Search voicemails
     
     - POST /api/v2/voicemail/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "callerAddress" : "aeiou",
    "note" : "aeiou",
    "audioRecordingSizeBytes" : 123456789,
    "copiedTo" : [ "" ],
    "read" : true,
    "selfUri" : "aeiou",
    "callerUser" : "",
    "deleteRetentionPolicy" : {
      "numberOfDays" : 123,
      "voicemailRetentionPolicyType" : "aeiou"
    },
    "callerName" : "aeiou",
    "copiedFrom" : {
      "date" : "2000-01-23T04:56:07.000+0000",
      "user" : "",
      "group" : ""
    },
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+0000",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "audioRecordingDurationSeconds" : 123,
    "user" : "",
    "conversation" : {
      "address" : "aeiou",
      "selfUri" : "aeiou",
      "externalTag" : "aeiou",
      "divisions" : [ {
        "division" : "",
        "entities" : [ "" ]
      } ],
      "maxParticipants" : 123,
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "callerId" : "aeiou",
          "callerIdName" : "aeiou"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : ""
          } ],
          "priority" : 123,
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "redacted" : true,
          "selfUri" : "aeiou",
          "answers" : {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "mediaType" : [ "aeiou" ],
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "neverRelease" : true,
          "agentHasRead" : true,
          "conversationDate" : "2000-01-23T04:56:07.000+0000",
          "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "id" : "aeiou",
          "rescore" : true,
          "calibration" : {
            "agent" : "",
            "evaluations" : [ "" ],
            "selfUri" : "aeiou",
            "evaluators" : [ "" ],
            "contextId" : "aeiou",
            "averageScore" : 123,
            "calibrator" : "",
            "highScore" : 123,
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "scoringIndex" : "",
            "expertEvaluator" : "",
            "name" : "aeiou",
            "id" : "aeiou",
            "lowScore" : 123,
            "conversation" : "",
            "evaluationForm" : ""
          },
          "conversation" : "",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          },
          "isScoringIndex" : true,
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : "",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : "",
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ]
      } ]
    },
    "queue" : "",
    "group" : ""
  } ]
}}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<VoicemailsSearchResponse> 
     */
    open class func postVoicemailSearchWithRequestBuilder(body: VoicemailSearchRequest) -> RequestBuilder<VoicemailsSearchResponse> {
        let path = "/api/v2/voicemail/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VoicemailsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
