//
// LogCaptureAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LogCaptureAPI {
    
    /**
     Gets status of async download execution
     
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiagnosticsLogcaptureBrowserEntriesDownloadJob(jobId: String, completion: @escaping ((_ data: LogCaptureDownloadExecutionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDiagnosticsLogcaptureBrowserEntriesDownloadJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<LogCaptureDownloadExecutionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets status of async download execution
     - GET /api/v2/diagnostics/logcapture/browser/entries/download/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "fileUrl" : "fileUrl",
  "id" : "id",
  "state" : "Running",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter jobId: (path) Job ID 

     - returns: RequestBuilder<LogCaptureDownloadExecutionResponse> 
     */
    open class func getDiagnosticsLogcaptureBrowserEntriesDownloadJobWithRequestBuilder(jobId: String) -> RequestBuilder<LogCaptureDownloadExecutionResponse> {        
        var path = "/api/v2/diagnostics/logcapture/browser/entries/download/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureDownloadExecutionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Creates an async download execution
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesDownloadJobs(body: LogCaptureQueryRequest? = nil, completion: @escaping ((_ data: LogCaptureDownloadExecutionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDiagnosticsLogcaptureBrowserEntriesDownloadJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LogCaptureDownloadExecutionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates an async download execution
     - POST /api/v2/diagnostics/logcapture/browser/entries/download/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "fileUrl" : "fileUrl",
  "id" : "id",
  "state" : "Running",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<LogCaptureDownloadExecutionResponse> 
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesDownloadJobsWithRequestBuilder(body: LogCaptureQueryRequest? = nil) -> RequestBuilder<LogCaptureDownloadExecutionResponse> {        
        let path = "/api/v2/diagnostics/logcapture/browser/entries/download/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureDownloadExecutionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
