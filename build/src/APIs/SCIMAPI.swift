//
// SCIMAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SCIMAPI {
    
    
    
    
    
    /**
     
     Delete a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteScimUser(userId: String, ifMatch: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteScimUserWithRequestBuilder(userId: userId, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a user
     
     - DELETE /api/v2/scim/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func deleteScimUserWithRequestBuilder(userId: String, ifMatch: String? = nil) -> RequestBuilder<Empty> {
        var path = "/api/v2/scim/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    /**
     
     Delete a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteScimV2User(userId: String, ifMatch: String? = nil, completion: @escaping ((_ data: Empty?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteScimV2UserWithRequestBuilder(userId: userId, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<Empty>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a user
     
     - DELETE /api/v2/scim/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<Empty> 
     */
    open class func deleteScimV2UserWithRequestBuilder(userId: String, ifMatch: String? = nil) -> RequestBuilder<Empty> {
        var path = "/api/v2/scim/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    /**
     
     Get a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimGroup(groupId: String, ifNoneMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimGroupWithRequestBuilder(groupId: groupId, ifNoneMatch: ifNoneMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a group
     
     - GET /api/v2/scim/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func getScimGroupWithRequestBuilder(groupId: String, ifNoneMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of groups
     
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)
     - parameter filter: (query) Filters results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimGroups(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil, completion: @escaping ((_ data: ScimGroupListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimGroupsWithRequestBuilder(startIndex: startIndex, count: count, filter: filter)
        requestBuilder.execute { (response: Response<ScimGroupListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of groups
     
     - GET /api/v2/scim/groups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalResults" : 123456789,
  "startIndex" : 123456789,
  "itemsPerPage" : 123456789,
  "schemas" : [ "aeiou" ],
  "Resources" : [ {
    "displayName" : "aeiou",
    "meta" : "",
    "schemas" : [ "aeiou" ],
    "members" : [ {
      "meta" : {
        "location" : "aeiou",
        "lastModified" : "2000-01-23T04:56:07.000+0000",
        "version" : "aeiou",
        "resourceType" : "aeiou"
      },
      "type" : "aeiou",
      "value" : "aeiou",
      "$ref" : "aeiou"
    } ],
    "id" : "aeiou"
  } ]
}}]
     
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)
     - parameter filter: (query) Filters results. (optional)

     - returns: RequestBuilder<ScimGroupListResponse> 
     */
    open class func getScimGroupsWithRequestBuilder(startIndex: Int? = nil, count: Int? = nil, filter: String? = nil) -> RequestBuilder<ScimGroupListResponse> {
        let path = "/api/v2/scim/groups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startIndex": startIndex?.encodeToJSON(), 
            
            "count": count?.encodeToJSON(), 
            
            "filter": filter
            
        ])

        let requestBuilder: RequestBuilder<ScimGroupListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter ifNoneMatch: (header) TThe ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimUser(userId: String, ifNoneMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimUserWithRequestBuilder(userId: userId, ifNoneMatch: ifNoneMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a user
     
     - GET /api/v2/scim/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter ifNoneMatch: (header) TThe ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func getScimUserWithRequestBuilder(userId: String, ifNoneMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of users
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimUsers(filter: String, startIndex: Int? = nil, count: Int? = nil, completion: @escaping ((_ data: ScimUserListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimUsersWithRequestBuilder(filter: filter, startIndex: startIndex, count: count)
        requestBuilder.execute { (response: Response<ScimUserListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of users
     
     - GET /api/v2/scim/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalResults" : 123456789,
  "startIndex" : 123456789,
  "itemsPerPage" : 123456789,
  "schemas" : [ "aeiou" ],
  "Resources" : [ {
    "displayName" : "aeiou",
    "roles" : [ "aeiou" ],
    "active" : true,
    "externalId" : "aeiou",
    "groups" : [ {
      "meta" : {
        "location" : "aeiou",
        "lastModified" : "2000-01-23T04:56:07.000+0000",
        "version" : "aeiou",
        "resourceType" : "aeiou"
      },
      "type" : "aeiou",
      "value" : "aeiou",
      "$ref" : "aeiou"
    } ],
    "userName" : "aeiou",
    "title" : "aeiou",
    "photos" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ],
    "phoneNumbers" : [ {
      "type" : "aeiou",
      "value" : "aeiou",
      "primary" : true
    } ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
      "division" : "aeiou",
      "manager" : {
        "value" : "aeiou",
        "$ref" : "aeiou"
      },
      "department" : "aeiou"
    },
    "emails" : [ {
      "type" : "aeiou",
      "value" : "aeiou",
      "primary" : true
    } ],
    "password" : "aeiou",
    "meta" : "",
    "schemas" : [ "aeiou" ],
    "id" : "aeiou"
  } ]
}}]
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)

     - returns: RequestBuilder<ScimUserListResponse> 
     */
    open class func getScimUsersWithRequestBuilder(filter: String, startIndex: Int? = nil, count: Int? = nil) -> RequestBuilder<ScimUserListResponse> {
        let path = "/api/v2/scim/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startIndex": startIndex?.encodeToJSON(), 
            
            "count": count?.encodeToJSON(), 
            
            "filter": filter
            
        ])

        let requestBuilder: RequestBuilder<ScimUserListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter ifNoneMatch: (header) TThe ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimV2Group(groupId: String, ifNoneMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimV2GroupWithRequestBuilder(groupId: groupId, ifNoneMatch: ifNoneMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a group
     
     - GET /api/v2/scim/v2/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter ifNoneMatch: (header) TThe ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.  (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func getScimV2GroupWithRequestBuilder(groupId: String, ifNoneMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of groups
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimV2Groups(filter: String, startIndex: Int? = nil, count: Int? = nil, completion: @escaping ((_ data: ScimGroupListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimV2GroupsWithRequestBuilder(filter: filter, startIndex: startIndex, count: count)
        requestBuilder.execute { (response: Response<ScimGroupListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of groups
     
     - GET /api/v2/scim/v2/groups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalResults" : 123456789,
  "startIndex" : 123456789,
  "itemsPerPage" : 123456789,
  "schemas" : [ "aeiou" ],
  "Resources" : [ {
    "displayName" : "aeiou",
    "meta" : "",
    "schemas" : [ "aeiou" ],
    "members" : [ {
      "meta" : {
        "location" : "aeiou",
        "lastModified" : "2000-01-23T04:56:07.000+0000",
        "version" : "aeiou",
        "resourceType" : "aeiou"
      },
      "type" : "aeiou",
      "value" : "aeiou",
      "$ref" : "aeiou"
    } ],
    "id" : "aeiou"
  } ]
}}]
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)

     - returns: RequestBuilder<ScimGroupListResponse> 
     */
    open class func getScimV2GroupsWithRequestBuilder(filter: String, startIndex: Int? = nil, count: Int? = nil) -> RequestBuilder<ScimGroupListResponse> {
        let path = "/api/v2/scim/v2/groups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startIndex": startIndex?.encodeToJSON(), 
            
            "count": count?.encodeToJSON(), 
            
            "filter": filter
            
        ])

        let requestBuilder: RequestBuilder<ScimGroupListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the SCIM configuration
     
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimV2Serviceproviderconfig(ifNoneMatch: String? = nil, completion: @escaping ((_ data: ScimServiceProviderConfig?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimV2ServiceproviderconfigWithRequestBuilder(ifNoneMatch: ifNoneMatch)
        requestBuilder.execute { (response: Response<ScimServiceProviderConfig>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the SCIM configuration
     
     - GET /api/v2/scim/v2/serviceproviderconfig
     - 
     - examples: [{contentType=application/json, example={
  "documentationUri" : "aeiou",
  "meta" : {
    "location" : "aeiou",
    "lastModified" : "2000-01-23T04:56:07.000+0000",
    "version" : "aeiou",
    "resourceType" : "aeiou"
  }
}}]
     
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.  (optional)

     - returns: RequestBuilder<ScimServiceProviderConfig> 
     */
    open class func getScimV2ServiceproviderconfigWithRequestBuilder(ifNoneMatch: String? = nil) -> RequestBuilder<ScimServiceProviderConfig> {
        let path = "/api/v2/scim/v2/serviceproviderconfig"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimServiceProviderConfig>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    /**
     
     Get a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimV2User(userId: String, ifNoneMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimV2UserWithRequestBuilder(userId: userId, ifNoneMatch: ifNoneMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a user
     
     - GET /api/v2/scim/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter ifNoneMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func getScimV2UserWithRequestBuilder(userId: String, ifNoneMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-None-Match": ifNoneMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of users
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScimV2Users(filter: String, startIndex: Int? = nil, count: Int? = nil, completion: @escaping ((_ data: ScimUserListResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getScimV2UsersWithRequestBuilder(filter: filter, startIndex: startIndex, count: count)
        requestBuilder.execute { (response: Response<ScimUserListResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of users
     
     - GET /api/v2/scim/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalResults" : 123456789,
  "startIndex" : 123456789,
  "itemsPerPage" : 123456789,
  "schemas" : [ "aeiou" ],
  "Resources" : [ {
    "displayName" : "aeiou",
    "roles" : [ "aeiou" ],
    "active" : true,
    "externalId" : "aeiou",
    "groups" : [ {
      "meta" : {
        "location" : "aeiou",
        "lastModified" : "2000-01-23T04:56:07.000+0000",
        "version" : "aeiou",
        "resourceType" : "aeiou"
      },
      "type" : "aeiou",
      "value" : "aeiou",
      "$ref" : "aeiou"
    } ],
    "userName" : "aeiou",
    "title" : "aeiou",
    "photos" : [ {
      "type" : "aeiou",
      "value" : "aeiou"
    } ],
    "phoneNumbers" : [ {
      "type" : "aeiou",
      "value" : "aeiou",
      "primary" : true
    } ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
      "division" : "aeiou",
      "manager" : {
        "value" : "aeiou",
        "$ref" : "aeiou"
      },
      "department" : "aeiou"
    },
    "emails" : [ {
      "type" : "aeiou",
      "value" : "aeiou",
      "primary" : true
    } ],
    "password" : "aeiou",
    "meta" : "",
    "schemas" : [ "aeiou" ],
    "id" : "aeiou"
  } ]
}}]
     
     - parameter filter: (query) Filters results. 
     - parameter startIndex: (query) The 1-based index of the first query result. (optional, default to 1)
     - parameter count: (query) The requested number of items per page. A value of 0 returns totalResults. (optional, default to 25)

     - returns: RequestBuilder<ScimUserListResponse> 
     */
    open class func getScimV2UsersWithRequestBuilder(filter: String, startIndex: Int? = nil, count: Int? = nil) -> RequestBuilder<ScimUserListResponse> {
        let path = "/api/v2/scim/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "startIndex": startIndex?.encodeToJSON(), 
            
            "count": count?.encodeToJSON(), 
            
            "filter": filter
            
        ])

        let requestBuilder: RequestBuilder<ScimUserListResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Modify a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter body: (body) The information used to modify a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchScimGroup(groupId: String, body: ScimV2PatchRequest, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = patchScimGroupWithRequestBuilder(groupId: groupId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Modify a group
     
     - PATCH /api/v2/scim/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter body: (body) The information used to modify a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func patchScimGroupWithRequestBuilder(groupId: String, body: ScimV2PatchRequest, ifMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Modify a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter body: (body) The information used to modify a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchScimUser(userId: String, body: ScimV2PatchRequest, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = patchScimUserWithRequestBuilder(userId: userId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Modify a user
     
     - PATCH /api/v2/scim/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter body: (body) The information used to modify a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func patchScimUserWithRequestBuilder(userId: String, body: ScimV2PatchRequest, ifMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Modify a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter body: (body) The information used to modify a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchScimV2Group(groupId: String, body: ScimV2PatchRequest, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = patchScimV2GroupWithRequestBuilder(groupId: groupId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Modify a group
     
     - PATCH /api/v2/scim/v2/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter body: (body) The information used to modify a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func patchScimV2GroupWithRequestBuilder(groupId: String, body: ScimV2PatchRequest, ifMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Modify a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter body: (body) The information used to modify a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchScimV2User(userId: String, body: ScimV2PatchRequest, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = patchScimV2UserWithRequestBuilder(userId: userId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Modify a user
     
     - PATCH /api/v2/scim/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter body: (body) The information used to modify a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func patchScimV2UserWithRequestBuilder(userId: String, body: ScimV2PatchRequest, ifMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    /**
     
     Create a user
     
     - parameter body: (body) The information used to create a user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postScimUsers(body: ScimV2CreateUser, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = postScimUsersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a user
     
     - POST /api/v2/scim/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter body: (body) The information used to create a user. 

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func postScimUsersWithRequestBuilder(body: ScimV2CreateUser) -> RequestBuilder<ScimV2User> {
        let path = "/api/v2/scim/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a user
     
     - parameter body: (body) The information used to create a user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postScimV2Users(body: ScimV2CreateUser, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = postScimV2UsersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a user
     
     - POST /api/v2/scim/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter body: (body) The information used to create a user. 

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func postScimV2UsersWithRequestBuilder(body: ScimV2CreateUser) -> RequestBuilder<ScimV2User> {
        let path = "/api/v2/scim/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter body: (body) The information used to replace a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScimGroup(groupId: String, body: ScimV2Group, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = putScimGroupWithRequestBuilder(groupId: groupId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace a group
     
     - PUT /api/v2/scim/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/groups. 
     - parameter body: (body) The information used to replace a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func putScimGroupWithRequestBuilder(groupId: String, body: ScimV2Group, ifMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Replace a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter body: (body) The information used to replace a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScimUser(userId: String, body: ScimV2User, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = putScimUserWithRequestBuilder(userId: userId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace a user
     
     - PUT /api/v2/scim/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/users. 
     - parameter body: (body) The information used to replace a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func putScimUserWithRequestBuilder(userId: String, body: ScimV2User, ifMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Replace a group
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter body: (body) The information used to replace a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScimV2Group(groupId: String, body: ScimV2Group, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2Group?,_ error: Error?) -> Void)) {
        let requestBuilder = putScimV2GroupWithRequestBuilder(groupId: groupId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace a group
     
     - PUT /api/v2/scim/v2/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "members" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "id" : "aeiou"
}}]
     
     - parameter groupId: (path) The ID of a group. Returned with GET /api/v2/scim/v2/groups. 
     - parameter body: (body) The information used to replace a group. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2Group> 
     */
    open class func putScimV2GroupWithRequestBuilder(groupId: String, body: ScimV2Group, ifMatch: String? = nil) -> RequestBuilder<ScimV2Group> {
        var path = "/api/v2/scim/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body, headers: headerParameters)
    }

    
    
    
    
    
    
    
    /**
     
     Replace a user
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter body: (body) The information used to replace a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putScimV2User(userId: String, body: ScimV2User, ifMatch: String? = nil, completion: @escaping ((_ data: ScimV2User?,_ error: Error?) -> Void)) {
        let requestBuilder = putScimV2UserWithRequestBuilder(userId: userId, body: body, ifMatch: ifMatch)
        requestBuilder.execute { (response: Response<ScimV2User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace a user
     
     - PUT /api/v2/scim/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "displayName" : "aeiou",
  "roles" : [ "aeiou" ],
  "active" : true,
  "externalId" : "aeiou",
  "groups" : [ {
    "meta" : {
      "location" : "aeiou",
      "lastModified" : "2000-01-23T04:56:07.000+0000",
      "version" : "aeiou",
      "resourceType" : "aeiou"
    },
    "type" : "aeiou",
    "value" : "aeiou",
    "$ref" : "aeiou"
  } ],
  "userName" : "aeiou",
  "title" : "aeiou",
  "photos" : [ {
    "type" : "aeiou",
    "value" : "aeiou"
  } ],
  "phoneNumbers" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" : {
    "division" : "aeiou",
    "manager" : {
      "value" : "aeiou",
      "$ref" : "aeiou"
    },
    "department" : "aeiou"
  },
  "emails" : [ {
    "type" : "aeiou",
    "value" : "aeiou",
    "primary" : true
  } ],
  "password" : "aeiou",
  "meta" : "",
  "schemas" : [ "aeiou" ],
  "id" : "aeiou"
}}]
     
     - parameter userId: (path) The ID of a user. Returned with GET /api/v2/scim/v2/users. 
     - parameter body: (body) The information used to replace a user. 
     - parameter ifMatch: (header) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \&quot;42\&quot;. If the ETag is different from the version on the server, returns 400 with a scimType of \&quot;invalidVers\&quot;. (optional)

     - returns: RequestBuilder<ScimV2User> 
     */
    open class func putScimV2UserWithRequestBuilder(userId: String, body: ScimV2User, ifMatch: String? = nil) -> RequestBuilder<ScimV2User> {
        var path = "/api/v2/scim/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "If-Match": ifMatch
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ScimV2User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body, headers: headerParameters)
    }

}
