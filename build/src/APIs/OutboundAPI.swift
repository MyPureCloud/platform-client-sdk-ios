//
// OutboundAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class OutboundAPI {
    
    
    
    /**
     
     Delete attempt limits
     
     - parameter attemptLimitsId: (path) Attempt limits ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundAttemptlimit(attemptLimitsId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: attemptLimitsId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete attempt limits
     
     - DELETE /api/v2/outbound/attemptlimits/{attemptLimitsId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter attemptLimitsId: (path) Attempt limits ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/attemptlimits/{attemptLimitsId}"
        let attemptLimitsIdPreEscape = "\(attemptLimitsId)"
        let attemptLimitsIdPostEscape = attemptLimitsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attemptLimitsId}", with: attemptLimitsIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete callable time set
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundCallabletimeset(callableTimeSetId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: callableTimeSetId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete callable time set
     
     - DELETE /api/v2/outbound/callabletimesets/{callableTimeSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/callabletimesets/{callableTimeSetId}"
        let callableTimeSetIdPreEscape = "\(callableTimeSetId)"
        let callableTimeSetIdPostEscape = callableTimeSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callableTimeSetId}", with: callableTimeSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a dialer call analysis response set.
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundCallanalysisresponseset(callAnalysisSetId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: callAnalysisSetId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a dialer call analysis response set.
     
     - DELETE /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}"
        let callAnalysisSetIdPreEscape = "\(callAnalysisSetId)"
        let callAnalysisSetIdPostEscape = callAnalysisSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callAnalysisSetId}", with: callAnalysisSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a campaign.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundCampaign(campaignId: String, completion: @escaping ((_ data: Campaign?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundCampaignWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<Campaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a campaign.
     
     - DELETE /api/v2/outbound/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou"
  } ],
  "edgeGroup" : "",
  "callAnalysisResponseSet" : "",
  "previewTimeOutSeconds" : 123456789,
  "dncLists" : [ "" ],
  "callerName" : "aeiou",
  "contactListFilters" : [ "" ],
  "division" : "",
  "alwaysRunning" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "contactSorts" : [ "" ],
  "campaignStatus" : "aeiou",
  "outboundLineCount" : 123,
  "id" : "aeiou",
  "noAnswerTimeout" : 123,
  "dialingMode" : "aeiou",
  "callerAddress" : "(555) 555-5555",
  "skipPreviewDisabled" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "callAnalysisLanguage" : "aeiou",
  "priority" : 123,
  "version" : 123,
  "ruleSets" : [ "" ],
  "script" : "",
  "contactSort" : {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  },
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "site" : "",
  "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
  "name" : "aeiou",
  "queue" : "",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<Campaign> 
     */
    open class func deleteOutboundCampaignWithRequestBuilder(campaignId: String) -> RequestBuilder<Campaign> {
        var path = "/api/v2/outbound/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Campaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Reset campaign progress and recycle the campaign
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundCampaignProgress(campaignId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundCampaignProgressWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Reset campaign progress and recycle the campaign
     
     - DELETE /api/v2/outbound/campaigns/{campaignId}/progress
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundCampaignProgressWithRequestBuilder(campaignId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/progress"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete Campaign Rule
     
     - parameter campaignRuleId: (path) Campaign Rule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundCampaignrule(campaignRuleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundCampaignruleWithRequestBuilder(campaignRuleId: campaignRuleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Campaign Rule
     
     - DELETE /api/v2/outbound/campaignrules/{campaignRuleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter campaignRuleId: (path) Campaign Rule ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundCampaignruleWithRequestBuilder(campaignRuleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/campaignrules/{campaignRuleId}"
        let campaignRuleIdPreEscape = "\(campaignRuleId)"
        let campaignRuleIdPostEscape = campaignRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignRuleId}", with: campaignRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a contact list.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundContactlist(contactListId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundContactlistWithRequestBuilder(contactListId: contactListId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a contact list.
     
     - DELETE /api/v2/outbound/contactlists/{contactListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactListId: (path) ContactList ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundContactlistWithRequestBuilder(contactListId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/contactlists/{contactListId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a contact.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundContactlistContact(contactListId: String, contactId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundContactlistContactWithRequestBuilder(contactListId: contactListId, contactId: contactId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a contact.
     
     - DELETE /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundContactlistContactWithRequestBuilder(contactListId: String, contactId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete contacts from a contact list.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactIds: (query) ContactIds to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundContactlistContacts(contactListId: String, contactIds: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundContactlistContactsWithRequestBuilder(contactListId: contactListId, contactIds: contactIds)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete contacts from a contact list.
     
     - DELETE /api/v2/outbound/contactlists/{contactListId}/contacts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactIds: (query) ContactIds to delete. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundContactlistContactsWithRequestBuilder(contactListId: String, contactIds: [String]) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "contactIds": contactIds
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete Contact List Filter
     
     - parameter contactListFilterId: (path) Contact List Filter ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundContactlistfilter(contactListFilterId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundContactlistfilterWithRequestBuilder(contactListFilterId: contactListFilterId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Contact List Filter
     
     - DELETE /api/v2/outbound/contactlistfilters/{contactListFilterId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactListFilterId: (path) Contact List Filter ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundContactlistfilterWithRequestBuilder(contactListFilterId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/contactlistfilters/{contactListFilterId}"
        let contactListFilterIdPreEscape = "\(contactListFilterId)"
        let contactListFilterIdPostEscape = contactListFilterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListFilterId}", with: contactListFilterIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete multiple contact lists.
     
     - parameter _id: (query) contact list id(s) to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundContactlists(_id: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundContactlistsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete multiple contact lists.
     
     - DELETE /api/v2/outbound/contactlists
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter _id: (query) contact list id(s) to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundContactlistsWithRequestBuilder(_id: [String]) -> RequestBuilder<Void> {
        let path = "/api/v2/outbound/contactlists"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete dialer DNC list
     
     - parameter dncListId: (path) DncList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundDnclist(dncListId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundDnclistWithRequestBuilder(dncListId: dncListId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete dialer DNC list
     
     - DELETE /api/v2/outbound/dnclists/{dncListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter dncListId: (path) DncList ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundDnclistWithRequestBuilder(dncListId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/dnclists/{dncListId}"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an Outbound Messaging Campaign
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundMessagingcampaign(messagingCampaignId: String, completion: @escaping ((_ data: MessagingCampaign?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: messagingCampaignId)
        requestBuilder.execute { (response: Response<MessagingCampaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an Outbound Messaging Campaign
     
     - DELETE /api/v2/outbound/messagingcampaigns/{messagingCampaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "dncLists" : [ "" ],
  "messagesPerMinute" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "alwaysRunning" : true,
  "contactList" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "smsConfig" : {
    "senderSmsPhoneNumber" : {
      "phoneNumber" : "aeiou",
      "selfUri" : "aeiou"
    },
    "messageColumn" : "aeiou",
    "phoneColumn" : "aeiou"
  },
  "contactSorts" : [ {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  } ],
  "name" : "aeiou",
  "campaignStatus" : "aeiou",
  "id" : "aeiou",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 

     - returns: RequestBuilder<MessagingCampaign> 
     */
    open class func deleteOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: String) -> RequestBuilder<MessagingCampaign> {
        var path = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}"
        let messagingCampaignIdPreEscape = "\(messagingCampaignId)"
        let messagingCampaignIdPostEscape = messagingCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messagingCampaignId}", with: messagingCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessagingCampaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a Rule set.
     
     - parameter ruleSetId: (path) Rule Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundRuleset(ruleSetId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundRulesetWithRequestBuilder(ruleSetId: ruleSetId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Rule set.
     
     - DELETE /api/v2/outbound/rulesets/{ruleSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter ruleSetId: (path) Rule Set ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundRulesetWithRequestBuilder(ruleSetId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/rulesets/{ruleSetId}"
        let ruleSetIdPreEscape = "\(ruleSetId)"
        let ruleSetIdPostEscape = ruleSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleSetId}", with: ruleSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a dialer campaign schedule.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundSchedulesCampaign(campaignId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundSchedulesCampaignWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a dialer campaign schedule.
     
     - DELETE /api/v2/outbound/schedules/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundSchedulesCampaignWithRequestBuilder(campaignId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/schedules/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a dialer sequence schedule.
     
     - parameter sequenceId: (path) Sequence ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundSchedulesSequence(sequenceId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundSchedulesSequenceWithRequestBuilder(sequenceId: sequenceId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a dialer sequence schedule.
     
     - DELETE /api/v2/outbound/schedules/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter sequenceId: (path) Sequence ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundSchedulesSequenceWithRequestBuilder(sequenceId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/schedules/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a dialer campaign sequence.
     
     - parameter sequenceId: (path) Campaign Sequence ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOutboundSequence(sequenceId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOutboundSequenceWithRequestBuilder(sequenceId: sequenceId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a dialer campaign sequence.
     
     - DELETE /api/v2/outbound/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter sequenceId: (path) Campaign Sequence ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOutboundSequenceWithRequestBuilder(sequenceId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get attempt limits
     
     - parameter attemptLimitsId: (path) Attempt limits ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundAttemptlimit(attemptLimitsId: String, completion: @escaping ((_ data: AttemptLimits?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: attemptLimitsId)
        requestBuilder.execute { (response: Response<AttemptLimits>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get attempt limits
     
     - GET /api/v2/outbound/attemptlimits/{attemptLimitsId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetPeriod" : "aeiou",
  "maxAttemptsPerNumber" : 123,
  "recallEntries" : {
    "key" : {
      "nbrAttempts" : 123,
      "minutesBetweenAttempts" : 123
    }
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "timeZoneId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "maxAttemptsPerContact" : 123
}}]
     
     - parameter attemptLimitsId: (path) Attempt limits ID 

     - returns: RequestBuilder<AttemptLimits> 
     */
    open class func getOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: String) -> RequestBuilder<AttemptLimits> {
        var path = "/api/v2/outbound/attemptlimits/{attemptLimitsId}"
        let attemptLimitsIdPreEscape = "\(attemptLimitsId)"
        let attemptLimitsIdPostEscape = attemptLimitsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attemptLimitsId}", with: attemptLimitsIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AttemptLimits>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundAttemptlimits: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundAttemptlimits: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query attempt limits list
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundAttemptlimits(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundAttemptlimits? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundAttemptlimits? = nil, completion: @escaping ((_ data: AttemptLimitsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundAttemptlimitsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<AttemptLimitsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query attempt limits list
     
     - GET /api/v2/outbound/attemptlimits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "resetPeriod" : "aeiou",
    "maxAttemptsPerNumber" : 123,
    "recallEntries" : {
      "key" : {
        "nbrAttempts" : 123,
        "minutesBetweenAttempts" : 123
      }
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "timeZoneId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "version" : 123,
    "maxAttemptsPerContact" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<AttemptLimitsEntityListing> 
     */
    open class func getOutboundAttemptlimitsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundAttemptlimits? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundAttemptlimits? = nil) -> RequestBuilder<AttemptLimitsEntityListing> {
        let path = "/api/v2/outbound/attemptlimits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<AttemptLimitsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get callable time set
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCallabletimeset(callableTimeSetId: String, completion: @escaping ((_ data: CallableTimeSet?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: callableTimeSetId)
        requestBuilder.execute { (response: Response<CallableTimeSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get callable time set
     
     - GET /api/v2/outbound/callabletimesets/{callableTimeSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimes" : [ {
    "timeZoneId" : "Africa/Abidjan",
    "timeSlots" : [ {
      "startTime" : "08:00:00",
      "stopTime" : "08:00:00",
      "day" : 1
    } ]
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 

     - returns: RequestBuilder<CallableTimeSet> 
     */
    open class func getOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: String) -> RequestBuilder<CallableTimeSet> {
        var path = "/api/v2/outbound/callabletimesets/{callableTimeSetId}"
        let callableTimeSetIdPreEscape = "\(callableTimeSetId)"
        let callableTimeSetIdPostEscape = callableTimeSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callableTimeSetId}", with: callableTimeSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallableTimeSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundCallabletimesets: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundCallabletimesets: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query callable time set list
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCallabletimesets(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCallabletimesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCallabletimesets? = nil, completion: @escaping ((_ data: CallableTimeSetEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCallabletimesetsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CallableTimeSetEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query callable time set list
     
     - GET /api/v2/outbound/callabletimesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callableTimes" : [ {
      "timeZoneId" : "Africa/Abidjan",
      "timeSlots" : [ {
        "startTime" : "08:00:00",
        "stopTime" : "08:00:00",
        "day" : 1
      } ]
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CallableTimeSetEntityListing> 
     */
    open class func getOutboundCallabletimesetsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCallabletimesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCallabletimesets? = nil) -> RequestBuilder<CallableTimeSetEntityListing> {
        let path = "/api/v2/outbound/callabletimesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CallableTimeSetEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a dialer call analysis response set.
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCallanalysisresponseset(callAnalysisSetId: String, completion: @escaping ((_ data: ResponseSet?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: callAnalysisSetId)
        requestBuilder.execute { (response: Response<ResponseSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a dialer call analysis response set.
     
     - GET /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "responses" : {
    "key" : {
      "data" : "aeiou",
      "reactionType" : "aeiou",
      "name" : "aeiou"
    }
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 

     - returns: RequestBuilder<ResponseSet> 
     */
    open class func getOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: String) -> RequestBuilder<ResponseSet> {
        var path = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}"
        let callAnalysisSetIdPreEscape = "\(callAnalysisSetId)"
        let callAnalysisSetIdPostEscape = callAnalysisSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callAnalysisSetId}", with: callAnalysisSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundCallanalysisresponsesets: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundCallanalysisresponsesets: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of dialer call analysis response sets.
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCallanalysisresponsesets(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCallanalysisresponsesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCallanalysisresponsesets? = nil, completion: @escaping ((_ data: ResponseSetEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCallanalysisresponsesetsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<ResponseSetEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of dialer call analysis response sets.
     
     - GET /api/v2/outbound/callanalysisresponsesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "responses" : {
      "key" : {
        "data" : "aeiou",
        "reactionType" : "aeiou",
        "name" : "aeiou"
      }
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<ResponseSetEntityListing> 
     */
    open class func getOutboundCallanalysisresponsesetsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCallanalysisresponsesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCallanalysisresponsesets? = nil) -> RequestBuilder<ResponseSetEntityListing> {
        let path = "/api/v2/outbound/callanalysisresponsesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<ResponseSetEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get dialer campaign.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaign(campaignId: String, completion: @escaping ((_ data: Campaign?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<Campaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get dialer campaign.
     
     - GET /api/v2/outbound/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou"
  } ],
  "edgeGroup" : "",
  "callAnalysisResponseSet" : "",
  "previewTimeOutSeconds" : 123456789,
  "dncLists" : [ "" ],
  "callerName" : "aeiou",
  "contactListFilters" : [ "" ],
  "division" : "",
  "alwaysRunning" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "contactSorts" : [ "" ],
  "campaignStatus" : "aeiou",
  "outboundLineCount" : 123,
  "id" : "aeiou",
  "noAnswerTimeout" : 123,
  "dialingMode" : "aeiou",
  "callerAddress" : "(555) 555-5555",
  "skipPreviewDisabled" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "callAnalysisLanguage" : "aeiou",
  "priority" : 123,
  "version" : 123,
  "ruleSets" : [ "" ],
  "script" : "",
  "contactSort" : {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  },
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "site" : "",
  "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
  "name" : "aeiou",
  "queue" : "",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<Campaign> 
     */
    open class func getOutboundCampaignWithRequestBuilder(campaignId: String) -> RequestBuilder<Campaign> {
        var path = "/api/v2/outbound/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Campaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get campaign diagnostics
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignDiagnostics(campaignId: String, completion: @escaping ((_ data: CampaignDiagnostics?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignDiagnosticsWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignDiagnostics>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get campaign diagnostics
     
     - GET /api/v2/outbound/campaigns/{campaignId}/diagnostics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "scheduledInteractionsCount" : 123,
  "ruleSetDiagnostics" : [ {
    "warnings" : [ "aeiou" ],
    "ruleSet" : ""
  } ],
  "callableContacts" : {
    "callableTimeSet" : "",
    "attemptLimits" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "ruleSets" : [ "" ],
    "dncLists" : [ "" ]
  },
  "queueUtilizationDiagnostic" : {
    "usersOnQueueWithStation" : 123,
    "usersOnDifferentEdgeGroup" : 123,
    "usersOnACampaignCall" : 123,
    "usersInQueue" : 123,
    "usersNotUtilized" : 123,
    "usersOnANonCampaignCall" : 123,
    "queue" : "",
    "usersOnQueue" : 123,
    "activeUsersInQueue" : 123
  },
  "outstandingInteractionsCount" : 123
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignDiagnostics> 
     */
    open class func getOutboundCampaignDiagnosticsWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignDiagnostics> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/diagnostics"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignDiagnostics>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get dialer campaign interactions.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignInteractions(campaignId: String, completion: @escaping ((_ data: CampaignInteractions?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignInteractionsWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignInteractions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get dialer campaign interactions.
     
     - GET /api/v2/outbound/campaigns/{campaignId}/interactions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pendingInteractions" : [ {
    "dialingMode" : "aeiou",
    "callerAddress" : "aeiou",
    "agent" : "",
    "destinationAddress" : "aeiou",
    "creationTime" : "2000-01-23T04:56:07.000+0000",
    "lastActivePreviewWrapupTime" : "2000-01-23T04:56:07.000+0000",
    "previewPopDeliveredTime" : "2000-01-23T04:56:07.000+0000",
    "callRoutedTime" : "2000-01-23T04:56:07.000+0000",
    "script" : "",
    "callPlacedTime" : "2000-01-23T04:56:07.000+0000",
    "callerName" : "aeiou",
    "activePreviewCall" : true,
    "skills" : [ "" ],
    "disposition" : "aeiou",
    "contact" : "",
    "campaign" : "",
    "dialerSystemParticipantId" : "aeiou",
    "id" : "aeiou",
    "previewConnectedTime" : "2000-01-23T04:56:07.000+0000",
    "queue" : "",
    "conversation" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "divisions" : [ {
        "division" : "",
        "entities" : [ "" ]
      } ],
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : ""
          } ],
          "priority" : 123,
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "redacted" : true,
          "selfUri" : "aeiou",
          "answers" : {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "mediaType" : [ "aeiou" ],
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "neverRelease" : true,
          "agentHasRead" : true,
          "conversationDate" : "2000-01-23T04:56:07.000+0000",
          "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "id" : "aeiou",
          "rescore" : true,
          "calibration" : {
            "agent" : "",
            "evaluations" : [ "" ],
            "selfUri" : "aeiou",
            "evaluators" : [ "" ],
            "contextId" : "aeiou",
            "averageScore" : 123,
            "calibrator" : "",
            "highScore" : 123,
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "scoringIndex" : "",
            "expertEvaluator" : "",
            "name" : "aeiou",
            "id" : "aeiou",
            "lowScore" : 123,
            "conversation" : "",
            "evaluationForm" : ""
          },
          "conversation" : {
            "address" : "aeiou",
            "conversationIds" : [ "aeiou" ],
            "recordingState" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou",
            "divisions" : [ "" ],
            "participants" : [ {
              "queueId" : "aeiou",
              "monitoredParticipantId" : "aeiou",
              "externalContactId" : "aeiou",
              "wrapupSkipped" : true,
              "purpose" : "aeiou",
              "groupId" : "aeiou",
              "wrapupTimeoutMs" : 123,
              "callbacks" : [ {
                "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
                "peerId" : "aeiou",
                "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
                "held" : true,
                "afterCallWorkRequired" : true,
                "callbackNumbers" : [ "aeiou" ],
                "skipEnabled" : true,
                "segments" : [ "" ],
                "automatedCallbackConfigId" : "aeiou",
                "provider" : "aeiou",
                "externalCampaign" : true,
                "callbackUserName" : "aeiou",
                "afterCallWork" : "",
                "disconnectType" : "aeiou",
                "connectedTime" : "2000-01-23T04:56:07.000+0000",
                "state" : "aeiou",
                "id" : "aeiou",
                "dialerPreview" : "",
                "direction" : "aeiou",
                "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
                "wrapup" : "",
                "voicemail" : "",
                "scriptId" : "aeiou",
                "timeoutSeconds" : 123,
                "startHoldTime" : "2000-01-23T04:56:07.000+0000"
              } ],
              "videos" : [ "" ],
              "externalOrganizationId" : "aeiou",
              "locale" : "aeiou",
              "cobrowsesessions" : [ "" ],
              "alertingTimeoutMs" : 123,
              "emails" : [ "" ],
              "conversationRoutingData" : "",
              "endAcwTime" : "2000-01-23T04:56:07.000+0000",
              "wrapupRequired" : true,
              "connectedTime" : "2000-01-23T04:56:07.000+0000",
              "aniName" : "aeiou",
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "userUri" : "aeiou",
              "dnis" : "aeiou",
              "ani" : "aeiou",
              "startAcwTime" : "2000-01-23T04:56:07.000+0000",
              "wrapup" : "",
              "address" : "aeiou",
              "evaluations" : [ "" ],
              "participantType" : "aeiou",
              "userId" : "aeiou",
              "flaggedReason" : "aeiou",
              "consultParticipantId" : "aeiou",
              "screenRecordingState" : "aeiou",
              "queueName" : "aeiou",
              "coachedParticipantId" : "aeiou",
              "calls" : [ {
                "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
                "peerId" : "aeiou",
                "other" : "",
                "confined" : true,
                "held" : true,
                "afterCallWorkRequired" : true,
                "recording" : true,
                "errorInfo" : "",
                "segments" : [ "" ],
                "provider" : "aeiou",
                "afterCallWork" : "",
                "disconnectType" : "aeiou",
                "connectedTime" : "2000-01-23T04:56:07.000+0000",
                "state" : "aeiou",
                "id" : "aeiou",
                "faxStatus" : "",
                "uuiData" : "aeiou",
                "muted" : true,
                "direction" : "aeiou",
                "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
                "wrapup" : "",
                "scriptId" : "aeiou",
                "recordingState" : "aeiou",
                "self" : "",
                "documentId" : "aeiou",
                "startHoldTime" : "2000-01-23T04:56:07.000+0000",
                "recordingId" : "aeiou",
                "agentAssistantId" : "aeiou",
                "disconnectReasons" : [ "" ]
              } ],
              "teamId" : "aeiou",
              "name" : "aeiou",
              "wrapupPrompt" : "aeiou",
              "chats" : [ "" ],
              "messages" : [ "" ],
              "socialExpressions" : [ "" ],
              "attributes" : {
                "key" : "aeiou"
              },
              "endTime" : "2000-01-23T04:56:07.000+0000",
              "screenshares" : [ "" ]
            } ],
            "maxParticipants" : 123
          },
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : "",
            "callingPartyNumber" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          },
          "isScoringIndex" : true,
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : "",
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ]
      } ]
    }
  } ],
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "proceedingInteractions" : [ "" ],
  "previewingInteractions" : [ "" ],
  "interactingInteractions" : [ "" ],
  "scheduledInteractions" : [ "" ]
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignInteractions> 
     */
    open class func getOutboundCampaignInteractionsWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignInteractions> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/interactions"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignInteractions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get campaign progress
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignProgress(campaignId: String, completion: @escaping ((_ data: CampaignProgress?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignProgressWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignProgress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get campaign progress
     
     - GET /api/v2/outbound/campaigns/{campaignId}/progress
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : "",
  "numberOfContactsCalled" : 123456789,
  "numberOfContactsMessaged" : 123456789,
  "totalNumberOfContacts" : 123456789,
  "percentage" : 123456789,
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignProgress> 
     */
    open class func getOutboundCampaignProgressWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignProgress> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/progress"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignProgress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get statistics about a Dialer Campaign
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignStats(campaignId: String, completion: @escaping ((_ data: CampaignStats?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignStatsWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignStats>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get statistics about a Dialer Campaign
     
     - GET /api/v2/outbound/campaigns/{campaignId}/stats
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "idleAgents" : 123,
  "effectiveIdleAgents" : 1.3579000000000001069366817318950779736042022705078125,
  "outstandingCalls" : 123,
  "scheduledCalls" : 123,
  "contactRate" : {
    "connects" : 123456789,
    "connectRatio" : 1.3579000000000001069366817318950779736042022705078125,
    "attempts" : 123456789
  },
  "adjustedCallsPerAgent" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignStats> 
     */
    open class func getOutboundCampaignStatsWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignStats> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/stats"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignStats>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Campaign Rule
     
     - parameter campaignRuleId: (path) Campaign Rule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignrule(campaignRuleId: String, completion: @escaping ((_ data: CampaignRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignruleWithRequestBuilder(campaignRuleId: campaignRuleId)
        requestBuilder.execute { (response: Response<CampaignRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Campaign Rule
     
     - GET /api/v2/outbound/campaignrules/{campaignRuleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchAnyConditions" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "campaignRuleActions" : [ {
    "actionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : "",
    "campaignRuleActionEntities" : {
      "campaigns" : [ "" ],
      "useTriggeringEntity" : true,
      "sequences" : [ "" ]
    }
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "campaignRuleEntities" : {
    "campaigns" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    } ],
    "sequences" : [ "" ]
  },
  "campaignRuleConditions" : [ {
    "conditionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : {
      "dialingMode" : "aeiou",
      "priority" : "aeiou",
      "value" : "aeiou",
      "operator" : "aeiou"
    }
  } ],
  "version" : 123,
  "enabled" : true
}}]
     
     - parameter campaignRuleId: (path) Campaign Rule ID 

     - returns: RequestBuilder<CampaignRule> 
     */
    open class func getOutboundCampaignruleWithRequestBuilder(campaignRuleId: String) -> RequestBuilder<CampaignRule> {
        var path = "/api/v2/outbound/campaignrules/{campaignRuleId}"
        let campaignRuleIdPreEscape = "\(campaignRuleId)"
        let campaignRuleIdPostEscape = campaignRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignRuleId}", with: campaignRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundCampaignrules: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundCampaignrules: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query Campaign Rule list
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignrules(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCampaignrules? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaignrules? = nil, completion: @escaping ((_ data: CampaignRuleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignrulesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CampaignRuleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query Campaign Rule list
     
     - GET /api/v2/outbound/campaignrules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "matchAnyConditions" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "campaignRuleActions" : [ {
      "actionType" : "aeiou",
      "id" : "aeiou",
      "parameters" : "",
      "campaignRuleActionEntities" : {
        "campaigns" : [ "" ],
        "useTriggeringEntity" : true,
        "sequences" : [ "" ]
      }
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "campaignRuleEntities" : {
      "campaigns" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      } ],
      "sequences" : [ "" ]
    },
    "campaignRuleConditions" : [ {
      "conditionType" : "aeiou",
      "id" : "aeiou",
      "parameters" : {
        "dialingMode" : "aeiou",
        "priority" : "aeiou",
        "value" : "aeiou",
        "operator" : "aeiou"
      }
    } ],
    "version" : 123,
    "enabled" : true
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CampaignRuleEntityListing> 
     */
    open class func getOutboundCampaignrulesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundCampaignrules? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaignrules? = nil) -> RequestBuilder<CampaignRuleEntityListing> {
        let path = "/api/v2/outbound/campaignrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CampaignRuleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FilterType_getOutboundCampaigns: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundCampaigns: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of dialer campaigns.
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter contactListId: (query) Contact List ID (optional)
     - parameter dncListIds: (query) DNC list ID (optional)
     - parameter distributionQueueId: (query) Distribution queue ID (optional)
     - parameter edgeGroupId: (query) Edge group ID (optional)
     - parameter callAnalysisResponseSetId: (query) Call analysis response set ID (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaigns(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundCampaigns? = nil, name: String? = nil, _id: [String]? = nil, contactListId: String? = nil, dncListIds: String? = nil, distributionQueueId: String? = nil, edgeGroupId: String? = nil, callAnalysisResponseSetId: String? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaigns? = nil, completion: @escaping ((_ data: CampaignEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, contactListId: contactListId, dncListIds: dncListIds, distributionQueueId: distributionQueueId, edgeGroupId: edgeGroupId, callAnalysisResponseSetId: callAnalysisResponseSetId, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CampaignEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of dialer campaigns.
     
     - GET /api/v2/outbound/campaigns
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callableTimeSet" : "",
    "phoneColumns" : [ {
      "type" : "aeiou",
      "columnName" : "aeiou"
    } ],
    "edgeGroup" : "",
    "callAnalysisResponseSet" : "",
    "previewTimeOutSeconds" : 123456789,
    "dncLists" : [ "" ],
    "callerName" : "aeiou",
    "contactListFilters" : [ "" ],
    "division" : "",
    "alwaysRunning" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "contactSorts" : [ "" ],
    "campaignStatus" : "aeiou",
    "outboundLineCount" : 123,
    "id" : "aeiou",
    "noAnswerTimeout" : 123,
    "dialingMode" : "aeiou",
    "callerAddress" : "(555) 555-5555",
    "skipPreviewDisabled" : true,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "callAnalysisLanguage" : "aeiou",
    "priority" : 123,
    "version" : 123,
    "ruleSets" : [ "" ],
    "script" : "",
    "contactSort" : {
      "fieldName" : "aeiou",
      "numeric" : true,
      "direction" : "aeiou"
    },
    "contactList" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "site" : "",
    "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
    "name" : "aeiou",
    "queue" : "",
    "errors" : [ {
      "details" : "aeiou",
      "error" : "aeiou"
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter contactListId: (query) Contact List ID (optional)
     - parameter dncListIds: (query) DNC list ID (optional)
     - parameter distributionQueueId: (query) Distribution queue ID (optional)
     - parameter edgeGroupId: (query) Edge group ID (optional)
     - parameter callAnalysisResponseSetId: (query) Call analysis response set ID (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CampaignEntityListing> 
     */
    open class func getOutboundCampaignsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundCampaigns? = nil, name: String? = nil, _id: [String]? = nil, contactListId: String? = nil, dncListIds: String? = nil, distributionQueueId: String? = nil, edgeGroupId: String? = nil, callAnalysisResponseSetId: String? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaigns? = nil) -> RequestBuilder<CampaignEntityListing> {
        let path = "/api/v2/outbound/campaigns"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "contactListId": contactListId, 
            
            "dncListIds": dncListIds, 
            
            "distributionQueueId": distributionQueueId, 
            
            "edgeGroupId": edgeGroupId, 
            
            "callAnalysisResponseSetId": callAnalysisResponseSetId, 
            
            "divisionId": divisionId, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CampaignEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum MediaType_getOutboundCampaignsAll: String { 
        case sms = "sms"
        case voice = "voice"
    }

    
    
    
    public enum SortOrder_getOutboundCampaignsAll: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query across all types of campaigns by division
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) Campaign ID(s) (optional)
     - parameter name: (query) Campaign name(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter mediaType: (query) Media type(s) (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignsAll(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, name: String? = nil, divisionId: [String]? = nil, mediaType: [String]? = nil, sortOrder: SortOrder_getOutboundCampaignsAll? = nil, completion: @escaping ((_ data: CommonCampaignEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignsAllWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, name: name, divisionId: divisionId, mediaType: mediaType, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CommonCampaignEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query across all types of campaigns by division
     
     - GET /api/v2/outbound/campaigns/all
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "mediaType" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) Campaign ID(s) (optional)
     - parameter name: (query) Campaign name(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter mediaType: (query) Media type(s) (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CommonCampaignEntityListing> 
     */
    open class func getOutboundCampaignsAllWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, name: String? = nil, divisionId: [String]? = nil, mediaType: [String]? = nil, sortOrder: SortOrder_getOutboundCampaignsAll? = nil) -> RequestBuilder<CommonCampaignEntityListing> {
        let path = "/api/v2/outbound/campaigns/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "id": _id, 
            
            "name": name, 
            
            "divisionId": divisionId, 
            
            "mediaType": mediaType, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CommonCampaignEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum MediaType_getOutboundCampaignsAllDivisionviews: String { 
        case sms = "sms"
        case voice = "voice"
    }

    
    
    
    public enum SortOrder_getOutboundCampaignsAllDivisionviews: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query across all types of campaigns
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) Campaign ID(s) (optional)
     - parameter name: (query) Campaign name(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter mediaType: (query) Media type(s) (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignsAllDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, name: String? = nil, divisionId: [String]? = nil, mediaType: [String]? = nil, sortOrder: SortOrder_getOutboundCampaignsAllDivisionviews? = nil, completion: @escaping ((_ data: CommonCampaignDivisionViewEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignsAllDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, name: name, divisionId: divisionId, mediaType: mediaType, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CommonCampaignDivisionViewEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query across all types of campaigns
     
     - GET /api/v2/outbound/campaigns/all/divisionviews
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "mediaType" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter _id: (query) Campaign ID(s) (optional)
     - parameter name: (query) Campaign name(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter mediaType: (query) Media type(s) (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CommonCampaignDivisionViewEntityListing> 
     */
    open class func getOutboundCampaignsAllDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, name: String? = nil, divisionId: [String]? = nil, mediaType: [String]? = nil, sortOrder: SortOrder_getOutboundCampaignsAllDivisionviews? = nil) -> RequestBuilder<CommonCampaignDivisionViewEntityListing> {
        let path = "/api/v2/outbound/campaigns/all/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "id": _id, 
            
            "name": name, 
            
            "divisionId": divisionId, 
            
            "mediaType": mediaType, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CommonCampaignDivisionViewEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a basic Campaign information object
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignsDivisionview(campaignId: String, completion: @escaping ((_ data: CampaignDivisionView?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignsDivisionviewWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignDivisionView>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a basic Campaign information object
     
     - GET /api/v2/outbound/campaigns/divisionviews/{campaignId}
     - This returns a simplified version of a Campaign, consisting of name and division.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignDivisionView> 
     */
    open class func getOutboundCampaignsDivisionviewWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignDivisionView> {
        var path = "/api/v2/outbound/campaigns/divisionviews/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignDivisionView>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FilterType_getOutboundCampaignsDivisionviews: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundCampaignsDivisionviews: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of basic Campaign information objects
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundCampaignsDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundCampaignsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaignsDivisionviews? = nil, completion: @escaping ((_ data: CampaignDivisionViewListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundCampaignsDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CampaignDivisionViewListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of basic Campaign information objects
     
     - GET /api/v2/outbound/campaigns/divisionviews
     - This returns a simplified version of a Campaign, consisting of name and division.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CampaignDivisionViewListing> 
     */
    open class func getOutboundCampaignsDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundCampaignsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundCampaignsDivisionviews? = nil) -> RequestBuilder<CampaignDivisionViewListing> {
        let path = "/api/v2/outbound/campaigns/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CampaignDivisionViewListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a dialer contact list.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlist(contactListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil, completion: @escaping ((_ data: ContactList?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistWithRequestBuilder(contactListId: contactListId, includeImportStatus: includeImportStatus, includeSize: includeSize)
        requestBuilder.execute { (response: Response<ContactList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a dialer contact list.
     
     - GET /api/v2/outbound/contactlists/{contactListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou",
    "callableTimeColumn" : "aeiou"
  } ],
  "attemptLimits" : "",
  "automaticTimeZoneMapping" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "previewModeColumnName" : "aeiou",
  "columnNames" : [ "aeiou" ],
  "size" : 123456789,
  "previewModeAcceptedValues" : [ "aeiou" ],
  "name" : "aeiou",
  "id" : "aeiou",
  "zipCodeColumnName" : "aeiou"
}}]
     
     - parameter contactListId: (path) ContactList ID 
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)

     - returns: RequestBuilder<ContactList> 
     */
    open class func getOutboundContactlistWithRequestBuilder(contactListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil) -> RequestBuilder<ContactList> {
        var path = "/api/v2/outbound/contactlists/{contactListId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize
            
        ])

        let requestBuilder: RequestBuilder<ContactList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a contact.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistContact(contactListId: String, contactId: String, completion: @escaping ((_ data: DialerContact?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistContactWithRequestBuilder(contactListId: contactListId, contactId: contactId)
        requestBuilder.execute { (response: Response<DialerContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a contact.
     
     - GET /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "configurationOverrides" : {
    "priority" : true
  },
  "callable" : true,
  "data" : {
    "key" : "{}"
  },
  "callRecords" : {
    "key" : {
      "lastResult" : "aeiou",
      "lastAttempt" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "contactListId" : "aeiou",
  "contactColumnTimeZones" : {
    "key" : {
      "columnType" : "aeiou",
      "timeZone" : "aeiou"
    }
  },
  "id" : "aeiou",
  "phoneNumberStatus" : {
    "key" : {
      "callable" : true
    }
  }
}}]
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 

     - returns: RequestBuilder<DialerContact> 
     */
    open class func getOutboundContactlistContactWithRequestBuilder(contactListId: String, contactId: String) -> RequestBuilder<DialerContact> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DialerContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get the URI of a contact list export.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter download: (query) Redirect to download uri (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistExport(contactListId: String, download: String? = nil, completion: @escaping ((_ data: ExportUri?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistExportWithRequestBuilder(contactListId: contactListId, download: download)
        requestBuilder.execute { (response: Response<ExportUri>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the URI of a contact list export.
     
     - GET /api/v2/outbound/contactlists/{contactListId}/export
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "exportTimestamp" : "2000-01-23T04:56:07.000+0000",
  "uri" : "aeiou"
}}]
     
     - parameter contactListId: (path) ContactList ID 
     - parameter download: (query) Redirect to download uri (optional, default to false)

     - returns: RequestBuilder<ExportUri> 
     */
    open class func getOutboundContactlistExportWithRequestBuilder(contactListId: String, download: String? = nil) -> RequestBuilder<ExportUri> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/export"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "download": download
            
        ])

        let requestBuilder: RequestBuilder<ExportUri>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get dialer contactList import status.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistImportstatus(contactListId: String, completion: @escaping ((_ data: ImportStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistImportstatusWithRequestBuilder(contactListId: contactListId)
        requestBuilder.execute { (response: Response<ImportStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get dialer contactList import status.
     
     - GET /api/v2/outbound/contactlists/{contactListId}/importstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "completedRecords" : 123456789,
  "totalRecords" : 123456789,
  "failureReason" : "aeiou",
  "state" : "aeiou",
  "percentComplete" : 123
}}]
     
     - parameter contactListId: (path) ContactList ID 

     - returns: RequestBuilder<ImportStatus> 
     */
    open class func getOutboundContactlistImportstatusWithRequestBuilder(contactListId: String) -> RequestBuilder<ImportStatus> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/importstatus"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ImportStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Preview the result of applying Automatic Time Zone Mapping to a contact list
     
     - parameter contactListId: (path) ContactList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistTimezonemappingpreview(contactListId: String, completion: @escaping ((_ data: TimeZoneMappingPreview?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistTimezonemappingpreviewWithRequestBuilder(contactListId: contactListId)
        requestBuilder.execute { (response: Response<TimeZoneMappingPreview>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Preview the result of applying Automatic Time Zone Mapping to a contact list
     
     - GET /api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactsMappedUsingZipCode" : {
    "key" : 123456789
  },
  "contactListSize" : 123456789,
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "contactsMappedToMultipleZonesUsingZipCode" : 123456789,
  "contactsMappedToASingleZoneUsingZipCode" : 123456789,
  "contactsPerTimeZone" : {
    "key" : 123456789
  },
  "contactsInDefaultWindow" : 123456789,
  "contactsMappedToASingleZone" : 123456789,
  "contactsMappedToMultipleZones" : 123456789
}}]
     
     - parameter contactListId: (path) ContactList ID 

     - returns: RequestBuilder<TimeZoneMappingPreview> 
     */
    open class func getOutboundContactlistTimezonemappingpreviewWithRequestBuilder(contactListId: String) -> RequestBuilder<TimeZoneMappingPreview> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TimeZoneMappingPreview>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Contact list filter
     
     - parameter contactListFilterId: (path) Contact List Filter ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistfilter(contactListFilterId: String, completion: @escaping ((_ data: ContactListFilter?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistfilterWithRequestBuilder(contactListFilterId: contactListFilterId)
        requestBuilder.execute { (response: Response<ContactListFilter>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Contact list filter
     
     - GET /api/v2/outbound/contactlistfilters/{contactListFilterId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "clauses" : [ {
    "predicates" : [ {
      "columnType" : "aeiou",
      "column" : "aeiou",
      "range" : {
        "maxInclusive" : true,
        "min" : "aeiou",
        "max" : "aeiou",
        "minInclusive" : true,
        "inSet" : [ "aeiou" ]
      },
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "filterType" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "filterType" : "aeiou",
  "version" : 123
}}]
     
     - parameter contactListFilterId: (path) Contact List Filter ID 

     - returns: RequestBuilder<ContactListFilter> 
     */
    open class func getOutboundContactlistfilterWithRequestBuilder(contactListFilterId: String) -> RequestBuilder<ContactListFilter> {
        var path = "/api/v2/outbound/contactlistfilters/{contactListFilterId}"
        let contactListFilterIdPreEscape = "\(contactListFilterId)"
        let contactListFilterIdPostEscape = contactListFilterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListFilterId}", with: contactListFilterIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactListFilter>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundContactlistfilters: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundContactlistfilters: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    /**
     
     Query Contact list filters
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter contactListId: (query) Contact List ID (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistfilters(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundContactlistfilters? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlistfilters? = nil, contactListId: String? = nil, completion: @escaping ((_ data: ContactListFilterEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistfiltersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder, contactListId: contactListId)
        requestBuilder.execute { (response: Response<ContactListFilterEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query Contact list filters
     
     - GET /api/v2/outbound/contactlistfilters
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "contactList" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "clauses" : [ {
      "predicates" : [ {
        "columnType" : "aeiou",
        "column" : "aeiou",
        "range" : {
          "maxInclusive" : true,
          "min" : "aeiou",
          "max" : "aeiou",
          "minInclusive" : true,
          "inSet" : [ "aeiou" ]
        },
        "inverted" : true,
        "value" : "aeiou",
        "operator" : "aeiou"
      } ],
      "filterType" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "filterType" : "aeiou",
    "version" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter contactListId: (query) Contact List ID (optional)

     - returns: RequestBuilder<ContactListFilterEntityListing> 
     */
    open class func getOutboundContactlistfiltersWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundContactlistfilters? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlistfilters? = nil, contactListId: String? = nil) -> RequestBuilder<ContactListFilterEntityListing> {
        let path = "/api/v2/outbound/contactlistfilters"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "contactListId": contactListId
            
        ])

        let requestBuilder: RequestBuilder<ContactListFilterEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundContactlists: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundContactlists: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of contact lists.
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlists(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundContactlists? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlists? = nil, completion: @escaping ((_ data: ContactListEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistsWithRequestBuilder(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, _id: _id, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<ContactListEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of contact lists.
     
     - GET /api/v2/outbound/contactlists
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "importStatus" : {
      "completedRecords" : 123456789,
      "totalRecords" : 123456789,
      "failureReason" : "aeiou",
      "state" : "aeiou",
      "percentComplete" : 123
    },
    "phoneColumns" : [ {
      "type" : "aeiou",
      "columnName" : "aeiou",
      "callableTimeColumn" : "aeiou"
    } ],
    "attemptLimits" : "",
    "automaticTimeZoneMapping" : true,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "previewModeColumnName" : "aeiou",
    "columnNames" : [ "aeiou" ],
    "size" : 123456789,
    "previewModeAcceptedValues" : [ "aeiou" ],
    "name" : "aeiou",
    "id" : "aeiou",
    "zipCodeColumnName" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<ContactListEntityListing> 
     */
    open class func getOutboundContactlistsWithRequestBuilder(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundContactlists? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlists? = nil) -> RequestBuilder<ContactListEntityListing> {
        let path = "/api/v2/outbound/contactlists"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "divisionId": divisionId, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<ContactListEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a basic ContactList information object
     
     - parameter contactListId: (path) Contactlist ID 
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistsDivisionview(contactListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil, completion: @escaping ((_ data: ContactListDivisionView?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistsDivisionviewWithRequestBuilder(contactListId: contactListId, includeImportStatus: includeImportStatus, includeSize: includeSize)
        requestBuilder.execute { (response: Response<ContactListDivisionView>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a basic ContactList information object
     
     - GET /api/v2/outbound/contactlists/divisionviews/{contactListId}
     - This returns a simplified version of a ContactList, consisting of the name, division, column names, phone columns, import status, and size.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "columnNames" : [ "aeiou" ],
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou",
    "callableTimeColumn" : "aeiou"
  } ],
  "size" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter contactListId: (path) Contactlist ID 
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)

     - returns: RequestBuilder<ContactListDivisionView> 
     */
    open class func getOutboundContactlistsDivisionviewWithRequestBuilder(contactListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil) -> RequestBuilder<ContactListDivisionView> {
        var path = "/api/v2/outbound/contactlists/divisionviews/{contactListId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize
            
        ])

        let requestBuilder: RequestBuilder<ContactListDivisionView>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundContactlistsDivisionviews: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundContactlistsDivisionviews: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of simplified contact list objects.
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundContactlistsDivisionviews(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundContactlistsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlistsDivisionviews? = nil, completion: @escaping ((_ data: ContactListDivisionViewListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundContactlistsDivisionviewsWithRequestBuilder(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<ContactListDivisionViewListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of simplified contact list objects.
     
     - GET /api/v2/outbound/contactlists/divisionviews
     - This return a simplified version of contact lists, consisting of the name, division, column names, phone columns, import status, and size.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "importStatus" : {
      "completedRecords" : 123456789,
      "totalRecords" : 123456789,
      "failureReason" : "aeiou",
      "state" : "aeiou",
      "percentComplete" : 123
    },
    "columnNames" : [ "aeiou" ],
    "phoneColumns" : [ {
      "type" : "aeiou",
      "columnName" : "aeiou",
      "callableTimeColumn" : "aeiou"
    } ],
    "size" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<ContactListDivisionViewListing> 
     */
    open class func getOutboundContactlistsDivisionviewsWithRequestBuilder(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundContactlistsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundContactlistsDivisionviews? = nil) -> RequestBuilder<ContactListDivisionViewListing> {
        let path = "/api/v2/outbound/contactlists/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<ContactListDivisionViewListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get dialer DNC list
     
     - parameter dncListId: (path) DncList ID 
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclist(dncListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil, completion: @escaping ((_ data: DncList?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistWithRequestBuilder(dncListId: dncListId, includeImportStatus: includeImportStatus, includeSize: includeSize)
        requestBuilder.execute { (response: Response<DncList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get dialer DNC list
     
     - GET /api/v2/outbound/dnclists/{dncListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "loginId" : "aeiou",
  "selfUri" : "aeiou",
  "dncSourceType" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "size" : 123456789,
  "name" : "aeiou",
  "id" : "aeiou",
  "dncCodes" : [ "aeiou" ],
  "licenseId" : "aeiou"
}}]
     
     - parameter dncListId: (path) DncList ID 
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)

     - returns: RequestBuilder<DncList> 
     */
    open class func getOutboundDnclistWithRequestBuilder(dncListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil) -> RequestBuilder<DncList> {
        var path = "/api/v2/outbound/dnclists/{dncListId}"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize
            
        ])

        let requestBuilder: RequestBuilder<DncList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get the URI of a DNC list export.
     
     - parameter dncListId: (path) DncList ID 
     - parameter download: (query) Redirect to download uri (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclistExport(dncListId: String, download: String? = nil, completion: @escaping ((_ data: ExportUri?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistExportWithRequestBuilder(dncListId: dncListId, download: download)
        requestBuilder.execute { (response: Response<ExportUri>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the URI of a DNC list export.
     
     - GET /api/v2/outbound/dnclists/{dncListId}/export
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "exportTimestamp" : "2000-01-23T04:56:07.000+0000",
  "uri" : "aeiou"
}}]
     
     - parameter dncListId: (path) DncList ID 
     - parameter download: (query) Redirect to download uri (optional, default to false)

     - returns: RequestBuilder<ExportUri> 
     */
    open class func getOutboundDnclistExportWithRequestBuilder(dncListId: String, download: String? = nil) -> RequestBuilder<ExportUri> {
        var path = "/api/v2/outbound/dnclists/{dncListId}/export"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "download": download
            
        ])

        let requestBuilder: RequestBuilder<ExportUri>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get dialer dncList import status.
     
     - parameter dncListId: (path) DncList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclistImportstatus(dncListId: String, completion: @escaping ((_ data: ImportStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistImportstatusWithRequestBuilder(dncListId: dncListId)
        requestBuilder.execute { (response: Response<ImportStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get dialer dncList import status.
     
     - GET /api/v2/outbound/dnclists/{dncListId}/importstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "completedRecords" : 123456789,
  "totalRecords" : 123456789,
  "failureReason" : "aeiou",
  "state" : "aeiou",
  "percentComplete" : 123
}}]
     
     - parameter dncListId: (path) DncList ID 

     - returns: RequestBuilder<ImportStatus> 
     */
    open class func getOutboundDnclistImportstatusWithRequestBuilder(dncListId: String) -> RequestBuilder<ImportStatus> {
        var path = "/api/v2/outbound/dnclists/{dncListId}/importstatus"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ImportStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundDnclists: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    public enum DncSourceType_getOutboundDnclists: String { 
        case rds = "rds"
        case dncCom = "dnc.com"
        case gryphon = "gryphon"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundDnclists: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query dialer DNC lists
     
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter dncSourceType: (query) DncSourceType (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclists(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundDnclists? = nil, name: String? = nil, dncSourceType: DncSourceType_getOutboundDnclists? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundDnclists? = nil, completion: @escaping ((_ data: DncListEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistsWithRequestBuilder(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, dncSourceType: dncSourceType, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DncListEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query dialer DNC lists
     
     - GET /api/v2/outbound/dnclists
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "importStatus" : {
      "completedRecords" : 123456789,
      "totalRecords" : 123456789,
      "failureReason" : "aeiou",
      "state" : "aeiou",
      "percentComplete" : 123
    },
    "loginId" : "aeiou",
    "selfUri" : "aeiou",
    "dncSourceType" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "size" : 123456789,
    "name" : "aeiou",
    "id" : "aeiou",
    "dncCodes" : [ "aeiou" ],
    "licenseId" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter includeImportStatus: (query) Import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter dncSourceType: (query) DncSourceType (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)

     - returns: RequestBuilder<DncListEntityListing> 
     */
    open class func getOutboundDnclistsWithRequestBuilder(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundDnclists? = nil, name: String? = nil, dncSourceType: DncSourceType_getOutboundDnclists? = nil, divisionId: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundDnclists? = nil) -> RequestBuilder<DncListEntityListing> {
        let path = "/api/v2/outbound/dnclists"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "dncSourceType": dncSourceType?.rawValue, 
            
            "divisionId": divisionId, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<DncListEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a basic DncList information object
     
     - parameter dncListId: (path) Dnclist ID 
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclistsDivisionview(dncListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil, completion: @escaping ((_ data: DncListDivisionView?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistsDivisionviewWithRequestBuilder(dncListId: dncListId, includeImportStatus: includeImportStatus, includeSize: includeSize)
        requestBuilder.execute { (response: Response<DncListDivisionView>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a basic DncList information object
     
     - GET /api/v2/outbound/dnclists/divisionviews/{dncListId}
     - This returns a simplified version of a DncList, consisting of the name, division, import status, and size.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "size" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter dncListId: (path) Dnclist ID 
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)

     - returns: RequestBuilder<DncListDivisionView> 
     */
    open class func getOutboundDnclistsDivisionviewWithRequestBuilder(dncListId: String, includeImportStatus: Bool? = nil, includeSize: Bool? = nil) -> RequestBuilder<DncListDivisionView> {
        var path = "/api/v2/outbound/dnclists/divisionviews/{dncListId}"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize
            
        ])

        let requestBuilder: RequestBuilder<DncListDivisionView>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundDnclistsDivisionviews: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundDnclistsDivisionviews: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of simplified dnc list objects.
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundDnclistsDivisionviews(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundDnclistsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundDnclistsDivisionviews? = nil, completion: @escaping ((_ data: DncListDivisionViewListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundDnclistsDivisionviewsWithRequestBuilder(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DncListDivisionViewListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of simplified dnc list objects.
     
     - GET /api/v2/outbound/dnclists/divisionviews
     - This return a simplified version of dnc lists, consisting of the name, division, import status, and size.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "importStatus" : {
      "completedRecords" : 123456789,
      "totalRecords" : 123456789,
      "failureReason" : "aeiou",
      "state" : "aeiou",
      "percentComplete" : 123
    },
    "size" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter includeImportStatus: (query) Include import status (optional, default to false)
     - parameter includeSize: (query) Include size (optional, default to false)
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<DncListDivisionViewListing> 
     */
    open class func getOutboundDnclistsDivisionviewsWithRequestBuilder(includeImportStatus: Bool? = nil, includeSize: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundDnclistsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundDnclistsDivisionviews? = nil) -> RequestBuilder<DncListDivisionViewListing> {
        let path = "/api/v2/outbound/dnclists/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeImportStatus": includeImportStatus, 
            
            "includeSize": includeSize, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<DncListDivisionViewListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Dialer Event
     
     - parameter eventId: (path) Event Log ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundEvent(eventId: String, completion: @escaping ((_ data: EventLog?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundEventWithRequestBuilder(eventId: eventId)
        requestBuilder.execute { (response: Response<EventLog>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Dialer Event
     
     - GET /api/v2/outbound/events/{eventId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "eventMessage" : {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "resourceURIs" : [ "aeiou" ],
    "documentationUri" : "aeiou",
    "messageParams" : {
      "key" : "{}"
    },
    "message" : "aeiou"
  },
  "level" : "aeiou",
  "relatedEntity" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "errorEntity" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "correlationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter eventId: (path) Event Log ID 

     - returns: RequestBuilder<EventLog> 
     */
    open class func getOutboundEventWithRequestBuilder(eventId: String) -> RequestBuilder<EventLog> {
        var path = "/api/v2/outbound/events/{eventId}"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventLog>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FilterType_getOutboundEvents: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    
    
    public enum SortOrder_getOutboundEvents: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query Event Logs
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter category: (query) Category (optional)
     - parameter level: (query) Level (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundEvents(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundEvents? = nil, category: String? = nil, level: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundEvents? = nil, completion: @escaping ((_ data: DialerEventEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundEventsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, category: category, level: level, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DialerEventEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query Event Logs
     
     - GET /api/v2/outbound/events
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "eventMessage" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "resourceURIs" : [ "aeiou" ],
      "documentationUri" : "aeiou",
      "messageParams" : {
        "key" : "{}"
      },
      "message" : "aeiou"
    },
    "level" : "aeiou",
    "relatedEntity" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "errorEntity" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "correlationId" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "timestamp" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter category: (query) Category (optional)
     - parameter level: (query) Level (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<DialerEventEntityListing> 
     */
    open class func getOutboundEventsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, filterType: FilterType_getOutboundEvents? = nil, category: String? = nil, level: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundEvents? = nil) -> RequestBuilder<DialerEventEntityListing> {
        let path = "/api/v2/outbound/events"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "filterType": filterType?.rawValue, 
            
            "category": category, 
            
            "level": level, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<DialerEventEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get an Outbound Messaging Campaign
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundMessagingcampaign(messagingCampaignId: String, completion: @escaping ((_ data: MessagingCampaign?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: messagingCampaignId)
        requestBuilder.execute { (response: Response<MessagingCampaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an Outbound Messaging Campaign
     
     - GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "dncLists" : [ "" ],
  "messagesPerMinute" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "alwaysRunning" : true,
  "contactList" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "smsConfig" : {
    "senderSmsPhoneNumber" : {
      "phoneNumber" : "aeiou",
      "selfUri" : "aeiou"
    },
    "messageColumn" : "aeiou",
    "phoneColumn" : "aeiou"
  },
  "contactSorts" : [ {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  } ],
  "name" : "aeiou",
  "campaignStatus" : "aeiou",
  "id" : "aeiou",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 

     - returns: RequestBuilder<MessagingCampaign> 
     */
    open class func getOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: String) -> RequestBuilder<MessagingCampaign> {
        var path = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}"
        let messagingCampaignIdPreEscape = "\(messagingCampaignId)"
        let messagingCampaignIdPostEscape = messagingCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messagingCampaignId}", with: messagingCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessagingCampaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get messaging campaign's progress
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundMessagingcampaignProgress(messagingCampaignId: String, completion: @escaping ((_ data: CampaignProgress?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundMessagingcampaignProgressWithRequestBuilder(messagingCampaignId: messagingCampaignId)
        requestBuilder.execute { (response: Response<CampaignProgress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get messaging campaign's progress
     
     - GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : "",
  "numberOfContactsCalled" : 123456789,
  "numberOfContactsMessaged" : 123456789,
  "totalNumberOfContacts" : 123456789,
  "percentage" : 123456789,
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 

     - returns: RequestBuilder<CampaignProgress> 
     */
    open class func getOutboundMessagingcampaignProgressWithRequestBuilder(messagingCampaignId: String) -> RequestBuilder<CampaignProgress> {
        var path = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress"
        let messagingCampaignIdPreEscape = "\(messagingCampaignId)"
        let messagingCampaignIdPostEscape = messagingCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messagingCampaignId}", with: messagingCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignProgress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortBy_getOutboundMessagingcampaigns: String { 
        case campaignstatus = "campaignStatus"
        case name = "name"
        case type = "type"
    }

    
    
    
    public enum SortOrder_getOutboundMessagingcampaigns: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    
    
    
    
    
    public enum ModelType_getOutboundMessagingcampaigns: String { 
        case sms = "SMS"
    }

    
    
    
    
    
    
    /**
     
     Query a list of Messaging Campaigns
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) The field to sort by (optional, default to name)
     - parameter sortOrder: (query) The direction to sort (optional, default to ascending)
     - parameter name: (query) Name (optional)
     - parameter contactListId: (query) Contact List ID (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter type: (query) Campaign Type (optional)
     - parameter senderSmsPhoneNumber: (query) Sender SMS Phone Number (optional)
     - parameter _id: (query) A list of messaging campaign ids to bulk fetch (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundMessagingcampaigns(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getOutboundMessagingcampaigns? = nil, sortOrder: SortOrder_getOutboundMessagingcampaigns? = nil, name: String? = nil, contactListId: String? = nil, divisionId: [String]? = nil, type: ModelType_getOutboundMessagingcampaigns? = nil, senderSmsPhoneNumber: String? = nil, _id: [String]? = nil, completion: @escaping ((_ data: MessagingCampaignEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundMessagingcampaignsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, contactListId: contactListId, divisionId: divisionId, type: type, senderSmsPhoneNumber: senderSmsPhoneNumber, _id: _id)
        requestBuilder.execute { (response: Response<MessagingCampaignEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of Messaging Campaigns
     
     - GET /api/v2/outbound/messagingcampaigns
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callableTimeSet" : "",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "dncLists" : [ "" ],
    "messagesPerMinute" : 123,
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "alwaysRunning" : true,
    "contactList" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "smsConfig" : {
      "senderSmsPhoneNumber" : {
        "phoneNumber" : "aeiou",
        "selfUri" : "aeiou"
      },
      "messageColumn" : "aeiou",
      "phoneColumn" : "aeiou"
    },
    "contactSorts" : [ {
      "fieldName" : "aeiou",
      "numeric" : true,
      "direction" : "aeiou"
    } ],
    "name" : "aeiou",
    "campaignStatus" : "aeiou",
    "id" : "aeiou",
    "errors" : [ {
      "details" : "aeiou",
      "error" : "aeiou"
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) The field to sort by (optional, default to name)
     - parameter sortOrder: (query) The direction to sort (optional, default to ascending)
     - parameter name: (query) Name (optional)
     - parameter contactListId: (query) Contact List ID (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter type: (query) Campaign Type (optional)
     - parameter senderSmsPhoneNumber: (query) Sender SMS Phone Number (optional)
     - parameter _id: (query) A list of messaging campaign ids to bulk fetch (optional)

     - returns: RequestBuilder<MessagingCampaignEntityListing> 
     */
    open class func getOutboundMessagingcampaignsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getOutboundMessagingcampaigns? = nil, sortOrder: SortOrder_getOutboundMessagingcampaigns? = nil, name: String? = nil, contactListId: String? = nil, divisionId: [String]? = nil, type: ModelType_getOutboundMessagingcampaigns? = nil, senderSmsPhoneNumber: String? = nil, _id: [String]? = nil) -> RequestBuilder<MessagingCampaignEntityListing> {
        let path = "/api/v2/outbound/messagingcampaigns"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy?.rawValue, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "name": name, 
            
            "contactListId": contactListId, 
            
            "divisionId": divisionId, 
            
            "type": type?.rawValue, 
            
            "senderSmsPhoneNumber": senderSmsPhoneNumber, 
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<MessagingCampaignEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a basic Messaging Campaign information object
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundMessagingcampaignsDivisionview(messagingCampaignId: String, completion: @escaping ((_ data: MessagingCampaignDivisionView?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundMessagingcampaignsDivisionviewWithRequestBuilder(messagingCampaignId: messagingCampaignId)
        requestBuilder.execute { (response: Response<MessagingCampaignDivisionView>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a basic Messaging Campaign information object
     
     - GET /api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}
     - This returns a simplified version of a Messaging Campaign, consisting of id, name, and division.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 

     - returns: RequestBuilder<MessagingCampaignDivisionView> 
     */
    open class func getOutboundMessagingcampaignsDivisionviewWithRequestBuilder(messagingCampaignId: String) -> RequestBuilder<MessagingCampaignDivisionView> {
        var path = "/api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}"
        let messagingCampaignIdPreEscape = "\(messagingCampaignId)"
        let messagingCampaignIdPostEscape = messagingCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messagingCampaignId}", with: messagingCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessagingCampaignDivisionView>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortOrder_getOutboundMessagingcampaignsDivisionviews: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    
    
    
    
    /**
     
     Query a list of basic Messaging Campaign information objects
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) The direction to sort (optional, default to a)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter senderSmsPhoneNumber: (query) Sender SMS Phone Number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundMessagingcampaignsDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getOutboundMessagingcampaignsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, senderSmsPhoneNumber: String? = nil, completion: @escaping ((_ data: MessagingCampaignDivisionViewEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundMessagingcampaignsDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name, _id: _id, senderSmsPhoneNumber: senderSmsPhoneNumber)
        requestBuilder.execute { (response: Response<MessagingCampaignDivisionViewEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of basic Messaging Campaign information objects
     
     - GET /api/v2/outbound/messagingcampaigns/divisionviews
     - This returns a listing of simplified Messaging Campaigns, each consisting of id, name, and division.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) The direction to sort (optional, default to a)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter senderSmsPhoneNumber: (query) Sender SMS Phone Number (optional)

     - returns: RequestBuilder<MessagingCampaignDivisionViewEntityListing> 
     */
    open class func getOutboundMessagingcampaignsDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getOutboundMessagingcampaignsDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, senderSmsPhoneNumber: String? = nil) -> RequestBuilder<MessagingCampaignDivisionViewEntityListing> {
        let path = "/api/v2/outbound/messagingcampaigns/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "senderSmsPhoneNumber": senderSmsPhoneNumber
            
        ])

        let requestBuilder: RequestBuilder<MessagingCampaignDivisionViewEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Rule Set by ID.
     
     - parameter ruleSetId: (path) Rule Set ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundRuleset(ruleSetId: String, completion: @escaping ((_ data: RuleSet?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundRulesetWithRequestBuilder(ruleSetId: ruleSetId)
        requestBuilder.execute { (response: Response<RuleSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Rule Set by ID.
     
     - GET /api/v2/outbound/rulesets/{ruleSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "rules" : [ {
    "name" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "conditions" : [ {
      "codes" : [ "aeiou" ],
      "valueType" : "aeiou",
      "propertyType" : "aeiou",
      "property" : "aeiou",
      "attributeName" : "aeiou",
      "type" : "aeiou",
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "actions" : [ {
      "actionTypeName" : "aeiou",
      "updateOption" : "aeiou",
      "type" : "aeiou",
      "properties" : {
        "key" : "aeiou"
      }
    } ],
    "order" : 123
  } ],
  "id" : "aeiou",
  "version" : 123,
  "queue" : ""
}}]
     
     - parameter ruleSetId: (path) Rule Set ID 

     - returns: RequestBuilder<RuleSet> 
     */
    open class func getOutboundRulesetWithRequestBuilder(ruleSetId: String) -> RequestBuilder<RuleSet> {
        var path = "/api/v2/outbound/rulesets/{ruleSetId}"
        let ruleSetIdPreEscape = "\(ruleSetId)"
        let ruleSetIdPostEscape = ruleSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleSetId}", with: ruleSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RuleSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundRulesets: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundRulesets: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of Rule Sets.
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundRulesets(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundRulesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundRulesets? = nil, completion: @escaping ((_ data: RuleSetEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundRulesetsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<RuleSetEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of Rule Sets.
     
     - GET /api/v2/outbound/rulesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "contactList" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "rules" : [ {
      "name" : "aeiou",
      "id" : "aeiou",
      "category" : "aeiou",
      "conditions" : [ {
        "codes" : [ "aeiou" ],
        "valueType" : "aeiou",
        "propertyType" : "aeiou",
        "property" : "aeiou",
        "attributeName" : "aeiou",
        "type" : "aeiou",
        "inverted" : true,
        "value" : "aeiou",
        "operator" : "aeiou"
      } ],
      "actions" : [ {
        "actionTypeName" : "aeiou",
        "updateOption" : "aeiou",
        "type" : "aeiou",
        "properties" : {
          "key" : "aeiou"
        }
      } ],
      "order" : 123
    } ],
    "id" : "aeiou",
    "version" : 123,
    "queue" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<RuleSetEntityListing> 
     */
    open class func getOutboundRulesetsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundRulesets? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundRulesets? = nil) -> RequestBuilder<RuleSetEntityListing> {
        let path = "/api/v2/outbound/rulesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<RuleSetEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a dialer campaign schedule.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSchedulesCampaign(campaignId: String, completion: @escaping ((_ data: CampaignSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSchedulesCampaignWithRequestBuilder(campaignId: campaignId)
        requestBuilder.execute { (response: Response<CampaignSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a dialer campaign schedule.
     
     - GET /api/v2/outbound/schedules/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter campaignId: (path) Campaign ID 

     - returns: RequestBuilder<CampaignSchedule> 
     */
    open class func getOutboundSchedulesCampaignWithRequestBuilder(campaignId: String) -> RequestBuilder<CampaignSchedule> {
        var path = "/api/v2/outbound/schedules/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Query for a list of dialer campaign schedules.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSchedulesCampaigns(completion: @escaping ((_ data: [CampaignSchedule]?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSchedulesCampaignsWithRequestBuilder()
        requestBuilder.execute { (response: Response<[CampaignSchedule]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for a list of dialer campaign schedules.
     
     - GET /api/v2/outbound/schedules/campaigns
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
} ]}]

     - returns: RequestBuilder<[CampaignSchedule]> 
     */
    open class func getOutboundSchedulesCampaignsWithRequestBuilder() -> RequestBuilder<[CampaignSchedule]> {
        let path = "/api/v2/outbound/schedules/campaigns"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CampaignSchedule]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a dialer sequence schedule.
     
     - parameter sequenceId: (path) Sequence ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSchedulesSequence(sequenceId: String, completion: @escaping ((_ data: SequenceSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSchedulesSequenceWithRequestBuilder(sequenceId: sequenceId)
        requestBuilder.execute { (response: Response<SequenceSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a dialer sequence schedule.
     
     - GET /api/v2/outbound/schedules/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sequence" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter sequenceId: (path) Sequence ID 

     - returns: RequestBuilder<SequenceSchedule> 
     */
    open class func getOutboundSchedulesSequenceWithRequestBuilder(sequenceId: String) -> RequestBuilder<SequenceSchedule> {
        var path = "/api/v2/outbound/schedules/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SequenceSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Query for a list of dialer sequence schedules.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSchedulesSequences(completion: @escaping ((_ data: [SequenceSchedule]?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSchedulesSequencesWithRequestBuilder()
        requestBuilder.execute { (response: Response<[SequenceSchedule]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for a list of dialer sequence schedules.
     
     - GET /api/v2/outbound/schedules/sequences
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "sequence" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
} ]}]

     - returns: RequestBuilder<[SequenceSchedule]> 
     */
    open class func getOutboundSchedulesSequencesWithRequestBuilder() -> RequestBuilder<[SequenceSchedule]> {
        let path = "/api/v2/outbound/schedules/sequences"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SequenceSchedule]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a dialer campaign sequence.
     
     - parameter sequenceId: (path) Campaign Sequence ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSequence(sequenceId: String, completion: @escaping ((_ data: CampaignSequence?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSequenceWithRequestBuilder(sequenceId: sequenceId)
        requestBuilder.execute { (response: Response<CampaignSequence>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a dialer campaign sequence.
     
     - GET /api/v2/outbound/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "currentCampaign" : 123,
  "stopMessage" : "aeiou",
  "campaigns" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "repeat" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "status" : "aeiou"
}}]
     
     - parameter sequenceId: (path) Campaign Sequence ID 

     - returns: RequestBuilder<CampaignSequence> 
     */
    open class func getOutboundSequenceWithRequestBuilder(sequenceId: String) -> RequestBuilder<CampaignSequence> {
        var path = "/api/v2/outbound/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignSequence>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum FilterType_getOutboundSequences: String { 
        case equals = "Equals"
        case regEx = "RegEx"
        case contains = "Contains"
        case _prefix = "Prefix"
        case lessThan = "LessThan"
        case lessThanEqualTo = "LessThanEqualTo"
        case greaterThan = "GreaterThan"
        case greaterThanEqualTo = "GreaterThanEqualTo"
        case beginsWith = "BeginsWith"
        case endsWith = "EndsWith"
    }

    
    
    
    
    
    
    
    public enum SortOrder_getOutboundSequences: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     Query a list of dialer campaign sequences.
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSequences(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundSequences? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundSequences? = nil, completion: @escaping ((_ data: CampaignSequenceEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSequencesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<CampaignSequenceEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query a list of dialer campaign sequences.
     
     - GET /api/v2/outbound/sequences
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "currentCampaign" : 123,
    "stopMessage" : "aeiou",
    "campaigns" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    } ],
    "repeat" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "version" : 123,
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size. The max that will be returned is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter allowEmptyResult: (query) Whether to return an empty page when there are no results for that page (optional, default to false)
     - parameter filterType: (query) Filter type (optional, default to Prefix)
     - parameter name: (query) Name (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to a)

     - returns: RequestBuilder<CampaignSequenceEntityListing> 
     */
    open class func getOutboundSequencesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, allowEmptyResult: Bool? = nil, filterType: FilterType_getOutboundSequences? = nil, name: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getOutboundSequences? = nil) -> RequestBuilder<CampaignSequenceEntityListing> {
        let path = "/api/v2/outbound/sequences"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "allowEmptyResult": allowEmptyResult, 
            
            "filterType": filterType?.rawValue, 
            
            "name": name, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CampaignSequenceEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the outbound settings for this organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundSettings(completion: @escaping ((_ data: OutboundSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<OutboundSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the outbound settings for this organization
     
     - GET /api/v2/outbound/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maxLineUtilization" : 1.3579000000000001069366817318950779736042022705078125,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "abandonSeconds" : 1.3579000000000001069366817318950779736042022705078125,
  "maxConfigurableCallsPerAgent" : 123,
  "complianceAbandonRateDenominator" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "maxCallsPerAgent" : 123
}}]

     - returns: RequestBuilder<OutboundSettings> 
     */
    open class func getOutboundSettingsWithRequestBuilder() -> RequestBuilder<OutboundSettings> {
        let path = "/api/v2/outbound/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutboundSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the Dialer wrap up code mapping.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOutboundWrapupcodemappings(completion: @escaping ((_ data: WrapUpCodeMapping?,_ error: Error?) -> Void)) {
        let requestBuilder = getOutboundWrapupcodemappingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<WrapUpCodeMapping>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the Dialer wrap up code mapping.
     
     - GET /api/v2/outbound/wrapupcodemappings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultSet" : [ "aeiou" ],
  "mapping" : {
    "key" : [ "aeiou" ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]

     - returns: RequestBuilder<WrapUpCodeMapping> 
     */
    open class func getOutboundWrapupcodemappingsWithRequestBuilder() -> RequestBuilder<WrapUpCodeMapping> {
        let path = "/api/v2/outbound/wrapupcodemappings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapUpCodeMapping>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Update the outbound settings for this organization
     
     - parameter body: (body) outboundSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchOutboundSettings(body: OutboundSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchOutboundSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the outbound settings for this organization
     
     - PATCH /api/v2/outbound/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) outboundSettings 

     - returns: RequestBuilder<Void> 
     */
    open class func patchOutboundSettingsWithRequestBuilder(body: OutboundSettings) -> RequestBuilder<Void> {
        let path = "/api/v2/outbound/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Create attempt limits
     
     - parameter body: (body) AttemptLimits 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundAttemptlimits(body: AttemptLimits, completion: @escaping ((_ data: AttemptLimits?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundAttemptlimitsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AttemptLimits>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create attempt limits
     
     - POST /api/v2/outbound/attemptlimits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetPeriod" : "aeiou",
  "maxAttemptsPerNumber" : 123,
  "recallEntries" : {
    "key" : {
      "nbrAttempts" : 123,
      "minutesBetweenAttempts" : 123
    }
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "timeZoneId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "maxAttemptsPerContact" : 123
}}]
     
     - parameter body: (body) AttemptLimits 

     - returns: RequestBuilder<AttemptLimits> 
     */
    open class func postOutboundAttemptlimitsWithRequestBuilder(body: AttemptLimits) -> RequestBuilder<AttemptLimits> {
        let path = "/api/v2/outbound/attemptlimits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AttemptLimits>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Retrieves audits for dialer.
     
     - parameter body: (body) AuditSearch 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to entity.name)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter facetsOnly: (query) Facets only (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundAudits(body: DialerAuditRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, facetsOnly: Bool? = nil, completion: @escaping ((_ data: AuditSearchResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundAuditsWithRequestBuilder(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, facetsOnly: facetsOnly)
        requestBuilder.execute { (response: Response<AuditSearchResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves audits for dialer.
     
     - POST /api/v2/outbound/audits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "pageCount" : 123,
  "pageNumber" : 123,
  "pageSize" : 123,
  "facetInfo" : [ {
    "entries" : [ {
      "count" : 123,
      "value" : "aeiou"
    } ],
    "name" : "aeiou"
  } ],
  "auditMessages" : [ {
    "receivedTimestamp" : "aeiou",
    "level" : "aeiou",
    "transactionInitiator" : true,
    "changes" : [ {
      "property" : "aeiou",
      "newValues" : [ "aeiou" ],
      "oldValues" : [ "aeiou" ],
      "entity" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou"
      }
    } ],
    "serviceName" : "aeiou",
    "serviceContext" : {
      "name" : "aeiou"
    },
    "transactionId" : "aeiou",
    "actionContext" : "aeiou",
    "application" : "aeiou",
    "action" : "aeiou",
    "correlationId" : "aeiou",
    "id" : "aeiou",
    "user" : {
      "display" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "entity" : "",
    "timestamp" : "aeiou",
    "status" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) AuditSearch 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to entity.name)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter facetsOnly: (query) Facets only (optional, default to false)

     - returns: RequestBuilder<AuditSearchResult> 
     */
    open class func postOutboundAuditsWithRequestBuilder(body: DialerAuditRequest, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, facetsOnly: Bool? = nil) -> RequestBuilder<AuditSearchResult> {
        let path = "/api/v2/outbound/audits"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder, 
            
            "facetsOnly": facetsOnly
            
        ])

        let requestBuilder: RequestBuilder<AuditSearchResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create callable time set
     
     - parameter body: (body) DialerCallableTimeSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCallabletimesets(body: CallableTimeSet, completion: @escaping ((_ data: CallableTimeSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCallabletimesetsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CallableTimeSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create callable time set
     
     - POST /api/v2/outbound/callabletimesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimes" : [ {
    "timeZoneId" : "Africa/Abidjan",
    "timeSlots" : [ {
      "startTime" : "08:00:00",
      "stopTime" : "08:00:00",
      "day" : 1
    } ]
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) DialerCallableTimeSet 

     - returns: RequestBuilder<CallableTimeSet> 
     */
    open class func postOutboundCallabletimesetsWithRequestBuilder(body: CallableTimeSet) -> RequestBuilder<CallableTimeSet> {
        let path = "/api/v2/outbound/callabletimesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallableTimeSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a dialer call analysis response set.
     
     - parameter body: (body) ResponseSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCallanalysisresponsesets(body: ResponseSet, completion: @escaping ((_ data: ResponseSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCallanalysisresponsesetsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ResponseSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a dialer call analysis response set.
     
     - POST /api/v2/outbound/callanalysisresponsesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "responses" : {
    "key" : {
      "data" : "aeiou",
      "reactionType" : "aeiou",
      "name" : "aeiou"
    }
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) ResponseSet 

     - returns: RequestBuilder<ResponseSet> 
     */
    open class func postOutboundCallanalysisresponsesetsWithRequestBuilder(body: ResponseSet) -> RequestBuilder<ResponseSet> {
        let path = "/api/v2/outbound/callanalysisresponsesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Schedule a Callback for a Dialer Campaign (Deprecated)
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) ContactCallbackRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCampaignCallbackSchedule(campaignId: String, body: ContactCallbackRequest, completion: @escaping ((_ data: ContactCallbackRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCampaignCallbackScheduleWithRequestBuilder(campaignId: campaignId, body: body)
        requestBuilder.execute { (response: Response<ContactCallbackRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Schedule a Callback for a Dialer Campaign (Deprecated)
     
     - POST /api/v2/outbound/campaigns/{campaignId}/callback/schedule
     - This endpoint is deprecated and may have unexpected results. Please use \"/conversations/{conversationId}/participants/{participantId}/callbacks instead.\"
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedule" : "aeiou",
  "contactId" : "aeiou",
  "campaignId" : "aeiou",
  "contactListId" : "aeiou",
  "phoneColumn" : "aeiou"
}}]
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) ContactCallbackRequest 

     - returns: RequestBuilder<ContactCallbackRequest> 
     */
    open class func postOutboundCampaignCallbackScheduleWithRequestBuilder(campaignId: String, body: ContactCallbackRequest) -> RequestBuilder<ContactCallbackRequest> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/callback/schedule"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactCallbackRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Campaign Rule
     
     - parameter body: (body) CampaignRule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCampaignrules(body: CampaignRule, completion: @escaping ((_ data: CampaignRule?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCampaignrulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CampaignRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Campaign Rule
     
     - POST /api/v2/outbound/campaignrules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchAnyConditions" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "campaignRuleActions" : [ {
    "actionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : "",
    "campaignRuleActionEntities" : {
      "campaigns" : [ "" ],
      "useTriggeringEntity" : true,
      "sequences" : [ "" ]
    }
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "campaignRuleEntities" : {
    "campaigns" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    } ],
    "sequences" : [ "" ]
  },
  "campaignRuleConditions" : [ {
    "conditionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : {
      "dialingMode" : "aeiou",
      "priority" : "aeiou",
      "value" : "aeiou",
      "operator" : "aeiou"
    }
  } ],
  "version" : 123,
  "enabled" : true
}}]
     
     - parameter body: (body) CampaignRule 

     - returns: RequestBuilder<CampaignRule> 
     */
    open class func postOutboundCampaignrulesWithRequestBuilder(body: CampaignRule) -> RequestBuilder<CampaignRule> {
        let path = "/api/v2/outbound/campaignrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a campaign.
     
     - parameter body: (body) Campaign 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCampaigns(body: Campaign, completion: @escaping ((_ data: Campaign?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCampaignsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Campaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a campaign.
     
     - POST /api/v2/outbound/campaigns
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou"
  } ],
  "edgeGroup" : "",
  "callAnalysisResponseSet" : "",
  "previewTimeOutSeconds" : 123456789,
  "dncLists" : [ "" ],
  "callerName" : "aeiou",
  "contactListFilters" : [ "" ],
  "division" : "",
  "alwaysRunning" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "contactSorts" : [ "" ],
  "campaignStatus" : "aeiou",
  "outboundLineCount" : 123,
  "id" : "aeiou",
  "noAnswerTimeout" : 123,
  "dialingMode" : "aeiou",
  "callerAddress" : "(555) 555-5555",
  "skipPreviewDisabled" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "callAnalysisLanguage" : "aeiou",
  "priority" : 123,
  "version" : 123,
  "ruleSets" : [ "" ],
  "script" : "",
  "contactSort" : {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  },
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "site" : "",
  "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
  "name" : "aeiou",
  "queue" : "",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Campaign 

     - returns: RequestBuilder<Campaign> 
     */
    open class func postOutboundCampaignsWithRequestBuilder(body: Campaign) -> RequestBuilder<Campaign> {
        let path = "/api/v2/outbound/campaigns"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Campaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get progress for a list of campaigns
     
     - parameter body: (body) Campaign IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundCampaignsProgress(body: [String], completion: @escaping ((_ data: [CampaignProgress]?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundCampaignsProgressWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<[CampaignProgress]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get progress for a list of campaigns
     
     - POST /api/v2/outbound/campaigns/progress
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "contactList" : "",
  "numberOfContactsCalled" : 123456789,
  "numberOfContactsMessaged" : 123456789,
  "totalNumberOfContacts" : 123456789,
  "percentage" : 123456789,
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
} ]}]
     
     - parameter body: (body) Campaign IDs 

     - returns: RequestBuilder<[CampaignProgress]> 
     */
    open class func postOutboundCampaignsProgressWithRequestBuilder(body: [String]) -> RequestBuilder<[CampaignProgress]> {
        let path = "/api/v2/outbound/campaigns/progress"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CampaignProgress]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Deletes all contacts out of a list. All outstanding recalls or rule-scheduled callbacks for non-preview campaigns configured with the contactlist will be cancelled.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistClear(contactListId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistClearWithRequestBuilder(contactListId: contactListId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes all contacts out of a list. All outstanding recalls or rule-scheduled callbacks for non-preview campaigns configured with the contactlist will be cancelled.
     
     - POST /api/v2/outbound/contactlists/{contactListId}/clear
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactListId: (path) Contact List ID 

     - returns: RequestBuilder<Void> 
     */
    open class func postOutboundContactlistClearWithRequestBuilder(contactListId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/clear"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Add contacts to a contact list.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter body: (body) Contact 
     - parameter priority: (query) Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue. (optional)
     - parameter clearSystemData: (query) Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won&#39;t. (optional)
     - parameter doNotQueue: (query) Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the &#39;priority&#39; parameter. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistContacts(contactListId: String, body: [WritableDialerContact], priority: Bool? = nil, clearSystemData: Bool? = nil, doNotQueue: Bool? = nil, completion: @escaping ((_ data: [DialerContact]?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistContactsWithRequestBuilder(contactListId: contactListId, body: body, priority: priority, clearSystemData: clearSystemData, doNotQueue: doNotQueue)
        requestBuilder.execute { (response: Response<[DialerContact]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add contacts to a contact list.
     
     - POST /api/v2/outbound/contactlists/{contactListId}/contacts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "configurationOverrides" : {
    "priority" : true
  },
  "callable" : true,
  "data" : {
    "key" : "{}"
  },
  "callRecords" : {
    "key" : {
      "lastResult" : "aeiou",
      "lastAttempt" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "contactListId" : "aeiou",
  "contactColumnTimeZones" : {
    "key" : {
      "columnType" : "aeiou",
      "timeZone" : "aeiou"
    }
  },
  "id" : "aeiou",
  "phoneNumberStatus" : {
    "key" : {
      "callable" : true
    }
  }
} ]}]
     
     - parameter contactListId: (path) Contact List ID 
     - parameter body: (body) Contact 
     - parameter priority: (query) Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue. (optional)
     - parameter clearSystemData: (query) Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won&#39;t. (optional)
     - parameter doNotQueue: (query) Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the &#39;priority&#39; parameter. (optional)

     - returns: RequestBuilder<[DialerContact]> 
     */
    open class func postOutboundContactlistContactsWithRequestBuilder(contactListId: String, body: [WritableDialerContact], priority: Bool? = nil, clearSystemData: Bool? = nil, doNotQueue: Bool? = nil) -> RequestBuilder<[DialerContact]> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "priority": priority, 
            
            "clearSystemData": clearSystemData, 
            
            "doNotQueue": doNotQueue
            
        ])

        let requestBuilder: RequestBuilder<[DialerContact]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get contacts from a contact list.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter body: (body) ContactIds to get. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistContactsBulk(contactListId: String, body: [String], completion: @escaping ((_ data: [DialerContact]?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistContactsBulkWithRequestBuilder(contactListId: contactListId, body: body)
        requestBuilder.execute { (response: Response<[DialerContact]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get contacts from a contact list.
     
     - POST /api/v2/outbound/contactlists/{contactListId}/contacts/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "configurationOverrides" : {
    "priority" : true
  },
  "callable" : true,
  "data" : {
    "key" : "{}"
  },
  "callRecords" : {
    "key" : {
      "lastResult" : "aeiou",
      "lastAttempt" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "contactListId" : "aeiou",
  "contactColumnTimeZones" : {
    "key" : {
      "columnType" : "aeiou",
      "timeZone" : "aeiou"
    }
  },
  "id" : "aeiou",
  "phoneNumberStatus" : {
    "key" : {
      "callable" : true
    }
  }
} ]}]
     
     - parameter contactListId: (path) Contact List ID 
     - parameter body: (body) ContactIds to get. 

     - returns: RequestBuilder<[DialerContact]> 
     */
    open class func postOutboundContactlistContactsBulkWithRequestBuilder(contactListId: String, body: [String]) -> RequestBuilder<[DialerContact]> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DialerContact]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Initiate the export of a contact list.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistExport(contactListId: String, completion: @escaping ((_ data: DomainEntityRef?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistExportWithRequestBuilder(contactListId: contactListId)
        requestBuilder.execute { (response: Response<DomainEntityRef>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Initiate the export of a contact list.
     
     - POST /api/v2/outbound/contactlists/{contactListId}/export
     - Returns 200 if received OK.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter contactListId: (path) ContactList ID 

     - returns: RequestBuilder<DomainEntityRef> 
     */
    open class func postOutboundContactlistExportWithRequestBuilder(contactListId: String) -> RequestBuilder<DomainEntityRef> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/export"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainEntityRef>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Contact List Filter
     
     - parameter body: (body) ContactListFilter 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistfilters(body: ContactListFilter, completion: @escaping ((_ data: ContactListFilter?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistfiltersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ContactListFilter>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Contact List Filter
     
     - POST /api/v2/outbound/contactlistfilters
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "clauses" : [ {
    "predicates" : [ {
      "columnType" : "aeiou",
      "column" : "aeiou",
      "range" : {
        "maxInclusive" : true,
        "min" : "aeiou",
        "max" : "aeiou",
        "minInclusive" : true,
        "inSet" : [ "aeiou" ]
      },
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "filterType" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "filterType" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) ContactListFilter 

     - returns: RequestBuilder<ContactListFilter> 
     */
    open class func postOutboundContactlistfiltersWithRequestBuilder(body: ContactListFilter) -> RequestBuilder<ContactListFilter> {
        let path = "/api/v2/outbound/contactlistfilters"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactListFilter>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a preview of the output of a contact list filter
     
     - parameter body: (body) ContactListFilter 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlistfiltersPreview(body: ContactListFilter, completion: @escaping ((_ data: FilterPreviewResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistfiltersPreviewWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FilterPreviewResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a preview of the output of a contact list filter
     
     - POST /api/v2/outbound/contactlistfilters/preview
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "preview" : [ {
    "configurationOverrides" : {
      "priority" : true
    },
    "callable" : true,
    "data" : {
      "key" : "{}"
    },
    "callRecords" : {
      "key" : {
        "lastResult" : "aeiou",
        "lastAttempt" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "contactListId" : "aeiou",
    "contactColumnTimeZones" : {
      "key" : {
        "columnType" : "aeiou",
        "timeZone" : "aeiou"
      }
    },
    "id" : "aeiou",
    "phoneNumberStatus" : {
      "key" : {
        "callable" : true
      }
    }
  } ],
  "totalContacts" : 123456789,
  "filteredContacts" : 123456789
}}]
     
     - parameter body: (body) ContactListFilter 

     - returns: RequestBuilder<FilterPreviewResponse> 
     */
    open class func postOutboundContactlistfiltersPreviewWithRequestBuilder(body: ContactListFilter) -> RequestBuilder<FilterPreviewResponse> {
        let path = "/api/v2/outbound/contactlistfilters/preview"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FilterPreviewResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a contact List.
     
     - parameter body: (body) ContactList 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundContactlists(body: ContactList, completion: @escaping ((_ data: ContactList?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundContactlistsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ContactList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a contact List.
     
     - POST /api/v2/outbound/contactlists
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou",
    "callableTimeColumn" : "aeiou"
  } ],
  "attemptLimits" : "",
  "automaticTimeZoneMapping" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "previewModeColumnName" : "aeiou",
  "columnNames" : [ "aeiou" ],
  "size" : 123456789,
  "previewModeAcceptedValues" : [ "aeiou" ],
  "name" : "aeiou",
  "id" : "aeiou",
  "zipCodeColumnName" : "aeiou"
}}]
     
     - parameter body: (body) ContactList 

     - returns: RequestBuilder<ContactList> 
     */
    open class func postOutboundContactlistsWithRequestBuilder(body: ContactList) -> RequestBuilder<ContactList> {
        let path = "/api/v2/outbound/contactlists"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add phone numbers to a Dialer DNC list.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundConversationDnc(conversationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundConversationDncWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add phone numbers to a Dialer DNC list.
     
     - POST /api/v2/outbound/conversations/{conversationId}/dnc
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) Conversation ID 

     - returns: RequestBuilder<Void> 
     */
    open class func postOutboundConversationDncWithRequestBuilder(conversationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/conversations/{conversationId}/dnc"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Initiate the export of a dnc list.
     
     - parameter dncListId: (path) DncList ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundDnclistExport(dncListId: String, completion: @escaping ((_ data: DomainEntityRef?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundDnclistExportWithRequestBuilder(dncListId: dncListId)
        requestBuilder.execute { (response: Response<DomainEntityRef>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Initiate the export of a dnc list.
     
     - POST /api/v2/outbound/dnclists/{dncListId}/export
     - Returns 200 if received OK.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter dncListId: (path) DncList ID 

     - returns: RequestBuilder<DomainEntityRef> 
     */
    open class func postOutboundDnclistExportWithRequestBuilder(dncListId: String) -> RequestBuilder<DomainEntityRef> {
        var path = "/api/v2/outbound/dnclists/{dncListId}/export"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DomainEntityRef>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add phone numbers to a DNC list.
     
     - parameter dncListId: (path) DncList ID 
     - parameter body: (body) DNC Phone Numbers 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundDnclistPhonenumbers(dncListId: String, body: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundDnclistPhonenumbersWithRequestBuilder(dncListId: dncListId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add phone numbers to a DNC list.
     
     - POST /api/v2/outbound/dnclists/{dncListId}/phonenumbers
     - Only Internal DNC lists may be appended to
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter dncListId: (path) DncList ID 
     - parameter body: (body) DNC Phone Numbers 

     - returns: RequestBuilder<Void> 
     */
    open class func postOutboundDnclistPhonenumbersWithRequestBuilder(dncListId: String, body: [String]) -> RequestBuilder<Void> {
        var path = "/api/v2/outbound/dnclists/{dncListId}/phonenumbers"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create dialer DNC list
     
     - parameter body: (body) DncList 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundDnclists(body: DncListCreate, completion: @escaping ((_ data: DncList?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundDnclistsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DncList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create dialer DNC list
     
     - POST /api/v2/outbound/dnclists
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "loginId" : "aeiou",
  "selfUri" : "aeiou",
  "dncSourceType" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "size" : 123456789,
  "name" : "aeiou",
  "id" : "aeiou",
  "dncCodes" : [ "aeiou" ],
  "licenseId" : "aeiou"
}}]
     
     - parameter body: (body) DncList 

     - returns: RequestBuilder<DncList> 
     */
    open class func postOutboundDnclistsWithRequestBuilder(body: DncListCreate) -> RequestBuilder<DncList> {
        let path = "/api/v2/outbound/dnclists"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DncList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a Messaging Campaign
     
     - parameter body: (body) Messaging Campaign 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundMessagingcampaigns(body: MessagingCampaign, completion: @escaping ((_ data: MessagingCampaign?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundMessagingcampaignsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<MessagingCampaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Messaging Campaign
     
     - POST /api/v2/outbound/messagingcampaigns
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "dncLists" : [ "" ],
  "messagesPerMinute" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "alwaysRunning" : true,
  "contactList" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "smsConfig" : {
    "senderSmsPhoneNumber" : {
      "phoneNumber" : "aeiou",
      "selfUri" : "aeiou"
    },
    "messageColumn" : "aeiou",
    "phoneColumn" : "aeiou"
  },
  "contactSorts" : [ {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  } ],
  "name" : "aeiou",
  "campaignStatus" : "aeiou",
  "id" : "aeiou",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Messaging Campaign 

     - returns: RequestBuilder<MessagingCampaign> 
     */
    open class func postOutboundMessagingcampaignsWithRequestBuilder(body: MessagingCampaign) -> RequestBuilder<MessagingCampaign> {
        let path = "/api/v2/outbound/messagingcampaigns"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessagingCampaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get progress for a list of messaging campaigns
     
     - parameter body: (body) Messaging Campaign IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundMessagingcampaignsProgress(body: [String], completion: @escaping ((_ data: [CampaignProgress]?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundMessagingcampaignsProgressWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<[CampaignProgress]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get progress for a list of messaging campaigns
     
     - POST /api/v2/outbound/messagingcampaigns/progress
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "contactList" : "",
  "numberOfContactsCalled" : 123456789,
  "numberOfContactsMessaged" : 123456789,
  "totalNumberOfContacts" : 123456789,
  "percentage" : 123456789,
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
} ]}]
     
     - parameter body: (body) Messaging Campaign IDs 

     - returns: RequestBuilder<[CampaignProgress]> 
     */
    open class func postOutboundMessagingcampaignsProgressWithRequestBuilder(body: [String]) -> RequestBuilder<[CampaignProgress]> {
        let path = "/api/v2/outbound/messagingcampaigns/progress"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CampaignProgress]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a Dialer Call Analysis Response Set.
     
     - parameter body: (body) RuleSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundRulesets(body: RuleSet, completion: @escaping ((_ data: RuleSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundRulesetsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RuleSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Dialer Call Analysis Response Set.
     
     - POST /api/v2/outbound/rulesets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "rules" : [ {
    "name" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "conditions" : [ {
      "codes" : [ "aeiou" ],
      "valueType" : "aeiou",
      "propertyType" : "aeiou",
      "property" : "aeiou",
      "attributeName" : "aeiou",
      "type" : "aeiou",
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "actions" : [ {
      "actionTypeName" : "aeiou",
      "updateOption" : "aeiou",
      "type" : "aeiou",
      "properties" : {
        "key" : "aeiou"
      }
    } ],
    "order" : 123
  } ],
  "id" : "aeiou",
  "version" : 123,
  "queue" : ""
}}]
     
     - parameter body: (body) RuleSet 

     - returns: RequestBuilder<RuleSet> 
     */
    open class func postOutboundRulesetsWithRequestBuilder(body: RuleSet) -> RequestBuilder<RuleSet> {
        let path = "/api/v2/outbound/rulesets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RuleSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new campaign sequence.
     
     - parameter body: (body) Organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOutboundSequences(body: CampaignSequence, completion: @escaping ((_ data: CampaignSequence?,_ error: Error?) -> Void)) {
        let requestBuilder = postOutboundSequencesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CampaignSequence>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new campaign sequence.
     
     - POST /api/v2/outbound/sequences
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "currentCampaign" : 123,
  "stopMessage" : "aeiou",
  "campaigns" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "repeat" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "status" : "aeiou"
}}]
     
     - parameter body: (body) Organization 

     - returns: RequestBuilder<CampaignSequence> 
     */
    open class func postOutboundSequencesWithRequestBuilder(body: CampaignSequence) -> RequestBuilder<CampaignSequence> {
        let path = "/api/v2/outbound/sequences"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignSequence>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update attempt limits
     
     - parameter attemptLimitsId: (path) Attempt limits ID 
     - parameter body: (body) AttemptLimits 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundAttemptlimit(attemptLimitsId: String, body: AttemptLimits, completion: @escaping ((_ data: AttemptLimits?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: attemptLimitsId, body: body)
        requestBuilder.execute { (response: Response<AttemptLimits>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update attempt limits
     
     - PUT /api/v2/outbound/attemptlimits/{attemptLimitsId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetPeriod" : "aeiou",
  "maxAttemptsPerNumber" : 123,
  "recallEntries" : {
    "key" : {
      "nbrAttempts" : 123,
      "minutesBetweenAttempts" : 123
    }
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "timeZoneId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "maxAttemptsPerContact" : 123
}}]
     
     - parameter attemptLimitsId: (path) Attempt limits ID 
     - parameter body: (body) AttemptLimits 

     - returns: RequestBuilder<AttemptLimits> 
     */
    open class func putOutboundAttemptlimitWithRequestBuilder(attemptLimitsId: String, body: AttemptLimits) -> RequestBuilder<AttemptLimits> {
        var path = "/api/v2/outbound/attemptlimits/{attemptLimitsId}"
        let attemptLimitsIdPreEscape = "\(attemptLimitsId)"
        let attemptLimitsIdPostEscape = attemptLimitsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attemptLimitsId}", with: attemptLimitsIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AttemptLimits>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update callable time set
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 
     - parameter body: (body) DialerCallableTimeSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundCallabletimeset(callableTimeSetId: String, body: CallableTimeSet, completion: @escaping ((_ data: CallableTimeSet?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: callableTimeSetId, body: body)
        requestBuilder.execute { (response: Response<CallableTimeSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update callable time set
     
     - PUT /api/v2/outbound/callabletimesets/{callableTimeSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimes" : [ {
    "timeZoneId" : "Africa/Abidjan",
    "timeSlots" : [ {
      "startTime" : "08:00:00",
      "stopTime" : "08:00:00",
      "day" : 1
    } ]
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter callableTimeSetId: (path) Callable Time Set ID 
     - parameter body: (body) DialerCallableTimeSet 

     - returns: RequestBuilder<CallableTimeSet> 
     */
    open class func putOutboundCallabletimesetWithRequestBuilder(callableTimeSetId: String, body: CallableTimeSet) -> RequestBuilder<CallableTimeSet> {
        var path = "/api/v2/outbound/callabletimesets/{callableTimeSetId}"
        let callableTimeSetIdPreEscape = "\(callableTimeSetId)"
        let callableTimeSetIdPostEscape = callableTimeSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callableTimeSetId}", with: callableTimeSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallableTimeSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a dialer call analysis response set.
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 
     - parameter body: (body) ResponseSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundCallanalysisresponseset(callAnalysisSetId: String, body: ResponseSet, completion: @escaping ((_ data: ResponseSet?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: callAnalysisSetId, body: body)
        requestBuilder.execute { (response: Response<ResponseSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a dialer call analysis response set.
     
     - PUT /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "responses" : {
    "key" : {
      "data" : "aeiou",
      "reactionType" : "aeiou",
      "name" : "aeiou"
    }
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter callAnalysisSetId: (path) Call Analysis Response Set ID 
     - parameter body: (body) ResponseSet 

     - returns: RequestBuilder<ResponseSet> 
     */
    open class func putOutboundCallanalysisresponsesetWithRequestBuilder(callAnalysisSetId: String, body: ResponseSet) -> RequestBuilder<ResponseSet> {
        var path = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}"
        let callAnalysisSetIdPreEscape = "\(callAnalysisSetId)"
        let callAnalysisSetIdPostEscape = callAnalysisSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{callAnalysisSetId}", with: callAnalysisSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a campaign.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) Campaign 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundCampaign(campaignId: String, body: Campaign, completion: @escaping ((_ data: Campaign?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundCampaignWithRequestBuilder(campaignId: campaignId, body: body)
        requestBuilder.execute { (response: Response<Campaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a campaign.
     
     - PUT /api/v2/outbound/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou"
  } ],
  "edgeGroup" : "",
  "callAnalysisResponseSet" : "",
  "previewTimeOutSeconds" : 123456789,
  "dncLists" : [ "" ],
  "callerName" : "aeiou",
  "contactListFilters" : [ "" ],
  "division" : "",
  "alwaysRunning" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "contactSorts" : [ "" ],
  "campaignStatus" : "aeiou",
  "outboundLineCount" : 123,
  "id" : "aeiou",
  "noAnswerTimeout" : 123,
  "dialingMode" : "aeiou",
  "callerAddress" : "(555) 555-5555",
  "skipPreviewDisabled" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "callAnalysisLanguage" : "aeiou",
  "priority" : 123,
  "version" : 123,
  "ruleSets" : [ "" ],
  "script" : "",
  "contactSort" : {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  },
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "site" : "",
  "abandonRate" : 1.3579000000000001069366817318950779736042022705078125,
  "name" : "aeiou",
  "queue" : "",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) Campaign 

     - returns: RequestBuilder<Campaign> 
     */
    open class func putOutboundCampaignWithRequestBuilder(campaignId: String, body: Campaign) -> RequestBuilder<Campaign> {
        var path = "/api/v2/outbound/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Campaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Send notification that an agent's state changed 
     
     - parameter campaignId: (path) Campaign ID 
     - parameter userId: (path) Agent&#39;s user ID 
     - parameter body: (body) agent 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundCampaignAgent(campaignId: String, userId: String, body: Agent, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundCampaignAgentWithRequestBuilder(campaignId: campaignId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Send notification that an agent's state changed 
     
     - PUT /api/v2/outbound/campaigns/{campaignId}/agents/{userId}
     - New agent state.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter campaignId: (path) Campaign ID 
     - parameter userId: (path) Agent&#39;s user ID 
     - parameter body: (body) agent 

     - returns: RequestBuilder<String> 
     */
    open class func putOutboundCampaignAgentWithRequestBuilder(campaignId: String, userId: String, body: Agent) -> RequestBuilder<String> {
        var path = "/api/v2/outbound/campaigns/{campaignId}/agents/{userId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update Campaign Rule
     
     - parameter campaignRuleId: (path) Campaign Rule ID 
     - parameter body: (body) CampaignRule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundCampaignrule(campaignRuleId: String, body: CampaignRule, completion: @escaping ((_ data: CampaignRule?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundCampaignruleWithRequestBuilder(campaignRuleId: campaignRuleId, body: body)
        requestBuilder.execute { (response: Response<CampaignRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Campaign Rule
     
     - PUT /api/v2/outbound/campaignrules/{campaignRuleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchAnyConditions" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "campaignRuleActions" : [ {
    "actionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : "",
    "campaignRuleActionEntities" : {
      "campaigns" : [ "" ],
      "useTriggeringEntity" : true,
      "sequences" : [ "" ]
    }
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "campaignRuleEntities" : {
    "campaigns" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    } ],
    "sequences" : [ "" ]
  },
  "campaignRuleConditions" : [ {
    "conditionType" : "aeiou",
    "id" : "aeiou",
    "parameters" : {
      "dialingMode" : "aeiou",
      "priority" : "aeiou",
      "value" : "aeiou",
      "operator" : "aeiou"
    }
  } ],
  "version" : 123,
  "enabled" : true
}}]
     
     - parameter campaignRuleId: (path) Campaign Rule ID 
     - parameter body: (body) CampaignRule 

     - returns: RequestBuilder<CampaignRule> 
     */
    open class func putOutboundCampaignruleWithRequestBuilder(campaignRuleId: String, body: CampaignRule) -> RequestBuilder<CampaignRule> {
        var path = "/api/v2/outbound/campaignrules/{campaignRuleId}"
        let campaignRuleIdPreEscape = "\(campaignRuleId)"
        let campaignRuleIdPostEscape = campaignRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignRuleId}", with: campaignRuleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a contact list.
     
     - parameter contactListId: (path) ContactList ID 
     - parameter body: (body) ContactList 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundContactlist(contactListId: String, body: ContactList, completion: @escaping ((_ data: ContactList?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundContactlistWithRequestBuilder(contactListId: contactListId, body: body)
        requestBuilder.execute { (response: Response<ContactList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a contact list.
     
     - PUT /api/v2/outbound/contactlists/{contactListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "phoneColumns" : [ {
    "type" : "aeiou",
    "columnName" : "aeiou",
    "callableTimeColumn" : "aeiou"
  } ],
  "attemptLimits" : "",
  "automaticTimeZoneMapping" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "previewModeColumnName" : "aeiou",
  "columnNames" : [ "aeiou" ],
  "size" : 123456789,
  "previewModeAcceptedValues" : [ "aeiou" ],
  "name" : "aeiou",
  "id" : "aeiou",
  "zipCodeColumnName" : "aeiou"
}}]
     
     - parameter contactListId: (path) ContactList ID 
     - parameter body: (body) ContactList 

     - returns: RequestBuilder<ContactList> 
     */
    open class func putOutboundContactlistWithRequestBuilder(contactListId: String, body: ContactList) -> RequestBuilder<ContactList> {
        var path = "/api/v2/outbound/contactlists/{contactListId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a contact.
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 
     - parameter body: (body) Contact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundContactlistContact(contactListId: String, contactId: String, body: DialerContact, completion: @escaping ((_ data: DialerContact?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundContactlistContactWithRequestBuilder(contactListId: contactListId, contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<DialerContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a contact.
     
     - PUT /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "configurationOverrides" : {
    "priority" : true
  },
  "callable" : true,
  "data" : {
    "key" : "{}"
  },
  "callRecords" : {
    "key" : {
      "lastResult" : "aeiou",
      "lastAttempt" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "contactListId" : "aeiou",
  "contactColumnTimeZones" : {
    "key" : {
      "columnType" : "aeiou",
      "timeZone" : "aeiou"
    }
  },
  "id" : "aeiou",
  "phoneNumberStatus" : {
    "key" : {
      "callable" : true
    }
  }
}}]
     
     - parameter contactListId: (path) Contact List ID 
     - parameter contactId: (path) Contact ID 
     - parameter body: (body) Contact 

     - returns: RequestBuilder<DialerContact> 
     */
    open class func putOutboundContactlistContactWithRequestBuilder(contactListId: String, contactId: String, body: DialerContact) -> RequestBuilder<DialerContact> {
        var path = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}"
        let contactListIdPreEscape = "\(contactListId)"
        let contactListIdPostEscape = contactListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListId}", with: contactListIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DialerContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update Contact List Filter
     
     - parameter contactListFilterId: (path) Contact List Filter ID 
     - parameter body: (body) ContactListFilter 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundContactlistfilter(contactListFilterId: String, body: ContactListFilter, completion: @escaping ((_ data: ContactListFilter?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundContactlistfilterWithRequestBuilder(contactListFilterId: contactListFilterId, body: body)
        requestBuilder.execute { (response: Response<ContactListFilter>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Contact List Filter
     
     - PUT /api/v2/outbound/contactlistfilters/{contactListFilterId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "clauses" : [ {
    "predicates" : [ {
      "columnType" : "aeiou",
      "column" : "aeiou",
      "range" : {
        "maxInclusive" : true,
        "min" : "aeiou",
        "max" : "aeiou",
        "minInclusive" : true,
        "inSet" : [ "aeiou" ]
      },
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "filterType" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "filterType" : "aeiou",
  "version" : 123
}}]
     
     - parameter contactListFilterId: (path) Contact List Filter ID 
     - parameter body: (body) ContactListFilter 

     - returns: RequestBuilder<ContactListFilter> 
     */
    open class func putOutboundContactlistfilterWithRequestBuilder(contactListFilterId: String, body: ContactListFilter) -> RequestBuilder<ContactListFilter> {
        var path = "/api/v2/outbound/contactlistfilters/{contactListFilterId}"
        let contactListFilterIdPreEscape = "\(contactListFilterId)"
        let contactListFilterIdPostEscape = contactListFilterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactListFilterId}", with: contactListFilterIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactListFilter>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update dialer DNC list
     
     - parameter dncListId: (path) DncList ID 
     - parameter body: (body) DncList 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundDnclist(dncListId: String, body: DncList, completion: @escaping ((_ data: DncList?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundDnclistWithRequestBuilder(dncListId: dncListId, body: body)
        requestBuilder.execute { (response: Response<DncList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update dialer DNC list
     
     - PUT /api/v2/outbound/dnclists/{dncListId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "importStatus" : {
    "completedRecords" : 123456789,
    "totalRecords" : 123456789,
    "failureReason" : "aeiou",
    "state" : "aeiou",
    "percentComplete" : 123
  },
  "loginId" : "aeiou",
  "selfUri" : "aeiou",
  "dncSourceType" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "size" : 123456789,
  "name" : "aeiou",
  "id" : "aeiou",
  "dncCodes" : [ "aeiou" ],
  "licenseId" : "aeiou"
}}]
     
     - parameter dncListId: (path) DncList ID 
     - parameter body: (body) DncList 

     - returns: RequestBuilder<DncList> 
     */
    open class func putOutboundDnclistWithRequestBuilder(dncListId: String, body: DncList) -> RequestBuilder<DncList> {
        var path = "/api/v2/outbound/dnclists/{dncListId}"
        let dncListIdPreEscape = "\(dncListId)"
        let dncListIdPostEscape = dncListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dncListId}", with: dncListIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DncList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an Outbound Messaging Campaign
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter body: (body) MessagingCampaign 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundMessagingcampaign(messagingCampaignId: String, body: MessagingCampaign, completion: @escaping ((_ data: MessagingCampaign?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: messagingCampaignId, body: body)
        requestBuilder.execute { (response: Response<MessagingCampaign>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an Outbound Messaging Campaign
     
     - PUT /api/v2/outbound/messagingcampaigns/{messagingCampaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callableTimeSet" : "",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "dncLists" : [ "" ],
  "messagesPerMinute" : 123,
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "alwaysRunning" : true,
  "contactList" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "smsConfig" : {
    "senderSmsPhoneNumber" : {
      "phoneNumber" : "aeiou",
      "selfUri" : "aeiou"
    },
    "messageColumn" : "aeiou",
    "phoneColumn" : "aeiou"
  },
  "contactSorts" : [ {
    "fieldName" : "aeiou",
    "numeric" : true,
    "direction" : "aeiou"
  } ],
  "name" : "aeiou",
  "campaignStatus" : "aeiou",
  "id" : "aeiou",
  "errors" : [ {
    "details" : "aeiou",
    "error" : "aeiou"
  } ]
}}]
     
     - parameter messagingCampaignId: (path) The Messaging Campaign ID 
     - parameter body: (body) MessagingCampaign 

     - returns: RequestBuilder<MessagingCampaign> 
     */
    open class func putOutboundMessagingcampaignWithRequestBuilder(messagingCampaignId: String, body: MessagingCampaign) -> RequestBuilder<MessagingCampaign> {
        var path = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}"
        let messagingCampaignIdPreEscape = "\(messagingCampaignId)"
        let messagingCampaignIdPostEscape = messagingCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messagingCampaignId}", with: messagingCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessagingCampaign>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a RuleSet.
     
     - parameter ruleSetId: (path) Rule Set ID 
     - parameter body: (body) RuleSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundRuleset(ruleSetId: String, body: RuleSet, completion: @escaping ((_ data: RuleSet?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundRulesetWithRequestBuilder(ruleSetId: ruleSetId, body: body)
        requestBuilder.execute { (response: Response<RuleSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a RuleSet.
     
     - PUT /api/v2/outbound/rulesets/{ruleSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contactList" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "rules" : [ {
    "name" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "conditions" : [ {
      "codes" : [ "aeiou" ],
      "valueType" : "aeiou",
      "propertyType" : "aeiou",
      "property" : "aeiou",
      "attributeName" : "aeiou",
      "type" : "aeiou",
      "inverted" : true,
      "value" : "aeiou",
      "operator" : "aeiou"
    } ],
    "actions" : [ {
      "actionTypeName" : "aeiou",
      "updateOption" : "aeiou",
      "type" : "aeiou",
      "properties" : {
        "key" : "aeiou"
      }
    } ],
    "order" : 123
  } ],
  "id" : "aeiou",
  "version" : 123,
  "queue" : ""
}}]
     
     - parameter ruleSetId: (path) Rule Set ID 
     - parameter body: (body) RuleSet 

     - returns: RequestBuilder<RuleSet> 
     */
    open class func putOutboundRulesetWithRequestBuilder(ruleSetId: String, body: RuleSet) -> RequestBuilder<RuleSet> {
        var path = "/api/v2/outbound/rulesets/{ruleSetId}"
        let ruleSetIdPreEscape = "\(ruleSetId)"
        let ruleSetIdPostEscape = ruleSetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleSetId}", with: ruleSetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RuleSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a new campaign schedule.
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) CampaignSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundSchedulesCampaign(campaignId: String, body: CampaignSchedule, completion: @escaping ((_ data: CampaignSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundSchedulesCampaignWithRequestBuilder(campaignId: campaignId, body: body)
        requestBuilder.execute { (response: Response<CampaignSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a new campaign schedule.
     
     - PUT /api/v2/outbound/schedules/campaigns/{campaignId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "campaign" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter campaignId: (path) Campaign ID 
     - parameter body: (body) CampaignSchedule 

     - returns: RequestBuilder<CampaignSchedule> 
     */
    open class func putOutboundSchedulesCampaignWithRequestBuilder(campaignId: String, body: CampaignSchedule) -> RequestBuilder<CampaignSchedule> {
        var path = "/api/v2/outbound/schedules/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a new sequence schedule.
     
     - parameter sequenceId: (path) Sequence ID 
     - parameter body: (body) SequenceSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundSchedulesSequence(sequenceId: String, body: SequenceSchedule, completion: @escaping ((_ data: SequenceSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundSchedulesSequenceWithRequestBuilder(sequenceId: sequenceId, body: body)
        requestBuilder.execute { (response: Response<SequenceSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a new sequence schedule.
     
     - PUT /api/v2/outbound/schedules/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sequence" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "intervals" : [ {
    "start" : "aeiou",
    "end" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "timeZone" : "Africa/Abidjan",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter sequenceId: (path) Sequence ID 
     - parameter body: (body) SequenceSchedule 

     - returns: RequestBuilder<SequenceSchedule> 
     */
    open class func putOutboundSchedulesSequenceWithRequestBuilder(sequenceId: String, body: SequenceSchedule) -> RequestBuilder<SequenceSchedule> {
        var path = "/api/v2/outbound/schedules/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SequenceSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a new campaign sequence.
     
     - parameter sequenceId: (path) Campaign Sequence ID 
     - parameter body: (body) Organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundSequence(sequenceId: String, body: CampaignSequence, completion: @escaping ((_ data: CampaignSequence?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundSequenceWithRequestBuilder(sequenceId: sequenceId, body: body)
        requestBuilder.execute { (response: Response<CampaignSequence>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a new campaign sequence.
     
     - PUT /api/v2/outbound/sequences/{sequenceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "currentCampaign" : 123,
  "stopMessage" : "aeiou",
  "campaigns" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "repeat" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123,
  "status" : "aeiou"
}}]
     
     - parameter sequenceId: (path) Campaign Sequence ID 
     - parameter body: (body) Organization 

     - returns: RequestBuilder<CampaignSequence> 
     */
    open class func putOutboundSequenceWithRequestBuilder(sequenceId: String, body: CampaignSequence) -> RequestBuilder<CampaignSequence> {
        var path = "/api/v2/outbound/sequences/{sequenceId}"
        let sequenceIdPreEscape = "\(sequenceId)"
        let sequenceIdPostEscape = sequenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sequenceId}", with: sequenceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CampaignSequence>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update the Dialer wrap up code mapping.
     
     - parameter body: (body) wrapUpCodeMapping 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOutboundWrapupcodemappings(body: WrapUpCodeMapping, completion: @escaping ((_ data: WrapUpCodeMapping?,_ error: Error?) -> Void)) {
        let requestBuilder = putOutboundWrapupcodemappingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WrapUpCodeMapping>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the Dialer wrap up code mapping.
     
     - PUT /api/v2/outbound/wrapupcodemappings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultSet" : [ "aeiou" ],
  "mapping" : {
    "key" : [ "aeiou" ]
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) wrapUpCodeMapping 

     - returns: RequestBuilder<WrapUpCodeMapping> 
     */
    open class func putOutboundWrapupcodemappingsWithRequestBuilder(body: WrapUpCodeMapping) -> RequestBuilder<WrapUpCodeMapping> {
        let path = "/api/v2/outbound/wrapupcodemappings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapUpCodeMapping>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
