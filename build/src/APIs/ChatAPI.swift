//
// ChatAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ChatAPI {
    
    
    
    
    /**
     Delete a message in a room
     
     - parameter roomJid: (path) roomId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChatsRoomMessage(roomJid: String, messageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteChatsRoomMessageWithRequestBuilder(roomJid: roomJid, messageId: messageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a message in a room
     - DELETE /api/v2/chats/rooms/{roomJid}/messages/{messageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatsRoomMessageWithRequestBuilder(roomJid: String, messageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}/messages/{messageId}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Remove a user from a room.
     
     - parameter roomJid: (path) roomJid 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChatsRoomParticipant(roomJid: String, userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteChatsRoomParticipantWithRequestBuilder(roomJid: roomJid, userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove a user from a room.
     - DELETE /api/v2/chats/rooms/{roomJid}/participants/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomJid 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatsRoomParticipantWithRequestBuilder(roomJid: String, userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}/participants/{userId}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Remove a pinned message from a room
     
     - parameter roomJid: (path) roomJid 
     - parameter pinnedMessageId: (path) pinnedMessageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChatsRoomPinnedmessage(roomJid: String, pinnedMessageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteChatsRoomPinnedmessageWithRequestBuilder(roomJid: roomJid, pinnedMessageId: pinnedMessageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove a pinned message from a room
     - DELETE /api/v2/chats/rooms/{roomJid}/pinnedmessages/{pinnedMessageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomJid 
     - parameter pinnedMessageId: (path) pinnedMessageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatsRoomPinnedmessageWithRequestBuilder(roomJid: String, pinnedMessageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}/pinnedmessages/{pinnedMessageId}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let pinnedMessageIdPreEscape = "\(pinnedMessageId)"
        let pinnedMessageIdPostEscape = pinnedMessageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinnedMessageId}", with: pinnedMessageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Delete a message to a user
     
     - parameter userId: (path) userId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChatsUserMessage(userId: String, messageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteChatsUserMessageWithRequestBuilder(userId: userId, messageId: messageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a message to a user
     - DELETE /api/v2/chats/users/{userId}/messages/{messageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) userId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatsUserMessageWithRequestBuilder(userId: String, messageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/users/{userId}/messages/{messageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a message
     
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsMessage(messageId: String, completion: @escaping ((_ data: ChatMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsMessageWithRequestBuilder(messageId: messageId)
        requestBuilder.execute { (response: Response<ChatMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a message
     - GET /api/v2/chats/messages/{messageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jid" : "jid",
  "edited" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "thread" : "{}",
  "body" : "body",
  "toUser" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "mentions" : {
    "key" : "mentions"
  },
  "attachmentDeleted" : true,
  "fileUri" : "fileUri",
  "parentThread" : "{}",
  "reactions" : [ {
    "emoji" : "emoji",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ]
  }, {
    "emoji" : "emoji",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ]
  } ],
  "id" : "id",
  "toJid" : "toJid",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<ChatMessageResponse> 
     */
    open class func getChatsMessageWithRequestBuilder(messageId: String) -> RequestBuilder<ChatMessageResponse> {        
        var path = "/api/v2/chats/messages/{messageId}"
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get a room
     
     - parameter roomJid: (path) roomJid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsRoom(roomJid: String, completion: @escaping ((_ data: Room?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsRoomWithRequestBuilder(roomJid: roomJid)
        requestBuilder.execute { (response: Response<Room>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a room
     - GET /api/v2/chats/rooms/{roomJid}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pinnedMessages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "subject" : "subject",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "owners" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "id" : "id",
  "roomType" : "adhoc",
  "participantLimit" : 0
}, statusCode=200}]
     
     - parameter roomJid: (path) roomJid 

     - returns: RequestBuilder<Room> 
     */
    open class func getChatsRoomWithRequestBuilder(roomJid: String) -> RequestBuilder<Room> {        
        var path = "/api/v2/chats/rooms/{roomJid}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Room>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get messages by id(s) from a room
     
     - parameter roomJid: (path) roomJid 
     - parameter messageIds: (path) messageIds, comma separated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsRoomMessage(roomJid: String, messageIds: String, completion: @escaping ((_ data: ChatMessageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsRoomMessageWithRequestBuilder(roomJid: roomJid, messageIds: messageIds)
        requestBuilder.execute { (response: Response<ChatMessageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get messages by id(s) from a room
     - GET /api/v2/chats/rooms/{roomJid}/messages/{messageIds}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  }, {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter roomJid: (path) roomJid 
     - parameter messageIds: (path) messageIds, comma separated 

     - returns: RequestBuilder<ChatMessageEntityListing> 
     */
    open class func getChatsRoomMessageWithRequestBuilder(roomJid: String, messageIds: String) -> RequestBuilder<ChatMessageEntityListing> {        
        var path = "/api/v2/chats/rooms/{roomJid}/messages/{messageIds}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let messageIdsPreEscape = "\(messageIds)"
        let messageIdsPostEscape = messageIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageIds}", with: messageIdsPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatMessageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get a room's message history
     
     - parameter roomJid: (path) roomJid 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsRoomMessages(roomJid: String, limit: String? = nil, before: String? = nil, after: String? = nil, completion: @escaping ((_ data: ChatMessageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsRoomMessagesWithRequestBuilder(roomJid: roomJid, limit: limit, before: before, after: after)
        requestBuilder.execute { (response: Response<ChatMessageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a room's message history
     - GET /api/v2/chats/rooms/{roomJid}/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  }, {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter roomJid: (path) roomJid 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)

     - returns: RequestBuilder<ChatMessageEntityListing> 
     */
    open class func getChatsRoomMessagesWithRequestBuilder(roomJid: String, limit: String? = nil, before: String? = nil, after: String? = nil) -> RequestBuilder<ChatMessageEntityListing> {        
        var path = "/api/v2/chats/rooms/{roomJid}/messages"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit, 
            "before": before, 
            "after": after
        ])

        let requestBuilder: RequestBuilder<ChatMessageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get a room participant
     
     - parameter roomJid: (path) roomJid 
     - parameter participantJid: (path) participantJid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsRoomParticipant(roomJid: String, participantJid: String, completion: @escaping ((_ data: RoomParticipant?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsRoomParticipantWithRequestBuilder(roomJid: roomJid, participantJid: participantJid)
        requestBuilder.execute { (response: Response<RoomParticipant>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a room participant
     - GET /api/v2/chats/rooms/{roomJid}/participants/{participantJid}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "participantJid" : "participantJid"
}, statusCode=200}]
     
     - parameter roomJid: (path) roomJid 
     - parameter participantJid: (path) participantJid 

     - returns: RequestBuilder<RoomParticipant> 
     */
    open class func getChatsRoomParticipantWithRequestBuilder(roomJid: String, participantJid: String) -> RequestBuilder<RoomParticipant> {        
        var path = "/api/v2/chats/rooms/{roomJid}/participants/{participantJid}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let participantJidPreEscape = "\(participantJid)"
        let participantJidPostEscape = participantJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantJid}", with: participantJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoomParticipant>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Get room participants in a room
     
     - parameter roomJid: (path) roomJid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsRoomParticipants(roomJid: String, completion: @escaping ((_ data: RoomParticipantsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsRoomParticipantsWithRequestBuilder(roomJid: roomJid)
        requestBuilder.execute { (response: Response<RoomParticipantsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get room participants in a room
     - GET /api/v2/chats/rooms/{roomJid}/participants
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "participants" : [ {
    "jid" : "jid",
    "user" : "{}"
  }, {
    "jid" : "jid",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter roomJid: (path) roomJid 

     - returns: RequestBuilder<RoomParticipantsResponse> 
     */
    open class func getChatsRoomParticipantsWithRequestBuilder(roomJid: String) -> RequestBuilder<RoomParticipantsResponse> {        
        var path = "/api/v2/chats/rooms/{roomJid}/participants"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoomParticipantsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Get Chat Settings.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsSettings(completion: @escaping ((_ data: ChatSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<ChatSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Chat Settings.
     - GET /api/v2/chats/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "messageRetentionPeriodDays" : 0
}, statusCode=200}]

     - returns: RequestBuilder<ChatSettings> 
     */
    open class func getChatsSettingsWithRequestBuilder() -> RequestBuilder<ChatSettings> {        
        let path = "/api/v2/chats/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get history by thread
     
     - parameter threadId: (path) threadId 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsThreadMessages(threadId: String, limit: String? = nil, before: String? = nil, after: String? = nil, completion: @escaping ((_ data: ChatMessageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsThreadMessagesWithRequestBuilder(threadId: threadId, limit: limit, before: before, after: after)
        requestBuilder.execute { (response: Response<ChatMessageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get history by thread
     - GET /api/v2/chats/threads/{threadId}/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  }, {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter threadId: (path) threadId 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)

     - returns: RequestBuilder<ChatMessageEntityListing> 
     */
    open class func getChatsThreadMessagesWithRequestBuilder(threadId: String, limit: String? = nil, before: String? = nil, after: String? = nil) -> RequestBuilder<ChatMessageEntityListing> {        
        var path = "/api/v2/chats/threads/{threadId}/messages"
        let threadIdPreEscape = "\(threadId)"
        let threadIdPostEscape = threadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{threadId}", with: threadIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit, 
            "before": before, 
            "after": after
        ])

        let requestBuilder: RequestBuilder<ChatMessageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get messages by id(s) from a 1on1
     
     - parameter userId: (path) userId 
     - parameter messageIds: (path) messageIds, comma separated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsUserMessage(userId: String, messageIds: String, completion: @escaping ((_ data: ChatMessageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsUserMessageWithRequestBuilder(userId: userId, messageIds: messageIds)
        requestBuilder.execute { (response: Response<ChatMessageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get messages by id(s) from a 1on1
     - GET /api/v2/chats/users/{userId}/messages/{messageIds}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  }, {
    "jid" : "jid",
    "edited" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "thread" : "{}",
    "body" : "body",
    "toUser" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "mentions" : {
      "key" : "mentions"
    },
    "attachmentDeleted" : true,
    "fileUri" : "fileUri",
    "parentThread" : "{}",
    "reactions" : [ {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    }, {
      "emoji" : "emoji",
      "users" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ]
    } ],
    "id" : "id",
    "toJid" : "toJid",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter userId: (path) userId 
     - parameter messageIds: (path) messageIds, comma separated 

     - returns: RequestBuilder<ChatMessageEntityListing> 
     */
    open class func getChatsUserMessageWithRequestBuilder(userId: String, messageIds: String) -> RequestBuilder<ChatMessageEntityListing> {        
        var path = "/api/v2/chats/users/{userId}/messages/{messageIds}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let messageIdsPreEscape = "\(messageIds)"
        let messageIdsPostEscape = messageIdsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageIds}", with: messageIdsPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatMessageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Get 1on1 History between a user
     
     - parameter userId: (path) userId 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChatsUserMessages(userId: String, limit: String? = nil, before: String? = nil, after: String? = nil, completion: @escaping ((_ data: ChatMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getChatsUserMessagesWithRequestBuilder(userId: userId, limit: limit, before: before, after: after)
        requestBuilder.execute { (response: Response<ChatMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get 1on1 History between a user
     - GET /api/v2/chats/users/{userId}/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jid" : "jid",
  "edited" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "thread" : "{}",
  "body" : "body",
  "toUser" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "mentions" : {
    "key" : "mentions"
  },
  "attachmentDeleted" : true,
  "fileUri" : "fileUri",
  "parentThread" : "{}",
  "reactions" : [ {
    "emoji" : "emoji",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ]
  }, {
    "emoji" : "emoji",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ]
  } ],
  "id" : "id",
  "toJid" : "toJid",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) userId 
     - parameter limit: (query) The maximum number of messages to retrieve (optional)
     - parameter before: (query) The cutoff date for messages to retrieve (optional)
     - parameter after: (query) The beginning date for messages to retrieve (optional)

     - returns: RequestBuilder<ChatMessageResponse> 
     */
    open class func getChatsUserMessagesWithRequestBuilder(userId: String, limit: String? = nil, before: String? = nil, after: String? = nil) -> RequestBuilder<ChatMessageResponse> {        
        var path = "/api/v2/chats/users/{userId}/messages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit, 
            "before": before, 
            "after": after
        ])

        let requestBuilder: RequestBuilder<ChatMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Set properties for a room
     
     - parameter roomJid: (path) roomJid 
     - parameter body: (body) Room properties 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchChatsRoom(roomJid: String, body: RoomUpdateRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchChatsRoomWithRequestBuilder(roomJid: roomJid, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Set properties for a room
     - PATCH /api/v2/chats/rooms/{roomJid}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomJid 
     - parameter body: (body) Room properties 

     - returns: RequestBuilder<Void> 
     */
    open class func patchChatsRoomWithRequestBuilder(roomJid: String, body: RoomUpdateRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Edit a message in a room
     
     - parameter roomJid: (path) roomId 
     - parameter messageId: (path) messageId 
     - parameter body: (body) messageBody 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchChatsRoomMessage(roomJid: String, messageId: String, body: SendMessageBody, completion: @escaping ((_ data: ChatSendMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchChatsRoomMessageWithRequestBuilder(roomJid: roomJid, messageId: messageId, body: body)
        requestBuilder.execute { (response: Response<ChatSendMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Edit a message in a room
     - PATCH /api/v2/chats/rooms/{roomJid}/messages/{messageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "id"
}, statusCode=200}]
     
     - parameter roomJid: (path) roomId 
     - parameter messageId: (path) messageId 
     - parameter body: (body) messageBody 

     - returns: RequestBuilder<ChatSendMessageResponse> 
     */
    open class func patchChatsRoomMessageWithRequestBuilder(roomJid: String, messageId: String, body: SendMessageBody) -> RequestBuilder<ChatSendMessageResponse> {        
        var path = "/api/v2/chats/rooms/{roomJid}/messages/{messageId}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSendMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Patch Chat Settings.
     
     - parameter body: (body) Chat 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchChatsSettings(body: ChatSettings, completion: @escaping ((_ data: ChatSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchChatsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ChatSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch Chat Settings.
     - PATCH /api/v2/chats/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "messageRetentionPeriodDays" : 0
}, statusCode=200}]
     
     - parameter body: (body) Chat 

     - returns: RequestBuilder<ChatSettings> 
     */
    open class func patchChatsSettingsWithRequestBuilder(body: ChatSettings) -> RequestBuilder<ChatSettings> {        
        let path = "/api/v2/chats/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    
    
    /**
     Edit a message to a user
     
     - parameter userId: (path) userId 
     - parameter messageId: (path) messageId 
     - parameter body: (body) message body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchChatsUserMessage(userId: String, messageId: String, body: SendMessageBody, completion: @escaping ((_ data: ChatSendMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchChatsUserMessageWithRequestBuilder(userId: userId, messageId: messageId, body: body)
        requestBuilder.execute { (response: Response<ChatSendMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Edit a message to a user
     - PATCH /api/v2/chats/users/{userId}/messages/{messageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "id"
}, statusCode=200}]
     
     - parameter userId: (path) userId 
     - parameter messageId: (path) messageId 
     - parameter body: (body) message body 

     - returns: RequestBuilder<ChatSendMessageResponse> 
     */
    open class func patchChatsUserMessageWithRequestBuilder(userId: String, messageId: String, body: SendMessageBody) -> RequestBuilder<ChatSendMessageResponse> {        
        var path = "/api/v2/chats/users/{userId}/messages/{messageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSendMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Send a message to a room
     
     - parameter roomJid: (path) roomId 
     - parameter body: (body) messageBody 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChatsRoomMessages(roomJid: String, body: SendMessageBody, completion: @escaping ((_ data: ChatSendMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postChatsRoomMessagesWithRequestBuilder(roomJid: roomJid, body: body)
        requestBuilder.execute { (response: Response<ChatSendMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a message to a room
     - POST /api/v2/chats/rooms/{roomJid}/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "id"
}, statusCode=200}]
     
     - parameter roomJid: (path) roomId 
     - parameter body: (body) messageBody 

     - returns: RequestBuilder<ChatSendMessageResponse> 
     */
    open class func postChatsRoomMessagesWithRequestBuilder(roomJid: String, body: SendMessageBody) -> RequestBuilder<ChatSendMessageResponse> {        
        var path = "/api/v2/chats/rooms/{roomJid}/messages"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSendMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Join a room
     
     - parameter roomJid: (path) roomJid 
     - parameter userId: (path) userId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChatsRoomParticipant(roomJid: String, userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postChatsRoomParticipantWithRequestBuilder(roomJid: roomJid, userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Join a room
     - POST /api/v2/chats/rooms/{roomJid}/participants/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomJid 
     - parameter userId: (path) userId 

     - returns: RequestBuilder<Void> 
     */
    open class func postChatsRoomParticipantWithRequestBuilder(roomJid: String, userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}/participants/{userId}"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Add pinned messages for a room, up to a maximum of 5 pinned messages
     
     - parameter roomJid: (path) roomJid 
     - parameter body: (body) Pinned Message Ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChatsRoomPinnedmessages(roomJid: String, body: PinnedMessageRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postChatsRoomPinnedmessagesWithRequestBuilder(roomJid: roomJid, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Add pinned messages for a room, up to a maximum of 5 pinned messages
     - POST /api/v2/chats/rooms/{roomJid}/pinnedmessages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter roomJid: (path) roomJid 
     - parameter body: (body) Pinned Message Ids 

     - returns: RequestBuilder<Void> 
     */
    open class func postChatsRoomPinnedmessagesWithRequestBuilder(roomJid: String, body: PinnedMessageRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/rooms/{roomJid}/pinnedmessages"
        let roomJidPreEscape = "\(roomJid)"
        let roomJidPostEscape = roomJidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roomJid}", with: roomJidPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Create an adhoc room
     
     - parameter body: (body) Room properties 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChatsRooms(body: CreateRoomRequest, completion: @escaping ((_ data: CreateRoomResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postChatsRoomsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateRoomResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an adhoc room
     - POST /api/v2/chats/rooms
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jid" : "jid"
}, statusCode=200}]
     
     - parameter body: (body) Room properties 

     - returns: RequestBuilder<CreateRoomResponse> 
     */
    open class func postChatsRoomsWithRequestBuilder(body: CreateRoomRequest) -> RequestBuilder<CreateRoomResponse> {        
        let path = "/api/v2/chats/rooms"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateRoomResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Send a message to a user
     
     - parameter userId: (path) userId 
     - parameter body: (body) message body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postChatsUserMessages(userId: String, body: SendMessageBody, completion: @escaping ((_ data: ChatSendMessageResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postChatsUserMessagesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<ChatSendMessageResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a message to a user
     - POST /api/v2/chats/users/{userId}/messages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "id" : "id"
}, statusCode=200}]
     
     - parameter userId: (path) userId 
     - parameter body: (body) message body 

     - returns: RequestBuilder<ChatSendMessageResponse> 
     */
    open class func postChatsUserMessagesWithRequestBuilder(userId: String, body: SendMessageBody) -> RequestBuilder<ChatSendMessageResponse> {        
        var path = "/api/v2/chats/users/{userId}/messages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSendMessageResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update reactions to a message
     
     - parameter messageId: (path) messageId 
     - parameter body: (body) reactionUpdate 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putChatsMessageReactions(messageId: String, body: ChatReactionUpdate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putChatsMessageReactionsWithRequestBuilder(messageId: messageId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update reactions to a message
     - PUT /api/v2/chats/messages/{messageId}/reactions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter messageId: (path) messageId 
     - parameter body: (body) reactionUpdate 

     - returns: RequestBuilder<Void> 
     */
    open class func putChatsMessageReactionsWithRequestBuilder(messageId: String, body: ChatReactionUpdate) -> RequestBuilder<Void> {        
        var path = "/api/v2/chats/messages/{messageId}/reactions"
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

    
    
    /**
     Update Chat Settings.
     
     - parameter body: (body) Chat 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putChatsSettings(body: ChatSettings, completion: @escaping ((_ data: ChatSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putChatsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ChatSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update Chat Settings.
     - PUT /api/v2/chats/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "messageRetentionPeriodDays" : 0
}, statusCode=200}]
     
     - parameter body: (body) Chat 

     - returns: RequestBuilder<ChatSettings> 
     */
    open class func putChatsSettingsWithRequestBuilder(body: ChatSettings) -> RequestBuilder<ChatSettings> {        
        let path = "/api/v2/chats/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ChatSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
