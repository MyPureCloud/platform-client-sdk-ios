//
// DataPrivacyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DataPrivacyAPI {
    
    
    /**
     Delete a masking rule.
     
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDataprivacyMaskingrule(ruleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteDataprivacyMaskingruleWithRequestBuilder(ruleId: ruleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a masking rule.
     - DELETE /api/v2/dataprivacy/maskingrules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDataprivacyMaskingruleWithRequestBuilder(ruleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/dataprivacy/maskingrules/{ruleId}"
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    /**
     Fetch details about a masking rule.
     
     - parameter ruleId: (path) ruleId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataprivacyMaskingrule(ruleId: String, completion: @escaping ((_ data: MaskingRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getDataprivacyMaskingruleWithRequestBuilder(ruleId: ruleId)
        requestBuilder.execute { (response: Response<MaskingRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch details about a masking rule.
     - GET /api/v2/dataprivacy/maskingrules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substituteCharacter" : "substituteCharacter",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "definition" : "definition",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "Custom",
  "integrations" : [ "integrations", "integrations" ],
  "enabled" : true
}, statusCode=200}]
     
     - parameter ruleId: (path) ruleId 

     - returns: RequestBuilder<MaskingRule> 
     */
    open class func getDataprivacyMaskingruleWithRequestBuilder(ruleId: String) -> RequestBuilder<MaskingRule> {        
        var path = "/api/v2/dataprivacy/maskingrules/{ruleId}"
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaskingRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    /**
     Retrieve the list of masking rules.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataprivacyMaskingrules(completion: @escaping ((_ data: MaskingRuleListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getDataprivacyMaskingrulesWithRequestBuilder()
        requestBuilder.execute { (response: Response<MaskingRuleListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve the list of masking rules.
     - GET /api/v2/dataprivacy/maskingrules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "substituteCharacter" : "substituteCharacter",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "definition" : "definition",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "type" : "Custom",
    "integrations" : [ "integrations", "integrations" ],
    "enabled" : true
  }, {
    "substituteCharacter" : "substituteCharacter",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "definition" : "definition",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "type" : "Custom",
    "integrations" : [ "integrations", "integrations" ],
    "enabled" : true
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<MaskingRuleListing> 
     */
    open class func getDataprivacyMaskingrulesWithRequestBuilder() -> RequestBuilder<MaskingRuleListing> {        
        let path = "/api/v2/dataprivacy/maskingrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaskingRuleListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update information about a masking rule.
     
     - parameter ruleId: (path) ruleId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchDataprivacyMaskingrule(ruleId: String, body: MaskingRule? = nil, completion: @escaping ((_ data: MaskingRule?,_ error: Error?) -> Void)) {
        let requestBuilder = patchDataprivacyMaskingruleWithRequestBuilder(ruleId: ruleId, body: body)
        requestBuilder.execute { (response: Response<MaskingRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update information about a masking rule.
     - PATCH /api/v2/dataprivacy/maskingrules/{ruleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substituteCharacter" : "substituteCharacter",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "definition" : "definition",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "Custom",
  "integrations" : [ "integrations", "integrations" ],
  "enabled" : true
}, statusCode=200}]
     
     - parameter ruleId: (path) ruleId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<MaskingRule> 
     */
    open class func patchDataprivacyMaskingruleWithRequestBuilder(ruleId: String, body: MaskingRule? = nil) -> RequestBuilder<MaskingRule> {        
        var path = "/api/v2/dataprivacy/maskingrules/{ruleId}"
        let ruleIdPreEscape = "\(ruleId)"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaskingRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Create a new masking rule resource.
     
     - parameter body: (body) Details for creating masking rule resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDataprivacyMaskingrules(body: MaskingRule, completion: @escaping ((_ data: MaskingRule?,_ error: Error?) -> Void)) {
        let requestBuilder = postDataprivacyMaskingrulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<MaskingRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new masking rule resource.
     - POST /api/v2/dataprivacy/maskingrules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substituteCharacter" : "substituteCharacter",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "definition" : "definition",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "type" : "Custom",
  "integrations" : [ "integrations", "integrations" ],
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Details for creating masking rule resource 

     - returns: RequestBuilder<MaskingRule> 
     */
    open class func postDataprivacyMaskingrulesWithRequestBuilder(body: MaskingRule) -> RequestBuilder<MaskingRule> {        
        let path = "/api/v2/dataprivacy/maskingrules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaskingRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

    
    
    /**
     Validate masking before creating.
     
     - parameter body: (body) Text to be masked 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDataprivacyMaskingrulesValidate(body: MaskingRuleValidateRequest, completion: @escaping ((_ data: MaskingRuleValidateResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDataprivacyMaskingrulesValidateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<MaskingRuleValidateResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Validate masking before creating.
     - POST /api/v2/dataprivacy/maskingrules/validate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "valid" : true,
  "validationMessage" : "validationMessage",
  "maskedText" : "maskedText"
}, statusCode=200}]
     
     - parameter body: (body) Text to be masked 

     - returns: RequestBuilder<MaskingRuleValidateResponse> 
     */
    open class func postDataprivacyMaskingrulesValidateWithRequestBuilder(body: MaskingRuleValidateRequest) -> RequestBuilder<MaskingRuleValidateResponse> {        
        let path = "/api/v2/dataprivacy/maskingrules/validate"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaskingRuleValidateResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

}
