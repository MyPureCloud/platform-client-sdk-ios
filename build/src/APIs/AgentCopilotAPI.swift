//
// AgentCopilotAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AgentCopilotAPI {
    
    
    /**
     Get copilot configuration of an assistant.
     
     - parameter assistantId: (path) Assistant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAssistantCopilot(assistantId: String, completion: @escaping ((_ data: Copilot?,_ error: Error?) -> Void)) {
        let requestBuilder = getAssistantCopilotWithRequestBuilder(assistantId: assistantId)
        requestBuilder.execute { (response: Response<Copilot>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get copilot configuration of an assistant.
     - GET /api/v2/assistants/{assistantId}/copilot
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "summaryGenerationConfig" : "{}",
  "defaultLanguage" : "defaultLanguage",
  "selfUri" : "https://openapi-generator.tech",
  "nluEngineType" : "NluV3",
  "answerGenerationConfig" : "{}",
  "liveOnQueue" : true,
  "nluConfig" : "{}",
  "enabled" : true,
  "wrapupCodePredictionConfig" : "{}",
  "ruleEngineConfig" : "{}",
  "knowledgeAnswerConfig" : "{}"
}, statusCode=200}]
     
     - parameter assistantId: (path) Assistant ID 

     - returns: RequestBuilder<Copilot> 
     */
    open class func getAssistantCopilotWithRequestBuilder(assistantId: String) -> RequestBuilder<Copilot> {        
        var path = "/api/v2/assistants/{assistantId}/copilot"
        let assistantIdPreEscape = "\(assistantId)"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assistantId}", with: assistantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Copilot>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Update agent copilot configuration
     
     - parameter assistantId: (path) Assistant ID 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAssistantCopilot(assistantId: String, body: Copilot, completion: @escaping ((_ data: Copilot?,_ error: Error?) -> Void)) {
        let requestBuilder = putAssistantCopilotWithRequestBuilder(assistantId: assistantId, body: body)
        requestBuilder.execute { (response: Response<Copilot>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update agent copilot configuration
     - PUT /api/v2/assistants/{assistantId}/copilot
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "summaryGenerationConfig" : "{}",
  "defaultLanguage" : "defaultLanguage",
  "selfUri" : "https://openapi-generator.tech",
  "nluEngineType" : "NluV3",
  "answerGenerationConfig" : "{}",
  "liveOnQueue" : true,
  "nluConfig" : "{}",
  "enabled" : true,
  "wrapupCodePredictionConfig" : "{}",
  "ruleEngineConfig" : "{}",
  "knowledgeAnswerConfig" : "{}"
}, statusCode=200}]
     
     - parameter assistantId: (path) Assistant ID 
     - parameter body: (body)  

     - returns: RequestBuilder<Copilot> 
     */
    open class func putAssistantCopilotWithRequestBuilder(assistantId: String, body: Copilot) -> RequestBuilder<Copilot> {        
        var path = "/api/v2/assistants/{assistantId}/copilot"
        let assistantIdPreEscape = "\(assistantId)"
        let assistantIdPostEscape = assistantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assistantId}", with: assistantIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Copilot>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: requestUrl!, body: body)
    }

}
