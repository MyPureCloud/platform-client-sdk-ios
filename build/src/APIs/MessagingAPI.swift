//
// MessagingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MessagingAPI {
    
    
    
    /**
     
     Delete a Facebook messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMessagingIntegrationsFacebookIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Facebook messaging integration
     
     - DELETE /api/v2/messaging/integrations/facebook/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/messaging/integrations/facebook/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMessagingIntegrationsLineIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a LINE messenger integration
     
     - DELETE /api/v2/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a Twitter messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMessagingIntegrationsTwitterIntegrationId(integrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Twitter messaging integration
     
     - DELETE /api/v2/messaging/integrations/twitter/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/messaging/integrations/twitter/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrations(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: MessagingIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<MessagingIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Integrations
     
     - GET /api/v2/messaging/integrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "messengerType" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123,
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<MessagingIntegrationEntityListing> 
     */
    open class func getMessagingIntegrationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<MessagingIntegrationEntityListing> {
        let path = "/api/v2/messaging/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<MessagingIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Facebook Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsFacebook(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: FacebookIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsFacebookWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<FacebookIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Facebook Integrations
     
     - GET /api/v2/messaging/integrations/facebook
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "appId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "pageId" : "aeiou",
    "version" : 123,
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<FacebookIntegrationEntityListing> 
     */
    open class func getMessagingIntegrationsFacebookWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<FacebookIntegrationEntityListing> {
        let path = "/api/v2/messaging/integrations/facebook"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<FacebookIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Facebook messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsFacebookIntegrationId(integrationId: String, completion: @escaping ((_ data: FacebookIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<FacebookIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Facebook messaging integration
     
     - GET /api/v2/messaging/integrations/facebook/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "appId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "pageId" : "aeiou",
  "version" : 123,
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<FacebookIntegration> 
     */
    open class func getMessagingIntegrationsFacebookIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<FacebookIntegration> {
        var path = "/api/v2/messaging/integrations/facebook/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of LINE messenger Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsLine(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: LineIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsLineWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<LineIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of LINE messenger Integrations
     
     - GET /api/v2/messaging/integrations/line
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "webhookUri" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "version" : 123,
    "channelId" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<LineIntegrationEntityListing> 
     */
    open class func getMessagingIntegrationsLineWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<LineIntegrationEntityListing> {
        let path = "/api/v2/messaging/integrations/line"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<LineIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsLineIntegrationId(integrationId: String, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a LINE messenger integration
     
     - GET /api/v2/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123,
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func getMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<LineIntegration> {
        var path = "/api/v2/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Twitter Integrations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsTwitter(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TwitterIntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsTwitterWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TwitterIntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Twitter Integrations
     
     - GET /api/v2/messaging/integrations/twitter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "accessTokenKey" : "aeiou",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "version" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "tier" : "aeiou",
    "createdBy" : "",
    "envName" : "aeiou",
    "name" : "aeiou",
    "recipient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "modifiedBy" : "",
    "id" : "aeiou",
    "consumerKey" : "aeiou",
    "username" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<TwitterIntegrationEntityListing> 
     */
    open class func getMessagingIntegrationsTwitterWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TwitterIntegrationEntityListing> {
        let path = "/api/v2/messaging/integrations/twitter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TwitterIntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Twitter messaging integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingIntegrationsTwitterIntegrationId(integrationId: String, completion: @escaping ((_ data: TwitterIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<TwitterIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Twitter messaging integration
     
     - GET /api/v2/messaging/integrations/twitter/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessTokenKey" : "aeiou",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "tier" : "aeiou",
  "createdBy" : "",
  "envName" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "consumerKey" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 

     - returns: RequestBuilder<TwitterIntegration> 
     */
    open class func getMessagingIntegrationsTwitterIntegrationIdWithRequestBuilder(integrationId: String) -> RequestBuilder<TwitterIntegration> {
        var path = "/api/v2/messaging/integrations/twitter/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of Messaging Stickers
     
     - parameter messengerType: (path) Messenger Type 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMessagingSticker(messengerType: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: MessagingStickerEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMessagingStickerWithRequestBuilder(messengerType: messengerType, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<MessagingStickerEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Messaging Stickers
     
     - GET /api/v2/messaging/stickers/{messengerType}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "providerPackageId" : 123,
    "providerVersion" : 123456789,
    "uriLocation" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "providerStickerId" : 123,
    "messengerType" : "aeiou",
    "id" : "aeiou",
    "packageName" : "aeiou",
    "stickerType" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "lastUri" : "aeiou",
  "selfUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter messengerType: (path) Messenger Type 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<MessagingStickerEntityListing> 
     */
    open class func getMessagingStickerWithRequestBuilder(messengerType: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<MessagingStickerEntityListing> {
        var path = "/api/v2/messaging/stickers/{messengerType}"
        let messengerTypePreEscape = "\(messengerType)"
        let messengerTypePostEscape = messengerTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messengerType}", with: messengerTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<MessagingStickerEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a Facebook Integration
     
     - parameter body: (body) FacebookIntegrationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMessagingIntegrationsFacebook(body: FacebookIntegrationRequest, completion: @escaping ((_ data: FacebookIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postMessagingIntegrationsFacebookWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FacebookIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Facebook Integration
     
     - POST /api/v2/messaging/integrations/facebook
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "appId" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "pageId" : "aeiou",
  "version" : 123,
  "status" : "aeiou"
}}]
     
     - parameter body: (body) FacebookIntegrationRequest 

     - returns: RequestBuilder<FacebookIntegration> 
     */
    open class func postMessagingIntegrationsFacebookWithRequestBuilder(body: FacebookIntegrationRequest) -> RequestBuilder<FacebookIntegration> {
        let path = "/api/v2/messaging/integrations/facebook"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FacebookIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a LINE messenger Integration
     
     - parameter body: (body) LineIntegrationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMessagingIntegrationsLine(body: LineIntegrationRequest, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postMessagingIntegrationsLineWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a LINE messenger Integration
     
     - POST /api/v2/messaging/integrations/line
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123,
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) LineIntegrationRequest 

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func postMessagingIntegrationsLineWithRequestBuilder(body: LineIntegrationRequest) -> RequestBuilder<LineIntegration> {
        let path = "/api/v2/messaging/integrations/line"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a Twitter Integration
     
     - parameter body: (body) TwitterIntegrationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMessagingIntegrationsTwitter(body: TwitterIntegrationRequest, completion: @escaping ((_ data: TwitterIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = postMessagingIntegrationsTwitterWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TwitterIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a Twitter Integration
     
     - POST /api/v2/messaging/integrations/twitter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "accessTokenKey" : "aeiou",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "version" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "tier" : "aeiou",
  "createdBy" : "",
  "envName" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "modifiedBy" : "",
  "id" : "aeiou",
  "consumerKey" : "aeiou",
  "username" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) TwitterIntegrationRequest 

     - returns: RequestBuilder<TwitterIntegration> 
     */
    open class func postMessagingIntegrationsTwitterWithRequestBuilder(body: TwitterIntegrationRequest) -> RequestBuilder<TwitterIntegration> {
        let path = "/api/v2/messaging/integrations/twitter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TwitterIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a LINE messenger integration
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) LineIntegrationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMessagingIntegrationsLineIntegrationId(integrationId: String, body: LineIntegrationRequest, completion: @escaping ((_ data: LineIntegration?,_ error: Error?) -> Void)) {
        let requestBuilder = putMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<LineIntegration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a LINE messenger integration
     
     - PUT /api/v2/messaging/integrations/line/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "webhookUri" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "recipient" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "version" : 123,
  "channelId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter integrationId: (path) Integration ID 
     - parameter body: (body) LineIntegrationRequest 

     - returns: RequestBuilder<LineIntegration> 
     */
    open class func putMessagingIntegrationsLineIntegrationIdWithRequestBuilder(integrationId: String, body: LineIntegrationRequest) -> RequestBuilder<LineIntegration> {
        var path = "/api/v2/messaging/integrations/line/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LineIntegration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
