//
// RecordingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class RecordingAPI {
    
    
    
    
    
    
    
    /**
     
     Delete annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteConversationRecordingAnnotation(conversationId: String, recordingId: String, annotationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteConversationRecordingAnnotationWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete annotation
     
     - DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteConversationRecordingAnnotationWithRequestBuilder(conversationId: String, recordingId: String, annotationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Deletes a single orphan recording
     
     - parameter orphanId: (path) Orphan ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrphanrecording(orphanId: String, completion: @escaping ((_ data: OrphanRecording?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteOrphanrecordingWithRequestBuilder(orphanId: orphanId)
        requestBuilder.execute { (response: Response<OrphanRecording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes a single orphan recording
     
     - DELETE /api/v2/orphanrecordings/{orphanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sourceOrphaningId" : "aeiou",
  "orphanStatus" : "aeiou",
  "selfUri" : "aeiou",
  "recording" : {
    "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
    "maxAllowedRestorationsForOrg" : 123,
    "emailTranscript" : [ {
      "cc" : [ "" ],
      "htmlBody" : "aeiou",
      "bcc" : [ "" ],
      "attachments" : [ {
        "contentPath" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "textBody" : "aeiou",
      "from" : "",
      "id" : "aeiou",
      "to" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "time" : "2000-01-23T04:56:07.000+0000"
    } ],
    "messagingTranscript" : [ {
      "messageText" : "aeiou",
      "quickReplies" : [ {
        "payload" : "aeiou",
        "isSelected" : true,
        "action" : "aeiou",
        "text" : "aeiou",
        "url" : "aeiou"
      } ],
      "fromUser" : "",
      "fromExternalContact" : {
        "schema" : "",
        "lastName" : "aeiou",
        "workEmail" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "title" : "aeiou",
        "twitterId" : {
          "profileUrl" : "aeiou",
          "name" : "aeiou",
          "verified" : true,
          "id" : "aeiou",
          "screenName" : "aeiou"
        },
        "personalEmail" : "aeiou",
        "externalSystemUrl" : "aeiou",
        "id" : "aeiou",
        "otherEmail" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000",
        "address" : {
          "address2" : "aeiou",
          "city" : "aeiou",
          "address1" : "aeiou",
          "countryCode" : "aeiou",
          "postalCode" : "aeiou",
          "state" : "aeiou"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "homePhone" : "",
        "facebookId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "scopedId" : "aeiou"
          } ]
        },
        "selfUri" : "aeiou",
        "lineId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "userId" : "aeiou"
          } ]
        },
        "externalOrganization" : {
          "schema" : {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "jsonSchema" : {
              "$schema" : "aeiou",
              "description" : "aeiou",
              "id" : "aeiou",
              "additionalProperties" : "{}",
              "title" : "aeiou",
              "type" : "aeiou",
              "required" : [ "aeiou" ],
              "properties" : {
                "key" : "{}"
              }
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "appliesTo" : [ "aeiou" ],
            "id" : "aeiou",
            "version" : 123,
            "enabled" : true
          },
          "address" : "",
          "modifyDate" : "2000-01-23T04:56:07.000+0000",
          "companyType" : "aeiou",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "aeiou",
          "industry" : "aeiou",
          "employeeCount" : 123456789,
          "tickers" : [ {
            "symbol" : "aeiou",
            "exchange" : "aeiou"
          } ],
          "twitterId" : "",
          "primaryContactId" : "aeiou",
          "tags" : [ "aeiou" ],
          "revenue" : 123456789,
          "phoneNumber" : "",
          "externalSystemUrl" : "aeiou",
          "externalDataSources" : [ {
            "platform" : "aeiou",
            "url" : "aeiou"
          } ],
          "name" : "aeiou",
          "faxNumber" : "",
          "trustor" : {
            "authorization" : {
              "permissions" : [ "aeiou" ]
            },
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : {
              "addresses" : [ "" ],
              "acdAutoAnswer" : true,
              "routingStatus" : "",
              "title" : "aeiou",
              "division" : "",
              "authorization" : "",
              "skills" : [ "" ],
              "station" : "",
              "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : "",
              "lastTokenIssued" : "",
              "email" : "aeiou",
              "images" : [ "" ],
              "manager" : "",
              "employerInfo" : "",
              "languages" : [ "" ],
              "conversationSummary" : "",
              "groups" : [ "" ],
              "primaryContactInfo" : [ "" ],
              "biography" : "",
              "team" : "",
              "certifications" : [ "aeiou" ],
              "version" : 123,
              "outOfOffice" : "",
              "languagePreference" : "aeiou",
              "profileSkills" : [ "aeiou" ],
              "chat" : "",
              "organization" : {
                "defaultCountryCode" : "aeiou",
                "selfUri" : "aeiou",
                "thirdPartyURI" : "aeiou",
                "version" : 123,
                "thirdPartyOrgName" : "aeiou",
                "features" : {
                  "key" : true
                },
                "defaultLanguage" : "aeiou",
                "defaultSiteId" : "aeiou",
                "supportURI" : "aeiou",
                "domain" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "voicemailEnabled" : true,
                "productPlatform" : "aeiou"
              },
              "name" : "aeiou",
              "integrationPresence" : "",
              "locations" : [ "" ],
              "username" : "aeiou",
              "geolocation" : ""
            },
            "organization" : "",
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "enabled" : true
          },
          "websites" : [ "aeiou" ],
          "id" : "aeiou",
          "createDate" : "2000-01-23T04:56:07.000+0000"
        },
        "firstName" : "aeiou",
        "otherPhone" : "",
        "whatsAppId" : {
          "phoneNumber" : "",
          "displayName" : "aeiou"
        },
        "externalDataSources" : [ "" ],
        "middleName" : "aeiou",
        "workPhone" : {
          "extension" : 123456789,
          "e164" : "aeiou",
          "acceptsSMS" : true,
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "userInput" : "aeiou"
        },
        "salutation" : "aeiou",
        "cellPhone" : "",
        "surveyOptOut" : true
      },
      "buttonResponse" : {
        "messageType" : "aeiou",
        "payload" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou"
      },
      "from" : "aeiou",
      "to" : "aeiou",
      "id" : "aeiou",
      "messageMediaAttachments" : [ {
        "name" : "aeiou",
        "mediaType" : "aeiou",
        "contentLength" : 123456789,
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "messageStickerAttachments" : [ {
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "timestamp" : "2000-01-23T04:56:07.000+0000",
      "story" : {
        "replyToId" : "aeiou",
        "type" : "aeiou",
        "url" : "aeiou"
      }
    } ],
    "annotations" : [ {
      "absoluteLocation" : 123456789,
      "recordingLocation" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "location" : 123456789,
      "id" : "aeiou",
      "type" : "aeiou",
      "absoluteDurationMs" : 123456789,
      "durationMs" : 123456789,
      "user" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "webRtcCallAppearances" : 123,
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "integration" : "microsoftteams",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "integrationPresence" : "",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "recordingDurationMs" : 123456789
    } ],
    "archiveMedium" : "aeiou",
    "exportedDate" : "2000-01-23T04:56:07.000+0000",
    "media" : "aeiou",
    "path" : "aeiou",
    "outputSizeInBytes" : 123,
    "transcript" : [ {
      "bodyType" : "aeiou",
      "utc" : "aeiou",
      "chat" : "aeiou",
      "senderCommunicationId" : "aeiou",
      "from" : "aeiou",
      "id" : "aeiou",
      "to" : "aeiou",
      "body" : "aeiou",
      "message" : "aeiou",
      "type" : "aeiou",
      "participantPurpose" : "aeiou",
      "user" : {
        "images" : [ "" ],
        "displayName" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "username" : "aeiou"
      }
    } ],
    "fileState" : "aeiou",
    "archiveDate" : "2000-01-23T04:56:07.000+0000",
    "estimatedTranscodeTimeMs" : 123456789,
    "outputDurationMs" : 123,
    "recordingErrorStatus" : "aeiou",
    "startTime" : "aeiou",
    "id" : "aeiou",
    "remainingRestorationsAllowedForOrg" : 123,
    "mediaUris" : {
      "key" : {
        "mediaUri" : "aeiou",
        "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
      }
    },
    "deleteDate" : "2000-01-23T04:56:07.000+0000",
    "actualTranscodeTimeMs" : 123456789,
    "conversationId" : "aeiou",
    "selfUri" : "aeiou",
    "sessionId" : "aeiou",
    "users" : [ "" ],
    "exportDate" : "2000-01-23T04:56:07.000+0000",
    "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "recordingFileRole" : "aeiou",
    "endTime" : "aeiou"
  },
  "mediaType" : "aeiou",
  "providerType" : "aeiou",
  "recoveredTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "name" : "aeiou",
  "mediaSizeBytes" : 123456789,
  "createdTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "providerEndpoint" : {
    "schema" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "count" : 123,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "enabled" : true,
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "site" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "dids" : [ "aeiou" ],
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter orphanId: (path) Orphan ID 

     - returns: RequestBuilder<OrphanRecording> 
     */
    open class func deleteOrphanrecordingWithRequestBuilder(orphanId: String) -> RequestBuilder<OrphanRecording> {
        var path = "/api/v2/orphanrecordings/{orphanId}"
        let orphanIdPreEscape = "\(orphanId)"
        let orphanIdPostEscape = orphanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orphanId}", with: orphanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrphanRecording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete media retention policies
     
     - parameter ids: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingCrossplatformMediaretentionpolicies(ids: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(ids: ids)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete media retention policies
     
     - DELETE /api/v2/recording/crossplatform/mediaretentionpolicies
     - Bulk delete of media retention policies, this will only delete the polices that match the ids specified in the query param.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter ids: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(ids: String) -> RequestBuilder<Void> {
        let path = "/api/v2/recording/crossplatform/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "ids": ids
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingCrossplatformMediaretentionpolicy(policyId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: policyId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a media retention policy
     
     - DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete the recording bulk job
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRecordingJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the recording bulk job
     
     - DELETE /api/v2/recording/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/recording/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete media retention policies
     
     - parameter ids: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingMediaretentionpolicies(ids: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRecordingMediaretentionpoliciesWithRequestBuilder(ids: ids)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete media retention policies
     
     - DELETE /api/v2/recording/mediaretentionpolicies
     - Bulk delete of media retention policies, this will only delete the polices that match the ids specified in the query param.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter ids: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingMediaretentionpoliciesWithRequestBuilder(ids: String) -> RequestBuilder<Void> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "ids": ids
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingMediaretentionpolicy(policyId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRecordingMediaretentionpolicyWithRequestBuilder(policyId: policyId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a media retention policy
     
     - DELETE /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRecordingMediaretentionpolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FormatId_getConversationRecording: String { 
        case wav = "WAV"
        case webm = "WEBM"
        case wavUlaw = "WAV_ULAW"
        case oggVorbis = "OGG_VORBIS"
        case oggOpus = "OGG_OPUS"
        case mp3 = "MP3"
        case _none = "NONE"
    }

    
    
    
    public enum EmailFormatId_getConversationRecording: String { 
        case eml = "EML"
        case _none = "NONE"
    }

    
    
    
    public enum ChatFormatId_getConversationRecording: String { 
        case zip = "ZIP"
        case _none = "NONE"
    }

    
    
    
    public enum MessageFormatId_getConversationRecording: String { 
        case zip = "ZIP"
        case _none = "NONE"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Gets a specific recording.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter formatId: (query) The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE (optional, default to WEBM)
     - parameter emailFormatId: (query) The desired media format when downloading an email recording. Valid values:EML,NONE (optional, default to EML)
     - parameter chatFormatId: (query) The desired media format when downloading a chat recording. Valid values:ZIP,NONE  (optional, default to ZIP)
     - parameter messageFormatId: (query) The desired media format when downloading a message recording. Valid values:ZIP,NONE (optional, default to ZIP)
     - parameter download: (query) requesting a download format of the recording. Valid values:true,false (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)
     - parameter locale: (query) The locale for the requested file when downloading, as an ISO 639-1 code (optional)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecording(conversationId: String, recordingId: String, formatId: FormatId_getConversationRecording? = nil, emailFormatId: EmailFormatId_getConversationRecording? = nil, chatFormatId: ChatFormatId_getConversationRecording? = nil, messageFormatId: MessageFormatId_getConversationRecording? = nil, download: Bool? = nil, fileName: String? = nil, locale: String? = nil, mediaFormats: [String]? = nil, completion: @escaping ((_ data: Recording?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, formatId: formatId, emailFormatId: emailFormatId, chatFormatId: chatFormatId, messageFormatId: messageFormatId, download: download, fileName: fileName, locale: locale, mediaFormats: mediaFormats)
        requestBuilder.execute { (response: Response<Recording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a specific recording.
     
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
  "maxAllowedRestorationsForOrg" : 123,
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "messagingTranscript" : [ {
    "messageText" : "aeiou",
    "quickReplies" : [ {
      "payload" : "aeiou",
      "isSelected" : true,
      "action" : "aeiou",
      "text" : "aeiou",
      "url" : "aeiou"
    } ],
    "fromUser" : "",
    "fromExternalContact" : {
      "schema" : "",
      "lastName" : "aeiou",
      "workEmail" : "aeiou",
      "customFields" : {
        "key" : "{}"
      },
      "title" : "aeiou",
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "personalEmail" : "aeiou",
      "externalSystemUrl" : "aeiou",
      "id" : "aeiou",
      "otherEmail" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000",
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "homePhone" : "",
      "facebookId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "scopedId" : "aeiou"
        } ]
      },
      "selfUri" : "aeiou",
      "lineId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "userId" : "aeiou"
        } ]
      },
      "externalOrganization" : {
        "schema" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "jsonSchema" : {
            "$schema" : "aeiou",
            "description" : "aeiou",
            "id" : "aeiou",
            "additionalProperties" : "{}",
            "title" : "aeiou",
            "type" : "aeiou",
            "required" : [ "aeiou" ],
            "properties" : {
              "key" : "{}"
            }
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "appliesTo" : [ "aeiou" ],
          "id" : "aeiou",
          "version" : 123,
          "enabled" : true
        },
        "address" : "",
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "companyType" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "aeiou",
        "industry" : "aeiou",
        "employeeCount" : 123456789,
        "tickers" : [ {
          "symbol" : "aeiou",
          "exchange" : "aeiou"
        } ],
        "twitterId" : "",
        "primaryContactId" : "aeiou",
        "tags" : [ "aeiou" ],
        "revenue" : 123456789,
        "phoneNumber" : "",
        "externalSystemUrl" : "aeiou",
        "externalDataSources" : [ {
          "platform" : "aeiou",
          "url" : "aeiou"
        } ],
        "name" : "aeiou",
        "faxNumber" : "",
        "trustor" : {
          "authorization" : {
            "permissions" : [ "aeiou" ]
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : "",
            "title" : "aeiou",
            "division" : "",
            "authorization" : "",
            "skills" : [ "" ],
            "station" : "",
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : "",
            "lastTokenIssued" : "",
            "email" : "aeiou",
            "images" : [ "" ],
            "manager" : "",
            "employerInfo" : "",
            "languages" : [ "" ],
            "conversationSummary" : "",
            "groups" : [ "" ],
            "primaryContactInfo" : [ "" ],
            "biography" : "",
            "team" : "",
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : "",
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "organization" : {
              "defaultCountryCode" : "aeiou",
              "selfUri" : "aeiou",
              "thirdPartyURI" : "aeiou",
              "version" : 123,
              "thirdPartyOrgName" : "aeiou",
              "features" : {
                "key" : true
              },
              "defaultLanguage" : "aeiou",
              "defaultSiteId" : "aeiou",
              "supportURI" : "aeiou",
              "domain" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "voicemailEnabled" : true,
              "productPlatform" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ "" ],
            "username" : "aeiou",
            "geolocation" : ""
          },
          "organization" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "enabled" : true
        },
        "websites" : [ "aeiou" ],
        "id" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000"
      },
      "firstName" : "aeiou",
      "otherPhone" : "",
      "whatsAppId" : {
        "phoneNumber" : "",
        "displayName" : "aeiou"
      },
      "externalDataSources" : [ "" ],
      "middleName" : "aeiou",
      "workPhone" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "salutation" : "aeiou",
      "cellPhone" : "",
      "surveyOptOut" : true
    },
    "buttonResponse" : {
      "messageType" : "aeiou",
      "payload" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou"
    },
    "from" : "aeiou",
    "to" : "aeiou",
    "id" : "aeiou",
    "messageMediaAttachments" : [ {
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "contentLength" : 123456789,
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "messageStickerAttachments" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "story" : {
      "replyToId" : "aeiou",
      "type" : "aeiou",
      "url" : "aeiou"
    }
  } ],
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "path" : "aeiou",
  "outputSizeInBytes" : 123,
  "transcript" : [ {
    "bodyType" : "aeiou",
    "utc" : "aeiou",
    "chat" : "aeiou",
    "senderCommunicationId" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "participantPurpose" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "estimatedTranscodeTimeMs" : 123456789,
  "outputDurationMs" : 123,
  "recordingErrorStatus" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000",
  "actualTranscodeTimeMs" : 123456789,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "sessionId" : "aeiou",
  "users" : [ "" ],
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "recordingFileRole" : "aeiou",
  "endTime" : "aeiou"
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter formatId: (query) The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE (optional, default to WEBM)
     - parameter emailFormatId: (query) The desired media format when downloading an email recording. Valid values:EML,NONE (optional, default to EML)
     - parameter chatFormatId: (query) The desired media format when downloading a chat recording. Valid values:ZIP,NONE  (optional, default to ZIP)
     - parameter messageFormatId: (query) The desired media format when downloading a message recording. Valid values:ZIP,NONE (optional, default to ZIP)
     - parameter download: (query) requesting a download format of the recording. Valid values:true,false (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)
     - parameter locale: (query) The locale for the requested file when downloading, as an ISO 639-1 code (optional)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3 (optional)

     - returns: RequestBuilder<Recording> 
     */
    open class func getConversationRecordingWithRequestBuilder(conversationId: String, recordingId: String, formatId: FormatId_getConversationRecording? = nil, emailFormatId: EmailFormatId_getConversationRecording? = nil, chatFormatId: ChatFormatId_getConversationRecording? = nil, messageFormatId: MessageFormatId_getConversationRecording? = nil, download: Bool? = nil, fileName: String? = nil, locale: String? = nil, mediaFormats: [String]? = nil) -> RequestBuilder<Recording> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "formatId": formatId?.rawValue, 
            
            "emailFormatId": emailFormatId?.rawValue, 
            
            "chatFormatId": chatFormatId?.rawValue, 
            
            "messageFormatId": messageFormatId?.rawValue, 
            
            "download": download, 
            
            "fileName": fileName, 
            
            "locale": locale, 
            
            "mediaFormats": mediaFormats
            
        ])

        let requestBuilder: RequestBuilder<Recording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecordingAnnotation(conversationId: String, recordingId: String, annotationId: String, completion: @escaping ((_ data: Annotation?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingAnnotationWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId)
        requestBuilder.execute { (response: Response<Annotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get annotation
     
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "absoluteLocation" : 123456789,
  "recordingLocation" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "absoluteDurationMs" : 123456789,
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "recordingDurationMs" : 123456789
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 

     - returns: RequestBuilder<Annotation> 
     */
    open class func getConversationRecordingAnnotationWithRequestBuilder(conversationId: String, recordingId: String, annotationId: String) -> RequestBuilder<Annotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Annotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get annotations for recording
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecordingAnnotations(conversationId: String, recordingId: String, completion: @escaping ((_ data: [Annotation]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingAnnotationsWithRequestBuilder(conversationId: conversationId, recordingId: recordingId)
        requestBuilder.execute { (response: Response<[Annotation]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get annotations for recording
     
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "absoluteLocation" : 123456789,
  "recordingLocation" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "absoluteDurationMs" : 123456789,
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "recordingDurationMs" : 123456789
} ]}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 

     - returns: RequestBuilder<[Annotation]> 
     */
    open class func getConversationRecordingAnnotationsWithRequestBuilder(conversationId: String, recordingId: String) -> RequestBuilder<[Annotation]> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Annotation]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get recording metadata for a conversation. Does not return playable media. Annotations won't be included in the response if recording:recording:view permission is missing.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecordingmetadata(conversationId: String, completion: @escaping ((_ data: [RecordingMetadata]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingmetadataWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<[RecordingMetadata]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get recording metadata for a conversation. Does not return playable media. Annotations won't be included in the response if recording:recording:view permission is missing.
     
     - GET /api/v2/conversations/{conversationId}/recordingmetadata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "maxAllowedRestorationsForOrg" : 123,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "sessionId" : "aeiou",
  "path" : "aeiou",
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "endTime" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "deleteDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter conversationId: (path) Conversation ID 

     - returns: RequestBuilder<[RecordingMetadata]> 
     */
    open class func getConversationRecordingmetadataWithRequestBuilder(conversationId: String) -> RequestBuilder<[RecordingMetadata]> {
        var path = "/api/v2/conversations/{conversationId}/recordingmetadata"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[RecordingMetadata]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get metadata for a specific recording. Does not return playable media.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecordingmetadataRecordingId(conversationId: String, recordingId: String, completion: @escaping ((_ data: RecordingMetadata?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingmetadataRecordingIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId)
        requestBuilder.execute { (response: Response<RecordingMetadata>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get metadata for a specific recording. Does not return playable media.
     
     - GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maxAllowedRestorationsForOrg" : 123,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "sessionId" : "aeiou",
  "path" : "aeiou",
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "endTime" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "deleteDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 

     - returns: RequestBuilder<RecordingMetadata> 
     */
    open class func getConversationRecordingmetadataRecordingIdWithRequestBuilder(conversationId: String, recordingId: String) -> RequestBuilder<RecordingMetadata> {
        var path = "/api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecordingMetadata>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum FormatId_getConversationRecordings: String { 
        case wav = "WAV"
        case webm = "WEBM"
        case wavUlaw = "WAV_ULAW"
        case oggVorbis = "OGG_VORBIS"
        case oggOpus = "OGG_OPUS"
        case mp3 = "MP3"
        case _none = "NONE"
    }

    
    
    
    
    /**
     
     Get all of a Conversation's Recordings.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter maxWaitMs: (query) The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value. (optional, default to 5000)
     - parameter formatId: (query) The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE. (optional, default to WEBM)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConversationRecordings(conversationId: String, maxWaitMs: Int? = nil, formatId: FormatId_getConversationRecordings? = nil, mediaFormats: [String]? = nil, completion: @escaping ((_ data: [Recording]?,_ error: Error?) -> Void)) {
        let requestBuilder = getConversationRecordingsWithRequestBuilder(conversationId: conversationId, maxWaitMs: maxWaitMs, formatId: formatId, mediaFormats: mediaFormats)
        requestBuilder.execute { (response: Response<[Recording]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all of a Conversation's Recordings.
     
     - GET /api/v2/conversations/{conversationId}/recordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
  "maxAllowedRestorationsForOrg" : 123,
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "messagingTranscript" : [ {
    "messageText" : "aeiou",
    "quickReplies" : [ {
      "payload" : "aeiou",
      "isSelected" : true,
      "action" : "aeiou",
      "text" : "aeiou",
      "url" : "aeiou"
    } ],
    "fromUser" : "",
    "fromExternalContact" : {
      "schema" : "",
      "lastName" : "aeiou",
      "workEmail" : "aeiou",
      "customFields" : {
        "key" : "{}"
      },
      "title" : "aeiou",
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "personalEmail" : "aeiou",
      "externalSystemUrl" : "aeiou",
      "id" : "aeiou",
      "otherEmail" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000",
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "homePhone" : "",
      "facebookId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "scopedId" : "aeiou"
        } ]
      },
      "selfUri" : "aeiou",
      "lineId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "userId" : "aeiou"
        } ]
      },
      "externalOrganization" : {
        "schema" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "jsonSchema" : {
            "$schema" : "aeiou",
            "description" : "aeiou",
            "id" : "aeiou",
            "additionalProperties" : "{}",
            "title" : "aeiou",
            "type" : "aeiou",
            "required" : [ "aeiou" ],
            "properties" : {
              "key" : "{}"
            }
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "appliesTo" : [ "aeiou" ],
          "id" : "aeiou",
          "version" : 123,
          "enabled" : true
        },
        "address" : "",
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "companyType" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "aeiou",
        "industry" : "aeiou",
        "employeeCount" : 123456789,
        "tickers" : [ {
          "symbol" : "aeiou",
          "exchange" : "aeiou"
        } ],
        "twitterId" : "",
        "primaryContactId" : "aeiou",
        "tags" : [ "aeiou" ],
        "revenue" : 123456789,
        "phoneNumber" : "",
        "externalSystemUrl" : "aeiou",
        "externalDataSources" : [ {
          "platform" : "aeiou",
          "url" : "aeiou"
        } ],
        "name" : "aeiou",
        "faxNumber" : "",
        "trustor" : {
          "authorization" : {
            "permissions" : [ "aeiou" ]
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : "",
            "title" : "aeiou",
            "division" : "",
            "authorization" : "",
            "skills" : [ "" ],
            "station" : "",
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : "",
            "lastTokenIssued" : "",
            "email" : "aeiou",
            "images" : [ "" ],
            "manager" : "",
            "employerInfo" : "",
            "languages" : [ "" ],
            "conversationSummary" : "",
            "groups" : [ "" ],
            "primaryContactInfo" : [ "" ],
            "biography" : "",
            "team" : "",
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : "",
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "organization" : {
              "defaultCountryCode" : "aeiou",
              "selfUri" : "aeiou",
              "thirdPartyURI" : "aeiou",
              "version" : 123,
              "thirdPartyOrgName" : "aeiou",
              "features" : {
                "key" : true
              },
              "defaultLanguage" : "aeiou",
              "defaultSiteId" : "aeiou",
              "supportURI" : "aeiou",
              "domain" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "voicemailEnabled" : true,
              "productPlatform" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ "" ],
            "username" : "aeiou",
            "geolocation" : ""
          },
          "organization" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "enabled" : true
        },
        "websites" : [ "aeiou" ],
        "id" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000"
      },
      "firstName" : "aeiou",
      "otherPhone" : "",
      "whatsAppId" : {
        "phoneNumber" : "",
        "displayName" : "aeiou"
      },
      "externalDataSources" : [ "" ],
      "middleName" : "aeiou",
      "workPhone" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "salutation" : "aeiou",
      "cellPhone" : "",
      "surveyOptOut" : true
    },
    "buttonResponse" : {
      "messageType" : "aeiou",
      "payload" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou"
    },
    "from" : "aeiou",
    "to" : "aeiou",
    "id" : "aeiou",
    "messageMediaAttachments" : [ {
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "contentLength" : 123456789,
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "messageStickerAttachments" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "story" : {
      "replyToId" : "aeiou",
      "type" : "aeiou",
      "url" : "aeiou"
    }
  } ],
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "path" : "aeiou",
  "outputSizeInBytes" : 123,
  "transcript" : [ {
    "bodyType" : "aeiou",
    "utc" : "aeiou",
    "chat" : "aeiou",
    "senderCommunicationId" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "participantPurpose" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "estimatedTranscodeTimeMs" : 123456789,
  "outputDurationMs" : 123,
  "recordingErrorStatus" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000",
  "actualTranscodeTimeMs" : 123456789,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "sessionId" : "aeiou",
  "users" : [ "" ],
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "recordingFileRole" : "aeiou",
  "endTime" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter maxWaitMs: (query) The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value. (optional, default to 5000)
     - parameter formatId: (query) The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE. (optional, default to WEBM)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3. (optional)

     - returns: RequestBuilder<[Recording]> 
     */
    open class func getConversationRecordingsWithRequestBuilder(conversationId: String, maxWaitMs: Int? = nil, formatId: FormatId_getConversationRecordings? = nil, mediaFormats: [String]? = nil) -> RequestBuilder<[Recording]> {
        var path = "/api/v2/conversations/{conversationId}/recordings"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "maxWaitMs": maxWaitMs?.encodeToJSON(), 
            
            "formatId": formatId?.rawValue, 
            
            "mediaFormats": mediaFormats
            
        ])

        let requestBuilder: RequestBuilder<[Recording]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Gets a single orphan recording
     
     - parameter orphanId: (path) Orphan ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrphanrecording(orphanId: String, completion: @escaping ((_ data: OrphanRecording?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrphanrecordingWithRequestBuilder(orphanId: orphanId)
        requestBuilder.execute { (response: Response<OrphanRecording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a single orphan recording
     
     - GET /api/v2/orphanrecordings/{orphanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sourceOrphaningId" : "aeiou",
  "orphanStatus" : "aeiou",
  "selfUri" : "aeiou",
  "recording" : {
    "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
    "maxAllowedRestorationsForOrg" : 123,
    "emailTranscript" : [ {
      "cc" : [ "" ],
      "htmlBody" : "aeiou",
      "bcc" : [ "" ],
      "attachments" : [ {
        "contentPath" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "textBody" : "aeiou",
      "from" : "",
      "id" : "aeiou",
      "to" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "time" : "2000-01-23T04:56:07.000+0000"
    } ],
    "messagingTranscript" : [ {
      "messageText" : "aeiou",
      "quickReplies" : [ {
        "payload" : "aeiou",
        "isSelected" : true,
        "action" : "aeiou",
        "text" : "aeiou",
        "url" : "aeiou"
      } ],
      "fromUser" : "",
      "fromExternalContact" : {
        "schema" : "",
        "lastName" : "aeiou",
        "workEmail" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "title" : "aeiou",
        "twitterId" : {
          "profileUrl" : "aeiou",
          "name" : "aeiou",
          "verified" : true,
          "id" : "aeiou",
          "screenName" : "aeiou"
        },
        "personalEmail" : "aeiou",
        "externalSystemUrl" : "aeiou",
        "id" : "aeiou",
        "otherEmail" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000",
        "address" : {
          "address2" : "aeiou",
          "city" : "aeiou",
          "address1" : "aeiou",
          "countryCode" : "aeiou",
          "postalCode" : "aeiou",
          "state" : "aeiou"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "homePhone" : "",
        "facebookId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "scopedId" : "aeiou"
          } ]
        },
        "selfUri" : "aeiou",
        "lineId" : {
          "displayName" : "aeiou",
          "ids" : [ {
            "userId" : "aeiou"
          } ]
        },
        "externalOrganization" : {
          "schema" : {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "jsonSchema" : {
              "$schema" : "aeiou",
              "description" : "aeiou",
              "id" : "aeiou",
              "additionalProperties" : "{}",
              "title" : "aeiou",
              "type" : "aeiou",
              "required" : [ "aeiou" ],
              "properties" : {
                "key" : "{}"
              }
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "appliesTo" : [ "aeiou" ],
            "id" : "aeiou",
            "version" : 123,
            "enabled" : true
          },
          "address" : "",
          "modifyDate" : "2000-01-23T04:56:07.000+0000",
          "companyType" : "aeiou",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "aeiou",
          "industry" : "aeiou",
          "employeeCount" : 123456789,
          "tickers" : [ {
            "symbol" : "aeiou",
            "exchange" : "aeiou"
          } ],
          "twitterId" : "",
          "primaryContactId" : "aeiou",
          "tags" : [ "aeiou" ],
          "revenue" : 123456789,
          "phoneNumber" : "",
          "externalSystemUrl" : "aeiou",
          "externalDataSources" : [ {
            "platform" : "aeiou",
            "url" : "aeiou"
          } ],
          "name" : "aeiou",
          "faxNumber" : "",
          "trustor" : {
            "authorization" : {
              "permissions" : [ "aeiou" ]
            },
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : {
              "addresses" : [ "" ],
              "acdAutoAnswer" : true,
              "routingStatus" : "",
              "title" : "aeiou",
              "division" : "",
              "authorization" : "",
              "skills" : [ "" ],
              "station" : "",
              "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : "",
              "lastTokenIssued" : "",
              "email" : "aeiou",
              "images" : [ "" ],
              "manager" : "",
              "employerInfo" : "",
              "languages" : [ "" ],
              "conversationSummary" : "",
              "groups" : [ "" ],
              "primaryContactInfo" : [ "" ],
              "biography" : "",
              "team" : "",
              "certifications" : [ "aeiou" ],
              "version" : 123,
              "outOfOffice" : "",
              "languagePreference" : "aeiou",
              "profileSkills" : [ "aeiou" ],
              "chat" : "",
              "organization" : {
                "defaultCountryCode" : "aeiou",
                "selfUri" : "aeiou",
                "thirdPartyURI" : "aeiou",
                "version" : 123,
                "thirdPartyOrgName" : "aeiou",
                "features" : {
                  "key" : true
                },
                "defaultLanguage" : "aeiou",
                "defaultSiteId" : "aeiou",
                "supportURI" : "aeiou",
                "domain" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "voicemailEnabled" : true,
                "productPlatform" : "aeiou"
              },
              "name" : "aeiou",
              "integrationPresence" : "",
              "locations" : [ "" ],
              "username" : "aeiou",
              "geolocation" : ""
            },
            "organization" : "",
            "selfUri" : "aeiou",
            "id" : "aeiou",
            "enabled" : true
          },
          "websites" : [ "aeiou" ],
          "id" : "aeiou",
          "createDate" : "2000-01-23T04:56:07.000+0000"
        },
        "firstName" : "aeiou",
        "otherPhone" : "",
        "whatsAppId" : {
          "phoneNumber" : "",
          "displayName" : "aeiou"
        },
        "externalDataSources" : [ "" ],
        "middleName" : "aeiou",
        "workPhone" : {
          "extension" : 123456789,
          "e164" : "aeiou",
          "acceptsSMS" : true,
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "userInput" : "aeiou"
        },
        "salutation" : "aeiou",
        "cellPhone" : "",
        "surveyOptOut" : true
      },
      "buttonResponse" : {
        "messageType" : "aeiou",
        "payload" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou"
      },
      "from" : "aeiou",
      "to" : "aeiou",
      "id" : "aeiou",
      "messageMediaAttachments" : [ {
        "name" : "aeiou",
        "mediaType" : "aeiou",
        "contentLength" : 123456789,
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "messageStickerAttachments" : [ {
        "id" : "aeiou",
        "url" : "aeiou"
      } ],
      "timestamp" : "2000-01-23T04:56:07.000+0000",
      "story" : {
        "replyToId" : "aeiou",
        "type" : "aeiou",
        "url" : "aeiou"
      }
    } ],
    "annotations" : [ {
      "absoluteLocation" : 123456789,
      "recordingLocation" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "location" : 123456789,
      "id" : "aeiou",
      "type" : "aeiou",
      "absoluteDurationMs" : 123456789,
      "durationMs" : 123456789,
      "user" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : "",
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "webRtcCallAppearances" : 123,
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "countryCode" : "aeiou",
          "display" : "aeiou",
          "integration" : "microsoftteams",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "education" : [ {
            "notes" : "aeiou",
            "school" : "aeiou",
            "dateStart" : "2000-01-23T04:56:07.000+0000",
            "dateEnd" : "2000-01-23T04:56:07.000+0000",
            "fieldOfStudy" : "aeiou"
          } ],
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "team" : {
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "integrationPresence" : "",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "recordingDurationMs" : 123456789
    } ],
    "archiveMedium" : "aeiou",
    "exportedDate" : "2000-01-23T04:56:07.000+0000",
    "media" : "aeiou",
    "path" : "aeiou",
    "outputSizeInBytes" : 123,
    "transcript" : [ {
      "bodyType" : "aeiou",
      "utc" : "aeiou",
      "chat" : "aeiou",
      "senderCommunicationId" : "aeiou",
      "from" : "aeiou",
      "id" : "aeiou",
      "to" : "aeiou",
      "body" : "aeiou",
      "message" : "aeiou",
      "type" : "aeiou",
      "participantPurpose" : "aeiou",
      "user" : {
        "images" : [ "" ],
        "displayName" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "username" : "aeiou"
      }
    } ],
    "fileState" : "aeiou",
    "archiveDate" : "2000-01-23T04:56:07.000+0000",
    "estimatedTranscodeTimeMs" : 123456789,
    "outputDurationMs" : 123,
    "recordingErrorStatus" : "aeiou",
    "startTime" : "aeiou",
    "id" : "aeiou",
    "remainingRestorationsAllowedForOrg" : 123,
    "mediaUris" : {
      "key" : {
        "mediaUri" : "aeiou",
        "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
      }
    },
    "deleteDate" : "2000-01-23T04:56:07.000+0000",
    "actualTranscodeTimeMs" : 123456789,
    "conversationId" : "aeiou",
    "selfUri" : "aeiou",
    "sessionId" : "aeiou",
    "users" : [ "" ],
    "exportDate" : "2000-01-23T04:56:07.000+0000",
    "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "recordingFileRole" : "aeiou",
    "endTime" : "aeiou"
  },
  "mediaType" : "aeiou",
  "providerType" : "aeiou",
  "recoveredTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "name" : "aeiou",
  "mediaSizeBytes" : 123456789,
  "createdTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "providerEndpoint" : {
    "schema" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "count" : 123,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "enabled" : true,
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "site" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "dids" : [ "aeiou" ],
    "properties" : {
      "key" : "{}"
    }
  }
}}]
     
     - parameter orphanId: (path) Orphan ID 

     - returns: RequestBuilder<OrphanRecording> 
     */
    open class func getOrphanrecordingWithRequestBuilder(orphanId: String) -> RequestBuilder<OrphanRecording> {
        var path = "/api/v2/orphanrecordings/{orphanId}"
        let orphanIdPreEscape = "\(orphanId)"
        let orphanIdPostEscape = orphanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orphanId}", with: orphanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrphanRecording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum FormatId_getOrphanrecordingMedia: String { 
        case wav = "WAV"
        case webm = "WEBM"
        case wavUlaw = "WAV_ULAW"
        case oggVorbis = "OGG_VORBIS"
        case oggOpus = "OGG_OPUS"
        case mp3 = "MP3"
        case _none = "NONE"
    }

    
    
    
    public enum EmailFormatId_getOrphanrecordingMedia: String { 
        case eml = "EML"
        case _none = "NONE"
    }

    
    
    
    public enum ChatFormatId_getOrphanrecordingMedia: String { 
        case zip = "ZIP"
        case _none = "NONE"
    }

    
    
    
    public enum MessageFormatId_getOrphanrecordingMedia: String { 
        case zip = "ZIP"
        case _none = "NONE"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Gets the media of a single orphan recording
     
     - parameter orphanId: (path) Orphan ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)
     - parameter emailFormatId: (query) The desired media format when downloading an email recording. (optional, default to EML)
     - parameter chatFormatId: (query) The desired media format when downloading a chat recording. (optional, default to ZIP)
     - parameter messageFormatId: (query) The desired media format when downloading a message recording. (optional, default to ZIP)
     - parameter download: (query) requesting a download format of the recording (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)
     - parameter locale: (query) The locale for the requested file when downloading, as an ISO 639-1 code (optional)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrphanrecordingMedia(orphanId: String, formatId: FormatId_getOrphanrecordingMedia? = nil, emailFormatId: EmailFormatId_getOrphanrecordingMedia? = nil, chatFormatId: ChatFormatId_getOrphanrecordingMedia? = nil, messageFormatId: MessageFormatId_getOrphanrecordingMedia? = nil, download: Bool? = nil, fileName: String? = nil, locale: String? = nil, mediaFormats: [String]? = nil, completion: @escaping ((_ data: Recording?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrphanrecordingMediaWithRequestBuilder(orphanId: orphanId, formatId: formatId, emailFormatId: emailFormatId, chatFormatId: chatFormatId, messageFormatId: messageFormatId, download: download, fileName: fileName, locale: locale, mediaFormats: mediaFormats)
        requestBuilder.execute { (response: Response<Recording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets the media of a single orphan recording
     
     - GET /api/v2/orphanrecordings/{orphanId}/media
     - A 202 response means the orphaned media is currently transcoding and will be available shortly.A 200 response denotes the transcoded orphan media is available now and is contained in the response body.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
  "maxAllowedRestorationsForOrg" : 123,
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "messagingTranscript" : [ {
    "messageText" : "aeiou",
    "quickReplies" : [ {
      "payload" : "aeiou",
      "isSelected" : true,
      "action" : "aeiou",
      "text" : "aeiou",
      "url" : "aeiou"
    } ],
    "fromUser" : "",
    "fromExternalContact" : {
      "schema" : "",
      "lastName" : "aeiou",
      "workEmail" : "aeiou",
      "customFields" : {
        "key" : "{}"
      },
      "title" : "aeiou",
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "personalEmail" : "aeiou",
      "externalSystemUrl" : "aeiou",
      "id" : "aeiou",
      "otherEmail" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000",
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "homePhone" : "",
      "facebookId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "scopedId" : "aeiou"
        } ]
      },
      "selfUri" : "aeiou",
      "lineId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "userId" : "aeiou"
        } ]
      },
      "externalOrganization" : {
        "schema" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "jsonSchema" : {
            "$schema" : "aeiou",
            "description" : "aeiou",
            "id" : "aeiou",
            "additionalProperties" : "{}",
            "title" : "aeiou",
            "type" : "aeiou",
            "required" : [ "aeiou" ],
            "properties" : {
              "key" : "{}"
            }
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "appliesTo" : [ "aeiou" ],
          "id" : "aeiou",
          "version" : 123,
          "enabled" : true
        },
        "address" : "",
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "companyType" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "aeiou",
        "industry" : "aeiou",
        "employeeCount" : 123456789,
        "tickers" : [ {
          "symbol" : "aeiou",
          "exchange" : "aeiou"
        } ],
        "twitterId" : "",
        "primaryContactId" : "aeiou",
        "tags" : [ "aeiou" ],
        "revenue" : 123456789,
        "phoneNumber" : "",
        "externalSystemUrl" : "aeiou",
        "externalDataSources" : [ {
          "platform" : "aeiou",
          "url" : "aeiou"
        } ],
        "name" : "aeiou",
        "faxNumber" : "",
        "trustor" : {
          "authorization" : {
            "permissions" : [ "aeiou" ]
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : "",
            "title" : "aeiou",
            "division" : "",
            "authorization" : "",
            "skills" : [ "" ],
            "station" : "",
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : "",
            "lastTokenIssued" : "",
            "email" : "aeiou",
            "images" : [ "" ],
            "manager" : "",
            "employerInfo" : "",
            "languages" : [ "" ],
            "conversationSummary" : "",
            "groups" : [ "" ],
            "primaryContactInfo" : [ "" ],
            "biography" : "",
            "team" : "",
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : "",
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "organization" : {
              "defaultCountryCode" : "aeiou",
              "selfUri" : "aeiou",
              "thirdPartyURI" : "aeiou",
              "version" : 123,
              "thirdPartyOrgName" : "aeiou",
              "features" : {
                "key" : true
              },
              "defaultLanguage" : "aeiou",
              "defaultSiteId" : "aeiou",
              "supportURI" : "aeiou",
              "domain" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "voicemailEnabled" : true,
              "productPlatform" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ "" ],
            "username" : "aeiou",
            "geolocation" : ""
          },
          "organization" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "enabled" : true
        },
        "websites" : [ "aeiou" ],
        "id" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000"
      },
      "firstName" : "aeiou",
      "otherPhone" : "",
      "whatsAppId" : {
        "phoneNumber" : "",
        "displayName" : "aeiou"
      },
      "externalDataSources" : [ "" ],
      "middleName" : "aeiou",
      "workPhone" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "salutation" : "aeiou",
      "cellPhone" : "",
      "surveyOptOut" : true
    },
    "buttonResponse" : {
      "messageType" : "aeiou",
      "payload" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou"
    },
    "from" : "aeiou",
    "to" : "aeiou",
    "id" : "aeiou",
    "messageMediaAttachments" : [ {
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "contentLength" : 123456789,
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "messageStickerAttachments" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "story" : {
      "replyToId" : "aeiou",
      "type" : "aeiou",
      "url" : "aeiou"
    }
  } ],
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "path" : "aeiou",
  "outputSizeInBytes" : 123,
  "transcript" : [ {
    "bodyType" : "aeiou",
    "utc" : "aeiou",
    "chat" : "aeiou",
    "senderCommunicationId" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "participantPurpose" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "estimatedTranscodeTimeMs" : 123456789,
  "outputDurationMs" : 123,
  "recordingErrorStatus" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000",
  "actualTranscodeTimeMs" : 123456789,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "sessionId" : "aeiou",
  "users" : [ "" ],
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "recordingFileRole" : "aeiou",
  "endTime" : "aeiou"
}}]
     
     - parameter orphanId: (path) Orphan ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)
     - parameter emailFormatId: (query) The desired media format when downloading an email recording. (optional, default to EML)
     - parameter chatFormatId: (query) The desired media format when downloading a chat recording. (optional, default to ZIP)
     - parameter messageFormatId: (query) The desired media format when downloading a message recording. (optional, default to ZIP)
     - parameter download: (query) requesting a download format of the recording (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)
     - parameter locale: (query) The locale for the requested file when downloading, as an ISO 639-1 code (optional)
     - parameter mediaFormats: (query) All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3 (optional)

     - returns: RequestBuilder<Recording> 
     */
    open class func getOrphanrecordingMediaWithRequestBuilder(orphanId: String, formatId: FormatId_getOrphanrecordingMedia? = nil, emailFormatId: EmailFormatId_getOrphanrecordingMedia? = nil, chatFormatId: ChatFormatId_getOrphanrecordingMedia? = nil, messageFormatId: MessageFormatId_getOrphanrecordingMedia? = nil, download: Bool? = nil, fileName: String? = nil, locale: String? = nil, mediaFormats: [String]? = nil) -> RequestBuilder<Recording> {
        var path = "/api/v2/orphanrecordings/{orphanId}/media"
        let orphanIdPreEscape = "\(orphanId)"
        let orphanIdPostEscape = orphanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orphanId}", with: orphanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "formatId": formatId?.rawValue, 
            
            "emailFormatId": emailFormatId?.rawValue, 
            
            "chatFormatId": chatFormatId?.rawValue, 
            
            "messageFormatId": messageFormatId?.rawValue, 
            
            "download": download, 
            
            "fileName": fileName, 
            
            "locale": locale, 
            
            "mediaFormats": mediaFormats
            
        ])

        let requestBuilder: RequestBuilder<Recording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public enum Media_getOrphanrecordings: String { 
        case call = "Call"
        case screen = "Screen"
    }

    
    
    /**
     
     Gets all orphan recordings
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter hasConversation: (query) Filter resulting orphans by whether the conversation is known. False returns all orphans for the organization. (optional, default to false)
     - parameter media: (query) Filter resulting orphans based on their media type (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrphanrecordings(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, hasConversation: Bool? = nil, media: Media_getOrphanrecordings? = nil, completion: @escaping ((_ data: OrphanRecordingListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getOrphanrecordingsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, hasConversation: hasConversation, media: media)
        requestBuilder.execute { (response: Response<OrphanRecordingListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all orphan recordings
     
     - GET /api/v2/orphanrecordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "sourceOrphaningId" : "aeiou",
    "orphanStatus" : "aeiou",
    "selfUri" : "aeiou",
    "recording" : {
      "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
      "maxAllowedRestorationsForOrg" : 123,
      "emailTranscript" : [ {
        "cc" : [ "" ],
        "htmlBody" : "aeiou",
        "bcc" : [ "" ],
        "attachments" : [ {
          "contentPath" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "textBody" : "aeiou",
        "from" : "",
        "id" : "aeiou",
        "to" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "time" : "2000-01-23T04:56:07.000+0000"
      } ],
      "messagingTranscript" : [ {
        "messageText" : "aeiou",
        "quickReplies" : [ {
          "payload" : "aeiou",
          "isSelected" : true,
          "action" : "aeiou",
          "text" : "aeiou",
          "url" : "aeiou"
        } ],
        "fromUser" : "",
        "fromExternalContact" : {
          "schema" : "",
          "lastName" : "aeiou",
          "workEmail" : "aeiou",
          "customFields" : {
            "key" : "{}"
          },
          "title" : "aeiou",
          "twitterId" : {
            "profileUrl" : "aeiou",
            "name" : "aeiou",
            "verified" : true,
            "id" : "aeiou",
            "screenName" : "aeiou"
          },
          "personalEmail" : "aeiou",
          "externalSystemUrl" : "aeiou",
          "id" : "aeiou",
          "otherEmail" : "aeiou",
          "createDate" : "2000-01-23T04:56:07.000+0000",
          "address" : {
            "address2" : "aeiou",
            "city" : "aeiou",
            "address1" : "aeiou",
            "countryCode" : "aeiou",
            "postalCode" : "aeiou",
            "state" : "aeiou"
          },
          "modifyDate" : "2000-01-23T04:56:07.000+0000",
          "homePhone" : "",
          "facebookId" : {
            "displayName" : "aeiou",
            "ids" : [ {
              "scopedId" : "aeiou"
            } ]
          },
          "selfUri" : "aeiou",
          "lineId" : {
            "displayName" : "aeiou",
            "ids" : [ {
              "userId" : "aeiou"
            } ]
          },
          "externalOrganization" : {
            "schema" : {
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "jsonSchema" : {
                "$schema" : "aeiou",
                "description" : "aeiou",
                "id" : "aeiou",
                "additionalProperties" : "{}",
                "title" : "aeiou",
                "type" : "aeiou",
                "required" : [ "aeiou" ],
                "properties" : {
                  "key" : "{}"
                }
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "appliesTo" : [ "aeiou" ],
              "id" : "aeiou",
              "version" : 123,
              "enabled" : true
            },
            "address" : "",
            "modifyDate" : "2000-01-23T04:56:07.000+0000",
            "companyType" : "aeiou",
            "customFields" : {
              "key" : "{}"
            },
            "selfUri" : "aeiou",
            "industry" : "aeiou",
            "employeeCount" : 123456789,
            "tickers" : [ {
              "symbol" : "aeiou",
              "exchange" : "aeiou"
            } ],
            "twitterId" : "",
            "primaryContactId" : "aeiou",
            "tags" : [ "aeiou" ],
            "revenue" : 123456789,
            "phoneNumber" : "",
            "externalSystemUrl" : "aeiou",
            "externalDataSources" : [ {
              "platform" : "aeiou",
              "url" : "aeiou"
            } ],
            "name" : "aeiou",
            "faxNumber" : "",
            "trustor" : {
              "authorization" : {
                "permissions" : [ "aeiou" ]
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : {
                "addresses" : [ "" ],
                "acdAutoAnswer" : true,
                "routingStatus" : "",
                "title" : "aeiou",
                "division" : "",
                "authorization" : "",
                "skills" : [ "" ],
                "station" : "",
                "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "state" : "aeiou",
                "department" : "aeiou",
                "presence" : "",
                "lastTokenIssued" : "",
                "email" : "aeiou",
                "images" : [ "" ],
                "manager" : "",
                "employerInfo" : "",
                "languages" : [ "" ],
                "conversationSummary" : "",
                "groups" : [ "" ],
                "primaryContactInfo" : [ "" ],
                "biography" : "",
                "team" : "",
                "certifications" : [ "aeiou" ],
                "version" : 123,
                "outOfOffice" : "",
                "languagePreference" : "aeiou",
                "profileSkills" : [ "aeiou" ],
                "chat" : "",
                "organization" : {
                  "defaultCountryCode" : "aeiou",
                  "selfUri" : "aeiou",
                  "thirdPartyURI" : "aeiou",
                  "version" : 123,
                  "thirdPartyOrgName" : "aeiou",
                  "features" : {
                    "key" : true
                  },
                  "defaultLanguage" : "aeiou",
                  "defaultSiteId" : "aeiou",
                  "supportURI" : "aeiou",
                  "domain" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou",
                  "state" : "aeiou",
                  "voicemailEnabled" : true,
                  "productPlatform" : "aeiou"
                },
                "name" : "aeiou",
                "integrationPresence" : "",
                "locations" : [ "" ],
                "username" : "aeiou",
                "geolocation" : ""
              },
              "organization" : "",
              "selfUri" : "aeiou",
              "id" : "aeiou",
              "enabled" : true
            },
            "websites" : [ "aeiou" ],
            "id" : "aeiou",
            "createDate" : "2000-01-23T04:56:07.000+0000"
          },
          "firstName" : "aeiou",
          "otherPhone" : "",
          "whatsAppId" : {
            "phoneNumber" : "",
            "displayName" : "aeiou"
          },
          "externalDataSources" : [ "" ],
          "middleName" : "aeiou",
          "workPhone" : {
            "extension" : 123456789,
            "e164" : "aeiou",
            "acceptsSMS" : true,
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "userInput" : "aeiou"
          },
          "salutation" : "aeiou",
          "cellPhone" : "",
          "surveyOptOut" : true
        },
        "buttonResponse" : {
          "messageType" : "aeiou",
          "payload" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou"
        },
        "from" : "aeiou",
        "to" : "aeiou",
        "id" : "aeiou",
        "messageMediaAttachments" : [ {
          "name" : "aeiou",
          "mediaType" : "aeiou",
          "contentLength" : 123456789,
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "messageStickerAttachments" : [ {
          "id" : "aeiou",
          "url" : "aeiou"
        } ],
        "timestamp" : "2000-01-23T04:56:07.000+0000",
        "story" : {
          "replyToId" : "aeiou",
          "type" : "aeiou",
          "url" : "aeiou"
        }
      } ],
      "annotations" : [ {
        "absoluteLocation" : 123456789,
        "recordingLocation" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "location" : 123456789,
        "id" : "aeiou",
        "type" : "aeiou",
        "absoluteDurationMs" : 123456789,
        "durationMs" : 123456789,
        "user" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : "",
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "webRtcCallAppearances" : 123,
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "integration" : "microsoftteams",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "integrationPresence" : "",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : {
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "recordingDurationMs" : 123456789
      } ],
      "archiveMedium" : "aeiou",
      "exportedDate" : "2000-01-23T04:56:07.000+0000",
      "media" : "aeiou",
      "path" : "aeiou",
      "outputSizeInBytes" : 123,
      "transcript" : [ {
        "bodyType" : "aeiou",
        "utc" : "aeiou",
        "chat" : "aeiou",
        "senderCommunicationId" : "aeiou",
        "from" : "aeiou",
        "id" : "aeiou",
        "to" : "aeiou",
        "body" : "aeiou",
        "message" : "aeiou",
        "type" : "aeiou",
        "participantPurpose" : "aeiou",
        "user" : {
          "images" : [ "" ],
          "displayName" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "username" : "aeiou"
        }
      } ],
      "fileState" : "aeiou",
      "archiveDate" : "2000-01-23T04:56:07.000+0000",
      "estimatedTranscodeTimeMs" : 123456789,
      "outputDurationMs" : 123,
      "recordingErrorStatus" : "aeiou",
      "startTime" : "aeiou",
      "id" : "aeiou",
      "remainingRestorationsAllowedForOrg" : 123,
      "mediaUris" : {
        "key" : {
          "mediaUri" : "aeiou",
          "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
        }
      },
      "deleteDate" : "2000-01-23T04:56:07.000+0000",
      "actualTranscodeTimeMs" : 123456789,
      "conversationId" : "aeiou",
      "selfUri" : "aeiou",
      "sessionId" : "aeiou",
      "users" : [ "" ],
      "exportDate" : "2000-01-23T04:56:07.000+0000",
      "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "recordingFileRole" : "aeiou",
      "endTime" : "aeiou"
    },
    "mediaType" : "aeiou",
    "providerType" : "aeiou",
    "recoveredTime" : "2000-01-23T04:56:07.000+0000",
    "fileState" : "aeiou",
    "name" : "aeiou",
    "mediaSizeBytes" : 123456789,
    "createdTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "providerEndpoint" : {
      "schema" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "count" : 123,
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "createdByApp" : "aeiou",
      "version" : 123,
      "enabled" : true,
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "site" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "aeiou",
      "name" : "aeiou",
      "modifiedByApp" : "aeiou",
      "modifiedBy" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "dids" : [ "aeiou" ],
      "properties" : {
        "key" : "{}"
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter hasConversation: (query) Filter resulting orphans by whether the conversation is known. False returns all orphans for the organization. (optional, default to false)
     - parameter media: (query) Filter resulting orphans based on their media type (optional)

     - returns: RequestBuilder<OrphanRecordingListing> 
     */
    open class func getOrphanrecordingsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, hasConversation: Bool? = nil, media: Media_getOrphanrecordings? = nil) -> RequestBuilder<OrphanRecordingListing> {
        let path = "/api/v2/orphanrecordings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "hasConversation": hasConversation, 
            
            "media": media?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<OrphanRecordingListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the status and results for a batch request job, only the user that submitted the job may retrieve results
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingBatchrequest(jobId: String, completion: @escaping ((_ data: BatchDownloadJobStatusResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingBatchrequestWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<BatchDownloadJobStatusResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the status and results for a batch request job, only the user that submitted the job may retrieve results
     
     - GET /api/v2/recording/batchrequests/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "aeiou",
  "resultCount" : 123,
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "expectedResultCount" : 123,
  "results" : [ {
    "conversationId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "resultUrl" : "aeiou",
    "id" : "aeiou",
    "recordingId" : "aeiou",
    "contentType" : "aeiou",
    "errorMsg" : "aeiou"
  } ],
  "errorCount" : 123
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<BatchDownloadJobStatusResult> 
     */
    open class func getRecordingBatchrequestWithRequestBuilder(jobId: String) -> RequestBuilder<BatchDownloadJobStatusResult> {
        var path = "/api/v2/recording/batchrequests/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchDownloadJobStatusResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Gets media retention policy list with query options to filter on name and enabled.
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled = true or enabled = false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingCrossplatformMediaretentionpolicies(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil, completion: @escaping ((_ data: PolicyEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, enabled: enabled, summary: summary, hasErrors: hasErrors)
        requestBuilder.execute { (response: Response<PolicyEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets media retention policy list with query options to filter on name and enabled.
     
     - GET /api/v2/recording/crossplatform/mediaretentionpolicies
     - for a less verbose response, add summary=true to this endpoint
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "mediaPolicies" : {
      "messagePolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "customerParticipation" : "aeiou",
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "chatPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "duration" : "",
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "emailPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "customerParticipation" : "aeiou",
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "callPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "aeiou",
            "id" : "aeiou"
          } ],
          "duration" : {
            "durationTarget" : "aeiou",
            "durationOperator" : "aeiou",
            "durationMode" : "aeiou",
            "durationRange" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "version" : "aeiou"
          } ],
          "directions" : [ "aeiou" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : {
            "timeZoneId" : "aeiou",
            "timeSlots" : [ {
              "startTime" : "aeiou",
              "stopTime" : "aeiou",
              "day" : 123
            } ],
            "empty" : true
          },
          "forQueues" : [ {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "onHoldPrompt" : "",
            "emailInQueueFlow" : "",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : "",
            "callingPartyNumber" : "aeiou",
            "userMemberCount" : 123,
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "messageInQueueFlow" : "",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          } ]
        },
        "actions" : {
          "assignMeteredAssignmentByAgent" : [ {
            "evaluators" : [ "" ],
            "timeInterval" : "",
            "timeZone" : "aeiou",
            "evaluationContextId" : "aeiou",
            "maxNumberEvaluations" : 123,
            "evaluationForm" : ""
          } ],
          "assignCalibrations" : [ {
            "calibrator" : "",
            "expertEvaluator" : "",
            "evaluators" : [ "" ],
            "evaluationForm" : ""
          } ],
          "initiateScreenRecording" : {
            "archiveRetention" : "",
            "recordACW" : true,
            "deleteRetention" : ""
          },
          "retainRecording" : true,
          "assignMeteredEvaluations" : [ {
            "assignToActiveUser" : true,
            "evaluators" : [ "" ],
            "timeInterval" : {
              "hours" : 123,
              "months" : 123,
              "weeks" : 123,
              "days" : 123
            },
            "evaluationContextId" : "aeiou",
            "maxNumberEvaluations" : 123,
            "evaluationForm" : ""
          } ],
          "retentionDuration" : {
            "archiveRetention" : {
              "storageMedium" : "aeiou",
              "days" : 123
            },
            "deleteRetention" : {
              "days" : 123
            }
          },
          "alwaysDelete" : true,
          "assignSurveys" : [ {
            "surveyForm" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "contextId" : "aeiou",
              "id" : "aeiou"
            },
            "sendingDomain" : "aeiou",
            "flow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "inviteTimeInterval" : "aeiou",
            "sendingUser" : "aeiou"
          } ],
          "deleteRecording" : true,
          "mediaTranscriptions" : [ {
            "transcriptionProvider" : "aeiou",
            "displayName" : "aeiou",
            "integrationId" : "aeiou"
          } ],
          "assignEvaluations" : [ {
            "user" : {
              "addresses" : [ "" ],
              "acdAutoAnswer" : true,
              "routingStatus" : {
                "startTime" : "2000-01-23T04:56:07.000+0000",
                "userId" : "aeiou",
                "status" : "aeiou"
              },
              "title" : "aeiou",
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "authorization" : {
                "unusedRoles" : [ "" ],
                "permissions" : [ "aeiou" ],
                "permissionPolicies" : [ {
                  "policyDescription" : "aeiou",
                  "resourceConditionNode" : {
                    "operands" : [ {
                      "type" : "aeiou",
                      "value" : "aeiou"
                    } ],
                    "variableName" : "aeiou",
                    "conjunction" : "aeiou",
                    "terms" : [ "" ],
                    "operator" : "aeiou"
                  },
                  "actionSetKey" : "aeiou",
                  "namedResources" : [ "aeiou" ],
                  "policyName" : "aeiou",
                  "entityName" : "aeiou",
                  "domain" : "aeiou",
                  "allowConditions" : true,
                  "id" : "aeiou",
                  "resourceCondition" : "aeiou",
                  "actionSet" : [ "aeiou" ]
                } ],
                "roles" : [ {
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              },
              "skills" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "skillUri" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "proficiency" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "station" : {
                "defaultStation" : "",
                "lastAssociatedStation" : "",
                "associatedStation" : {
                  "associatedDate" : "2000-01-23T04:56:07.000+0000",
                  "webRtcCallAppearances" : 123,
                  "name" : "aeiou",
                  "defaultUser" : "",
                  "id" : "aeiou",
                  "type" : "aeiou",
                  "associatedUser" : "",
                  "providerInfo" : {
                    "key" : "aeiou"
                  }
                },
                "effectiveStation" : ""
              },
              "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : {
                "presenceDefinition" : {
                  "systemPresence" : "aeiou",
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "source" : "aeiou",
                "message" : "aeiou",
                "primary" : true
              },
              "lastTokenIssued" : {
                "dateIssued" : "2000-01-23T04:56:07.000+0000"
              },
              "email" : "aeiou",
              "images" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "manager" : "",
              "employerInfo" : {
                "employeeType" : "aeiou",
                "dateHire" : "aeiou",
                "employeeId" : "aeiou",
                "officialName" : "aeiou"
              },
              "languages" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "languageUri" : "aeiou",
                "proficiency" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "selfUri" : "aeiou",
              "conversationSummary" : {
                "call" : {
                  "enterprise" : "",
                  "contactCenter" : {
                    "acw" : 123,
                    "active" : 123
                  }
                },
                "socialExpression" : "",
                "chat" : "",
                "callback" : "",
                "video" : "",
                "message" : "",
                "userId" : "aeiou",
                "email" : ""
              },
              "groups" : [ {
                "images" : [ "" ],
                "addresses" : [ {
                  "extension" : "aeiou",
                  "address" : "aeiou",
                  "display" : "aeiou",
                  "mediaType" : "aeiou",
                  "type" : "aeiou"
                } ],
                "visibility" : "aeiou",
                "memberCount" : 123456789,
                "selfUri" : "aeiou",
                "description" : "aeiou",
                "dateModified" : "2000-01-23T04:56:07.000+0000",
                "owners" : [ "" ],
                "type" : "aeiou",
                "version" : 123,
                "rulesVisible" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou"
              } ],
              "primaryContactInfo" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "countryCode" : "aeiou",
                "display" : "aeiou",
                "integration" : "microsoftteams",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "biography" : {
                "education" : [ {
                  "notes" : "aeiou",
                  "school" : "aeiou",
                  "dateStart" : "2000-01-23T04:56:07.000+0000",
                  "dateEnd" : "2000-01-23T04:56:07.000+0000",
                  "fieldOfStudy" : "aeiou"
                } ],
                "hobbies" : [ "aeiou" ],
                "biography" : "aeiou",
                "interests" : [ "aeiou" ],
                "spouse" : "aeiou"
              },
              "team" : {
                "division" : {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                },
                "dateCreated" : "2000-01-23T04:56:07.000+0000",
                "memberCount" : 123456789,
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "description" : "aeiou",
                "dateModified" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou"
              },
              "certifications" : [ "aeiou" ],
              "version" : 123,
              "outOfOffice" : {
                "endDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "active" : true,
                "id" : "aeiou",
                "user" : "",
                "startDate" : "2000-01-23T04:56:07.000+0000",
                "indefinite" : true
              },
              "languagePreference" : "aeiou",
              "profileSkills" : [ "aeiou" ],
              "chat" : {
                "jabberId" : "aeiou"
              },
              "name" : "aeiou",
              "integrationPresence" : "",
              "locations" : [ {
                "notes" : "aeiou",
                "coordinates" : {
                  "key" : 1.3579000000000001069366817318950779736042022705078125
                },
                "locationDefinition" : "",
                "id" : "aeiou",
                "floorplanId" : "aeiou"
              } ],
              "username" : "aeiou",
              "geolocation" : {
                "country" : "aeiou",
                "city" : "aeiou",
                "latitude" : 1.3579000000000001069366817318950779736042022705078125,
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "locations" : [ {
                  "images" : "aeiou",
                  "address" : {
                    "zipcode" : "aeiou",
                    "country" : "aeiou",
                    "city" : "aeiou",
                    "street1" : "aeiou",
                    "countryName" : "aeiou",
                    "state" : "aeiou",
                    "street2" : "aeiou"
                  },
                  "notes" : "aeiou",
                  "floorplanImage" : [ "" ],
                  "addressVerificationDetails" : {
                    "dateStarted" : "2000-01-23T04:56:07.000+0000",
                    "dateFinished" : "2000-01-23T04:56:07.000+0000",
                    "service" : "smartystreets-us",
                    "status" : "aeiou"
                  },
                  "selfUri" : "aeiou",
                  "profileImage" : [ {
                    "imageUri" : "aeiou",
                    "resolution" : "aeiou"
                  } ],
                  "emergencyNumber" : {
                    "number" : "aeiou",
                    "e164" : "aeiou",
                    "type" : "aeiou"
                  },
                  "version" : 123,
                  "path" : [ "aeiou" ],
                  "addressStored" : true,
                  "name" : "aeiou",
                  "id" : "aeiou",
                  "contactUser" : {
                    "selfUri" : "aeiou",
                    "id" : "aeiou"
                  },
                  "state" : "aeiou",
                  "addressVerified" : true
                } ],
                "id" : "aeiou",
                "type" : "aeiou",
                "region" : "aeiou",
                "primary" : true,
                "longitude" : 1.3579000000000001069366817318950779736042022705078125
              }
            },
            "evaluationForm" : {
              "publishedVersions" : {
                "total" : 123456789,
                "pageCount" : 123,
                "pageNumber" : 123,
                "entities" : [ "" ],
                "firstUri" : "aeiou",
                "selfUri" : "aeiou",
                "lastUri" : "aeiou",
                "pageSize" : 123,
                "nextUri" : "aeiou",
                "previousUri" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "contextId" : "aeiou",
              "id" : "aeiou",
              "published" : true,
              "questionGroups" : [ {
                "defaultAnswersToHighest" : true,
                "manualWeight" : true,
                "visibilityCondition" : "",
                "name" : "aeiou",
                "questions" : [ {
                  "helpText" : "aeiou",
                  "commentsRequired" : true,
                  "visibilityCondition" : {
                    "combiningOperation" : "aeiou",
                    "predicates" : [ "{}" ]
                  },
                  "isCritical" : true,
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "type" : "aeiou",
                  "isKill" : true,
                  "naEnabled" : true,
                  "answerOptions" : [ {
                    "id" : "aeiou",
                    "text" : "aeiou",
                    "value" : 123,
                    "assistanceConditions" : [ {
                      "topicIds" : [ "aeiou" ],
                      "operator" : "aeiou"
                    } ]
                  } ]
                } ],
                "weight" : 1.3579000000000001069366817318950779736042022705078125,
                "id" : "aeiou",
                "defaultAnswersToNA" : true,
                "type" : "aeiou",
                "naEnabled" : true
              } ]
            }
          } ],
          "integrationExport" : {
            "shouldExportScreenRecordings" : true,
            "integration" : ""
          }
        }
      }
    },
    "policyErrors" : {
      "policyErrorMessages" : [ {
        "userMessage" : "{}",
        "insertDate" : "2000-01-23T04:56:07.000+0000",
        "errorCode" : "aeiou",
        "correlationId" : "aeiou",
        "userParams" : [ {
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "statusCode" : 123,
        "userParamsMessage" : "aeiou"
      } ]
    },
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "description" : "aeiou",
    "id" : "aeiou",
    "conditions" : {
      "duration" : "",
      "wrapupCodes" : [ "" ],
      "mediaTypes" : [ "aeiou" ],
      "directions" : [ "aeiou" ],
      "dateRanges" : [ "aeiou" ],
      "forUsers" : [ "" ],
      "timeAllowed" : "",
      "forQueues" : [ "" ]
    },
    "actions" : "",
    "enabled" : true,
    "order" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled = true or enabled = false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)

     - returns: RequestBuilder<PolicyEntityListing> 
     */
    open class func getRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil) -> RequestBuilder<PolicyEntityListing> {
        let path = "/api/v2/recording/crossplatform/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "name": name, 
            
            "enabled": enabled, 
            
            "summary": summary, 
            
            "hasErrors": hasErrors
            
        ])

        let requestBuilder: RequestBuilder<PolicyEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingCrossplatformMediaretentionpolicy(policyId: String, completion: @escaping ((_ data: CrossPlatformPolicy?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: policyId)
        requestBuilder.execute { (response: Response<CrossPlatformPolicy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a media retention policy
     
     - GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          }
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<CrossPlatformPolicy> 
     */
    open class func getRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: String) -> RequestBuilder<CrossPlatformPolicy> {
        var path = "/api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CrossPlatformPolicy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the status of the job associated with the job id.
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingJob(jobId: String, completion: @escaping ((_ data: RecordingJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<RecordingJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the status of the job associated with the job id.
     
     - GET /api/v2/recording/jobs/{jobId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalConversations" : 123,
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "failedRecordings" : "aeiou",
  "totalRecordings" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "percentProgress" : 123,
  "totalSkippedRecordings" : 123,
  "totalFailedRecordings" : 123,
  "id" : "aeiou",
  "state" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "recordingJobsQuery" : {
    "conversationQuery" : {
      "evaluationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "surveyFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "startOfDayIntervalMatching" : true,
      "resolutionFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "segmentFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "limit" : 123,
      "orderBy" : "aeiou",
      "interval" : "aeiou",
      "conversationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : {
              "lt" : 1.3579000000000001069366817318950779736042022705078125,
              "gte" : 1.3579000000000001069366817318950779736042022705078125,
              "lte" : 1.3579000000000001069366817318950779736042022705078125,
              "gt" : 1.3579000000000001069366817318950779736042022705078125
            },
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "order" : "aeiou"
    },
    "action" : "aeiou",
    "integrationId" : "aeiou",
    "actionDate" : "2000-01-23T04:56:07.000+0000",
    "includeScreenRecordings" : true
  },
  "totalProcessedRecordings" : 123
}}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<RecordingJob> 
     */
    open class func getRecordingJobWithRequestBuilder(jobId: String) -> RequestBuilder<RecordingJob> {
        var path = "/api/v2/recording/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecordingJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get IDs of recordings that the bulk job failed for
     
     - parameter jobId: (path) jobId 
     - parameter pageSize: (query) Page size. Maximum is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter includeTotal: (query) If false, cursor will be used to locate the page instead of pageNumber. (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingJobFailedrecordings(jobId: String, pageSize: Int? = nil, pageNumber: Int? = nil, includeTotal: Bool? = nil, cursor: String? = nil, completion: @escaping ((_ data: FailedRecordingEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingJobFailedrecordingsWithRequestBuilder(jobId: jobId, pageSize: pageSize, pageNumber: pageNumber, includeTotal: includeTotal, cursor: cursor)
        requestBuilder.execute { (response: Response<FailedRecordingEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get IDs of recordings that the bulk job failed for
     
     - GET /api/v2/recording/jobs/{jobId}/failedrecordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "recording" : "",
    "conversation" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter jobId: (path) jobId 
     - parameter pageSize: (query) Page size. Maximum is 100. (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter includeTotal: (query) If false, cursor will be used to locate the page instead of pageNumber. (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)

     - returns: RequestBuilder<FailedRecordingEntityListing> 
     */
    open class func getRecordingJobFailedrecordingsWithRequestBuilder(jobId: String, pageSize: Int? = nil, pageNumber: Int? = nil, includeTotal: Bool? = nil, cursor: String? = nil) -> RequestBuilder<FailedRecordingEntityListing> {
        var path = "/api/v2/recording/jobs/{jobId}/failedrecordings"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "includeTotal": includeTotal, 
            
            "cursor": cursor
            
        ])

        let requestBuilder: RequestBuilder<FailedRecordingEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortBy_getRecordingJobs: String { 
        case userid = "userId"
        case datecreated = "dateCreated"
    }

    
    
    
    public enum State_getRecordingJobs: String { 
        case fulfilled = "FULFILLED"
        case pending = "PENDING"
        case ready = "READY"
        case processing = "PROCESSING"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
    }

    
    
    
    
    
    public enum JobType_getRecordingJobs: String { 
        case delete = "DELETE"
        case export = "EXPORT"
    }

    
    
    
    
    
    
    /**
     
     Get the status of all jobs within the user's organization
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to userId)
     - parameter state: (query) Filter by state (optional)
     - parameter showOnlyMyJobs: (query) Show only my jobs (optional)
     - parameter jobType: (query) Job Type (Can be left empty for both) (optional)
     - parameter includeTotal: (query) If false, cursor will be used to locate the page instead of pageNumber. (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingJobs(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRecordingJobs? = nil, state: State_getRecordingJobs? = nil, showOnlyMyJobs: Bool? = nil, jobType: JobType_getRecordingJobs? = nil, includeTotal: Bool? = nil, cursor: String? = nil, completion: @escaping ((_ data: RecordingJobEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingJobsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, state: state, showOnlyMyJobs: showOnlyMyJobs, jobType: jobType, includeTotal: includeTotal, cursor: cursor)
        requestBuilder.execute { (response: Response<RecordingJobEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the status of all jobs within the user's organization
     
     - GET /api/v2/recording/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "totalConversations" : 123,
    "selfUri" : "aeiou",
    "errorMessage" : "aeiou",
    "failedRecordings" : "aeiou",
    "totalRecordings" : 123,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "percentProgress" : 123,
    "totalSkippedRecordings" : 123,
    "totalFailedRecordings" : 123,
    "id" : "aeiou",
    "state" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "recordingJobsQuery" : {
      "conversationQuery" : {
        "evaluationFilters" : [ {
          "predicates" : [ "" ],
          "clauses" : [ {
            "predicates" : [ {
              "metric" : "aeiou",
              "range" : "",
              "type" : "aeiou",
              "dimension" : "aeiou",
              "value" : "aeiou",
              "operator" : "aeiou"
            } ],
            "type" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "surveyFilters" : [ {
          "predicates" : [ "" ],
          "clauses" : [ {
            "predicates" : [ {
              "metric" : "aeiou",
              "range" : "",
              "type" : "aeiou",
              "dimension" : "aeiou",
              "value" : "aeiou",
              "operator" : "aeiou"
            } ],
            "type" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "startOfDayIntervalMatching" : true,
        "resolutionFilters" : [ {
          "predicates" : [ "" ],
          "clauses" : [ {
            "predicates" : [ {
              "metric" : "aeiou",
              "range" : "",
              "type" : "aeiou",
              "value" : "aeiou",
              "operator" : "aeiou"
            } ],
            "type" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "segmentFilters" : [ {
          "predicates" : [ "" ],
          "clauses" : [ {
            "predicates" : [ {
              "metric" : "aeiou",
              "propertyType" : "aeiou",
              "property" : "aeiou",
              "range" : "",
              "type" : "aeiou",
              "dimension" : "aeiou",
              "value" : "aeiou",
              "operator" : "aeiou"
            } ],
            "type" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "limit" : 123,
        "orderBy" : "aeiou",
        "interval" : "aeiou",
        "conversationFilters" : [ {
          "predicates" : [ "" ],
          "clauses" : [ {
            "predicates" : [ {
              "metric" : "aeiou",
              "range" : {
                "lt" : 1.3579000000000001069366817318950779736042022705078125,
                "gte" : 1.3579000000000001069366817318950779736042022705078125,
                "lte" : 1.3579000000000001069366817318950779736042022705078125,
                "gt" : 1.3579000000000001069366817318950779736042022705078125
              },
              "type" : "aeiou",
              "dimension" : "aeiou",
              "value" : "aeiou",
              "operator" : "aeiou"
            } ],
            "type" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "order" : "aeiou"
      },
      "action" : "aeiou",
      "integrationId" : "aeiou",
      "actionDate" : "2000-01-23T04:56:07.000+0000",
      "includeScreenRecordings" : true
    },
    "totalProcessedRecordings" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to userId)
     - parameter state: (query) Filter by state (optional)
     - parameter showOnlyMyJobs: (query) Show only my jobs (optional)
     - parameter jobType: (query) Job Type (Can be left empty for both) (optional)
     - parameter includeTotal: (query) If false, cursor will be used to locate the page instead of pageNumber. (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)

     - returns: RequestBuilder<RecordingJobEntityListing> 
     */
    open class func getRecordingJobsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRecordingJobs? = nil, state: State_getRecordingJobs? = nil, showOnlyMyJobs: Bool? = nil, jobType: JobType_getRecordingJobs? = nil, includeTotal: Bool? = nil, cursor: String? = nil) -> RequestBuilder<RecordingJobEntityListing> {
        let path = "/api/v2/recording/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy?.rawValue, 
            
            "state": state?.rawValue, 
            
            "showOnlyMyJobs": showOnlyMyJobs, 
            
            "jobType": jobType?.rawValue, 
            
            "includeTotal": includeTotal, 
            
            "cursor": cursor
            
        ])

        let requestBuilder: RequestBuilder<RecordingJobEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the local encryption settings
     
     - parameter settingsId: (path) Settings Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingLocalkeysSetting(settingsId: String, completion: @escaping ((_ data: LocalEncryptionConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingLocalkeysSettingWithRequestBuilder(settingsId: settingsId)
        requestBuilder.execute { (response: Response<LocalEncryptionConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the local encryption settings
     
     - GET /api/v2/recording/localkeys/settings/{settingsId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "apiId" : "aeiou"
}}]
     
     - parameter settingsId: (path) Settings Id 

     - returns: RequestBuilder<LocalEncryptionConfiguration> 
     */
    open class func getRecordingLocalkeysSettingWithRequestBuilder(settingsId: String) -> RequestBuilder<LocalEncryptionConfiguration> {
        var path = "/api/v2/recording/localkeys/settings/{settingsId}"
        let settingsIdPreEscape = "\(settingsId)"
        let settingsIdPostEscape = settingsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{settingsId}", with: settingsIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocalEncryptionConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     gets a list local key settings data
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingLocalkeysSettings(completion: @escaping ((_ data: LocalEncryptionConfigurationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingLocalkeysSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<LocalEncryptionConfigurationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     gets a list local key settings data
     
     - GET /api/v2/recording/localkeys/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "entities" : [ {
    "apiKey" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "url" : "aeiou",
    "apiId" : "aeiou"
  } ],
  "selfUri" : "aeiou"
}}]

     - returns: RequestBuilder<LocalEncryptionConfigurationListing> 
     */
    open class func getRecordingLocalkeysSettingsWithRequestBuilder() -> RequestBuilder<LocalEncryptionConfigurationListing> {
        let path = "/api/v2/recording/localkeys/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocalEncryptionConfigurationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Gets media retention policy list with query options to filter on name and enabled.
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled = true or enabled = false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingMediaretentionpolicies(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil, completion: @escaping ((_ data: PolicyEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingMediaretentionpoliciesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, enabled: enabled, summary: summary, hasErrors: hasErrors)
        requestBuilder.execute { (response: Response<PolicyEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets media retention policy list with query options to filter on name and enabled.
     
     - GET /api/v2/recording/mediaretentionpolicies
     - for a less verbose response, add summary=true to this endpoint
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "mediaPolicies" : {
      "messagePolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "customerParticipation" : "aeiou",
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "chatPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "duration" : "",
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "emailPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "languages" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "customerParticipation" : "aeiou",
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "callPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "aeiou",
            "id" : "aeiou"
          } ],
          "duration" : {
            "durationTarget" : "aeiou",
            "durationOperator" : "aeiou",
            "durationMode" : "aeiou",
            "durationRange" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "version" : "aeiou"
          } ],
          "directions" : [ "aeiou" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : {
            "timeZoneId" : "aeiou",
            "timeSlots" : [ {
              "startTime" : "aeiou",
              "stopTime" : "aeiou",
              "day" : 123
            } ],
            "empty" : true
          },
          "forQueues" : [ {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "onHoldPrompt" : "",
            "emailInQueueFlow" : "",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : "",
            "callingPartyNumber" : "aeiou",
            "userMemberCount" : 123,
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "messageInQueueFlow" : "",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          } ]
        },
        "actions" : {
          "assignMeteredAssignmentByAgent" : [ {
            "evaluators" : [ "" ],
            "timeInterval" : "",
            "timeZone" : "aeiou",
            "evaluationContextId" : "aeiou",
            "maxNumberEvaluations" : 123,
            "evaluationForm" : ""
          } ],
          "assignCalibrations" : [ {
            "calibrator" : "",
            "expertEvaluator" : "",
            "evaluators" : [ "" ],
            "evaluationForm" : ""
          } ],
          "initiateScreenRecording" : {
            "archiveRetention" : "",
            "recordACW" : true,
            "deleteRetention" : ""
          },
          "retainRecording" : true,
          "assignMeteredEvaluations" : [ {
            "assignToActiveUser" : true,
            "evaluators" : [ "" ],
            "timeInterval" : {
              "hours" : 123,
              "months" : 123,
              "weeks" : 123,
              "days" : 123
            },
            "evaluationContextId" : "aeiou",
            "maxNumberEvaluations" : 123,
            "evaluationForm" : ""
          } ],
          "retentionDuration" : {
            "archiveRetention" : {
              "storageMedium" : "aeiou",
              "days" : 123
            },
            "deleteRetention" : {
              "days" : 123
            }
          },
          "alwaysDelete" : true,
          "assignSurveys" : [ {
            "surveyForm" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "contextId" : "aeiou",
              "id" : "aeiou"
            },
            "sendingDomain" : "aeiou",
            "flow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "inviteTimeInterval" : "aeiou",
            "sendingUser" : "aeiou"
          } ],
          "deleteRecording" : true,
          "mediaTranscriptions" : [ {
            "transcriptionProvider" : "aeiou",
            "displayName" : "aeiou",
            "integrationId" : "aeiou"
          } ],
          "assignEvaluations" : [ {
            "user" : {
              "addresses" : [ "" ],
              "acdAutoAnswer" : true,
              "routingStatus" : {
                "startTime" : "2000-01-23T04:56:07.000+0000",
                "userId" : "aeiou",
                "status" : "aeiou"
              },
              "title" : "aeiou",
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "authorization" : {
                "unusedRoles" : [ "" ],
                "permissions" : [ "aeiou" ],
                "permissionPolicies" : [ {
                  "policyDescription" : "aeiou",
                  "resourceConditionNode" : {
                    "operands" : [ {
                      "type" : "aeiou",
                      "value" : "aeiou"
                    } ],
                    "variableName" : "aeiou",
                    "conjunction" : "aeiou",
                    "terms" : [ "" ],
                    "operator" : "aeiou"
                  },
                  "actionSetKey" : "aeiou",
                  "namedResources" : [ "aeiou" ],
                  "policyName" : "aeiou",
                  "entityName" : "aeiou",
                  "domain" : "aeiou",
                  "allowConditions" : true,
                  "id" : "aeiou",
                  "resourceCondition" : "aeiou",
                  "actionSet" : [ "aeiou" ]
                } ],
                "roles" : [ {
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              },
              "skills" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "skillUri" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "proficiency" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "station" : {
                "defaultStation" : "",
                "lastAssociatedStation" : "",
                "associatedStation" : {
                  "associatedDate" : "2000-01-23T04:56:07.000+0000",
                  "webRtcCallAppearances" : 123,
                  "name" : "aeiou",
                  "defaultUser" : "",
                  "id" : "aeiou",
                  "type" : "aeiou",
                  "associatedUser" : "",
                  "providerInfo" : {
                    "key" : "aeiou"
                  }
                },
                "effectiveStation" : ""
              },
              "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : {
                "presenceDefinition" : {
                  "systemPresence" : "aeiou",
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "source" : "aeiou",
                "message" : "aeiou",
                "primary" : true
              },
              "lastTokenIssued" : {
                "dateIssued" : "2000-01-23T04:56:07.000+0000"
              },
              "email" : "aeiou",
              "images" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "manager" : "",
              "employerInfo" : {
                "employeeType" : "aeiou",
                "dateHire" : "aeiou",
                "employeeId" : "aeiou",
                "officialName" : "aeiou"
              },
              "languages" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou",
                "languageUri" : "aeiou",
                "proficiency" : 1.3579000000000001069366817318950779736042022705078125
              } ],
              "selfUri" : "aeiou",
              "conversationSummary" : {
                "call" : {
                  "enterprise" : "",
                  "contactCenter" : {
                    "acw" : 123,
                    "active" : 123
                  }
                },
                "socialExpression" : "",
                "chat" : "",
                "callback" : "",
                "video" : "",
                "message" : "",
                "userId" : "aeiou",
                "email" : ""
              },
              "groups" : [ {
                "images" : [ "" ],
                "addresses" : [ {
                  "extension" : "aeiou",
                  "address" : "aeiou",
                  "display" : "aeiou",
                  "mediaType" : "aeiou",
                  "type" : "aeiou"
                } ],
                "visibility" : "aeiou",
                "memberCount" : 123456789,
                "selfUri" : "aeiou",
                "description" : "aeiou",
                "dateModified" : "2000-01-23T04:56:07.000+0000",
                "owners" : [ "" ],
                "type" : "aeiou",
                "version" : 123,
                "rulesVisible" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "state" : "aeiou"
              } ],
              "primaryContactInfo" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "countryCode" : "aeiou",
                "display" : "aeiou",
                "integration" : "microsoftteams",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "biography" : {
                "education" : [ {
                  "notes" : "aeiou",
                  "school" : "aeiou",
                  "dateStart" : "2000-01-23T04:56:07.000+0000",
                  "dateEnd" : "2000-01-23T04:56:07.000+0000",
                  "fieldOfStudy" : "aeiou"
                } ],
                "hobbies" : [ "aeiou" ],
                "biography" : "aeiou",
                "interests" : [ "aeiou" ],
                "spouse" : "aeiou"
              },
              "team" : {
                "division" : {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                },
                "dateCreated" : "2000-01-23T04:56:07.000+0000",
                "memberCount" : 123456789,
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "description" : "aeiou",
                "dateModified" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou"
              },
              "certifications" : [ "aeiou" ],
              "version" : 123,
              "outOfOffice" : {
                "endDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "active" : true,
                "id" : "aeiou",
                "user" : "",
                "startDate" : "2000-01-23T04:56:07.000+0000",
                "indefinite" : true
              },
              "languagePreference" : "aeiou",
              "profileSkills" : [ "aeiou" ],
              "chat" : {
                "jabberId" : "aeiou"
              },
              "name" : "aeiou",
              "integrationPresence" : "",
              "locations" : [ {
                "notes" : "aeiou",
                "coordinates" : {
                  "key" : 1.3579000000000001069366817318950779736042022705078125
                },
                "locationDefinition" : "",
                "id" : "aeiou",
                "floorplanId" : "aeiou"
              } ],
              "username" : "aeiou",
              "geolocation" : {
                "country" : "aeiou",
                "city" : "aeiou",
                "latitude" : 1.3579000000000001069366817318950779736042022705078125,
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "locations" : [ {
                  "images" : "aeiou",
                  "address" : {
                    "zipcode" : "aeiou",
                    "country" : "aeiou",
                    "city" : "aeiou",
                    "street1" : "aeiou",
                    "countryName" : "aeiou",
                    "state" : "aeiou",
                    "street2" : "aeiou"
                  },
                  "notes" : "aeiou",
                  "floorplanImage" : [ "" ],
                  "addressVerificationDetails" : {
                    "dateStarted" : "2000-01-23T04:56:07.000+0000",
                    "dateFinished" : "2000-01-23T04:56:07.000+0000",
                    "service" : "smartystreets-us",
                    "status" : "aeiou"
                  },
                  "selfUri" : "aeiou",
                  "profileImage" : [ {
                    "imageUri" : "aeiou",
                    "resolution" : "aeiou"
                  } ],
                  "emergencyNumber" : {
                    "number" : "aeiou",
                    "e164" : "aeiou",
                    "type" : "aeiou"
                  },
                  "version" : 123,
                  "path" : [ "aeiou" ],
                  "addressStored" : true,
                  "name" : "aeiou",
                  "id" : "aeiou",
                  "contactUser" : {
                    "selfUri" : "aeiou",
                    "id" : "aeiou"
                  },
                  "state" : "aeiou",
                  "addressVerified" : true
                } ],
                "id" : "aeiou",
                "type" : "aeiou",
                "region" : "aeiou",
                "primary" : true,
                "longitude" : 1.3579000000000001069366817318950779736042022705078125
              }
            },
            "evaluationForm" : {
              "publishedVersions" : {
                "total" : 123456789,
                "pageCount" : 123,
                "pageNumber" : 123,
                "entities" : [ "" ],
                "firstUri" : "aeiou",
                "selfUri" : "aeiou",
                "lastUri" : "aeiou",
                "pageSize" : 123,
                "nextUri" : "aeiou",
                "previousUri" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "contextId" : "aeiou",
              "id" : "aeiou",
              "published" : true,
              "questionGroups" : [ {
                "defaultAnswersToHighest" : true,
                "manualWeight" : true,
                "visibilityCondition" : "",
                "name" : "aeiou",
                "questions" : [ {
                  "helpText" : "aeiou",
                  "commentsRequired" : true,
                  "visibilityCondition" : {
                    "combiningOperation" : "aeiou",
                    "predicates" : [ "{}" ]
                  },
                  "isCritical" : true,
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "type" : "aeiou",
                  "isKill" : true,
                  "naEnabled" : true,
                  "answerOptions" : [ {
                    "id" : "aeiou",
                    "text" : "aeiou",
                    "value" : 123,
                    "assistanceConditions" : [ {
                      "topicIds" : [ "aeiou" ],
                      "operator" : "aeiou"
                    } ]
                  } ]
                } ],
                "weight" : 1.3579000000000001069366817318950779736042022705078125,
                "id" : "aeiou",
                "defaultAnswersToNA" : true,
                "type" : "aeiou",
                "naEnabled" : true
              } ]
            }
          } ],
          "integrationExport" : {
            "shouldExportScreenRecordings" : true,
            "integration" : ""
          }
        }
      }
    },
    "policyErrors" : {
      "policyErrorMessages" : [ {
        "userMessage" : "{}",
        "insertDate" : "2000-01-23T04:56:07.000+0000",
        "errorCode" : "aeiou",
        "correlationId" : "aeiou",
        "userParams" : [ {
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "statusCode" : 123,
        "userParamsMessage" : "aeiou"
      } ]
    },
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "description" : "aeiou",
    "id" : "aeiou",
    "conditions" : {
      "duration" : "",
      "wrapupCodes" : [ "" ],
      "mediaTypes" : [ "aeiou" ],
      "directions" : [ "aeiou" ],
      "dateRanges" : [ "aeiou" ],
      "forUsers" : [ "" ],
      "timeAllowed" : "",
      "forQueues" : [ "" ]
    },
    "actions" : "",
    "enabled" : true,
    "order" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled = true or enabled = false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)

     - returns: RequestBuilder<PolicyEntityListing> 
     */
    open class func getRecordingMediaretentionpoliciesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil) -> RequestBuilder<PolicyEntityListing> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "name": name, 
            
            "enabled": enabled, 
            
            "summary": summary, 
            
            "hasErrors": hasErrors
            
        ])

        let requestBuilder: RequestBuilder<PolicyEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingMediaretentionpolicy(policyId: String, completion: @escaping ((_ data: Policy?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingMediaretentionpolicyWithRequestBuilder(policyId: policyId)
        requestBuilder.execute { (response: Response<Policy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a media retention policy
     
     - GET /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "assignSurveys" : [ {
          "surveyForm" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "contextId" : "aeiou",
            "id" : "aeiou"
          },
          "sendingDomain" : "aeiou",
          "flow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "inviteTimeInterval" : "aeiou",
          "sendingUser" : "aeiou"
        } ],
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : ""
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<Policy> 
     */
    open class func getRecordingMediaretentionpolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Policy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Policy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get encryption key list
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingRecordingkeys(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: EncryptionKeyEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingRecordingkeysWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<EncryptionKeyEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get encryption key list
     
     - GET /api/v2/recording/recordingkeys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "keyConfigurationType" : "aeiou",
    "keydataSummary" : "aeiou",
    "localEncryptionConfiguration" : {
      "apiKey" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "url" : "aeiou",
      "apiId" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "createDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<EncryptionKeyEntityListing> 
     */
    open class func getRecordingRecordingkeysWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<EncryptionKeyEntityListing> {
        let path = "/api/v2/recording/recordingkeys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<EncryptionKeyEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get key rotation schedule
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingRecordingkeysRotationschedule(completion: @escaping ((_ data: KeyRotationSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingRecordingkeysRotationscheduleWithRequestBuilder()
        requestBuilder.execute { (response: Response<KeyRotationSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get key rotation schedule
     
     - GET /api/v2/recording/recordingkeys/rotationschedule
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "period" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<KeyRotationSchedule> 
     */
    open class func getRecordingRecordingkeysRotationscheduleWithRequestBuilder() -> RequestBuilder<KeyRotationSchedule> {
        let path = "/api/v2/recording/recordingkeys/rotationschedule"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KeyRotationSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the Recording Settings for the Organization
     
     - parameter createDefault: (query) If no settings are found, a new one is created with default values (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingSettings(createDefault: Bool? = nil, completion: @escaping ((_ data: RecordingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingSettingsWithRequestBuilder(createDefault: createDefault)
        requestBuilder.execute { (response: Response<RecordingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the Recording Settings for the Organization
     
     - GET /api/v2/recording/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maxConfigurableScreenRecordingStreams" : 123,
  "maxSimultaneousStreams" : 123
}}]
     
     - parameter createDefault: (query) If no settings are found, a new one is created with default values (optional, default to false)

     - returns: RequestBuilder<RecordingSettings> 
     */
    open class func getRecordingSettingsWithRequestBuilder(createDefault: Bool? = nil) -> RequestBuilder<RecordingSettings> {
        let path = "/api/v2/recording/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "createDefault": createDefault
            
        ])

        let requestBuilder: RequestBuilder<RecordingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieves a paged listing of screen recording sessions
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingsScreensessions(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: ScreenRecordingSessionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRecordingsScreensessionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<ScreenRecordingSessionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves a paged listing of screen recording sessions
     
     - GET /api/v2/recordings/screensessions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "communicationId" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "conversation" : {
      "address" : "aeiou",
      "selfUri" : "aeiou",
      "externalTag" : "aeiou",
      "divisions" : [ {
        "division" : "",
        "entities" : [ "" ]
      } ],
      "maxParticipants" : 123,
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "callerId" : "aeiou",
          "callerIdName" : "aeiou"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            }
          } ],
          "priority" : 123,
          "queue" : ""
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "redacted" : true,
          "answers" : {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true,
                "assistedAnswerId" : "aeiou"
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "transcriptTopics" : [ {
              "duration" : {
                "totalMilliseconds" : 123456789
              },
              "startTimeMilliseconds" : 123456789,
              "confidence" : 123,
              "name" : "aeiou",
              "topicPhrase" : "aeiou",
              "id" : "aeiou",
              "transcriptPhrase" : "aeiou"
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "authorizedActions" : [ "aeiou" ],
          "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rescore" : true,
          "calibration" : {
            "agent" : "",
            "evaluations" : [ "" ],
            "selfUri" : "aeiou",
            "evaluators" : [ "" ],
            "contextId" : "aeiou",
            "averageScore" : 123,
            "calibrator" : "",
            "highScore" : 123,
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "scoringIndex" : "",
            "expertEvaluator" : "",
            "name" : "aeiou",
            "id" : "aeiou",
            "lowScore" : 123,
            "conversation" : "",
            "evaluationForm" : ""
          },
          "conversation" : "",
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : "",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "mediaType" : [ "aeiou" ],
          "neverRelease" : true,
          "agentHasRead" : true,
          "conversationDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "onHoldPrompt" : "",
            "emailInQueueFlow" : "",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : "",
            "callingPartyNumber" : "aeiou",
            "userMemberCount" : 123,
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "messageInQueueFlow" : "",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          },
          "isScoringIndex" : true,
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "authenticated" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "bargedParticipantId" : "aeiou"
      } ]
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ScreenRecordingSessionListing> 
     */
    open class func getRecordingsScreensessionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<ScreenRecordingSessionListing> {
        let path = "/api/v2/recordings/screensessions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<ScreenRecordingSessionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Patch a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRecordingCrossplatformMediaretentionpolicy(policyId: String, body: CrossPlatformPolicyUpdate, completion: @escaping ((_ data: CrossPlatformPolicy?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: policyId, body: body)
        requestBuilder.execute { (response: Response<CrossPlatformPolicy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch a media retention policy
     
     - PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          }
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 

     - returns: RequestBuilder<CrossPlatformPolicy> 
     */
    open class func patchRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: String, body: CrossPlatformPolicyUpdate) -> RequestBuilder<CrossPlatformPolicy> {
        var path = "/api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CrossPlatformPolicy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Patch a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRecordingMediaretentionpolicy(policyId: String, body: PolicyUpdate, completion: @escaping ((_ data: Policy?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRecordingMediaretentionpolicyWithRequestBuilder(policyId: policyId, body: body)
        requestBuilder.execute { (response: Response<Policy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch a media retention policy
     
     - PATCH /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "assignSurveys" : [ {
          "surveyForm" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "contextId" : "aeiou",
            "id" : "aeiou"
          },
          "sendingDomain" : "aeiou",
          "flow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "inviteTimeInterval" : "aeiou",
          "sendingUser" : "aeiou"
        } ],
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : ""
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 

     - returns: RequestBuilder<Policy> 
     */
    open class func patchRecordingMediaretentionpolicyWithRequestBuilder(policyId: String, body: PolicyUpdate) -> RequestBuilder<Policy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Policy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a screen recording session
     
     - parameter recordingSessionId: (path) Screen recording session ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRecordingsScreensession(recordingSessionId: String, body: ScreenRecordingSessionRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRecordingsScreensessionWithRequestBuilder(recordingSessionId: recordingSessionId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a screen recording session
     
     - PATCH /api/v2/recordings/screensessions/{recordingSessionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter recordingSessionId: (path) Screen recording session ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func patchRecordingsScreensessionWithRequestBuilder(recordingSessionId: String, body: ScreenRecordingSessionRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/recordings/screensessions/{recordingSessionId}"
        let recordingSessionIdPreEscape = "\(recordingSessionId)"
        let recordingSessionIdPostEscape = recordingSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingSessionId}", with: recordingSessionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) annotation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationRecordingAnnotations(conversationId: String, recordingId: String, body: Annotation, completion: @escaping ((_ data: Annotation?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationRecordingAnnotationsWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, body: body)
        requestBuilder.execute { (response: Response<Annotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create annotation
     
     - POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "absoluteLocation" : 123456789,
  "recordingLocation" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "absoluteDurationMs" : 123456789,
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "recordingDurationMs" : 123456789
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) annotation 

     - returns: RequestBuilder<Annotation> 
     */
    open class func postConversationRecordingAnnotationsWithRequestBuilder(conversationId: String, recordingId: String, body: Annotation) -> RequestBuilder<Annotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Annotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Submit a batch download request for recordings. Recordings in response will be in their original format/codec - configured in the Trunk configuration.
     
     - parameter body: (body) Job submission criteria 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingBatchrequests(body: BatchDownloadJobSubmission, completion: @escaping ((_ data: BatchDownloadJobSubmissionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingBatchrequestsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BatchDownloadJobSubmissionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Submit a batch download request for recordings. Recordings in response will be in their original format/codec - configured in the Trunk configuration.
     
     - POST /api/v2/recording/batchrequests
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) Job submission criteria 

     - returns: RequestBuilder<BatchDownloadJobSubmissionResult> 
     */
    open class func postRecordingBatchrequestsWithRequestBuilder(body: BatchDownloadJobSubmission) -> RequestBuilder<BatchDownloadJobSubmissionResult> {
        let path = "/api/v2/recording/batchrequests"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchDownloadJobSubmissionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create media retention policy
     
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingCrossplatformMediaretentionpolicies(body: CrossPlatformPolicyCreate, completion: @escaping ((_ data: CrossPlatformPolicy?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CrossPlatformPolicy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create media retention policy
     
     - POST /api/v2/recording/crossplatform/mediaretentionpolicies
     - Policy does not work retroactively
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          }
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter body: (body) Policy 

     - returns: RequestBuilder<CrossPlatformPolicy> 
     */
    open class func postRecordingCrossplatformMediaretentionpoliciesWithRequestBuilder(body: CrossPlatformPolicyCreate) -> RequestBuilder<CrossPlatformPolicy> {
        let path = "/api/v2/recording/crossplatform/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CrossPlatformPolicy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a recording bulk job
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingJobs(body: RecordingJobsQuery, completion: @escaping ((_ data: RecordingJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RecordingJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a recording bulk job
     
     - POST /api/v2/recording/jobs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalConversations" : 123,
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "failedRecordings" : "aeiou",
  "totalRecordings" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "percentProgress" : 123,
  "totalSkippedRecordings" : 123,
  "totalFailedRecordings" : 123,
  "id" : "aeiou",
  "state" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "recordingJobsQuery" : {
    "conversationQuery" : {
      "evaluationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "surveyFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "startOfDayIntervalMatching" : true,
      "resolutionFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "segmentFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "limit" : 123,
      "orderBy" : "aeiou",
      "interval" : "aeiou",
      "conversationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : {
              "lt" : 1.3579000000000001069366817318950779736042022705078125,
              "gte" : 1.3579000000000001069366817318950779736042022705078125,
              "lte" : 1.3579000000000001069366817318950779736042022705078125,
              "gt" : 1.3579000000000001069366817318950779736042022705078125
            },
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "order" : "aeiou"
    },
    "action" : "aeiou",
    "integrationId" : "aeiou",
    "actionDate" : "2000-01-23T04:56:07.000+0000",
    "includeScreenRecordings" : true
  },
  "totalProcessedRecordings" : 123
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<RecordingJob> 
     */
    open class func postRecordingJobsWithRequestBuilder(body: RecordingJobsQuery) -> RequestBuilder<RecordingJob> {
        let path = "/api/v2/recording/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecordingJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     create a local recording key
     
     - parameter body: (body) Local Encryption body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingLocalkeys(body: LocalEncryptionKeyRequest, completion: @escaping ((_ data: EncryptionKey?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingLocalkeysWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EncryptionKey>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     create a local recording key
     
     - POST /api/v2/recording/localkeys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "keyConfigurationType" : "aeiou",
  "keydataSummary" : "aeiou",
  "localEncryptionConfiguration" : {
    "apiKey" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "url" : "aeiou",
    "apiId" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) Local Encryption body 

     - returns: RequestBuilder<EncryptionKey> 
     */
    open class func postRecordingLocalkeysWithRequestBuilder(body: LocalEncryptionKeyRequest) -> RequestBuilder<EncryptionKey> {
        let path = "/api/v2/recording/localkeys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EncryptionKey>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     create settings for local key creation
     
     - parameter body: (body) Local Encryption Configuration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingLocalkeysSettings(body: LocalEncryptionConfiguration, completion: @escaping ((_ data: LocalEncryptionConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingLocalkeysSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LocalEncryptionConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     create settings for local key creation
     
     - POST /api/v2/recording/localkeys/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "apiId" : "aeiou"
}}]
     
     - parameter body: (body) Local Encryption Configuration 

     - returns: RequestBuilder<LocalEncryptionConfiguration> 
     */
    open class func postRecordingLocalkeysSettingsWithRequestBuilder(body: LocalEncryptionConfiguration) -> RequestBuilder<LocalEncryptionConfiguration> {
        let path = "/api/v2/recording/localkeys/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocalEncryptionConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create media retention policy
     
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingMediaretentionpolicies(body: PolicyCreate, completion: @escaping ((_ data: Policy?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingMediaretentionpoliciesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Policy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create media retention policy
     
     - POST /api/v2/recording/mediaretentionpolicies
     - Policy does not work retroactively
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "assignSurveys" : [ {
          "surveyForm" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "contextId" : "aeiou",
            "id" : "aeiou"
          },
          "sendingDomain" : "aeiou",
          "flow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "inviteTimeInterval" : "aeiou",
          "sendingUser" : "aeiou"
        } ],
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : ""
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter body: (body) Policy 

     - returns: RequestBuilder<Policy> 
     */
    open class func postRecordingMediaretentionpoliciesWithRequestBuilder(body: PolicyCreate) -> RequestBuilder<Policy> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Policy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     
     Create encryption key
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingRecordingkeys(completion: @escaping ((_ data: EncryptionKey?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingRecordingkeysWithRequestBuilder()
        requestBuilder.execute { (response: Response<EncryptionKey>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create encryption key
     
     - POST /api/v2/recording/recordingkeys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "keyConfigurationType" : "aeiou",
  "keydataSummary" : "aeiou",
  "localEncryptionConfiguration" : {
    "apiKey" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "url" : "aeiou",
    "apiId" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "createDate" : "2000-01-23T04:56:07.000+0000"
}}]

     - returns: RequestBuilder<EncryptionKey> 
     */
    open class func postRecordingRecordingkeysWithRequestBuilder() -> RequestBuilder<EncryptionKey> {
        let path = "/api/v2/recording/recordingkeys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EncryptionKey>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a list of conversations with protected recordings
     
     - parameter body: (body) conversationIds 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingsDeletionprotection(body: ConversationDeletionProtectionQuery, completion: @escaping ((_ data: [AddressableEntityRef]?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingsDeletionprotectionWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<[AddressableEntityRef]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of conversations with protected recordings
     
     - POST /api/v2/recordings/deletionprotection
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "selfUri" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter body: (body) conversationIds 

     - returns: RequestBuilder<[AddressableEntityRef]> 
     */
    open class func postRecordingsDeletionprotectionWithRequestBuilder(body: ConversationDeletionProtectionQuery) -> RequestBuilder<[AddressableEntityRef]> {
        let path = "/api/v2/recordings/deletionprotection"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AddressableEntityRef]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Acknowledge a screen recording.
     
     - parameter body: (body) AcknowledgeScreenRecordingRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingsScreensessionsAcknowledge(body: AcknowledgeScreenRecordingRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingsScreensessionsAcknowledgeWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Acknowledge a screen recording.
     
     - POST /api/v2/recordings/screensessions/acknowledge
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) AcknowledgeScreenRecordingRequest 

     - returns: RequestBuilder<Void> 
     */
    open class func postRecordingsScreensessionsAcknowledgeWithRequestBuilder(body: AcknowledgeScreenRecordingRequest) -> RequestBuilder<Void> {
        let path = "/api/v2/recordings/screensessions/acknowledge"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Provide meta-data a screen recording.
     
     - parameter body: (body) ScreenRecordingMetaDataRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRecordingsScreensessionsMetadata(body: ScreenRecordingMetaDataRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postRecordingsScreensessionsMetadataWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Provide meta-data a screen recording.
     
     - POST /api/v2/recordings/screensessions/metadata
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) ScreenRecordingMetaDataRequest 

     - returns: RequestBuilder<Void> 
     */
    open class func postRecordingsScreensessionsMetadataWithRequestBuilder(body: ScreenRecordingMetaDataRequest) -> RequestBuilder<Void> {
        let path = "/api/v2/recordings/screensessions/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Updates the retention records on a recording.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) recording 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationRecording(conversationId: String, recordingId: String, body: Recording, completion: @escaping ((_ data: Recording?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationRecordingWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, body: body)
        requestBuilder.execute { (response: Response<Recording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates the retention records on a recording.
     
     - PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}
     - Currently supports updating and removing both archive and delete dates for eligible recordings. A request to change the archival date of an archived recording will result in a restoration of the recording until the new date set. The recording:recording:view permission is required for the recording, as well as either the recording:recording:editRetention or recording:screenRecording:editRetention permissions depending on the type of recording.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
  "maxAllowedRestorationsForOrg" : 123,
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "messagingTranscript" : [ {
    "messageText" : "aeiou",
    "quickReplies" : [ {
      "payload" : "aeiou",
      "isSelected" : true,
      "action" : "aeiou",
      "text" : "aeiou",
      "url" : "aeiou"
    } ],
    "fromUser" : "",
    "fromExternalContact" : {
      "schema" : "",
      "lastName" : "aeiou",
      "workEmail" : "aeiou",
      "customFields" : {
        "key" : "{}"
      },
      "title" : "aeiou",
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "personalEmail" : "aeiou",
      "externalSystemUrl" : "aeiou",
      "id" : "aeiou",
      "otherEmail" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000",
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "homePhone" : "",
      "facebookId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "scopedId" : "aeiou"
        } ]
      },
      "selfUri" : "aeiou",
      "lineId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "userId" : "aeiou"
        } ]
      },
      "externalOrganization" : {
        "schema" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "jsonSchema" : {
            "$schema" : "aeiou",
            "description" : "aeiou",
            "id" : "aeiou",
            "additionalProperties" : "{}",
            "title" : "aeiou",
            "type" : "aeiou",
            "required" : [ "aeiou" ],
            "properties" : {
              "key" : "{}"
            }
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "appliesTo" : [ "aeiou" ],
          "id" : "aeiou",
          "version" : 123,
          "enabled" : true
        },
        "address" : "",
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "companyType" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "aeiou",
        "industry" : "aeiou",
        "employeeCount" : 123456789,
        "tickers" : [ {
          "symbol" : "aeiou",
          "exchange" : "aeiou"
        } ],
        "twitterId" : "",
        "primaryContactId" : "aeiou",
        "tags" : [ "aeiou" ],
        "revenue" : 123456789,
        "phoneNumber" : "",
        "externalSystemUrl" : "aeiou",
        "externalDataSources" : [ {
          "platform" : "aeiou",
          "url" : "aeiou"
        } ],
        "name" : "aeiou",
        "faxNumber" : "",
        "trustor" : {
          "authorization" : {
            "permissions" : [ "aeiou" ]
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : "",
            "title" : "aeiou",
            "division" : "",
            "authorization" : "",
            "skills" : [ "" ],
            "station" : "",
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : "",
            "lastTokenIssued" : "",
            "email" : "aeiou",
            "images" : [ "" ],
            "manager" : "",
            "employerInfo" : "",
            "languages" : [ "" ],
            "conversationSummary" : "",
            "groups" : [ "" ],
            "primaryContactInfo" : [ "" ],
            "biography" : "",
            "team" : "",
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : "",
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "organization" : {
              "defaultCountryCode" : "aeiou",
              "selfUri" : "aeiou",
              "thirdPartyURI" : "aeiou",
              "version" : 123,
              "thirdPartyOrgName" : "aeiou",
              "features" : {
                "key" : true
              },
              "defaultLanguage" : "aeiou",
              "defaultSiteId" : "aeiou",
              "supportURI" : "aeiou",
              "domain" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "voicemailEnabled" : true,
              "productPlatform" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ "" ],
            "username" : "aeiou",
            "geolocation" : ""
          },
          "organization" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "enabled" : true
        },
        "websites" : [ "aeiou" ],
        "id" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000"
      },
      "firstName" : "aeiou",
      "otherPhone" : "",
      "whatsAppId" : {
        "phoneNumber" : "",
        "displayName" : "aeiou"
      },
      "externalDataSources" : [ "" ],
      "middleName" : "aeiou",
      "workPhone" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "salutation" : "aeiou",
      "cellPhone" : "",
      "surveyOptOut" : true
    },
    "buttonResponse" : {
      "messageType" : "aeiou",
      "payload" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou"
    },
    "from" : "aeiou",
    "to" : "aeiou",
    "id" : "aeiou",
    "messageMediaAttachments" : [ {
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "contentLength" : 123456789,
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "messageStickerAttachments" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "story" : {
      "replyToId" : "aeiou",
      "type" : "aeiou",
      "url" : "aeiou"
    }
  } ],
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "path" : "aeiou",
  "outputSizeInBytes" : 123,
  "transcript" : [ {
    "bodyType" : "aeiou",
    "utc" : "aeiou",
    "chat" : "aeiou",
    "senderCommunicationId" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "participantPurpose" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "estimatedTranscodeTimeMs" : 123456789,
  "outputDurationMs" : 123,
  "recordingErrorStatus" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000",
  "actualTranscodeTimeMs" : 123456789,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "sessionId" : "aeiou",
  "users" : [ "" ],
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "recordingFileRole" : "aeiou",
  "endTime" : "aeiou"
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) recording 

     - returns: RequestBuilder<Recording> 
     */
    open class func putConversationRecordingWithRequestBuilder(conversationId: String, recordingId: String, body: Recording) -> RequestBuilder<Recording> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter body: (body) annotation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putConversationRecordingAnnotation(conversationId: String, recordingId: String, annotationId: String, body: Annotation, completion: @escaping ((_ data: Annotation?,_ error: Error?) -> Void)) {
        let requestBuilder = putConversationRecordingAnnotationWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId, body: body)
        requestBuilder.execute { (response: Response<Annotation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update annotation
     
     - PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "absoluteLocation" : 123456789,
  "recordingLocation" : 123456789,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "absoluteDurationMs" : 123456789,
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "webRtcCallAppearances" : 123,
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "integrationPresence" : "",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "recordingDurationMs" : 123456789
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter body: (body) annotation 

     - returns: RequestBuilder<Annotation> 
     */
    open class func putConversationRecordingAnnotationWithRequestBuilder(conversationId: String, recordingId: String, annotationId: String, body: Annotation) -> RequestBuilder<Annotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let recordingIdPreEscape = "\(recordingId)"
        let recordingIdPostEscape = recordingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recordingId}", with: recordingIdPostEscape, options: .literal, range: nil)
        let annotationIdPreEscape = "\(annotationId)"
        let annotationIdPostEscape = annotationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{annotationId}", with: annotationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Annotation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Updates an orphan recording to a regular recording with retention values
     
     - parameter orphanId: (path) Orphan ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrphanrecording(orphanId: String, body: OrphanUpdateRequest? = nil, completion: @escaping ((_ data: Recording?,_ error: Error?) -> Void)) {
        let requestBuilder = putOrphanrecordingWithRequestBuilder(orphanId: orphanId, body: body)
        requestBuilder.execute { (response: Response<Recording>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Updates an orphan recording to a regular recording with retention values
     
     - PUT /api/v2/orphanrecordings/{orphanId}
     - If this operation is successful the orphan will no longer exist. It will be replaced by the resulting recording in the response. This replacement recording is accessible by the normal Recording api.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "originalRecordingStartTime" : "2000-01-23T04:56:07.000+0000",
  "maxAllowedRestorationsForOrg" : 123,
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "messagingTranscript" : [ {
    "messageText" : "aeiou",
    "quickReplies" : [ {
      "payload" : "aeiou",
      "isSelected" : true,
      "action" : "aeiou",
      "text" : "aeiou",
      "url" : "aeiou"
    } ],
    "fromUser" : "",
    "fromExternalContact" : {
      "schema" : "",
      "lastName" : "aeiou",
      "workEmail" : "aeiou",
      "customFields" : {
        "key" : "{}"
      },
      "title" : "aeiou",
      "twitterId" : {
        "profileUrl" : "aeiou",
        "name" : "aeiou",
        "verified" : true,
        "id" : "aeiou",
        "screenName" : "aeiou"
      },
      "personalEmail" : "aeiou",
      "externalSystemUrl" : "aeiou",
      "id" : "aeiou",
      "otherEmail" : "aeiou",
      "createDate" : "2000-01-23T04:56:07.000+0000",
      "address" : {
        "address2" : "aeiou",
        "city" : "aeiou",
        "address1" : "aeiou",
        "countryCode" : "aeiou",
        "postalCode" : "aeiou",
        "state" : "aeiou"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+0000",
      "homePhone" : "",
      "facebookId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "scopedId" : "aeiou"
        } ]
      },
      "selfUri" : "aeiou",
      "lineId" : {
        "displayName" : "aeiou",
        "ids" : [ {
          "userId" : "aeiou"
        } ]
      },
      "externalOrganization" : {
        "schema" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "jsonSchema" : {
            "$schema" : "aeiou",
            "description" : "aeiou",
            "id" : "aeiou",
            "additionalProperties" : "{}",
            "title" : "aeiou",
            "type" : "aeiou",
            "required" : [ "aeiou" ],
            "properties" : {
              "key" : "{}"
            }
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "appliesTo" : [ "aeiou" ],
          "id" : "aeiou",
          "version" : 123,
          "enabled" : true
        },
        "address" : "",
        "modifyDate" : "2000-01-23T04:56:07.000+0000",
        "companyType" : "aeiou",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "aeiou",
        "industry" : "aeiou",
        "employeeCount" : 123456789,
        "tickers" : [ {
          "symbol" : "aeiou",
          "exchange" : "aeiou"
        } ],
        "twitterId" : "",
        "primaryContactId" : "aeiou",
        "tags" : [ "aeiou" ],
        "revenue" : 123456789,
        "phoneNumber" : "",
        "externalSystemUrl" : "aeiou",
        "externalDataSources" : [ {
          "platform" : "aeiou",
          "url" : "aeiou"
        } ],
        "name" : "aeiou",
        "faxNumber" : "",
        "trustor" : {
          "authorization" : {
            "permissions" : [ "aeiou" ]
          },
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : "",
            "title" : "aeiou",
            "division" : "",
            "authorization" : "",
            "skills" : [ "" ],
            "station" : "",
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : "",
            "lastTokenIssued" : "",
            "email" : "aeiou",
            "images" : [ "" ],
            "manager" : "",
            "employerInfo" : "",
            "languages" : [ "" ],
            "conversationSummary" : "",
            "groups" : [ "" ],
            "primaryContactInfo" : [ "" ],
            "biography" : "",
            "team" : "",
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : "",
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : "",
            "organization" : {
              "defaultCountryCode" : "aeiou",
              "selfUri" : "aeiou",
              "thirdPartyURI" : "aeiou",
              "version" : 123,
              "thirdPartyOrgName" : "aeiou",
              "features" : {
                "key" : true
              },
              "defaultLanguage" : "aeiou",
              "defaultSiteId" : "aeiou",
              "supportURI" : "aeiou",
              "domain" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "voicemailEnabled" : true,
              "productPlatform" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ "" ],
            "username" : "aeiou",
            "geolocation" : ""
          },
          "organization" : "",
          "selfUri" : "aeiou",
          "id" : "aeiou",
          "enabled" : true
        },
        "websites" : [ "aeiou" ],
        "id" : "aeiou",
        "createDate" : "2000-01-23T04:56:07.000+0000"
      },
      "firstName" : "aeiou",
      "otherPhone" : "",
      "whatsAppId" : {
        "phoneNumber" : "",
        "displayName" : "aeiou"
      },
      "externalDataSources" : [ "" ],
      "middleName" : "aeiou",
      "workPhone" : {
        "extension" : 123456789,
        "e164" : "aeiou",
        "acceptsSMS" : true,
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "userInput" : "aeiou"
      },
      "salutation" : "aeiou",
      "cellPhone" : "",
      "surveyOptOut" : true
    },
    "buttonResponse" : {
      "messageType" : "aeiou",
      "payload" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou"
    },
    "from" : "aeiou",
    "to" : "aeiou",
    "id" : "aeiou",
    "messageMediaAttachments" : [ {
      "name" : "aeiou",
      "mediaType" : "aeiou",
      "contentLength" : 123456789,
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "messageStickerAttachments" : [ {
      "id" : "aeiou",
      "url" : "aeiou"
    } ],
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "story" : {
      "replyToId" : "aeiou",
      "type" : "aeiou",
      "url" : "aeiou"
    }
  } ],
  "annotations" : [ {
    "absoluteLocation" : 123456789,
    "recordingLocation" : 123456789,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "absoluteDurationMs" : 123456789,
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "webRtcCallAppearances" : 123,
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "integrationPresence" : "",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "recordingDurationMs" : 123456789
  } ],
  "archiveMedium" : "aeiou",
  "exportedDate" : "2000-01-23T04:56:07.000+0000",
  "media" : "aeiou",
  "path" : "aeiou",
  "outputSizeInBytes" : 123,
  "transcript" : [ {
    "bodyType" : "aeiou",
    "utc" : "aeiou",
    "chat" : "aeiou",
    "senderCommunicationId" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "participantPurpose" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "estimatedTranscodeTimeMs" : 123456789,
  "outputDurationMs" : 123,
  "recordingErrorStatus" : "aeiou",
  "startTime" : "aeiou",
  "id" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000",
  "actualTranscodeTimeMs" : 123456789,
  "conversationId" : "aeiou",
  "selfUri" : "aeiou",
  "sessionId" : "aeiou",
  "users" : [ "" ],
  "exportDate" : "2000-01-23T04:56:07.000+0000",
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "recordingFileRole" : "aeiou",
  "endTime" : "aeiou"
}}]
     
     - parameter orphanId: (path) Orphan ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Recording> 
     */
    open class func putOrphanrecordingWithRequestBuilder(orphanId: String, body: OrphanUpdateRequest? = nil) -> RequestBuilder<Recording> {
        var path = "/api/v2/orphanrecordings/{orphanId}"
        let orphanIdPreEscape = "\(orphanId)"
        let orphanIdPostEscape = orphanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orphanId}", with: orphanIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recording>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingCrossplatformMediaretentionpolicy(policyId: String, body: CrossPlatformPolicy, completion: @escaping ((_ data: CrossPlatformPolicy?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: policyId, body: body)
        requestBuilder.execute { (response: Response<CrossPlatformPolicy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a media retention policy
     
     - PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}
     - Policy does not work retroactively
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          }
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 

     - returns: RequestBuilder<CrossPlatformPolicy> 
     */
    open class func putRecordingCrossplatformMediaretentionpolicyWithRequestBuilder(policyId: String, body: CrossPlatformPolicy) -> RequestBuilder<CrossPlatformPolicy> {
        var path = "/api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CrossPlatformPolicy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Execute the recording bulk job.
     
     - parameter jobId: (path) jobId 
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingJob(jobId: String, body: ExecuteRecordingJobsQuery, completion: @escaping ((_ data: RecordingJob?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingJobWithRequestBuilder(jobId: jobId, body: body)
        requestBuilder.execute { (response: Response<RecordingJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Execute the recording bulk job.
     
     - PUT /api/v2/recording/jobs/{jobId}
     - A job must be executed by the same user whom originally created the job.  In addition, the user must have permission to update the recording's retention.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalConversations" : 123,
  "selfUri" : "aeiou",
  "errorMessage" : "aeiou",
  "failedRecordings" : "aeiou",
  "totalRecordings" : 123,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "percentProgress" : 123,
  "totalSkippedRecordings" : 123,
  "totalFailedRecordings" : 123,
  "id" : "aeiou",
  "state" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "recordingJobsQuery" : {
    "conversationQuery" : {
      "evaluationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "surveyFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "startOfDayIntervalMatching" : true,
      "resolutionFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "segmentFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "range" : "",
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "limit" : 123,
      "orderBy" : "aeiou",
      "interval" : "aeiou",
      "conversationFilters" : [ {
        "predicates" : [ "" ],
        "clauses" : [ {
          "predicates" : [ {
            "metric" : "aeiou",
            "range" : {
              "lt" : 1.3579000000000001069366817318950779736042022705078125,
              "gte" : 1.3579000000000001069366817318950779736042022705078125,
              "lte" : 1.3579000000000001069366817318950779736042022705078125,
              "gt" : 1.3579000000000001069366817318950779736042022705078125
            },
            "type" : "aeiou",
            "dimension" : "aeiou",
            "value" : "aeiou",
            "operator" : "aeiou"
          } ],
          "type" : "aeiou"
        } ],
        "type" : "aeiou"
      } ],
      "order" : "aeiou"
    },
    "action" : "aeiou",
    "integrationId" : "aeiou",
    "actionDate" : "2000-01-23T04:56:07.000+0000",
    "includeScreenRecordings" : true
  },
  "totalProcessedRecordings" : 123
}}]
     
     - parameter jobId: (path) jobId 
     - parameter body: (body) query 

     - returns: RequestBuilder<RecordingJob> 
     */
    open class func putRecordingJobWithRequestBuilder(jobId: String, body: ExecuteRecordingJobsQuery) -> RequestBuilder<RecordingJob> {
        var path = "/api/v2/recording/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecordingJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the local encryption settings
     
     - parameter settingsId: (path) Settings Id 
     - parameter body: (body) Local Encryption metadata 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingLocalkeysSetting(settingsId: String, body: LocalEncryptionConfiguration, completion: @escaping ((_ data: LocalEncryptionConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingLocalkeysSettingWithRequestBuilder(settingsId: settingsId, body: body)
        requestBuilder.execute { (response: Response<LocalEncryptionConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the local encryption settings
     
     - PUT /api/v2/recording/localkeys/settings/{settingsId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou",
  "apiId" : "aeiou"
}}]
     
     - parameter settingsId: (path) Settings Id 
     - parameter body: (body) Local Encryption metadata 

     - returns: RequestBuilder<LocalEncryptionConfiguration> 
     */
    open class func putRecordingLocalkeysSettingWithRequestBuilder(settingsId: String, body: LocalEncryptionConfiguration) -> RequestBuilder<LocalEncryptionConfiguration> {
        var path = "/api/v2/recording/localkeys/settings/{settingsId}"
        let settingsIdPreEscape = "\(settingsId)"
        let settingsIdPostEscape = settingsIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{settingsId}", with: settingsIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocalEncryptionConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingMediaretentionpolicy(policyId: String, body: Policy, completion: @escaping ((_ data: Policy?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingMediaretentionpolicyWithRequestBuilder(policyId: policyId, body: body)
        requestBuilder.execute { (response: Response<Policy>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a media retention policy
     
     - PUT /api/v2/recording/mediaretentionpolicies/{policyId}
     - Policy does not work retroactively
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "messagePolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "languages" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "customerParticipation" : "aeiou",
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationMode" : "aeiou",
          "durationRange" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "version" : "aeiou"
        } ],
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        } ]
      },
      "actions" : {
        "assignMeteredAssignmentByAgent" : [ {
          "evaluators" : [ "" ],
          "timeInterval" : "",
          "timeZone" : "aeiou",
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "months" : 123,
            "weeks" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "assignSurveys" : [ {
          "surveyForm" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "contextId" : "aeiou",
            "id" : "aeiou"
          },
          "sendingDomain" : "aeiou",
          "flow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "inviteTimeInterval" : "aeiou",
          "sendingUser" : "aeiou"
        } ],
        "deleteRecording" : true,
        "mediaTranscriptions" : [ {
          "transcriptionProvider" : "aeiou",
          "displayName" : "aeiou",
          "integrationId" : "aeiou"
        } ],
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "acdAutoAnswer" : true,
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "authorization" : {
              "unusedRoles" : [ "" ],
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "allowConditions" : true,
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "skills" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "skillUri" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "webRtcCallAppearances" : 123,
                "name" : "aeiou",
                "defaultUser" : "",
                "id" : "aeiou",
                "type" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "id" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+0000"
            },
            "email" : "aeiou",
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "manager" : "",
            "employerInfo" : {
              "employeeType" : "aeiou",
              "dateHire" : "aeiou",
              "employeeId" : "aeiou",
              "officialName" : "aeiou"
            },
            "languages" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou",
              "languageUri" : "aeiou",
              "proficiency" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "message" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "groups" : [ {
              "images" : [ "" ],
              "addresses" : [ {
                "extension" : "aeiou",
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "visibility" : "aeiou",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "owners" : [ "" ],
              "type" : "aeiou",
              "version" : 123,
              "rulesVisible" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "state" : "aeiou"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "countryCode" : "aeiou",
              "display" : "aeiou",
              "integration" : "microsoftteams",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "aeiou",
                "school" : "aeiou",
                "dateStart" : "2000-01-23T04:56:07.000+0000",
                "dateEnd" : "2000-01-23T04:56:07.000+0000",
                "fieldOfStudy" : "aeiou"
              } ],
              "hobbies" : [ "aeiou" ],
              "biography" : "aeiou",
              "interests" : [ "aeiou" ],
              "spouse" : "aeiou"
            },
            "team" : {
              "division" : {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              },
              "dateCreated" : "2000-01-23T04:56:07.000+0000",
              "memberCount" : 123456789,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "description" : "aeiou",
              "dateModified" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou"
            },
            "certifications" : [ "aeiou" ],
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000",
              "indefinite" : true
            },
            "languagePreference" : "aeiou",
            "profileSkills" : [ "aeiou" ],
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "integrationPresence" : "",
            "locations" : [ {
              "notes" : "aeiou",
              "coordinates" : {
                "key" : 1.3579000000000001069366817318950779736042022705078125
              },
              "locationDefinition" : "",
              "id" : "aeiou",
              "floorplanId" : "aeiou"
            } ],
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "locations" : [ {
                "images" : "aeiou",
                "address" : {
                  "zipcode" : "aeiou",
                  "country" : "aeiou",
                  "city" : "aeiou",
                  "street1" : "aeiou",
                  "countryName" : "aeiou",
                  "state" : "aeiou",
                  "street2" : "aeiou"
                },
                "notes" : "aeiou",
                "floorplanImage" : [ "" ],
                "addressVerificationDetails" : {
                  "dateStarted" : "2000-01-23T04:56:07.000+0000",
                  "dateFinished" : "2000-01-23T04:56:07.000+0000",
                  "service" : "smartystreets-us",
                  "status" : "aeiou"
                },
                "selfUri" : "aeiou",
                "profileImage" : [ {
                  "imageUri" : "aeiou",
                  "resolution" : "aeiou"
                } ],
                "emergencyNumber" : {
                  "number" : "aeiou",
                  "e164" : "aeiou",
                  "type" : "aeiou"
                },
                "version" : 123,
                "path" : [ "aeiou" ],
                "addressStored" : true,
                "name" : "aeiou",
                "id" : "aeiou",
                "contactUser" : {
                  "selfUri" : "aeiou",
                  "id" : "aeiou"
                },
                "state" : "aeiou",
                "addressVerified" : true
              } ],
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123,
                  "assistanceConditions" : [ {
                    "topicIds" : [ "aeiou" ],
                    "operator" : "aeiou"
                  } ]
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ],
        "integrationExport" : {
          "shouldExportScreenRecordings" : true,
          "integration" : ""
        }
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy 

     - returns: RequestBuilder<Policy> 
     */
    open class func putRecordingMediaretentionpolicyWithRequestBuilder(policyId: String, body: Policy) -> RequestBuilder<Policy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        let policyIdPreEscape = "\(policyId)"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Policy>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update key rotation schedule
     
     - parameter body: (body) KeyRotationSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingRecordingkeysRotationschedule(body: KeyRotationSchedule, completion: @escaping ((_ data: KeyRotationSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingRecordingkeysRotationscheduleWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<KeyRotationSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update key rotation schedule
     
     - PUT /api/v2/recording/recordingkeys/rotationschedule
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "period" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) KeyRotationSchedule 

     - returns: RequestBuilder<KeyRotationSchedule> 
     */
    open class func putRecordingRecordingkeysRotationscheduleWithRequestBuilder(body: KeyRotationSchedule) -> RequestBuilder<KeyRotationSchedule> {
        let path = "/api/v2/recording/recordingkeys/rotationschedule"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KeyRotationSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update the Recording Settings for the Organization
     
     - parameter body: (body) Recording settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingSettings(body: RecordingSettings, completion: @escaping ((_ data: RecordingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RecordingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the Recording Settings for the Organization
     
     - PUT /api/v2/recording/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "maxConfigurableScreenRecordingStreams" : 123,
  "maxSimultaneousStreams" : 123
}}]
     
     - parameter body: (body) Recording settings 

     - returns: RequestBuilder<RecordingSettings> 
     */
    open class func putRecordingSettingsWithRequestBuilder(body: RecordingSettings) -> RequestBuilder<RecordingSettings> {
        let path = "/api/v2/recording/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecordingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Apply or revoke recording protection for conversations
     
     - parameter protect: (query) Check for apply, uncheck for revoke (each action requires the respective permission) (optional, default to true)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRecordingsDeletionprotection(protect: Bool? = nil, body: ConversationDeletionProtectionQuery? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putRecordingsDeletionprotectionWithRequestBuilder(protect: protect, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Apply or revoke recording protection for conversations
     
     - PUT /api/v2/recordings/deletionprotection
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter protect: (query) Check for apply, uncheck for revoke (each action requires the respective permission) (optional, default to true)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putRecordingsDeletionprotectionWithRequestBuilder(protect: Bool? = nil, body: ConversationDeletionProtectionQuery? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/recordings/deletionprotection"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "protect": protect
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
