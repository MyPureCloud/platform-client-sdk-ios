//
// TelephonyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TelephonyAPI {
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Fetch SIP metadata
     
     - parameter dateStart: (query) Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ 
     - parameter dateEnd: (query) End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ 
     - parameter callId: (query) unique identification of the placed call (optional)
     - parameter toUser: (query) User to who the call was placed (optional)
     - parameter fromUser: (query) user who placed the call (optional)
     - parameter conversationId: (query) Unique identification of the conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTelephonySiptraces(dateStart: Date, dateEnd: Date, callId: String? = nil, toUser: String? = nil, fromUser: String? = nil, conversationId: String? = nil, completion: @escaping ((_ data: SipSearchResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getTelephonySiptracesWithRequestBuilder(dateStart: dateStart, dateEnd: dateEnd, callId: callId, toUser: toUser, fromUser: fromUser, conversationId: conversationId)
        requestBuilder.execute { (response: Response<SipSearchResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Fetch SIP metadata
     
     - GET /api/v2/telephony/siptraces
     - Fetch SIP metadata that matches a given parameter. If exactMatch is passed as a parameter only sip records that have exactly that value will be returned. For example, some records contain conversationId but not all relevant records for that call may contain the conversationId so only a partial view of the call will be reflected
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23T04:56:07.000+0000",
    "callid" : "aeiou",
    "msg" : "aeiou",
    "reason" : "aeiou",
    "sourcePort" : "aeiou",
    "fromTag" : "aeiou",
    "auth" : "aeiou",
    "via1Branch" : "aeiou",
    "toTag" : "aeiou",
    "type" : "aeiou",
    "ruri" : "aeiou",
    "destinationIp" : "aeiou",
    "ruriDomain" : "aeiou",
    "contactIp" : "aeiou",
    "id" : "aeiou",
    "contentType" : "aeiou",
    "method" : "aeiou",
    "rtpStat" : "aeiou",
    "toDomain" : "aeiou",
    "contactPort" : "aeiou",
    "originatorIp" : "aeiou",
    "fromDomain" : "aeiou",
    "node" : "aeiou",
    "cseq" : "aeiou",
    "sourceIp" : "aeiou",
    "proto" : "aeiou",
    "name" : "aeiou",
    "diversion" : "aeiou",
    "dbnode" : "aeiou",
    "microTs" : "aeiou",
    "trans" : "aeiou",
    "sourceAlias" : "aeiou",
    "destinationPort" : "aeiou",
    "fromUser" : "aeiou",
    "authUser" : "aeiou",
    "destinationAlias" : "aeiou",
    "toUser" : "aeiou",
    "participantId" : "aeiou",
    "ruriUser" : "aeiou",
    "via1" : "aeiou",
    "correlationId" : "aeiou",
    "pidUser" : "aeiou",
    "conversationId" : "aeiou",
    "callidAleg" : "aeiou",
    "selfUri" : "aeiou",
    "userAgent" : "aeiou",
    "replyReason" : "aeiou",
    "milliTs" : "aeiou",
    "contactUser" : "aeiou",
    "originatorPort" : "aeiou",
    "family" : "aeiou"
  } ],
  "auth" : "aeiou",
  "selfUri" : "aeiou",
  "count" : 123,
  "id" : "aeiou",
  "message" : "aeiou",
  "status" : 123,
  "sid" : "aeiou"
}}]
     
     - parameter dateStart: (query) Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ 
     - parameter dateEnd: (query) End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ 
     - parameter callId: (query) unique identification of the placed call (optional)
     - parameter toUser: (query) User to who the call was placed (optional)
     - parameter fromUser: (query) user who placed the call (optional)
     - parameter conversationId: (query) Unique identification of the conversation (optional)

     - returns: RequestBuilder<SipSearchResult> 
     */
    open class func getTelephonySiptracesWithRequestBuilder(dateStart: Date, dateEnd: Date, callId: String? = nil, toUser: String? = nil, fromUser: String? = nil, conversationId: String? = nil) -> RequestBuilder<SipSearchResult> {
        let path = "/api/v2/telephony/siptraces"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "callId": callId, 
            
            "toUser": toUser, 
            
            "fromUser": fromUser, 
            
            "conversationId": conversationId, 
            
            "dateStart": dateStart.encodeToJSON(), 
            
            "dateEnd": dateEnd.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SipSearchResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get signed S3 URL for a pcap download
     
     - parameter downloadId: (path) unique id for the downloaded file in S3 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTelephonySiptracesDownloadDownloadId(downloadId: String, completion: @escaping ((_ data: SignedUrlResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getTelephonySiptracesDownloadDownloadIdWithRequestBuilder(downloadId: downloadId)
        requestBuilder.execute { (response: Response<SignedUrlResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get signed S3 URL for a pcap download
     
     - GET /api/v2/telephony/siptraces/download/{downloadId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter downloadId: (path) unique id for the downloaded file in S3 

     - returns: RequestBuilder<SignedUrlResponse> 
     */
    open class func getTelephonySiptracesDownloadDownloadIdWithRequestBuilder(downloadId: String) -> RequestBuilder<SignedUrlResponse> {
        var path = "/api/v2/telephony/siptraces/download/{downloadId}"
        let downloadIdPreEscape = "\(downloadId)"
        let downloadIdPostEscape = downloadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{downloadId}", with: downloadIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SignedUrlResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Request a download of a pcap file to S3
     
     - parameter sIPSearchPublicRequest: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTelephonySiptracesDownload(sIPSearchPublicRequest: SIPSearchPublicRequest, completion: @escaping ((_ data: SipDownloadResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postTelephonySiptracesDownloadWithRequestBuilder(sIPSearchPublicRequest: sIPSearchPublicRequest)
        requestBuilder.execute { (response: Response<SipDownloadResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Request a download of a pcap file to S3
     
     - POST /api/v2/telephony/siptraces/download
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "downloadId" : "aeiou",
  "documentId" : "aeiou"
}}]
     
     - parameter sIPSearchPublicRequest: (body)  

     - returns: RequestBuilder<SipDownloadResponse> 
     */
    open class func postTelephonySiptracesDownloadWithRequestBuilder(sIPSearchPublicRequest: SIPSearchPublicRequest) -> RequestBuilder<SipDownloadResponse> {
        let path = "/api/v2/telephony/siptraces/download"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: sIPSearchPublicRequest)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SipDownloadResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
