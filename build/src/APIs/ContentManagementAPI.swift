//
// ContentManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ContentManagementAPI {
    
    
    
    
    
    /**
     
     Delete a document.
     
     - parameter documentId: (path) Document ID 
     - parameter _override: (query) Override any lock on the document (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementDocument(documentId: String, _override: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementDocumentWithRequestBuilder(documentId: documentId, _override: _override)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a document.
     
     - DELETE /api/v2/contentmanagement/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter documentId: (path) Document ID 
     - parameter _override: (query) Override any lock on the document (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementDocumentWithRequestBuilder(documentId: String, _override: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "override": _override
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Deletes an existing share.
     
     - parameter shareId: (path) Share ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementShare(shareId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementShareWithRequestBuilder(shareId: shareId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Deletes an existing share.
     
     - DELETE /api/v2/contentmanagement/shares/{shareId}
     - This revokes sharing rights specified in the share record
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter shareId: (path) Share ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementShareWithRequestBuilder(shareId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/shares/{shareId}"
        let shareIdPreEscape = "\(shareId)"
        let shareIdPostEscape = shareIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shareId}", with: shareIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Cancel the command for this status
     
     - parameter statusId: (path) Status ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementStatusStatusId(statusId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementStatusStatusIdWithRequestBuilder(statusId: statusId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Cancel the command for this status
     
     - DELETE /api/v2/contentmanagement/status/{statusId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter statusId: (path) Status ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementStatusStatusIdWithRequestBuilder(statusId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/status/{statusId}"
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a workspace
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter moveChildrenToWorkspaceId: (query) New location for objects in deleted workspace. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementWorkspace(workspaceId: String, moveChildrenToWorkspaceId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementWorkspaceWithRequestBuilder(workspaceId: workspaceId, moveChildrenToWorkspaceId: moveChildrenToWorkspaceId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a workspace
     
     - DELETE /api/v2/contentmanagement/workspaces/{workspaceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter moveChildrenToWorkspaceId: (query) New location for objects in deleted workspace. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementWorkspaceWithRequestBuilder(workspaceId: String, moveChildrenToWorkspaceId: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "moveChildrenToWorkspaceId": moveChildrenToWorkspaceId
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a member from a workspace
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementWorkspaceMember(workspaceId: String, memberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: workspaceId, memberId: memberId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a member from a workspace
     
     - DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: String, memberId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete workspace tag
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContentmanagementWorkspaceTagvalue(workspaceId: String, tagId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: workspaceId, tagId: tagId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete workspace tag
     
     - DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}
     - Delete a tag from a workspace. Will remove this tag from all documents.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: String, tagId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tagId}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getContentmanagementDocument: String { 
        case lockinfo = "lockInfo"
        case acl = "acl"
        case workspace = "workspace"
    }

    
    
    /**
     
     Get a document.
     
     - parameter documentId: (path) Document ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementDocument(documentId: String, expand: [String]? = nil, completion: @escaping ((_ data: Document?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementDocumentWithRequestBuilder(documentId: documentId, expand: expand)
        requestBuilder.execute { (response: Response<Document>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a document.
     
     - GET /api/v2/contentmanagement/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "downloadSharingUri" : "aeiou",
  "dateUploaded" : "2000-01-23T04:56:07.000+0000",
  "uploadStatus" : "",
  "acl" : [ "aeiou" ],
  "uploadMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "systemType" : "aeiou",
  "changeNumber" : 123,
  "id" : "aeiou",
  "tagValues" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "inUse" : true,
    "id" : "aeiou",
    "acl" : [ "aeiou" ]
  } ],
  "uploadedBy" : "",
  "contentType" : "aeiou",
  "callerAddress" : "aeiou",
  "pageCount" : 123456789,
  "read" : true,
  "sharingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ],
  "receiverAddress" : "aeiou",
  "lockInfo" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "lockedBy" : "",
    "dateExpires" : "2000-01-23T04:56:07.000+0000",
    "action" : "aeiou"
  },
  "filename" : "aeiou",
  "createdBy" : "",
  "contentUri" : "aeiou",
  "name" : "aeiou",
  "contentLength" : 123456789,
  "attributes" : [ {
    "values" : [ "aeiou" ],
    "attribute" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "version" : 123
    }
  } ],
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "width" : 123,
    "resolution" : "aeiou",
    "height" : 123
  } ],
  "sharingUri" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<Document> 
     */
    open class func getContentmanagementDocumentWithRequestBuilder(documentId: String, expand: [String]? = nil) -> RequestBuilder<Document> {
        var path = "/api/v2/contentmanagement/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Document>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get a list of audits for a document.
     
     - parameter documentId: (path) Document ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter transactionFilter: (query) Transaction filter (optional)
     - parameter level: (query) level (optional, default to USER)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementDocumentAudits(documentId: String, pageSize: Int? = nil, pageNumber: Int? = nil, transactionFilter: String? = nil, level: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: DocumentAuditEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementDocumentAuditsWithRequestBuilder(documentId: documentId, pageSize: pageSize, pageNumber: pageNumber, transactionFilter: transactionFilter, level: level, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DocumentAuditEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of audits for a document.
     
     - GET /api/v2/contentmanagement/documents/{documentId}/audits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : "",
    "level" : "aeiou",
    "transactionInitiator" : true,
    "selfUri" : "aeiou",
    "changes" : [ {
      "property" : "aeiou",
      "newValues" : [ "aeiou" ],
      "oldValues" : [ "aeiou" ],
      "entity" : ""
    } ],
    "serviceName" : "aeiou",
    "transactionId" : "aeiou",
    "actionContext" : "aeiou",
    "application" : "aeiou",
    "name" : "aeiou",
    "action" : "aeiou",
    "id" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "entity" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "action" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou"
    },
    "timestamp" : "2000-01-23T04:56:07.000+0000",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter transactionFilter: (query) Transaction filter (optional)
     - parameter level: (query) level (optional, default to USER)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional, default to ascending)

     - returns: RequestBuilder<DocumentAuditEntityListing> 
     */
    open class func getContentmanagementDocumentAuditsWithRequestBuilder(documentId: String, pageSize: Int? = nil, pageNumber: Int? = nil, transactionFilter: String? = nil, level: String? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<DocumentAuditEntityListing> {
        var path = "/api/v2/contentmanagement/documents/{documentId}/audits"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "transactionFilter": transactionFilter, 
            
            "level": level, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<DocumentAuditEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Disposition_getContentmanagementDocumentContent: String { 
        case attachment = "attachment"
        case inline = "inline"
    }

    
    
    
    
    /**
     
     Download a document.
     
     - parameter documentId: (path) Document ID 
     - parameter disposition: (query) Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     - parameter contentType: (query) The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementDocumentContent(documentId: String, disposition: Disposition_getContentmanagementDocumentContent? = nil, contentType: String? = nil, completion: @escaping ((_ data: DownloadResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementDocumentContentWithRequestBuilder(documentId: documentId, disposition: disposition, contentType: contentType)
        requestBuilder.execute { (response: Response<DownloadResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Download a document.
     
     - GET /api/v2/contentmanagement/documents/{documentId}/content
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contentLocationUri" : "aeiou",
  "imageUri" : "aeiou",
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "width" : 123,
    "resolution" : "aeiou",
    "height" : 123
  } ]
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter disposition: (query) Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     - parameter contentType: (query) The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav (optional)

     - returns: RequestBuilder<DownloadResponse> 
     */
    open class func getContentmanagementDocumentContentWithRequestBuilder(documentId: String, disposition: Disposition_getContentmanagementDocumentContent? = nil, contentType: String? = nil) -> RequestBuilder<DownloadResponse> {
        var path = "/api/v2/contentmanagement/documents/{documentId}/content"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "disposition": disposition?.rawValue, 
            
            "contentType": contentType
            
        ])

        let requestBuilder: RequestBuilder<DownloadResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getContentmanagementDocuments: String { 
        case acl = "acl"
        case workspace = "workspace"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Get a list of documents.
     
     - parameter workspaceId: (query) Workspace ID 
     - parameter name: (query) Name (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementDocuments(workspaceId: String, name: String? = nil, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: DocumentEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementDocumentsWithRequestBuilder(workspaceId: workspaceId, name: name, expand: expand, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DocumentEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of documents.
     
     - GET /api/v2/contentmanagement/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "downloadSharingUri" : "aeiou",
    "dateUploaded" : "2000-01-23T04:56:07.000+0000",
    "uploadStatus" : "",
    "acl" : [ "aeiou" ],
    "uploadMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "systemType" : "aeiou",
    "changeNumber" : 123,
    "id" : "aeiou",
    "tagValues" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "inUse" : true,
      "id" : "aeiou",
      "acl" : [ "aeiou" ]
    } ],
    "uploadedBy" : "",
    "contentType" : "aeiou",
    "callerAddress" : "aeiou",
    "pageCount" : 123456789,
    "read" : true,
    "sharingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "tags" : [ "aeiou" ],
    "receiverAddress" : "aeiou",
    "lockInfo" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "lockedBy" : "",
      "dateExpires" : "2000-01-23T04:56:07.000+0000",
      "action" : "aeiou"
    },
    "filename" : "aeiou",
    "createdBy" : "",
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123456789,
    "attributes" : [ {
      "values" : [ "aeiou" ],
      "attribute" : {
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "version" : 123
      }
    } ],
    "thumbnails" : [ {
      "imageUri" : "aeiou",
      "width" : 123,
      "resolution" : "aeiou",
      "height" : 123
    } ],
    "sharingUri" : "aeiou",
    "uploadDestinationUri" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter workspaceId: (query) Workspace ID 
     - parameter name: (query) Name (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)

     - returns: RequestBuilder<DocumentEntityListing> 
     */
    open class func getContentmanagementDocumentsWithRequestBuilder(workspaceId: String, name: String? = nil, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<DocumentEntityListing> {
        let path = "/api/v2/contentmanagement/documents"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "workspaceId": workspaceId, 
            
            "name": name, 
            
            "expand": expand, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<DocumentEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum Expand_getContentmanagementQuery: String { 
        case acl = "acl"
        case workspace = "workspace"
    }

    
    
    /**
     
     Query content
     
     - parameter queryPhrase: (query) Phrase tokens are ANDed together over all searchable fields 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional, default to name)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementQuery(queryPhrase: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: QueryResults?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementQueryWithRequestBuilder(queryPhrase: queryPhrase, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<QueryResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query content
     
     - GET /api/v2/contentmanagement/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facetInfo" : {
    "attributes" : [ {
      "name" : "aeiou",
      "count" : 123,
      "id" : "aeiou"
    } ],
    "facets" : [ {
      "other" : 123456789,
      "total" : 123456789,
      "terms" : [ {
        "name" : "aeiou",
        "count" : 123456789,
        "term" : "aeiou",
        "id" : "aeiou",
        "time" : "2000-01-23T04:56:07.000+0000",
        "key" : 123456789
      } ],
      "termCount" : 123,
      "missing" : 123456789,
      "termType" : "aeiou",
      "attribute" : {
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "statistics" : {
        "dateMax" : "2000-01-23T04:56:07.000+0000",
        "stdDeviation" : 1.3579000000000001069366817318950779736042022705078125,
        "dateMin" : "2000-01-23T04:56:07.000+0000",
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "mean" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789
      }
    } ]
  },
  "results" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "body" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  }
}}]
     
     - parameter queryPhrase: (query) Phrase tokens are ANDed together over all searchable fields 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional, default to name)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<QueryResults> 
     */
    open class func getContentmanagementQueryWithRequestBuilder(queryPhrase: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<QueryResults> {
        let path = "/api/v2/contentmanagement/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder, 
            
            "queryPhrase": queryPhrase, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<QueryResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a Security Profile
     
     - parameter securityProfileId: (path) Security Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementSecurityprofile(securityProfileId: String, completion: @escaping ((_ data: SecurityProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementSecurityprofileWithRequestBuilder(securityProfileId: securityProfileId)
        requestBuilder.execute { (response: Response<SecurityProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a Security Profile
     
     - GET /api/v2/contentmanagement/securityprofiles/{securityProfileId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "permissions" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter securityProfileId: (path) Security Profile Id 

     - returns: RequestBuilder<SecurityProfile> 
     */
    open class func getContentmanagementSecurityprofileWithRequestBuilder(securityProfileId: String) -> RequestBuilder<SecurityProfile> {
        var path = "/api/v2/contentmanagement/securityprofiles/{securityProfileId}"
        let securityProfileIdPreEscape = "\(securityProfileId)"
        let securityProfileIdPostEscape = securityProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{securityProfileId}", with: securityProfileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SecurityProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get a List of Security Profiles
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementSecurityprofiles(completion: @escaping ((_ data: SecurityProfileEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementSecurityprofilesWithRequestBuilder()
        requestBuilder.execute { (response: Response<SecurityProfileEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a List of Security Profiles
     
     - GET /api/v2/contentmanagement/securityprofiles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "permissions" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<SecurityProfileEntityListing> 
     */
    open class func getContentmanagementSecurityprofilesWithRequestBuilder() -> RequestBuilder<SecurityProfileEntityListing> {
        let path = "/api/v2/contentmanagement/securityprofiles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SecurityProfileEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getContentmanagementShare: String { 
        case member = "member"
    }

    
    
    /**
     
     Retrieve details about an existing share.
     
     - parameter shareId: (path) Share ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementShare(shareId: String, expand: [String]? = nil, completion: @escaping ((_ data: Share?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementShareWithRequestBuilder(shareId: shareId, expand: expand)
        requestBuilder.execute { (response: Response<Share>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve details about an existing share.
     
     - GET /api/v2/contentmanagement/shares/{shareId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : "",
  "sharedEntity" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sharedEntityType" : "aeiou",
  "sharedBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "member" : "",
  "id" : "aeiou",
  "memberType" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "group" : ""
}}]
     
     - parameter shareId: (path) Share ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<Share> 
     */
    open class func getContentmanagementShareWithRequestBuilder(shareId: String, expand: [String]? = nil) -> RequestBuilder<Share> {
        var path = "/api/v2/contentmanagement/shares/{shareId}"
        let shareIdPreEscape = "\(shareId)"
        let shareIdPostEscape = shareIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{shareId}", with: shareIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Share>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Disposition_getContentmanagementSharedSharedId: String { 
        case attachment = "attachment"
        case inline = "inline"
        case _none = "none"
    }

    
    
    
    
    
    public enum Expand_getContentmanagementSharedSharedId: String { 
        case documentAcl = "document.acl"
    }

    
    
    /**
     
     Get shared documents. Securely download a shared document.
     
     - parameter sharedId: (path) Shared ID 
     - parameter redirect: (query) Turn on or off redirect (optional, default to true)
     - parameter disposition: (query) Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     - parameter contentType: (query) The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav (optional)
     - parameter expand: (query) Expand some document fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementSharedSharedId(sharedId: String, redirect: Bool? = nil, disposition: Disposition_getContentmanagementSharedSharedId? = nil, contentType: String? = nil, expand: Expand_getContentmanagementSharedSharedId? = nil, completion: @escaping ((_ data: SharedResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementSharedSharedIdWithRequestBuilder(sharedId: sharedId, redirect: redirect, disposition: disposition, contentType: contentType, expand: expand)
        requestBuilder.execute { (response: Response<SharedResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get shared documents. Securely download a shared document.
     
     - GET /api/v2/contentmanagement/shared/{sharedId}
     - This method requires the download sharing URI obtained in the get document response (downloadSharingUri). Documents may be shared between users in the same workspace. Documents may also be shared between any user by creating a content management share.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "viewUri" : "aeiou",
  "document" : {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "downloadSharingUri" : "aeiou",
    "dateUploaded" : "2000-01-23T04:56:07.000+0000",
    "uploadStatus" : "",
    "acl" : [ "aeiou" ],
    "uploadMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "systemType" : "aeiou",
    "changeNumber" : 123,
    "id" : "aeiou",
    "tagValues" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "inUse" : true,
      "id" : "aeiou",
      "acl" : [ "aeiou" ]
    } ],
    "uploadedBy" : "",
    "contentType" : "aeiou",
    "callerAddress" : "aeiou",
    "pageCount" : 123456789,
    "read" : true,
    "sharingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "tags" : [ "aeiou" ],
    "receiverAddress" : "aeiou",
    "lockInfo" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "lockedBy" : "",
      "dateExpires" : "2000-01-23T04:56:07.000+0000",
      "action" : "aeiou"
    },
    "filename" : "aeiou",
    "createdBy" : "",
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123456789,
    "attributes" : [ {
      "values" : [ "aeiou" ],
      "attribute" : {
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "version" : 123
      }
    } ],
    "thumbnails" : [ {
      "imageUri" : "aeiou",
      "width" : 123,
      "resolution" : "aeiou",
      "height" : 123
    } ],
    "sharingUri" : "aeiou",
    "uploadDestinationUri" : "aeiou"
  },
  "share" : {
    "workspace" : "",
    "sharedEntity" : "",
    "sharedEntityType" : "aeiou",
    "sharedBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : "",
    "id" : "aeiou",
    "memberType" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "group" : ""
  },
  "id" : "aeiou",
  "downloadUri" : "aeiou"
}}]
     
     - parameter sharedId: (path) Shared ID 
     - parameter redirect: (query) Turn on or off redirect (optional, default to true)
     - parameter disposition: (query) Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     - parameter contentType: (query) The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav (optional)
     - parameter expand: (query) Expand some document fields (optional)

     - returns: RequestBuilder<SharedResponse> 
     */
    open class func getContentmanagementSharedSharedIdWithRequestBuilder(sharedId: String, redirect: Bool? = nil, disposition: Disposition_getContentmanagementSharedSharedId? = nil, contentType: String? = nil, expand: Expand_getContentmanagementSharedSharedId? = nil) -> RequestBuilder<SharedResponse> {
        var path = "/api/v2/contentmanagement/shared/{sharedId}"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "redirect": redirect, 
            
            "disposition": disposition?.rawValue, 
            
            "contentType": contentType, 
            
            "expand": expand?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<SharedResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getContentmanagementShares: String { 
        case member = "member"
    }

    
    
    
    
    
    
    /**
     
     Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     
     - parameter entityId: (query) Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementShares(entityId: String? = nil, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: ShareEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementSharesWithRequestBuilder(entityId: entityId, expand: expand, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<ShareEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     
     - GET /api/v2/contentmanagement/shares
     - Failing to specify a filter will return 400.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : "",
    "sharedEntity" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "sharedEntityType" : "aeiou",
    "sharedBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : "",
    "id" : "aeiou",
    "memberType" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "group" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter entityId: (query) Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ShareEntityListing> 
     */
    open class func getContentmanagementSharesWithRequestBuilder(entityId: String? = nil, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<ShareEntityListing> {
        let path = "/api/v2/contentmanagement/shares"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "entityId": entityId, 
            
            "expand": expand, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<ShareEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of statuses for pending operations
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementStatus(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: CommandStatusEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementStatusWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<CommandStatusEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of statuses for pending operations
     
     - GET /api/v2/contentmanagement/status
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "commandType" : "aeiou",
    "document" : {
      "workspace" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "downloadSharingUri" : "aeiou",
      "dateUploaded" : "2000-01-23T04:56:07.000+0000",
      "uploadStatus" : "",
      "acl" : [ "aeiou" ],
      "uploadMethod" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "systemType" : "aeiou",
      "changeNumber" : 123,
      "id" : "aeiou",
      "tagValues" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "inUse" : true,
        "id" : "aeiou",
        "acl" : [ "aeiou" ]
      } ],
      "uploadedBy" : "",
      "contentType" : "aeiou",
      "callerAddress" : "aeiou",
      "pageCount" : 123456789,
      "read" : true,
      "sharingStatus" : "aeiou",
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ],
      "receiverAddress" : "aeiou",
      "lockInfo" : {
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "lockedBy" : "",
        "dateExpires" : "2000-01-23T04:56:07.000+0000",
        "action" : "aeiou"
      },
      "filename" : "aeiou",
      "createdBy" : "",
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123456789,
      "attributes" : [ {
        "values" : [ "aeiou" ],
        "attribute" : {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "modifiedBy" : "",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "version" : 123
        }
      } ],
      "thumbnails" : [ {
        "imageUri" : "aeiou",
        "width" : 123,
        "resolution" : "aeiou",
        "height" : 123
      } ],
      "sharingUri" : "aeiou",
      "uploadDestinationUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "expiration" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userId" : "aeiou",
    "statusCode" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<CommandStatusEntityListing> 
     */
    open class func getContentmanagementStatusWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<CommandStatusEntityListing> {
        let path = "/api/v2/contentmanagement/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<CommandStatusEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a status.
     
     - parameter statusId: (path) Status ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementStatusStatusId(statusId: String, completion: @escaping ((_ data: CommandStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementStatusStatusIdWithRequestBuilder(statusId: statusId)
        requestBuilder.execute { (response: Response<CommandStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a status.
     
     - GET /api/v2/contentmanagement/status/{statusId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "commandType" : "aeiou",
  "document" : {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "downloadSharingUri" : "aeiou",
    "dateUploaded" : "2000-01-23T04:56:07.000+0000",
    "uploadStatus" : "",
    "acl" : [ "aeiou" ],
    "uploadMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "systemType" : "aeiou",
    "changeNumber" : 123,
    "id" : "aeiou",
    "tagValues" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "inUse" : true,
      "id" : "aeiou",
      "acl" : [ "aeiou" ]
    } ],
    "uploadedBy" : "",
    "contentType" : "aeiou",
    "callerAddress" : "aeiou",
    "pageCount" : 123456789,
    "read" : true,
    "sharingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "tags" : [ "aeiou" ],
    "receiverAddress" : "aeiou",
    "lockInfo" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "lockedBy" : "",
      "dateExpires" : "2000-01-23T04:56:07.000+0000",
      "action" : "aeiou"
    },
    "filename" : "aeiou",
    "createdBy" : "",
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123456789,
    "attributes" : [ {
      "values" : [ "aeiou" ],
      "attribute" : {
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "version" : 123
      }
    } ],
    "thumbnails" : [ {
      "imageUri" : "aeiou",
      "width" : 123,
      "resolution" : "aeiou",
      "height" : 123
    } ],
    "sharingUri" : "aeiou",
    "uploadDestinationUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "expiration" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "userId" : "aeiou",
  "statusCode" : "aeiou"
}}]
     
     - parameter statusId: (path) Status ID 

     - returns: RequestBuilder<CommandStatus> 
     */
    open class func getContentmanagementStatusStatusIdWithRequestBuilder(statusId: String) -> RequestBuilder<CommandStatus> {
        var path = "/api/v2/contentmanagement/status/{statusId}"
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommandStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get usage details.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementUsage(completion: @escaping ((_ data: Usage?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementUsageWithRequestBuilder()
        requestBuilder.execute { (response: Response<Usage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get usage details.
     
     - GET /api/v2/contentmanagement/usage
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "types" : [ {
    "totalDocumentCount" : 123456789,
    "totalDocumentByteCount" : 123456789,
    "type" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<Usage> 
     */
    open class func getContentmanagementUsageWithRequestBuilder() -> RequestBuilder<Usage> {
        let path = "/api/v2/contentmanagement/usage"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Usage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getContentmanagementWorkspace: String { 
        case summary = "summary"
        case acl = "acl"
    }

    
    
    /**
     
     Get a workspace.
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspace(workspaceId: String, expand: [String]? = nil, completion: @escaping ((_ data: Workspace?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceWithRequestBuilder(workspaceId: workspaceId, expand: expand)
        requestBuilder.execute { (response: Response<Workspace>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a workspace.
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "bucket" : "aeiou",
  "summary" : {
    "totalDocumentCount" : 123456789,
    "totalDocumentByteCount" : 123456789
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "isCurrentUserWorkspace" : true,
  "acl" : [ "aeiou" ],
  "type" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<Workspace> 
     */
    open class func getContentmanagementWorkspaceWithRequestBuilder(workspaceId: String, expand: [String]? = nil) -> RequestBuilder<Workspace> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Workspace>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getContentmanagementWorkspaceDocuments: String { 
        case acl = "acl"
        case workspace = "workspace"
    }

    
    
    
    
    
    
    
    
    
    
    /**
     
     Get a list of documents.
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaceDocuments(workspaceId: String, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: DocumentEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceDocumentsWithRequestBuilder(workspaceId: workspaceId, expand: expand, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DocumentEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of documents.
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "downloadSharingUri" : "aeiou",
    "dateUploaded" : "2000-01-23T04:56:07.000+0000",
    "uploadStatus" : "",
    "acl" : [ "aeiou" ],
    "uploadMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "systemType" : "aeiou",
    "changeNumber" : 123,
    "id" : "aeiou",
    "tagValues" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "inUse" : true,
      "id" : "aeiou",
      "acl" : [ "aeiou" ]
    } ],
    "uploadedBy" : "",
    "contentType" : "aeiou",
    "callerAddress" : "aeiou",
    "pageCount" : 123456789,
    "read" : true,
    "sharingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "tags" : [ "aeiou" ],
    "receiverAddress" : "aeiou",
    "lockInfo" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "lockedBy" : "",
      "dateExpires" : "2000-01-23T04:56:07.000+0000",
      "action" : "aeiou"
    },
    "filename" : "aeiou",
    "createdBy" : "",
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123456789,
    "attributes" : [ {
      "values" : [ "aeiou" ],
      "attribute" : {
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "modifiedBy" : "",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "version" : 123
      }
    } ],
    "thumbnails" : [ {
      "imageUri" : "aeiou",
      "width" : 123,
      "resolution" : "aeiou",
      "height" : 123
    } ],
    "sharingUri" : "aeiou",
    "uploadDestinationUri" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) name or dateCreated (optional)
     - parameter sortOrder: (query) ascending or descending (optional, default to ascending)

     - returns: RequestBuilder<DocumentEntityListing> 
     */
    open class func getContentmanagementWorkspaceDocumentsWithRequestBuilder(workspaceId: String, expand: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<DocumentEntityListing> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/documents"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<DocumentEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getContentmanagementWorkspaceMember: String { 
        case member = "member"
    }

    
    
    /**
     
     Get a workspace member
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaceMember(workspaceId: String, memberId: String, expand: [String]? = nil, completion: @escaping ((_ data: WorkspaceMember?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: workspaceId, memberId: memberId, expand: expand)
        requestBuilder.execute { (response: Response<WorkspaceMember>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a workspace member
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "securityProfile" : {
    "permissions" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "member" : "",
  "id" : "aeiou",
  "memberType" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "group" : ""
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkspaceMember> 
     */
    open class func getContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: String, memberId: String, expand: [String]? = nil) -> RequestBuilder<WorkspaceMember> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkspaceMember>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getContentmanagementWorkspaceMembers: String { 
        case member = "member"
    }

    
    
    /**
     
     Get a list workspace members
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaceMembers(workspaceId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: [String]? = nil, completion: @escaping ((_ data: WorkspaceMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceMembersWithRequestBuilder(workspaceId: workspaceId, pageSize: pageSize, pageNumber: pageNumber, expand: expand)
        requestBuilder.execute { (response: Response<WorkspaceMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list workspace members
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}/members
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "securityProfile" : {
      "permissions" : [ "aeiou" ],
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : "",
    "id" : "aeiou",
    "memberType" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "group" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkspaceMemberEntityListing> 
     */
    open class func getContentmanagementWorkspaceMembersWithRequestBuilder(workspaceId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: [String]? = nil) -> RequestBuilder<WorkspaceMemberEntityListing> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/members"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkspaceMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_getContentmanagementWorkspaceTagvalue: String { 
        case acl = "acl"
    }

    
    
    /**
     
     Get a workspace tag
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaceTagvalue(workspaceId: String, tagId: String, expand: [String]? = nil, completion: @escaping ((_ data: TagValue?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: workspaceId, tagId: tagId, expand: expand)
        requestBuilder.execute { (response: Response<TagValue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a workspace tag
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "inUse" : true,
  "id" : "aeiou",
  "acl" : [ "aeiou" ]
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<TagValue> 
     */
    open class func getContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: String, tagId: String, expand: [String]? = nil) -> RequestBuilder<TagValue> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tagId}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<TagValue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getContentmanagementWorkspaceTagvalues: String { 
        case acl = "acl"
    }

    
    
    /**
     
     Get a list of workspace tags
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter value: (query) filter the list of tags returned (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaceTagvalues(workspaceId: String, value: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, expand: [String]? = nil, completion: @escaping ((_ data: TagValueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspaceTagvaluesWithRequestBuilder(workspaceId: workspaceId, value: value, pageSize: pageSize, pageNumber: pageNumber, expand: expand)
        requestBuilder.execute { (response: Response<TagValueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of workspace tags
     
     - GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "inUse" : true,
    "id" : "aeiou",
    "acl" : [ "aeiou" ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter value: (query) filter the list of tags returned (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<TagValueEntityListing> 
     */
    open class func getContentmanagementWorkspaceTagvaluesWithRequestBuilder(workspaceId: String, value: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, expand: [String]? = nil) -> RequestBuilder<TagValueEntityListing> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "value": value, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<TagValueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Access_getContentmanagementWorkspaces: String { 
        case content = "content"
        case admin = "admin"
        case documentCreate = "document:create"
        case documentViewcontent = "document:viewContent"
        case documentViewmetadata = "document:viewMetadata"
        case documentDownload = "document:download"
        case documentDelete = "document:delete"
        case documentUpdate = "document:update"
        case documentShare = "document:share"
        case documentShareview = "document:shareView"
        case documentEmail = "document:email"
        case documentPrint = "document:print"
        case documentAuditview = "document:auditView"
        case documentReplace = "document:replace"
        case documentTag = "document:tag"
        case tagCreate = "tag:create"
        case tagView = "tag:view"
        case tagUpdate = "tag:update"
        case tagApply = "tag:apply"
        case tagRemove = "tag:remove"
        case tagDelete = "tag:delete"
    }

    
    
    
    public enum Expand_getContentmanagementWorkspaces: String { 
        case summary = "summary"
        case acl = "acl"
    }

    
    
    /**
     
     Get a list of workspaces.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter access: (query) Requested access level. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContentmanagementWorkspaces(pageSize: Int? = nil, pageNumber: Int? = nil, access: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: WorkspaceEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getContentmanagementWorkspacesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, access: access, expand: expand)
        requestBuilder.execute { (response: Response<WorkspaceEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of workspaces.
     
     - GET /api/v2/contentmanagement/workspaces
     - Specifying 'content' access will return all workspaces the user has document access to, while 'admin' access will return all group workspaces the user has administrative rights to.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "bucket" : "aeiou",
    "summary" : {
      "totalDocumentCount" : 123456789,
      "totalDocumentByteCount" : 123456789
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "isCurrentUserWorkspace" : true,
    "acl" : [ "aeiou" ],
    "type" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter access: (query) Requested access level. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkspaceEntityListing> 
     */
    open class func getContentmanagementWorkspacesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, access: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<WorkspaceEntityListing> {
        let path = "/api/v2/contentmanagement/workspaces"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "access": access, 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<WorkspaceEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Query audits
     
     - parameter body: (body) Allows for a filtered query returning facet information 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementAuditquery(body: ContentQueryRequest, completion: @escaping ((_ data: QueryResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementAuditqueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueryResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query audits
     
     - POST /api/v2/contentmanagement/auditquery
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facetInfo" : {
    "attributes" : [ {
      "name" : "aeiou",
      "count" : 123,
      "id" : "aeiou"
    } ],
    "facets" : [ {
      "other" : 123456789,
      "total" : 123456789,
      "terms" : [ {
        "name" : "aeiou",
        "count" : 123456789,
        "term" : "aeiou",
        "id" : "aeiou",
        "time" : "2000-01-23T04:56:07.000+0000",
        "key" : 123456789
      } ],
      "termCount" : 123,
      "missing" : 123456789,
      "termType" : "aeiou",
      "attribute" : {
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "statistics" : {
        "dateMax" : "2000-01-23T04:56:07.000+0000",
        "stdDeviation" : 1.3579000000000001069366817318950779736042022705078125,
        "dateMin" : "2000-01-23T04:56:07.000+0000",
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "mean" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789
      }
    } ]
  },
  "results" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "body" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  }
}}]
     
     - parameter body: (body) Allows for a filtered query returning facet information 

     - returns: RequestBuilder<QueryResults> 
     */
    open class func postContentmanagementAuditqueryWithRequestBuilder(body: ContentQueryRequest) -> RequestBuilder<QueryResults> {
        let path = "/api/v2/contentmanagement/auditquery"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueryResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_postContentmanagementDocument: String { 
        case acl = "acl"
    }

    
    
    
    
    /**
     
     Update a document.
     
     - parameter documentId: (path) Document ID 
     - parameter body: (body) Document 
     - parameter expand: (query) Expand some document fields (optional)
     - parameter _override: (query) Override any lock on the document (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementDocument(documentId: String, body: DocumentUpdate, expand: Expand_postContentmanagementDocument? = nil, _override: Bool? = nil, completion: @escaping ((_ data: Document?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementDocumentWithRequestBuilder(documentId: documentId, body: body, expand: expand, _override: _override)
        requestBuilder.execute { (response: Response<Document>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a document.
     
     - POST /api/v2/contentmanagement/documents/{documentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "downloadSharingUri" : "aeiou",
  "dateUploaded" : "2000-01-23T04:56:07.000+0000",
  "uploadStatus" : "",
  "acl" : [ "aeiou" ],
  "uploadMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "systemType" : "aeiou",
  "changeNumber" : 123,
  "id" : "aeiou",
  "tagValues" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "inUse" : true,
    "id" : "aeiou",
    "acl" : [ "aeiou" ]
  } ],
  "uploadedBy" : "",
  "contentType" : "aeiou",
  "callerAddress" : "aeiou",
  "pageCount" : 123456789,
  "read" : true,
  "sharingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ],
  "receiverAddress" : "aeiou",
  "lockInfo" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "lockedBy" : "",
    "dateExpires" : "2000-01-23T04:56:07.000+0000",
    "action" : "aeiou"
  },
  "filename" : "aeiou",
  "createdBy" : "",
  "contentUri" : "aeiou",
  "name" : "aeiou",
  "contentLength" : 123456789,
  "attributes" : [ {
    "values" : [ "aeiou" ],
    "attribute" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "version" : 123
    }
  } ],
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "width" : 123,
    "resolution" : "aeiou",
    "height" : 123
  } ],
  "sharingUri" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter body: (body) Document 
     - parameter expand: (query) Expand some document fields (optional)
     - parameter _override: (query) Override any lock on the document (optional)

     - returns: RequestBuilder<Document> 
     */
    open class func postContentmanagementDocumentWithRequestBuilder(documentId: String, body: DocumentUpdate, expand: Expand_postContentmanagementDocument? = nil, _override: Bool? = nil) -> RequestBuilder<Document> {
        var path = "/api/v2/contentmanagement/documents/{documentId}"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "override": _override
            
        ])

        let requestBuilder: RequestBuilder<Document>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Replace the contents of a document.
     
     - parameter documentId: (path) Document ID 
     - parameter body: (body) Replace Request 
     - parameter _override: (query) Override any lock on the document (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementDocumentContent(documentId: String, body: ReplaceRequest, _override: Bool? = nil, completion: @escaping ((_ data: ReplaceResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementDocumentContentWithRequestBuilder(documentId: documentId, body: body, _override: _override)
        requestBuilder.execute { (response: Response<ReplaceResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace the contents of a document.
     
     - POST /api/v2/contentmanagement/documents/{documentId}/content
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "uploadMethod" : "aeiou",
  "name" : "aeiou",
  "uploadStatus" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "changeNumber" : 123,
  "id" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter documentId: (path) Document ID 
     - parameter body: (body) Replace Request 
     - parameter _override: (query) Override any lock on the document (optional)

     - returns: RequestBuilder<ReplaceResponse> 
     */
    open class func postContentmanagementDocumentContentWithRequestBuilder(documentId: String, body: ReplaceRequest, _override: Bool? = nil) -> RequestBuilder<ReplaceResponse> {
        var path = "/api/v2/contentmanagement/documents/{documentId}/content"
        let documentIdPreEscape = "\(documentId)"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "override": _override
            
        ])

        let requestBuilder: RequestBuilder<ReplaceResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Add a document.
     
     - parameter body: (body) Document 
     - parameter copySource: (query) Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     - parameter moveSource: (query) Move a document to a new workspace. Provide a document ID as the move source. (optional)
     - parameter _override: (query) Override any lock on the source document (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementDocuments(body: DocumentUpload, copySource: String? = nil, moveSource: String? = nil, _override: Bool? = nil, completion: @escaping ((_ data: Document?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementDocumentsWithRequestBuilder(body: body, copySource: copySource, moveSource: moveSource, _override: _override)
        requestBuilder.execute { (response: Response<Document>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a document.
     
     - POST /api/v2/contentmanagement/documents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "downloadSharingUri" : "aeiou",
  "dateUploaded" : "2000-01-23T04:56:07.000+0000",
  "uploadStatus" : "",
  "acl" : [ "aeiou" ],
  "uploadMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "systemType" : "aeiou",
  "changeNumber" : 123,
  "id" : "aeiou",
  "tagValues" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "inUse" : true,
    "id" : "aeiou",
    "acl" : [ "aeiou" ]
  } ],
  "uploadedBy" : "",
  "contentType" : "aeiou",
  "callerAddress" : "aeiou",
  "pageCount" : 123456789,
  "read" : true,
  "sharingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "tags" : [ "aeiou" ],
  "receiverAddress" : "aeiou",
  "lockInfo" : {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "lockedBy" : "",
    "dateExpires" : "2000-01-23T04:56:07.000+0000",
    "action" : "aeiou"
  },
  "filename" : "aeiou",
  "createdBy" : "",
  "contentUri" : "aeiou",
  "name" : "aeiou",
  "contentLength" : 123456789,
  "attributes" : [ {
    "values" : [ "aeiou" ],
    "attribute" : {
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "modifiedBy" : "",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "version" : 123
    }
  } ],
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "width" : 123,
    "resolution" : "aeiou",
    "height" : 123
  } ],
  "sharingUri" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter body: (body) Document 
     - parameter copySource: (query) Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     - parameter moveSource: (query) Move a document to a new workspace. Provide a document ID as the move source. (optional)
     - parameter _override: (query) Override any lock on the source document (optional)

     - returns: RequestBuilder<Document> 
     */
    open class func postContentmanagementDocumentsWithRequestBuilder(body: DocumentUpload, copySource: String? = nil, moveSource: String? = nil, _override: Bool? = nil) -> RequestBuilder<Document> {
        let path = "/api/v2/contentmanagement/documents"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "copySource": copySource, 
            
            "moveSource": moveSource, 
            
            "override": _override
            
        ])

        let requestBuilder: RequestBuilder<Document>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_postContentmanagementQuery: String { 
        case acl = "acl"
        case workspace = "workspace"
    }

    
    
    /**
     
     Query content
     
     - parameter body: (body) Allows for a filtered query returning facet information 
     - parameter expand: (query) Expand some document fields (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementQuery(body: QueryRequest, expand: Expand_postContentmanagementQuery? = nil, completion: @escaping ((_ data: QueryResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementQueryWithRequestBuilder(body: body, expand: expand)
        requestBuilder.execute { (response: Response<QueryResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query content
     
     - POST /api/v2/contentmanagement/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "facetInfo" : {
    "attributes" : [ {
      "name" : "aeiou",
      "count" : 123,
      "id" : "aeiou"
    } ],
    "facets" : [ {
      "other" : 123456789,
      "total" : 123456789,
      "terms" : [ {
        "name" : "aeiou",
        "count" : 123456789,
        "term" : "aeiou",
        "id" : "aeiou",
        "time" : "2000-01-23T04:56:07.000+0000",
        "key" : 123456789
      } ],
      "termCount" : 123,
      "missing" : 123456789,
      "termType" : "aeiou",
      "attribute" : {
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou"
      },
      "statistics" : {
        "dateMax" : "2000-01-23T04:56:07.000+0000",
        "stdDeviation" : 1.3579000000000001069366817318950779736042022705078125,
        "dateMin" : "2000-01-23T04:56:07.000+0000",
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "mean" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789
      }
    } ]
  },
  "results" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "body" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      }
    } ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  }
}}]
     
     - parameter body: (body) Allows for a filtered query returning facet information 
     - parameter expand: (query) Expand some document fields (optional)

     - returns: RequestBuilder<QueryResults> 
     */
    open class func postContentmanagementQueryWithRequestBuilder(body: QueryRequest, expand: Expand_postContentmanagementQuery? = nil) -> RequestBuilder<QueryResults> {
        let path = "/api/v2/contentmanagement/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<QueryResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Creates a new share or updates an existing share if the entity has already been shared
     
     - parameter body: (body) CreateShareRequest - entity id and type and a single member or list of members are required 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementShares(body: CreateShareRequest, completion: @escaping ((_ data: CreateShareResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementSharesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateShareResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates a new share or updates an existing share if the entity has already been shared
     
     - POST /api/v2/contentmanagement/shares
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : "",
  "sharedEntity" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sharedEntityType" : "aeiou",
  "sharedBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "member" : "",
  "id" : "aeiou",
  "memberType" : "aeiou",
  "failed" : [ "" ],
  "succeeded" : [ {
    "workspace" : "",
    "sharedEntity" : "",
    "sharedEntityType" : "aeiou",
    "sharedBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "member" : "",
    "id" : "aeiou",
    "memberType" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "group" : ""
  } ]
}}]
     
     - parameter body: (body) CreateShareRequest - entity id and type and a single member or list of members are required 

     - returns: RequestBuilder<CreateShareResponse> 
     */
    open class func postContentmanagementSharesWithRequestBuilder(body: CreateShareRequest) -> RequestBuilder<CreateShareResponse> {
        let path = "/api/v2/contentmanagement/shares"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateShareResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a workspace tag
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) tag 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementWorkspaceTagvalues(workspaceId: String, body: TagValue, completion: @escaping ((_ data: TagValue?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementWorkspaceTagvaluesWithRequestBuilder(workspaceId: workspaceId, body: body)
        requestBuilder.execute { (response: Response<TagValue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a workspace tag
     
     - POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "inUse" : true,
  "id" : "aeiou",
  "acl" : [ "aeiou" ]
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) tag 

     - returns: RequestBuilder<TagValue> 
     */
    open class func postContentmanagementWorkspaceTagvaluesWithRequestBuilder(workspaceId: String, body: TagValue) -> RequestBuilder<TagValue> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TagValue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Expand_postContentmanagementWorkspaceTagvaluesQuery: String { 
        case acl = "acl"
    }

    
    
    /**
     
     Perform a prefix query on tags in the workspace
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) query 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementWorkspaceTagvaluesQuery(workspaceId: String, body: TagQueryRequest, expand: [String]? = nil, completion: @escaping ((_ data: TagValueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementWorkspaceTagvaluesQueryWithRequestBuilder(workspaceId: workspaceId, body: body, expand: expand)
        requestBuilder.execute { (response: Response<TagValueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Perform a prefix query on tags in the workspace
     
     - POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "inUse" : true,
    "id" : "aeiou",
    "acl" : [ "aeiou" ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) query 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<TagValueEntityListing> 
     */
    open class func postContentmanagementWorkspaceTagvaluesQueryWithRequestBuilder(workspaceId: String, body: TagQueryRequest, expand: [String]? = nil) -> RequestBuilder<TagValueEntityListing> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<TagValueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a group workspace
     
     - parameter body: (body) Workspace 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postContentmanagementWorkspaces(body: WorkspaceCreate, completion: @escaping ((_ data: Workspace?,_ error: Error?) -> Void)) {
        let requestBuilder = postContentmanagementWorkspacesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Workspace>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a group workspace
     
     - POST /api/v2/contentmanagement/workspaces
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "bucket" : "aeiou",
  "summary" : {
    "totalDocumentCount" : 123456789,
    "totalDocumentByteCount" : 123456789
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "isCurrentUserWorkspace" : true,
  "acl" : [ "aeiou" ],
  "type" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter body: (body) Workspace 

     - returns: RequestBuilder<Workspace> 
     */
    open class func postContentmanagementWorkspacesWithRequestBuilder(body: WorkspaceCreate) -> RequestBuilder<Workspace> {
        let path = "/api/v2/contentmanagement/workspaces"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workspace>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a workspace
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) Workspace 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putContentmanagementWorkspace(workspaceId: String, body: Workspace, completion: @escaping ((_ data: Workspace?,_ error: Error?) -> Void)) {
        let requestBuilder = putContentmanagementWorkspaceWithRequestBuilder(workspaceId: workspaceId, body: body)
        requestBuilder.execute { (response: Response<Workspace>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a workspace
     
     - PUT /api/v2/contentmanagement/workspaces/{workspaceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "bucket" : "aeiou",
  "summary" : {
    "totalDocumentCount" : 123456789,
    "totalDocumentByteCount" : 123456789
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "isCurrentUserWorkspace" : true,
  "acl" : [ "aeiou" ],
  "type" : "aeiou",
  "user" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter body: (body) Workspace 

     - returns: RequestBuilder<Workspace> 
     */
    open class func putContentmanagementWorkspaceWithRequestBuilder(workspaceId: String, body: Workspace) -> RequestBuilder<Workspace> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Workspace>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Add a member to a workspace
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Workspace Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putContentmanagementWorkspaceMember(workspaceId: String, memberId: String, body: WorkspaceMember, completion: @escaping ((_ data: WorkspaceMember?,_ error: Error?) -> Void)) {
        let requestBuilder = putContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: workspaceId, memberId: memberId, body: body)
        requestBuilder.execute { (response: Response<WorkspaceMember>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a member to a workspace
     
     - PUT /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "securityProfile" : {
    "permissions" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "member" : "",
  "id" : "aeiou",
  "memberType" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "group" : ""
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Workspace Member 

     - returns: RequestBuilder<WorkspaceMember> 
     */
    open class func putContentmanagementWorkspaceMemberWithRequestBuilder(workspaceId: String, memberId: String, body: WorkspaceMember) -> RequestBuilder<WorkspaceMember> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WorkspaceMember>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a workspace tag. Will update all documents with the new tag value.
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 
     - parameter body: (body) Workspace 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putContentmanagementWorkspaceTagvalue(workspaceId: String, tagId: String, body: TagValue, completion: @escaping ((_ data: TagValue?,_ error: Error?) -> Void)) {
        let requestBuilder = putContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: workspaceId, tagId: tagId, body: body)
        requestBuilder.execute { (response: Response<TagValue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a workspace tag. Will update all documents with the new tag value.
     
     - PUT /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "inUse" : true,
  "id" : "aeiou",
  "acl" : [ "aeiou" ]
}}]
     
     - parameter workspaceId: (path) Workspace ID 
     - parameter tagId: (path) Tag ID 
     - parameter body: (body) Workspace 

     - returns: RequestBuilder<TagValue> 
     */
    open class func putContentmanagementWorkspaceTagvalueWithRequestBuilder(workspaceId: String, tagId: String, body: TagValue) -> RequestBuilder<TagValue> {
        var path = "/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}"
        let workspaceIdPreEscape = "\(workspaceId)"
        let workspaceIdPostEscape = workspaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{workspaceId}", with: workspaceIdPostEscape, options: .literal, range: nil)
        let tagIdPreEscape = "\(tagId)"
        let tagIdPostEscape = tagIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tagId}", with: tagIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TagValue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
