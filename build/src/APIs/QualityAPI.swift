//
// QualityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class QualityAPI {
    
    
    
    
    
    /**
     
     Delete a calibration by id.
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQualityCalibration(calibrationId: String, calibratorId: String, completion: @escaping ((_ data: Calibration?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteQualityCalibrationWithRequestBuilder(calibrationId: calibrationId, calibratorId: calibratorId)
        requestBuilder.execute { (response: Response<Calibration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a calibration by id.
     
     - DELETE /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : ""
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : "",
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 

     - returns: RequestBuilder<Calibration> 
     */
    open class func deleteQualityCalibrationWithRequestBuilder(calibrationId: String, calibratorId: String) -> RequestBuilder<Calibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        let calibrationIdPreEscape = "\(calibrationId)"
        let calibrationIdPostEscape = calibrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{calibrationId}", with: calibrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "calibratorId": calibratorId
            
        ])

        let requestBuilder: RequestBuilder<Calibration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Delete an evaluation
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQualityConversationEvaluation(conversationId: String, evaluationId: String, expand: String? = nil, completion: @escaping ((_ data: Evaluation?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteQualityConversationEvaluationWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, expand: expand)
        requestBuilder.execute { (response: Response<Evaluation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an evaluation
     
     - DELETE /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "redacted" : true,
  "answers" : {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "authorizedActions" : [ "aeiou" ],
  "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "rescore" : true,
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : "",
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "mediaType" : [ "aeiou" ],
  "neverRelease" : true,
  "agentHasRead" : true,
  "conversationDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "queue" : {
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "enableManualAssignment" : true,
    "description" : "aeiou",
    "onHoldPrompt" : "",
    "emailInQueueFlow" : "",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "threshold" : 123,
      "operator" : "aeiou"
    } ],
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : "",
    "callingPartyNumber" : "aeiou",
    "userMemberCount" : 123,
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "joinedMemberCount" : 123,
    "messageInQueueFlow" : "",
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "name" : "aeiou"
  },
  "isScoringIndex" : true,
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<Evaluation> 
     */
    open class func deleteQualityConversationEvaluationWithRequestBuilder(conversationId: String, evaluationId: String, expand: String? = nil) -> RequestBuilder<Evaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let evaluationIdPreEscape = "\(evaluationId)"
        let evaluationIdPostEscape = evaluationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{evaluationId}", with: evaluationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Evaluation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQualityForm(formId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteQualityFormWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an evaluation form.
     
     - DELETE /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteQualityFormWithRequestBuilder(formId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/quality/forms/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQualityFormsEvaluation(formId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteQualityFormsEvaluationWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an evaluation form.
     
     - DELETE /api/v2/quality/forms/evaluations/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteQualityFormsEvaluationWithRequestBuilder(formId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/quality/forms/evaluations/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a survey form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteQualityFormsSurvey(formId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteQualityFormsSurveyWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a survey form.
     
     - DELETE /api/v2/quality/forms/surveys/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteQualityFormsSurveyWithRequestBuilder(formId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/quality/forms/surveys/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Gets a list of Agent Activities
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) Start time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) End time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter agentUserId: (query) user id of agent requested (optional)
     - parameter evaluatorUserId: (query) user id of the evaluator (optional)
     - parameter name: (query) name (optional)
     - parameter group: (query) group id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityAgentsActivity(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: Date? = nil, endTime: Date? = nil, agentUserId: [String]? = nil, evaluatorUserId: String? = nil, name: String? = nil, group: String? = nil, completion: @escaping ((_ data: AgentActivityEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityAgentsActivityWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, name: name, group: group)
        requestBuilder.execute { (response: Response<AgentActivityEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets a list of Agent Activities
     
     - GET /api/v2/quality/agents/activity
     - Includes the number of evaluations and average evaluation score. These statistics include released evaluations only when evaluatorUserId is provided. In the absence of evaluatorUserId in the request, the api excludes evaluations which are set to never release for the calculation of evaluation statistics. 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "numCriticalEvaluations" : 123,
    "numEvaluations" : 123,
    "agent" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "highestEvaluationScore" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "averageCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "numEvaluationsWithoutViewPermission" : 123,
    "highestCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "lowestEvaluationScore" : 1.3579000000000001069366817318950779736042022705078125,
    "name" : "aeiou",
    "agentEvaluatorActivityList" : [ {
      "numEvaluations" : 123,
      "agent" : "",
      "numEvaluationsWithoutViewPermission" : 123,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "averageEvaluationScore" : 123,
      "evaluator" : ""
    } ],
    "id" : "aeiou",
    "averageEvaluationScore" : 123,
    "lowestCriticalScore" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) Start time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) End time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter agentUserId: (query) user id of agent requested (optional)
     - parameter evaluatorUserId: (query) user id of the evaluator (optional)
     - parameter name: (query) name (optional)
     - parameter group: (query) group id (optional)

     - returns: RequestBuilder<AgentActivityEntityListing> 
     */
    open class func getQualityAgentsActivityWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: Date? = nil, endTime: Date? = nil, agentUserId: [String]? = nil, evaluatorUserId: String? = nil, name: String? = nil, group: String? = nil) -> RequestBuilder<AgentActivityEntityListing> {
        let path = "/api/v2/quality/agents/activity"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "startTime": startTime?.encodeToJSON(), 
            
            "endTime": endTime?.encodeToJSON(), 
            
            "agentUserId": agentUserId, 
            
            "evaluatorUserId": evaluatorUserId, 
            
            "name": name, 
            
            "group": group
            
        ])

        let requestBuilder: RequestBuilder<AgentActivityEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a calibration by id.  Requires either calibrator id or conversation id
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId (optional)
     - parameter conversationId: (query) conversationId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityCalibration(calibrationId: String, calibratorId: String? = nil, conversationId: String? = nil, completion: @escaping ((_ data: Calibration?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityCalibrationWithRequestBuilder(calibrationId: calibrationId, calibratorId: calibratorId, conversationId: conversationId)
        requestBuilder.execute { (response: Response<Calibration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a calibration by id.  Requires either calibrator id or conversation id
     
     - GET /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : ""
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : "",
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId (optional)
     - parameter conversationId: (query) conversationId (optional)

     - returns: RequestBuilder<Calibration> 
     */
    open class func getQualityCalibrationWithRequestBuilder(calibrationId: String, calibratorId: String? = nil, conversationId: String? = nil) -> RequestBuilder<Calibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        let calibrationIdPreEscape = "\(calibrationId)"
        let calibrationIdPostEscape = calibrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{calibrationId}", with: calibrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "calibratorId": calibratorId, 
            
            "conversationId": conversationId
            
        ])

        let requestBuilder: RequestBuilder<Calibration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of calibrations
     
     - parameter calibratorId: (query) user id of calibrator 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversation id (optional)
     - parameter startTime: (query) Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityCalibrations(calibratorId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, startTime: Date? = nil, endTime: Date? = nil, completion: @escaping ((_ data: CalibrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityCalibrationsWithRequestBuilder(calibratorId: calibratorId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, startTime: startTime, endTime: endTime)
        requestBuilder.execute { (response: Response<CalibrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of calibrations
     
     - GET /api/v2/quality/calibrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : {
      "address" : "aeiou",
      "selfUri" : "aeiou",
      "externalTag" : "aeiou",
      "divisions" : [ {
        "division" : "",
        "entities" : [ "" ]
      } ],
      "maxParticipants" : 123,
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "callerId" : "aeiou",
          "callerIdName" : "aeiou"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : ""
          } ],
          "priority" : 123,
          "queue" : ""
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "redacted" : true,
          "answers" : {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "authorizedActions" : [ "aeiou" ],
          "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rescore" : true,
          "calibration" : "",
          "conversation" : "",
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "nextUri" : "aeiou",
              "previousUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "visibilityCondition" : "",
              "name" : "aeiou",
              "questions" : [ {
                "helpText" : "aeiou",
                "commentsRequired" : true,
                "visibilityCondition" : {
                  "combiningOperation" : "aeiou",
                  "predicates" : [ "{}" ]
                },
                "isCritical" : true,
                "id" : "aeiou",
                "text" : "aeiou",
                "type" : "aeiou",
                "isKill" : true,
                "naEnabled" : true,
                "answerOptions" : [ {
                  "id" : "aeiou",
                  "text" : "aeiou",
                  "value" : 123
                } ]
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : "",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "mediaType" : [ "aeiou" ],
          "neverRelease" : true,
          "agentHasRead" : true,
          "conversationDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "queue" : {
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "enableManualAssignment" : true,
            "description" : "aeiou",
            "onHoldPrompt" : "",
            "emailInQueueFlow" : "",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
              "threshold" : 123,
              "operator" : "aeiou"
            } ],
            "skillEvaluationMethod" : "aeiou",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "aeiou",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+0000",
                "features" : "{}",
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "pages" : [ {
                  "versionId" : "aeiou",
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "id" : "aeiou",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "startPageId" : "aeiou",
                "id" : "aeiou",
                "publishedDate" : "2000-01-23T04:56:07.000+0000"
              }
            },
            "division" : "",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "callingPartyNumber" : "aeiou",
            "userMemberCount" : 123,
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "joinedMemberCount" : 123,
            "messageInQueueFlow" : "",
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "whisperPrompt" : "",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "replyEmailAddress" : "",
                "selfUri" : "aeiou",
                "pattern" : "aeiou",
                "language" : "",
                "autoBcc" : [ {
                  "name" : "aeiou",
                  "email" : "aeiou"
                } ],
                "priority" : 123,
                "fromEmail" : "aeiou",
                "skills" : [ "" ],
                "name" : "aeiou",
                "fromName" : "aeiou",
                "id" : "aeiou",
                "queue" : "",
                "flow" : "",
                "spamFlow" : ""
              },
              "domain" : ""
            },
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "outboundMessagingAddresses" : {
              "smsAddress" : ""
            },
            "createdBy" : "aeiou",
            "name" : "aeiou"
          },
          "isScoringIndex" : true,
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "authenticated" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ]
      } ]
    },
    "evaluationForm" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter calibratorId: (query) user id of calibrator 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversation id (optional)
     - parameter startTime: (query) Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)

     - returns: RequestBuilder<CalibrationEntityListing> 
     */
    open class func getQualityCalibrationsWithRequestBuilder(calibratorId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, startTime: Date? = nil, endTime: Date? = nil) -> RequestBuilder<CalibrationEntityListing> {
        let path = "/api/v2/quality/calibrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "conversationId": conversationId, 
            
            "startTime": startTime?.encodeToJSON(), 
            
            "endTime": endTime?.encodeToJSON(), 
            
            "calibratorId": calibratorId
            
        ])

        let requestBuilder: RequestBuilder<CalibrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get an evaluation
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter expand: (query) agent, evaluator, evaluationForm (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityConversationEvaluation(conversationId: String, evaluationId: String, expand: String? = nil, completion: @escaping ((_ data: Evaluation?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityConversationEvaluationWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, expand: expand)
        requestBuilder.execute { (response: Response<Evaluation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an evaluation
     
     - GET /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "redacted" : true,
  "answers" : {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "authorizedActions" : [ "aeiou" ],
  "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "rescore" : true,
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : "",
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "mediaType" : [ "aeiou" ],
  "neverRelease" : true,
  "agentHasRead" : true,
  "conversationDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "queue" : {
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "enableManualAssignment" : true,
    "description" : "aeiou",
    "onHoldPrompt" : "",
    "emailInQueueFlow" : "",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "threshold" : 123,
      "operator" : "aeiou"
    } ],
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : "",
    "callingPartyNumber" : "aeiou",
    "userMemberCount" : 123,
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "joinedMemberCount" : 123,
    "messageInQueueFlow" : "",
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "name" : "aeiou"
  },
  "isScoringIndex" : true,
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter expand: (query) agent, evaluator, evaluationForm (optional)

     - returns: RequestBuilder<Evaluation> 
     */
    open class func getQualityConversationEvaluationWithRequestBuilder(conversationId: String, evaluationId: String, expand: String? = nil) -> RequestBuilder<Evaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let evaluationIdPreEscape = "\(evaluationId)"
        let evaluationIdPostEscape = evaluationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{evaluationId}", with: evaluationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Evaluation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the surveys for a conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityConversationSurveys(conversationId: String, completion: @escaping ((_ data: [Survey]?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityConversationSurveysWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<[Survey]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the surveys for a conversation
     
     - GET /api/v2/quality/conversations/{conversationId}/surveys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "agent" : "",
  "surveyForm" : {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : "",
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ "" ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "surveyErrorDetails" : {
    "surveyErrorReason" : "aeiou",
    "flowDiagnosticInfo" : {
      "lastActionId" : 123
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "answers" : {
    "npsScore" : 123,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "score" : 123,
        "questionId" : "aeiou",
        "npsTextAnswer" : "aeiou",
        "markedNA" : true,
        "freeTextAnswer" : "aeiou",
        "npsScore" : 123
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125
  },
  "id" : "aeiou",
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "integration" : "microsoftteams",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : "",
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "queue" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "completedDate" : "2000-01-23T04:56:07.000+0000",
  "status" : "aeiou"
} ]}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<[Survey]> 
     */
    open class func getQualityConversationSurveysWithRequestBuilder(conversationId: String) -> RequestBuilder<[Survey]> {
        var path = "/api/v2/quality/conversations/{conversationId}/surveys"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Survey]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get status of audit query execution
     
     - parameter transactionId: (path) Transaction ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityConversationsAuditsQueryTransactionId(transactionId: String, completion: @escaping ((_ data: QualityAuditQueryExecutionStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityConversationsAuditsQueryTransactionIdWithRequestBuilder(transactionId: transactionId)
        requestBuilder.execute { (response: Response<QualityAuditQueryExecutionStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get status of audit query execution
     
     - GET /api/v2/quality/conversations/audits/query/{transactionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "interval" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "filters" : [ {
    "property" : "aeiou",
    "value" : "aeiou"
  } ],
  "sort" : [ {
    "sortOrder" : "aeiou",
    "name" : "aeiou"
  } ]
}}]
     
     - parameter transactionId: (path) Transaction ID 

     - returns: RequestBuilder<QualityAuditQueryExecutionStatusResponse> 
     */
    open class func getQualityConversationsAuditsQueryTransactionIdWithRequestBuilder(transactionId: String) -> RequestBuilder<QualityAuditQueryExecutionStatusResponse> {
        var path = "/api/v2/quality/conversations/audits/query/{transactionId}"
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QualityAuditQueryExecutionStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Expand_getQualityConversationsAuditsQueryTransactionIdResults: String { 
        case user = "user"
    }

    
    
    /**
     
     Get results of audit query
     
     - parameter transactionId: (path) Transaction ID 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityConversationsAuditsQueryTransactionIdResults(transactionId: String, cursor: String? = nil, pageSize: Int? = nil, expand: [String]? = nil, completion: @escaping ((_ data: QualityAuditQueryExecutionResultsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityConversationsAuditsQueryTransactionIdResultsWithRequestBuilder(transactionId: transactionId, cursor: cursor, pageSize: pageSize, expand: expand)
        requestBuilder.execute { (response: Response<QualityAuditQueryExecutionResultsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get results of audit query
     
     - GET /api/v2/quality/conversations/audits/query/{transactionId}/results
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "aeiou",
  "entities" : [ {
    "propertyChanges" : [ {
      "property" : "aeiou",
      "newValues" : [ "aeiou" ],
      "oldValues" : [ "aeiou" ]
    } ],
    "level" : "aeiou",
    "messageInfo" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    },
    "entityType" : "aeiou",
    "serviceName" : "aeiou",
    "remoteIps" : [ "aeiou" ],
    "userTrusteeOrgId" : "aeiou",
    "context" : {
      "key" : "aeiou"
    },
    "client" : {
      "selfUri" : "aeiou",
      "id" : "aeiou"
    },
    "action" : "aeiou",
    "userHomeOrgId" : "aeiou",
    "id" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "entity" : "",
    "status" : "aeiou",
    "eventDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "pageSize" : 123,
  "id" : "aeiou"
}}]
     
     - parameter transactionId: (path) Transaction ID 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<QualityAuditQueryExecutionResultsResponse> 
     */
    open class func getQualityConversationsAuditsQueryTransactionIdResultsWithRequestBuilder(transactionId: String, cursor: String? = nil, pageSize: Int? = nil, expand: [String]? = nil) -> RequestBuilder<QualityAuditQueryExecutionResultsResponse> {
        var path = "/api/v2/quality/conversations/audits/query/{transactionId}/results"
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "cursor": cursor, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<QualityAuditQueryExecutionResultsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Queries Evaluations and returns a paged list
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversationId specified (optional)
     - parameter agentUserId: (query) user id of the agent (optional)
     - parameter evaluatorUserId: (query) evaluator user id (optional)
     - parameter queueId: (query) queue id (optional)
     - parameter startTime: (query) start time of the evaluation query (optional)
     - parameter endTime: (query) end time of the evaluation query (optional)
     - parameter evaluationState: (query)  (optional)
     - parameter isReleased: (query) the evaluation has been released (optional)
     - parameter agentHasRead: (query) agent has the evaluation (optional)
     - parameter expandAnswerTotalScores: (query) get the total scores for evaluations (optional)
     - parameter maximum: (query) maximum (optional)
     - parameter sortOrder: (query) sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityEvaluationsQuery(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, agentUserId: String? = nil, evaluatorUserId: String? = nil, queueId: String? = nil, startTime: String? = nil, endTime: String? = nil, evaluationState: [String]? = nil, isReleased: Bool? = nil, agentHasRead: Bool? = nil, expandAnswerTotalScores: Bool? = nil, maximum: Int? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: EvaluationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityEvaluationsQueryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, queueId: queueId, startTime: startTime, endTime: endTime, evaluationState: evaluationState, isReleased: isReleased, agentHasRead: agentHasRead, expandAnswerTotalScores: expandAnswerTotalScores, maximum: maximum, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<EvaluationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Queries Evaluations and returns a paged list
     
     - GET /api/v2/quality/evaluations/query
     - Query params must include one of conversationId, evaluatorUserId, or agentUserId. When querying by agentUserId (and not conversationId or evaluatorUserId), the results are sorted by release date. Evaluations set to 'Never Release' are omitted in this case. When querying by evaluatorUserId or conversationId (including when combined with agentUserId), the results are sorted by assigned date.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "assignedDate" : "2000-01-23T04:56:07.000+0000",
    "agent" : "",
    "resourceId" : "aeiou",
    "redacted" : true,
    "answers" : {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "comments" : "aeiou",
      "agentComments" : "aeiou",
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionGroupScores" : [ {
        "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "markedNA" : true,
        "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionScores" : [ {
          "answerId" : "aeiou",
          "failedKillQuestion" : true,
          "score" : 123,
          "questionId" : "aeiou",
          "comments" : "aeiou",
          "markedNA" : true
        } ],
        "questionGroupId" : "aeiou",
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "anyFailedKillQuestions" : true
    },
    "changedDate" : "2000-01-23T04:56:07.000+0000",
    "authorizedActions" : [ "aeiou" ],
    "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "rescore" : true,
    "calibration" : {
      "agent" : "",
      "evaluations" : [ "" ],
      "selfUri" : "aeiou",
      "evaluators" : [ "" ],
      "contextId" : "aeiou",
      "averageScore" : 123,
      "calibrator" : "",
      "highScore" : 123,
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "scoringIndex" : "",
      "expertEvaluator" : "",
      "name" : "aeiou",
      "id" : "aeiou",
      "lowScore" : 123,
      "conversation" : "",
      "evaluationForm" : ""
    },
    "conversation" : {
      "address" : "aeiou",
      "selfUri" : "aeiou",
      "externalTag" : "aeiou",
      "divisions" : [ {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "entities" : [ "" ]
      } ],
      "maxParticipants" : 123,
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "afterCallWorkRequired" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "automatedCallbackConfigId" : "aeiou",
          "provider" : "aeiou",
          "externalCampaign" : true,
          "callbackUserName" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "voicemail" : {
            "uploadStatus" : "aeiou",
            "id" : "aeiou"
          },
          "scriptId" : "aeiou",
          "timeoutSeconds" : 123,
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "callerId" : "aeiou",
          "callerIdName" : "aeiou"
        } ],
        "videos" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "videoMuted" : true,
          "peerCount" : 123,
          "msids" : [ "aeiou" ],
          "afterCallWorkRequired" : true,
          "audioMuted" : true,
          "sharingScreen" : true,
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "self" : "",
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "externalOrganizationId" : "aeiou",
        "locale" : "aeiou",
        "cobrowsesessions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "cobrowseRole" : "aeiou",
          "cobrowseSessionId" : "aeiou",
          "afterCallWorkRequired" : true,
          "viewerUrl" : "aeiou",
          "segments" : [ "" ],
          "providerEventTime" : "2000-01-23T04:56:07.000+0000",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "self" : "",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "controlling" : [ "aeiou" ]
        } ],
        "alertingTimeoutMs" : 123,
        "emails" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "draftAttachments" : [ {
            "inlineImage" : true,
            "contentUri" : "aeiou",
            "name" : "aeiou",
            "contentLength" : 123,
            "attachmentId" : "aeiou",
            "contentType" : "aeiou"
          } ],
          "subject" : "aeiou",
          "messagesSent" : 123,
          "afterCallWorkRequired" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "messageId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "autoGenerated" : true,
          "recordingId" : "aeiou",
          "spam" : true,
          "direction" : "aeiou"
        } ],
        "conversationRoutingData" : {
          "skills" : [ "" ],
          "language" : "",
          "scoredAgents" : [ {
            "score" : 123,
            "agent" : ""
          } ],
          "priority" : 123,
          "queue" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          }
        },
        "endAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "aniName" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "startAcwTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ "" ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "flaggedReason" : "aeiou",
        "consultParticipantId" : "aeiou",
        "screenRecordingState" : "aeiou",
        "queueName" : "aeiou",
        "coachedParticipantId" : "aeiou",
        "calls" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "other" : "",
          "confined" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "recording" : true,
          "errorInfo" : {
            "code" : "aeiou",
            "message" : "aeiou"
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "provider" : "aeiou",
          "afterCallWork" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "state" : "aeiou"
          },
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "faxStatus" : {
            "baudRate" : 123456789,
            "expectedPages" : 123456789,
            "lineErrors" : 123456789,
            "pageErrors" : 123456789,
            "activePage" : 123456789,
            "linesTransmitted" : 123456789,
            "bytesTransmitted" : 123456789,
            "direction" : "aeiou"
          },
          "uuiData" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "recordingState" : "aeiou",
          "self" : {
            "addressDisplayable" : "aeiou",
            "addressNormalized" : "aeiou",
            "name" : "aeiou",
            "addressRaw" : "aeiou",
            "nameRaw" : "aeiou"
          },
          "documentId" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "teamId" : "aeiou",
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "avatarImageUrl" : "aeiou",
          "afterCallWorkRequired" : true,
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : {
            "customerSession" : {
              "id" : "aeiou",
              "type" : "aeiou"
            },
            "triggeringAction" : {
              "actionMap" : {
                "id" : "aeiou",
                "version" : 123
              },
              "id" : "aeiou"
            },
            "customer" : {
              "idType" : "aeiou",
              "id" : "aeiou"
            }
          },
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "messages" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "authenticated" : true,
          "held" : true,
          "afterCallWorkRequired" : true,
          "errorInfo" : "",
          "type" : "aeiou",
          "toAddress" : "",
          "segments" : [ "" ],
          "recipientType" : "aeiou",
          "provider" : "aeiou",
          "journeyContext" : "",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "fromAddress" : "",
          "state" : "aeiou",
          "id" : "aeiou",
          "direction" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "scriptId" : "aeiou",
          "messages" : [ {
            "messageStatus" : "aeiou",
            "messageTime" : "2000-01-23T04:56:07.000+0000",
            "messageId" : "aeiou",
            "stickers" : [ {
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "media" : [ {
              "contentLengthBytes" : 123,
              "name" : "aeiou",
              "mediaType" : "aeiou",
              "id" : "aeiou",
              "url" : "aeiou"
            } ],
            "messageURI" : "aeiou",
            "messageSegmentCount" : 123
          } ],
          "recipientCountry" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "agentAssistantId" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "held" : true,
          "afterCallWorkRequired" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "socialMediaHub" : "aeiou",
          "provider" : "aeiou",
          "afterCallWork" : "",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "screenshares" : [ {
          "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
          "peerId" : "aeiou",
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "wrapup" : "",
          "peerCount" : 123,
          "afterCallWorkRequired" : true,
          "sharing" : true,
          "segments" : [ "" ],
          "provider" : "aeiou",
          "context" : "aeiou",
          "afterCallWork" : "",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou"
        } ]
      } ]
    },
    "evaluationForm" : {
      "publishedVersions" : {
        "total" : 123456789,
        "pageCount" : 123,
        "pageNumber" : 123,
        "entities" : [ "" ],
        "firstUri" : "aeiou",
        "selfUri" : "aeiou",
        "lastUri" : "aeiou",
        "pageSize" : 123,
        "nextUri" : "aeiou",
        "previousUri" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "visibilityCondition" : "",
        "name" : "aeiou",
        "questions" : [ {
          "helpText" : "aeiou",
          "commentsRequired" : true,
          "visibilityCondition" : {
            "combiningOperation" : "aeiou",
            "predicates" : [ "{}" ]
          },
          "isCritical" : true,
          "id" : "aeiou",
          "text" : "aeiou",
          "type" : "aeiou",
          "isKill" : true,
          "naEnabled" : true,
          "answerOptions" : [ {
            "id" : "aeiou",
            "text" : "aeiou",
            "value" : 123
          } ]
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "evaluator" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : "",
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "releaseDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "mediaType" : [ "aeiou" ],
    "neverRelease" : true,
    "agentHasRead" : true,
    "conversationDate" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "queue" : {
      "mediaSettings" : {
        "key" : {
          "alertingTimeoutSeconds" : 123,
          "serviceLevel" : {
            "percentage" : 1.3579000000000001069366817318950779736042022705078125,
            "durationMs" : 123456789
          }
        }
      },
      "enableManualAssignment" : true,
      "description" : "aeiou",
      "onHoldPrompt" : "",
      "emailInQueueFlow" : "",
      "autoAnswerOnly" : true,
      "routingRules" : [ {
        "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
        "threshold" : 123,
        "operator" : "aeiou"
      } ],
      "skillEvaluationMethod" : "aeiou",
      "defaultScripts" : {
        "key" : {
          "variables" : "{}",
          "selfUri" : "aeiou",
          "customActions" : "{}",
          "versionDate" : "2000-01-23T04:56:07.000+0000",
          "features" : "{}",
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "pages" : [ {
            "versionId" : "aeiou",
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "rootContainer" : {
              "key" : "{}"
            },
            "properties" : {
              "key" : "{}"
            }
          } ],
          "startPageName" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "startPageId" : "aeiou",
          "id" : "aeiou",
          "publishedDate" : "2000-01-23T04:56:07.000+0000"
        }
      },
      "division" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "queueFlow" : "",
      "callingPartyNumber" : "aeiou",
      "userMemberCount" : 123,
      "modifiedBy" : "aeiou",
      "id" : "aeiou",
      "joinedMemberCount" : 123,
      "messageInQueueFlow" : "",
      "callingPartyName" : "aeiou",
      "acwSettings" : {
        "timeoutMs" : 123,
        "wrapupPrompt" : "aeiou"
      },
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "whisperPrompt" : "",
      "enableTranscription" : true,
      "outboundEmailAddress" : {
        "route" : {
          "replyEmailAddress" : "",
          "selfUri" : "aeiou",
          "pattern" : "aeiou",
          "language" : "",
          "autoBcc" : [ {
            "name" : "aeiou",
            "email" : "aeiou"
          } ],
          "priority" : 123,
          "fromEmail" : "aeiou",
          "skills" : [ "" ],
          "name" : "aeiou",
          "fromName" : "aeiou",
          "id" : "aeiou",
          "queue" : "",
          "flow" : "",
          "spamFlow" : ""
        },
        "domain" : ""
      },
      "bullseye" : {
        "rings" : [ {
          "expansionCriteria" : [ {
            "threshold" : 1.3579000000000001069366817318950779736042022705078125,
            "type" : "aeiou"
          } ],
          "actions" : {
            "skillsToRemove" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          }
        } ]
      },
      "outboundMessagingAddresses" : {
        "smsAddress" : ""
      },
      "createdBy" : "aeiou",
      "name" : "aeiou"
    },
    "isScoringIndex" : true,
    "status" : "aeiou",
    "resourceType" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversationId specified (optional)
     - parameter agentUserId: (query) user id of the agent (optional)
     - parameter evaluatorUserId: (query) evaluator user id (optional)
     - parameter queueId: (query) queue id (optional)
     - parameter startTime: (query) start time of the evaluation query (optional)
     - parameter endTime: (query) end time of the evaluation query (optional)
     - parameter evaluationState: (query)  (optional)
     - parameter isReleased: (query) the evaluation has been released (optional)
     - parameter agentHasRead: (query) agent has the evaluation (optional)
     - parameter expandAnswerTotalScores: (query) get the total scores for evaluations (optional)
     - parameter maximum: (query) maximum (optional)
     - parameter sortOrder: (query) sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)

     - returns: RequestBuilder<EvaluationEntityListing> 
     */
    open class func getQualityEvaluationsQueryWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, agentUserId: String? = nil, evaluatorUserId: String? = nil, queueId: String? = nil, startTime: String? = nil, endTime: String? = nil, evaluationState: [String]? = nil, isReleased: Bool? = nil, agentHasRead: Bool? = nil, expandAnswerTotalScores: Bool? = nil, maximum: Int? = nil, sortOrder: String? = nil) -> RequestBuilder<EvaluationEntityListing> {
        let path = "/api/v2/quality/evaluations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "conversationId": conversationId, 
            
            "agentUserId": agentUserId, 
            
            "evaluatorUserId": evaluatorUserId, 
            
            "queueId": queueId, 
            
            "startTime": startTime, 
            
            "endTime": endTime, 
            
            "evaluationState": evaluationState, 
            
            "isReleased": isReleased, 
            
            "agentHasRead": agentHasRead, 
            
            "expandAnswerTotalScores": expandAnswerTotalScores, 
            
            "maximum": maximum?.encodeToJSON(), 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<EvaluationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get an evaluator activity
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter name: (query) Evaluator name (optional)
     - parameter permission: (query) permission strings (optional)
     - parameter group: (query) group id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityEvaluatorsActivity(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: Date? = nil, endTime: Date? = nil, name: String? = nil, permission: [String]? = nil, group: String? = nil, completion: @escaping ((_ data: EvaluatorActivityEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityEvaluatorsActivityWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, name: name, permission: permission, group: group)
        requestBuilder.execute { (response: Response<EvaluatorActivityEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an evaluator activity
     
     - GET /api/v2/quality/evaluators/activity
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "numCalibrationsStarted" : 123,
    "numEvaluationsWithoutViewPermission" : 123,
    "numEvaluationsAssigned" : 123,
    "numEvaluationsCompleted" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "numEvaluationsStarted" : 123,
    "id" : "aeiou",
    "numCalibrationsAssigned" : 123,
    "numCalibrationsCompleted" : 123,
    "evaluator" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "countryCode" : "aeiou",
        "display" : "aeiou",
        "integration" : "microsoftteams",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "aeiou",
          "school" : "aeiou",
          "dateStart" : "2000-01-23T04:56:07.000+0000",
          "dateEnd" : "2000-01-23T04:56:07.000+0000",
          "fieldOfStudy" : "aeiou"
        } ],
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "team" : {
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter endTime: (query) The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z (optional)
     - parameter name: (query) Evaluator name (optional)
     - parameter permission: (query) permission strings (optional)
     - parameter group: (query) group id (optional)

     - returns: RequestBuilder<EvaluatorActivityEntityListing> 
     */
    open class func getQualityEvaluatorsActivityWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: Date? = nil, endTime: Date? = nil, name: String? = nil, permission: [String]? = nil, group: String? = nil) -> RequestBuilder<EvaluatorActivityEntityListing> {
        let path = "/api/v2/quality/evaluators/activity"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "startTime": startTime?.encodeToJSON(), 
            
            "endTime": endTime?.encodeToJSON(), 
            
            "name": name, 
            
            "permission": permission, 
            
            "group": group
            
        ])

        let requestBuilder: RequestBuilder<EvaluatorActivityEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get an evaluation form
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityForm(formId: String, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an evaluation form
     
     - GET /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func getQualityFormWithRequestBuilder(formId: String) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/forms/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets all the revisions for a specific evaluation.
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormVersions(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormVersionsWithRequestBuilder(formId: formId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all the revisions for a specific evaluation.
     
     - GET /api/v2/quality/forms/{formId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityFormVersionsWithRequestBuilder(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        var path = "/api/v2/quality/forms/{formId}/versions"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of evaluation forms
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityForms(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of evaluation forms
     
     - GET /api/v2/quality/forms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityFormsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        let path = "/api/v2/quality/forms"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "expand": expand, 
            
            "name": name, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get an evaluation form
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsEvaluation(formId: String, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsEvaluationWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an evaluation form
     
     - GET /api/v2/quality/forms/evaluations/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func getQualityFormsEvaluationWithRequestBuilder(formId: String) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/forms/evaluations/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Gets all the revisions for a specific evaluation.
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to asc)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsEvaluationVersions(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsEvaluationVersionsWithRequestBuilder(formId: formId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all the revisions for a specific evaluation.
     
     - GET /api/v2/quality/forms/evaluations/{formId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Sort order (optional, default to asc)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityFormsEvaluationVersionsWithRequestBuilder(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        var path = "/api/v2/quality/forms/evaluations/{formId}/versions"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of evaluation forms
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsEvaluations(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsEvaluationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of evaluation forms
     
     - GET /api/v2/quality/forms/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityFormsEvaluationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        let path = "/api/v2/quality/forms/evaluations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "expand": expand, 
            
            "name": name, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a survey form
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsSurvey(formId: String, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsSurveyWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a survey form
     
     - GET /api/v2/quality/forms/surveys/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func getQualityFormsSurveyWithRequestBuilder(formId: String) -> RequestBuilder<SurveyForm> {
        var path = "/api/v2/quality/forms/surveys/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Gets all the revisions for a specific survey.
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsSurveyVersions(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: SurveyFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsSurveyVersionsWithRequestBuilder(formId: formId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<SurveyFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Gets all the revisions for a specific survey.
     
     - GET /api/v2/quality/forms/surveys/{formId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<SurveyFormEntityListing> 
     */
    open class func getQualityFormsSurveyVersionsWithRequestBuilder(formId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<SurveyFormEntityListing> {
        var path = "/api/v2/quality/forms/surveys/{formId}/versions"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SurveyFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of survey forms
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsSurveys(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: SurveyFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsSurveysWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<SurveyFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of survey forms
     
     - GET /api/v2/quality/forms/surveys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter sortOrder: (query) Order to sort results, either asc or desc (optional)

     - returns: RequestBuilder<SurveyFormEntityListing> 
     */
    open class func getQualityFormsSurveysWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, sortOrder: String? = nil) -> RequestBuilder<SurveyFormEntityListing> {
        let path = "/api/v2/quality/forms/surveys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "expand": expand, 
            
            "name": name, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<SurveyFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Retrieve a list of survey forms by their ids
     
     - parameter _id: (query) A comma-delimited list of valid survey form ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsSurveysBulk(_id: [String], completion: @escaping ((_ data: SurveyFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsSurveysBulkWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<SurveyFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve a list of survey forms by their ids
     
     - GET /api/v2/quality/forms/surveys/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter _id: (query) A comma-delimited list of valid survey form ids 

     - returns: RequestBuilder<SurveyFormEntityListing> 
     */
    open class func getQualityFormsSurveysBulkWithRequestBuilder(_id: [String]) -> RequestBuilder<SurveyFormEntityListing> {
        let path = "/api/v2/quality/forms/surveys/bulk"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<SurveyFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve a list of the latest form versions by context ids
     
     - parameter contextId: (query) A comma-delimited list of valid survey form context ids 
     - parameter published: (query) If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityFormsSurveysBulkContexts(contextId: [String], published: Bool? = nil, completion: @escaping ((_ data: [SurveyForm]?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityFormsSurveysBulkContextsWithRequestBuilder(contextId: contextId, published: published)
        requestBuilder.execute { (response: Response<[SurveyForm]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve a list of the latest form versions by context ids
     
     - GET /api/v2/quality/forms/surveys/bulk/contexts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
} ]}]
     
     - parameter contextId: (query) A comma-delimited list of valid survey form context ids 
     - parameter published: (query) If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)

     - returns: RequestBuilder<[SurveyForm]> 
     */
    open class func getQualityFormsSurveysBulkContextsWithRequestBuilder(contextId: [String], published: Bool? = nil) -> RequestBuilder<[SurveyForm]> {
        let path = "/api/v2/quality/forms/surveys/bulk/contexts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "contextId": contextId, 
            
            "published": published
            
        ])

        let requestBuilder: RequestBuilder<[SurveyForm]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the published evaluation forms.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedform(formId: String, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the published evaluation forms.
     
     - GET /api/v2/quality/publishedforms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func getQualityPublishedformWithRequestBuilder(formId: String) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/publishedforms/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the published evaluation forms.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestPerContext: (query) onlyLatestPerContext (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedforms(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestPerContext: Bool? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestPerContext: onlyLatestPerContext)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the published evaluation forms.
     
     - GET /api/v2/quality/publishedforms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestPerContext: (query) onlyLatestPerContext (optional, default to false)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityPublishedformsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestPerContext: Bool? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        let path = "/api/v2/quality/publishedforms"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "name": name, 
            
            "onlyLatestPerContext": onlyLatestPerContext
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the most recent published version of an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedformsEvaluation(formId: String, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformsEvaluationWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the most recent published version of an evaluation form.
     
     - GET /api/v2/quality/publishedforms/evaluations/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func getQualityPublishedformsEvaluationWithRequestBuilder(formId: String) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/publishedforms/evaluations/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the published evaluation forms.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestPerContext: (query) onlyLatestPerContext (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedformsEvaluations(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestPerContext: Bool? = nil, completion: @escaping ((_ data: EvaluationFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformsEvaluationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestPerContext: onlyLatestPerContext)
        requestBuilder.execute { (response: Response<EvaluationFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the published evaluation forms.
     
     - GET /api/v2/quality/publishedforms/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestPerContext: (query) onlyLatestPerContext (optional, default to false)

     - returns: RequestBuilder<EvaluationFormEntityListing> 
     */
    open class func getQualityPublishedformsEvaluationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestPerContext: Bool? = nil) -> RequestBuilder<EvaluationFormEntityListing> {
        let path = "/api/v2/quality/publishedforms/evaluations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "name": name, 
            
            "onlyLatestPerContext": onlyLatestPerContext
            
        ])

        let requestBuilder: RequestBuilder<EvaluationFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the most recent published version of a survey form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedformsSurvey(formId: String, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformsSurveyWithRequestBuilder(formId: formId)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the most recent published version of a survey form.
     
     - GET /api/v2/quality/publishedforms/surveys/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func getQualityPublishedformsSurveyWithRequestBuilder(formId: String) -> RequestBuilder<SurveyForm> {
        var path = "/api/v2/quality/publishedforms/surveys/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the published survey forms.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestEnabledPerContext: (query) onlyLatestEnabledPerContext (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualityPublishedformsSurveys(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestEnabledPerContext: Bool? = nil, completion: @escaping ((_ data: SurveyFormEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualityPublishedformsSurveysWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestEnabledPerContext: onlyLatestEnabledPerContext)
        requestBuilder.execute { (response: Response<SurveyFormEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the published survey forms.
     
     - GET /api/v2/quality/publishedforms/surveys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter onlyLatestEnabledPerContext: (query) onlyLatestEnabledPerContext (optional, default to false)

     - returns: RequestBuilder<SurveyFormEntityListing> 
     */
    open class func getQualityPublishedformsSurveysWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, onlyLatestEnabledPerContext: Bool? = nil) -> RequestBuilder<SurveyFormEntityListing> {
        let path = "/api/v2/quality/publishedforms/surveys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "name": name, 
            
            "onlyLatestEnabledPerContext": onlyLatestEnabledPerContext
            
        ])

        let requestBuilder: RequestBuilder<SurveyFormEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a survey for a conversation
     
     - parameter surveyId: (path) surveyId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualitySurvey(surveyId: String, completion: @escaping ((_ data: Survey?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualitySurveyWithRequestBuilder(surveyId: surveyId)
        requestBuilder.execute { (response: Response<Survey>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a survey for a conversation
     
     - GET /api/v2/quality/surveys/{surveyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "surveyForm" : {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : "",
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ "" ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "surveyErrorDetails" : {
    "surveyErrorReason" : "aeiou",
    "flowDiagnosticInfo" : {
      "lastActionId" : 123
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "answers" : {
    "npsScore" : 123,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "score" : 123,
        "questionId" : "aeiou",
        "npsTextAnswer" : "aeiou",
        "markedNA" : true,
        "freeTextAnswer" : "aeiou",
        "npsScore" : 123
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125
  },
  "id" : "aeiou",
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "acdAutoAnswer" : true,
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "division" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "authorization" : {
            "unusedRoles" : [ "" ],
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "allowConditions" : true,
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "skills" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "skillUri" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "name" : "aeiou",
              "defaultUser" : "",
              "id" : "aeiou",
              "type" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "lastTokenIssued" : {
            "dateIssued" : "2000-01-23T04:56:07.000+0000"
          },
          "email" : "aeiou",
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "manager" : "",
          "employerInfo" : {
            "employeeType" : "aeiou",
            "dateHire" : "aeiou",
            "employeeId" : "aeiou",
            "officialName" : "aeiou"
          },
          "languages" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou",
            "languageUri" : "aeiou",
            "proficiency" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "message" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "groups" : [ {
            "images" : [ "" ],
            "addresses" : [ {
              "extension" : "aeiou",
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "visibility" : "aeiou",
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "owners" : [ "" ],
            "type" : "aeiou",
            "version" : 123,
            "rulesVisible" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ],
          "primaryContactInfo" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "countryCode" : "aeiou",
            "display" : "aeiou",
            "integration" : "microsoftteams",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "biography" : {
            "education" : [ {
              "notes" : "aeiou",
              "school" : "aeiou",
              "dateStart" : "2000-01-23T04:56:07.000+0000",
              "dateEnd" : "2000-01-23T04:56:07.000+0000",
              "fieldOfStudy" : "aeiou"
            } ],
            "hobbies" : [ "aeiou" ],
            "biography" : "aeiou",
            "interests" : [ "aeiou" ],
            "spouse" : "aeiou"
          },
          "team" : {
            "division" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "memberCount" : 123456789,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou"
          },
          "certifications" : [ "aeiou" ],
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000",
            "indefinite" : true
          },
          "languagePreference" : "aeiou",
          "profileSkills" : [ "aeiou" ],
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "locations" : [ {
            "notes" : "aeiou",
            "coordinates" : {
              "key" : 1.3579000000000001069366817318950779736042022705078125
            },
            "locationDefinition" : "",
            "id" : "aeiou",
            "floorplanId" : "aeiou"
          } ],
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "locations" : [ {
              "images" : "aeiou",
              "address" : {
                "zipcode" : "aeiou",
                "country" : "aeiou",
                "city" : "aeiou",
                "street1" : "aeiou",
                "countryName" : "aeiou",
                "state" : "aeiou",
                "street2" : "aeiou"
              },
              "notes" : "aeiou",
              "floorplanImage" : [ "" ],
              "addressVerificationDetails" : {
                "dateStarted" : "2000-01-23T04:56:07.000+0000",
                "dateFinished" : "2000-01-23T04:56:07.000+0000",
                "service" : "smartystreets-us",
                "status" : "aeiou"
              },
              "selfUri" : "aeiou",
              "profileImage" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "emergencyNumber" : {
                "number" : "aeiou",
                "e164" : "aeiou",
                "type" : "aeiou"
              },
              "version" : 123,
              "path" : [ "aeiou" ],
              "addressStored" : true,
              "name" : "aeiou",
              "id" : "aeiou",
              "contactUser" : "",
              "state" : "aeiou",
              "addressVerified" : true
            } ],
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "queue" : {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  },
  "completedDate" : "2000-01-23T04:56:07.000+0000",
  "status" : "aeiou"
}}]
     
     - parameter surveyId: (path) surveyId 

     - returns: RequestBuilder<Survey> 
     */
    open class func getQualitySurveyWithRequestBuilder(surveyId: String) -> RequestBuilder<Survey> {
        var path = "/api/v2/quality/surveys/{surveyId}"
        let surveyIdPreEscape = "\(surveyId)"
        let surveyIdPostEscape = surveyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{surveyId}", with: surveyIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Survey>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a survey as an end-customer, for the purposes of scoring it.
     
     - parameter customerSurveyUrl: (query) customerSurveyUrl 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQualitySurveysScorable(customerSurveyUrl: String, completion: @escaping ((_ data: ScorableSurvey?,_ error: Error?) -> Void)) {
        let requestBuilder = getQualitySurveysScorableWithRequestBuilder(customerSurveyUrl: customerSurveyUrl)
        requestBuilder.execute { (response: Response<ScorableSurvey>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a survey as an end-customer, for the purposes of scoring it.
     
     - GET /api/v2/quality/surveys/scorable
     - 
     - examples: [{contentType=application/json, example={
  "surveyForm" : {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "answers" : {
    "npsScore" : 123,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "score" : 123,
        "questionId" : "aeiou",
        "npsTextAnswer" : "aeiou",
        "markedNA" : true,
        "freeTextAnswer" : "aeiou",
        "npsScore" : 123
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125
  },
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter customerSurveyUrl: (query) customerSurveyUrl 

     - returns: RequestBuilder<ScorableSurvey> 
     */
    open class func getQualitySurveysScorableWithRequestBuilder(customerSurveyUrl: String) -> RequestBuilder<ScorableSurvey> {
        let path = "/api/v2/quality/surveys/scorable"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "customerSurveyUrl": customerSurveyUrl
            
        ])

        let requestBuilder: RequestBuilder<ScorableSurvey>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Survey form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchQualityFormsSurvey(formId: String, body: SurveyForm, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = patchQualityFormsSurveyWithRequestBuilder(formId: formId, body: body)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     
     - PATCH /api/v2/quality/forms/surveys/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Survey form 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func patchQualityFormsSurveyWithRequestBuilder(formId: String, body: SurveyForm) -> RequestBuilder<SurveyForm> {
        var path = "/api/v2/quality/forms/surveys/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for evaluation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsEvaluationsAggregatesQuery(body: EvaluationAggregationQuery, completion: @escaping ((_ data: EvaluationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for evaluation aggregates
     
     - POST /api/v2/analytics/evaluations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<EvaluationAggregateQueryResponse> 
     */
    open class func postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: EvaluationAggregationQuery) -> RequestBuilder<EvaluationAggregateQueryResponse> {
        let path = "/api/v2/analytics/evaluations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for survey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsSurveysAggregatesQuery(body: SurveyAggregationQuery, completion: @escaping ((_ data: SurveyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for survey aggregates
     
     - POST /api/v2/analytics/surveys/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "countPositive" : 123456789,
          "countNegative" : 123456789,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ],
      "views" : [ {
        "stats" : "",
        "name" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<SurveyAggregateQueryResponse> 
     */
    open class func postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: SurveyAggregationQuery) -> RequestBuilder<SurveyAggregateQueryResponse> {
        let path = "/api/v2/analytics/surveys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a calibration
     
     - parameter body: (body) calibration 
     - parameter expand: (query) calibratorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityCalibrations(body: CalibrationCreate, expand: String? = nil, completion: @escaping ((_ data: Calibration?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityCalibrationsWithRequestBuilder(body: body, expand: expand)
        requestBuilder.execute { (response: Response<Calibration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a calibration
     
     - POST /api/v2/quality/calibrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : ""
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : "",
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : ""
}}]
     
     - parameter body: (body) calibration 
     - parameter expand: (query) calibratorId (optional)

     - returns: RequestBuilder<Calibration> 
     */
    open class func postQualityCalibrationsWithRequestBuilder(body: CalibrationCreate, expand: String? = nil) -> RequestBuilder<Calibration> {
        let path = "/api/v2/quality/calibrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Calibration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Create an evaluation
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) evaluation 
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityConversationEvaluations(conversationId: String, body: Evaluation, expand: String? = nil, completion: @escaping ((_ data: Evaluation?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityConversationEvaluationsWithRequestBuilder(conversationId: conversationId, body: body, expand: expand)
        requestBuilder.execute { (response: Response<Evaluation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an evaluation
     
     - POST /api/v2/quality/conversations/{conversationId}/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "redacted" : true,
  "answers" : {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "authorizedActions" : [ "aeiou" ],
  "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "rescore" : true,
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : "",
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "mediaType" : [ "aeiou" ],
  "neverRelease" : true,
  "agentHasRead" : true,
  "conversationDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "queue" : {
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "enableManualAssignment" : true,
    "description" : "aeiou",
    "onHoldPrompt" : "",
    "emailInQueueFlow" : "",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "threshold" : 123,
      "operator" : "aeiou"
    } ],
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : "",
    "callingPartyNumber" : "aeiou",
    "userMemberCount" : 123,
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "joinedMemberCount" : 123,
    "messageInQueueFlow" : "",
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "name" : "aeiou"
  },
  "isScoringIndex" : true,
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) evaluation 
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<Evaluation> 
     */
    open class func postQualityConversationEvaluationsWithRequestBuilder(conversationId: String, body: Evaluation, expand: String? = nil) -> RequestBuilder<Evaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Evaluation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create audit query execution
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityConversationsAuditsQuery(body: QMAuditQueryRequest, completion: @escaping ((_ data: QualityAuditQueryExecutionStatusResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityConversationsAuditsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QualityAuditQueryExecutionStatusResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create audit query execution
     
     - POST /api/v2/quality/conversations/audits/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+0000",
  "interval" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "filters" : [ {
    "property" : "aeiou",
    "value" : "aeiou"
  } ],
  "sort" : [ {
    "sortOrder" : "aeiou",
    "name" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QualityAuditQueryExecutionStatusResponse> 
     */
    open class func postQualityConversationsAuditsQueryWithRequestBuilder(body: QMAuditQueryRequest) -> RequestBuilder<QualityAuditQueryExecutionStatusResponse> {
        let path = "/api/v2/quality/conversations/audits/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QualityAuditQueryExecutionStatusResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Score evaluation
     
     - parameter body: (body) evaluationAndScoringSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityEvaluationsScoring(body: EvaluationFormAndScoringSet, completion: @escaping ((_ data: EvaluationScoringSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityEvaluationsScoringWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationScoringSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Score evaluation
     
     - POST /api/v2/quality/evaluations/scoring
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "comments" : "aeiou",
  "agentComments" : "aeiou",
  "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "questionGroupScores" : [ {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "markedNA" : true,
    "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionScores" : [ {
      "answerId" : "aeiou",
      "failedKillQuestion" : true,
      "score" : 123,
      "questionId" : "aeiou",
      "comments" : "aeiou",
      "markedNA" : true
    } ],
    "questionGroupId" : "aeiou",
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "anyFailedKillQuestions" : true
}}]
     
     - parameter body: (body) evaluationAndScoringSet 

     - returns: RequestBuilder<EvaluationScoringSet> 
     */
    open class func postQualityEvaluationsScoringWithRequestBuilder(body: EvaluationFormAndScoringSet) -> RequestBuilder<EvaluationScoringSet> {
        let path = "/api/v2/quality/evaluations/scoring"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationScoringSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an evaluation form.
     
     - parameter body: (body) Evaluation form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityForms(body: EvaluationForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityFormsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an evaluation form.
     
     - POST /api/v2/quality/forms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Evaluation form 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func postQualityFormsWithRequestBuilder(body: EvaluationForm) -> RequestBuilder<EvaluationForm> {
        let path = "/api/v2/quality/forms"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an evaluation form.
     
     - parameter body: (body) Evaluation form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityFormsEvaluations(body: EvaluationForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityFormsEvaluationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an evaluation form.
     
     - POST /api/v2/quality/forms/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Evaluation form 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func postQualityFormsEvaluationsWithRequestBuilder(body: EvaluationForm) -> RequestBuilder<EvaluationForm> {
        let path = "/api/v2/quality/forms/evaluations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a survey form.
     
     - parameter body: (body) Survey form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityFormsSurveys(body: SurveyForm, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityFormsSurveysWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a survey form.
     
     - POST /api/v2/quality/forms/surveys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Survey form 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func postQualityFormsSurveysWithRequestBuilder(body: SurveyForm) -> RequestBuilder<SurveyForm> {
        let path = "/api/v2/quality/forms/surveys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Publish an evaluation form.
     
     - parameter body: (body) Publish request containing id of form to publish 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityPublishedforms(body: PublishForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityPublishedformsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish an evaluation form.
     
     - POST /api/v2/quality/publishedforms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Publish request containing id of form to publish 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func postQualityPublishedformsWithRequestBuilder(body: PublishForm) -> RequestBuilder<EvaluationForm> {
        let path = "/api/v2/quality/publishedforms"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Publish an evaluation form.
     
     - parameter body: (body) Publish request containing id of form to publish 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityPublishedformsEvaluations(body: PublishForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityPublishedformsEvaluationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish an evaluation form.
     
     - POST /api/v2/quality/publishedforms/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Publish request containing id of form to publish 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func postQualityPublishedformsEvaluationsWithRequestBuilder(body: PublishForm) -> RequestBuilder<EvaluationForm> {
        let path = "/api/v2/quality/publishedforms/evaluations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Publish a survey form.
     
     - parameter body: (body) Survey form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualityPublishedformsSurveys(body: PublishForm, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualityPublishedformsSurveysWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish a survey form.
     
     - POST /api/v2/quality/publishedforms/surveys
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body) Survey form 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func postQualityPublishedformsSurveysWithRequestBuilder(body: PublishForm) -> RequestBuilder<SurveyForm> {
        let path = "/api/v2/quality/publishedforms/surveys"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Score survey
     
     - parameter body: (body) surveyAndScoringSet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQualitySurveysScoring(body: SurveyFormAndScoringSet, completion: @escaping ((_ data: SurveyScoringSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postQualitySurveysScoringWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyScoringSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Score survey
     
     - POST /api/v2/quality/surveys/scoring
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "npsScore" : 123,
  "questionGroupScores" : [ {
    "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "markedNA" : true,
    "questionScores" : [ {
      "answerId" : "aeiou",
      "score" : 123,
      "questionId" : "aeiou",
      "npsTextAnswer" : "aeiou",
      "markedNA" : true,
      "freeTextAnswer" : "aeiou",
      "npsScore" : 123
    } ],
    "questionGroupId" : "aeiou",
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalScore" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter body: (body) surveyAndScoringSet 

     - returns: RequestBuilder<SurveyScoringSet> 
     */
    open class func postQualitySurveysScoringWithRequestBuilder(body: SurveyFormAndScoringSet) -> RequestBuilder<SurveyScoringSet> {
        let path = "/api/v2/quality/surveys/scoring"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyScoringSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter body: (body) Calibration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualityCalibration(calibrationId: String, body: Calibration, completion: @escaping ((_ data: Calibration?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualityCalibrationWithRequestBuilder(calibrationId: calibrationId, body: body)
        requestBuilder.execute { (response: Response<Calibration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     
     - PUT /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : "",
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : ""
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "redacted" : true,
        "answers" : {
          "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "authorizedActions" : [ "aeiou" ],
        "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rescore" : true,
        "calibration" : "",
        "conversation" : "",
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "nextUri" : "aeiou",
            "previousUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "visibilityCondition" : "",
            "name" : "aeiou",
            "questions" : [ {
              "helpText" : "aeiou",
              "commentsRequired" : true,
              "visibilityCondition" : {
                "combiningOperation" : "aeiou",
                "predicates" : [ "{}" ]
              },
              "isCritical" : true,
              "id" : "aeiou",
              "text" : "aeiou",
              "type" : "aeiou",
              "isKill" : true,
              "naEnabled" : true,
              "answerOptions" : [ {
                "id" : "aeiou",
                "text" : "aeiou",
                "value" : 123
              } ]
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "mediaType" : [ "aeiou" ],
        "neverRelease" : true,
        "agentHasRead" : true,
        "conversationDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "queue" : {
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "enableManualAssignment" : true,
          "description" : "aeiou",
          "onHoldPrompt" : "",
          "emailInQueueFlow" : "",
          "autoAnswerOnly" : true,
          "routingRules" : [ {
            "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
            "threshold" : 123,
            "operator" : "aeiou"
          } ],
          "skillEvaluationMethod" : "aeiou",
          "defaultScripts" : {
            "key" : {
              "variables" : "{}",
              "selfUri" : "aeiou",
              "customActions" : "{}",
              "versionDate" : "2000-01-23T04:56:07.000+0000",
              "features" : "{}",
              "versionId" : "aeiou",
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "pages" : [ {
                "versionId" : "aeiou",
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "rootContainer" : {
                  "key" : "{}"
                },
                "properties" : {
                  "key" : "{}"
                }
              } ],
              "startPageName" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "startPageId" : "aeiou",
              "id" : "aeiou",
              "publishedDate" : "2000-01-23T04:56:07.000+0000"
            }
          },
          "division" : "",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "callingPartyNumber" : "aeiou",
          "userMemberCount" : 123,
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "joinedMemberCount" : 123,
          "messageInQueueFlow" : "",
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "whisperPrompt" : "",
          "enableTranscription" : true,
          "outboundEmailAddress" : {
            "route" : {
              "replyEmailAddress" : "",
              "selfUri" : "aeiou",
              "pattern" : "aeiou",
              "language" : "",
              "autoBcc" : [ {
                "name" : "aeiou",
                "email" : "aeiou"
              } ],
              "priority" : 123,
              "fromEmail" : "aeiou",
              "skills" : [ "" ],
              "name" : "aeiou",
              "fromName" : "aeiou",
              "id" : "aeiou",
              "queue" : "",
              "flow" : "",
              "spamFlow" : ""
            },
            "domain" : ""
          },
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "outboundMessagingAddresses" : {
            "smsAddress" : ""
          },
          "createdBy" : "aeiou",
          "name" : "aeiou"
        },
        "isScoringIndex" : true,
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter body: (body) Calibration 

     - returns: RequestBuilder<Calibration> 
     */
    open class func putQualityCalibrationWithRequestBuilder(calibrationId: String, body: Calibration) -> RequestBuilder<Calibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        let calibrationIdPreEscape = "\(calibrationId)"
        let calibrationIdPostEscape = calibrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{calibrationId}", with: calibrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Calibration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Update an evaluation
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter body: (body) evaluation 
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualityConversationEvaluation(conversationId: String, evaluationId: String, body: Evaluation, expand: String? = nil, completion: @escaping ((_ data: Evaluation?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualityConversationEvaluationWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, body: body, expand: expand)
        requestBuilder.execute { (response: Response<Evaluation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an evaluation
     
     - PUT /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - The quality:evaluation:edit permission allows modification of most fields, while the quality:evaluation:editScore permission allows an evaluator to change just the question scores, and the quality:evaluation:editAgentSignoff permission allows an agent to change the agent comments and sign off on the evaluation.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "redacted" : true,
  "answers" : {
    "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "totalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalNonCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "authorizedActions" : [ "aeiou" ],
  "conversationEndDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "rescore" : true,
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "selfUri" : "aeiou",
    "externalTag" : "aeiou",
    "divisions" : [ {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "entities" : [ "" ]
    } ],
    "maxParticipants" : 123,
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "afterCallWorkRequired" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "automatedCallbackConfigId" : "aeiou",
        "provider" : "aeiou",
        "externalCampaign" : true,
        "callbackUserName" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "voicemail" : {
          "uploadStatus" : "aeiou",
          "id" : "aeiou"
        },
        "scriptId" : "aeiou",
        "timeoutSeconds" : 123,
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "callerId" : "aeiou",
        "callerIdName" : "aeiou"
      } ],
      "videos" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "videoMuted" : true,
        "peerCount" : 123,
        "msids" : [ "aeiou" ],
        "afterCallWorkRequired" : true,
        "audioMuted" : true,
        "sharingScreen" : true,
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "self" : "",
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "externalOrganizationId" : "aeiou",
      "locale" : "aeiou",
      "cobrowsesessions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "cobrowseRole" : "aeiou",
        "cobrowseSessionId" : "aeiou",
        "afterCallWorkRequired" : true,
        "viewerUrl" : "aeiou",
        "segments" : [ "" ],
        "providerEventTime" : "2000-01-23T04:56:07.000+0000",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "self" : "",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "controlling" : [ "aeiou" ]
      } ],
      "alertingTimeoutMs" : 123,
      "emails" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "draftAttachments" : [ {
          "inlineImage" : true,
          "contentUri" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "messagesSent" : 123,
        "afterCallWorkRequired" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "messageId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "autoGenerated" : true,
        "recordingId" : "aeiou",
        "spam" : true,
        "direction" : "aeiou"
      } ],
      "conversationRoutingData" : {
        "skills" : [ "" ],
        "language" : "",
        "scoredAgents" : [ {
          "score" : 123,
          "agent" : ""
        } ],
        "priority" : 123,
        "queue" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        }
      },
      "endAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "aniName" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "startAcwTime" : "2000-01-23T04:56:07.000+0000",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "flaggedReason" : "aeiou",
      "consultParticipantId" : "aeiou",
      "screenRecordingState" : "aeiou",
      "queueName" : "aeiou",
      "coachedParticipantId" : "aeiou",
      "calls" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "other" : "",
        "confined" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "recording" : true,
        "errorInfo" : {
          "code" : "aeiou",
          "message" : "aeiou"
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "provider" : "aeiou",
        "afterCallWork" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou"
        },
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "faxStatus" : {
          "baudRate" : 123456789,
          "expectedPages" : 123456789,
          "lineErrors" : 123456789,
          "pageErrors" : 123456789,
          "activePage" : 123456789,
          "linesTransmitted" : 123456789,
          "bytesTransmitted" : 123456789,
          "direction" : "aeiou"
        },
        "uuiData" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "recordingState" : "aeiou",
        "self" : {
          "addressDisplayable" : "aeiou",
          "addressNormalized" : "aeiou",
          "name" : "aeiou",
          "addressRaw" : "aeiou",
          "nameRaw" : "aeiou"
        },
        "documentId" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "teamId" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "avatarImageUrl" : "aeiou",
        "afterCallWorkRequired" : true,
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : {
          "customerSession" : {
            "id" : "aeiou",
            "type" : "aeiou"
          },
          "triggeringAction" : {
            "actionMap" : {
              "id" : "aeiou",
              "version" : 123
            },
            "id" : "aeiou"
          },
          "customer" : {
            "idType" : "aeiou",
            "id" : "aeiou"
          }
        },
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "messages" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "authenticated" : true,
        "held" : true,
        "afterCallWorkRequired" : true,
        "errorInfo" : "",
        "type" : "aeiou",
        "toAddress" : "",
        "segments" : [ "" ],
        "recipientType" : "aeiou",
        "provider" : "aeiou",
        "journeyContext" : "",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "fromAddress" : "",
        "state" : "aeiou",
        "id" : "aeiou",
        "direction" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "scriptId" : "aeiou",
        "messages" : [ {
          "messageStatus" : "aeiou",
          "messageTime" : "2000-01-23T04:56:07.000+0000",
          "messageId" : "aeiou",
          "stickers" : [ {
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "media" : [ {
            "contentLengthBytes" : 123,
            "name" : "aeiou",
            "mediaType" : "aeiou",
            "id" : "aeiou",
            "url" : "aeiou"
          } ],
          "messageURI" : "aeiou",
          "messageSegmentCount" : 123
        } ],
        "recipientCountry" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "agentAssistantId" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "held" : true,
        "afterCallWorkRequired" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "socialMediaHub" : "aeiou",
        "provider" : "aeiou",
        "afterCallWork" : "",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "screenshares" : [ {
        "startAlertingTime" : "2000-01-23T04:56:07.000+0000",
        "peerId" : "aeiou",
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "wrapup" : "",
        "peerCount" : 123,
        "afterCallWorkRequired" : true,
        "sharing" : true,
        "segments" : [ "" ],
        "provider" : "aeiou",
        "context" : "aeiou",
        "afterCallWork" : "",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou"
      } ]
    } ]
  },
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "helpText" : "aeiou",
        "commentsRequired" : true,
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "isCritical" : true,
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "isKill" : true,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "dateLastLogin" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "countryCode" : "aeiou",
      "display" : "aeiou",
      "integration" : "microsoftteams",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "aeiou",
        "school" : "aeiou",
        "dateStart" : "2000-01-23T04:56:07.000+0000",
        "dateEnd" : "2000-01-23T04:56:07.000+0000",
        "fieldOfStudy" : "aeiou"
      } ],
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "team" : {
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : "",
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "mediaType" : [ "aeiou" ],
  "neverRelease" : true,
  "agentHasRead" : true,
  "conversationDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "queue" : {
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "enableManualAssignment" : true,
    "description" : "aeiou",
    "onHoldPrompt" : "",
    "emailInQueueFlow" : "",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 1.3579000000000001069366817318950779736042022705078125,
      "threshold" : 123,
      "operator" : "aeiou"
    } ],
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : "",
    "callingPartyNumber" : "aeiou",
    "userMemberCount" : 123,
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "joinedMemberCount" : 123,
    "messageInQueueFlow" : "",
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "name" : "aeiou"
  },
  "isScoringIndex" : true,
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter evaluationId: (path) evaluationId 
     - parameter body: (body) evaluation 
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<Evaluation> 
     */
    open class func putQualityConversationEvaluationWithRequestBuilder(conversationId: String, evaluationId: String, body: Evaluation, expand: String? = nil) -> RequestBuilder<Evaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let evaluationIdPreEscape = "\(evaluationId)"
        let evaluationIdPostEscape = evaluationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{evaluationId}", with: evaluationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand
            
        ])

        let requestBuilder: RequestBuilder<Evaluation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Evaluation form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualityForm(formId: String, body: EvaluationForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualityFormWithRequestBuilder(formId: formId, body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an evaluation form.
     
     - PUT /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Evaluation form 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func putQualityFormWithRequestBuilder(formId: String, body: EvaluationForm) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/forms/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Evaluation form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualityFormsEvaluation(formId: String, body: EvaluationForm, completion: @escaping ((_ data: EvaluationForm?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualityFormsEvaluationWithRequestBuilder(formId: formId, body: body)
        requestBuilder.execute { (response: Response<EvaluationForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an evaluation form.
     
     - PUT /api/v2/quality/forms/evaluations/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "helpText" : "aeiou",
      "commentsRequired" : true,
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "isCritical" : true,
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "isKill" : true,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Evaluation form 

     - returns: RequestBuilder<EvaluationForm> 
     */
    open class func putQualityFormsEvaluationWithRequestBuilder(formId: String, body: EvaluationForm) -> RequestBuilder<EvaluationForm> {
        var path = "/api/v2/quality/forms/evaluations/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a survey form.
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Survey form 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualityFormsSurvey(formId: String, body: SurveyForm, completion: @escaping ((_ data: SurveyForm?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualityFormsSurveyWithRequestBuilder(formId: formId, body: body)
        requestBuilder.execute { (response: Response<SurveyForm>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a survey form.
     
     - PUT /api/v2/quality/forms/surveys/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "footer" : "aeiou",
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "nextUri" : "aeiou",
    "previousUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "header" : "aeiou",
  "disabled" : true,
  "contextId" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "questionGroups" : [ {
    "visibilityCondition" : "",
    "name" : "aeiou",
    "questions" : [ {
      "explanationPrompt" : "aeiou",
      "helpText" : "aeiou",
      "visibilityCondition" : {
        "combiningOperation" : "aeiou",
        "predicates" : [ "{}" ]
      },
      "id" : "aeiou",
      "text" : "aeiou",
      "type" : "aeiou",
      "maxResponseCharacters" : 123,
      "naEnabled" : true,
      "answerOptions" : [ {
        "id" : "aeiou",
        "text" : "aeiou",
        "value" : 123
      } ]
    } ],
    "id" : "aeiou",
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 
     - parameter body: (body) Survey form 

     - returns: RequestBuilder<SurveyForm> 
     */
    open class func putQualityFormsSurveyWithRequestBuilder(formId: String, body: SurveyForm) -> RequestBuilder<SurveyForm> {
        var path = "/api/v2/quality/forms/surveys/{formId}"
        let formIdPreEscape = "\(formId)"
        let formIdPostEscape = formIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{formId}", with: formIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyForm>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a survey as an end-customer, for the purposes of scoring it.
     
     - parameter body: (body) survey 
     - parameter customerSurveyUrl: (query) customerSurveyUrl 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putQualitySurveysScorable(body: ScorableSurvey, customerSurveyUrl: String, completion: @escaping ((_ data: ScorableSurvey?,_ error: Error?) -> Void)) {
        let requestBuilder = putQualitySurveysScorableWithRequestBuilder(body: body, customerSurveyUrl: customerSurveyUrl)
        requestBuilder.execute { (response: Response<ScorableSurvey>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a survey as an end-customer, for the purposes of scoring it.
     
     - PUT /api/v2/quality/surveys/scorable
     - 
     - examples: [{contentType=application/json, example={
  "surveyForm" : {
    "footer" : "aeiou",
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "nextUri" : "aeiou",
      "previousUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "header" : "aeiou",
    "disabled" : true,
    "contextId" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "questionGroups" : [ {
      "visibilityCondition" : "",
      "name" : "aeiou",
      "questions" : [ {
        "explanationPrompt" : "aeiou",
        "helpText" : "aeiou",
        "visibilityCondition" : {
          "combiningOperation" : "aeiou",
          "predicates" : [ "{}" ]
        },
        "id" : "aeiou",
        "text" : "aeiou",
        "type" : "aeiou",
        "maxResponseCharacters" : 123,
        "naEnabled" : true,
        "answerOptions" : [ {
          "id" : "aeiou",
          "text" : "aeiou",
          "value" : 123
        } ]
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "answers" : {
    "npsScore" : 123,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "score" : 123,
        "questionId" : "aeiou",
        "npsTextAnswer" : "aeiou",
        "markedNA" : true,
        "freeTextAnswer" : "aeiou",
        "npsScore" : 123
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125
  },
  "id" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter body: (body) survey 
     - parameter customerSurveyUrl: (query) customerSurveyUrl 

     - returns: RequestBuilder<ScorableSurvey> 
     */
    open class func putQualitySurveysScorableWithRequestBuilder(body: ScorableSurvey, customerSurveyUrl: String) -> RequestBuilder<ScorableSurvey> {
        let path = "/api/v2/quality/surveys/scorable"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "customerSurveyUrl": customerSurveyUrl
            
        ])

        let requestBuilder: RequestBuilder<ScorableSurvey>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
