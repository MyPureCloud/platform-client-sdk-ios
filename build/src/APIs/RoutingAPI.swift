//
// RoutingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class RoutingAPI {
    
    
    
    /**
     
     Delete a domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingEmailDomain(domainId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingEmailDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a domain
     
     - DELETE /api/v2/routing/email/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingEmailDomainWithRequestBuilder(domainId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/email/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingEmailDomainRoute(domainName: String, routeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a route
     
     - DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query) forceDelete (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueue(queueId: String, forceDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueWithRequestBuilder(queueId: queueId, forceDelete: forceDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a queue
     
     - DELETE /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query) forceDelete (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueWithRequestBuilder(queueId: String, forceDelete: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "forceDelete": forceDelete
            
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete queue member
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueueUser(queueId: String, memberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueUserWithRequestBuilder(queueId: queueId, memberId: memberId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete queue member
     
     - DELETE /api/v2/routing/queues/{queueId}/users/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueUserWithRequestBuilder(queueId: String, memberId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete a wrap-up code from a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueueWrapupcode(queueId: String, codeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueWrapupcodeWithRequestBuilder(queueId: queueId, codeId: codeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a wrap-up code from a queue
     
     - DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueWrapupcodeWithRequestBuilder(queueId: String, codeId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     
     Delete an organization's routing settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSettings(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an organization's routing settings
     
     - DELETE /api/v2/routing/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSettingsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSkill(skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSkillWithRequestBuilder(skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete Routing Skill
     
     - DELETE /api/v2/routing/skills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSkillWithRequestBuilder(skillId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/skills/{skillId}"
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSmsPhonenumber(addressId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a phone number provisioned for SMS.
     
     - DELETE /api/v2/routing/sms/phonenumbers/{addressId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSmsPhonenumberWithRequestBuilder(addressId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - DELETE /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     
     Delete the organization-wide max utilization settings and revert to the system default.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUtilization(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUtilizationWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the organization-wide max utilization settings and revert to the system default.
     
     - DELETE /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUtilizationWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingWrapupcode(codeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingWrapupcodeWithRequestBuilder(codeId: codeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete wrap-up code
     
     - DELETE /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingWrapupcodeWithRequestBuilder(codeId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Remove routing language from user
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutinglanguage(userId: String, languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove routing language from user
     
     - DELETE /api/v2/users/{userId}/routinglanguages/{languageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutingskill(userId: String, skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Remove routing skill from user
     
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutingskillWithRequestBuilder(userId: String, skillId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Get domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomain(domainId: String, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get domain
     
     - GET /api/v2/routing/email/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "mailFromSettings" : {
    "records" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou"
    } ],
    "mailFromDomain" : "aeiou",
    "status" : "aeiou"
  },
  "subDomain" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mxRecordStatus" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func getRoutingEmailDomainWithRequestBuilder(domainId: String) -> RequestBuilder<InboundDomain> {
        var path = "/api/v2/routing/email/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomainRoute(domainName: String, routeId: String, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a route
     
     - GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "replyEmailAddress" : {
    "route" : "",
    "domain" : ""
  },
  "selfUri" : "aeiou",
  "pattern" : "aeiou",
  "language" : "",
  "autoBcc" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "priority" : 123,
  "fromEmail" : "aeiou",
  "skills" : [ "" ],
  "name" : "aeiou",
  "fromName" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "flow" : "",
  "spamFlow" : ""
}}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func getRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String) -> RequestBuilder<InboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get routes
     
     - parameter domainName: (path) email domain 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pattern: (query) Filter routes by the route&#39;s pattern property (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomainRoutes(domainName: String, pageSize: Int? = nil, pageNumber: Int? = nil, pattern: String? = nil, completion: @escaping ((_ data: InboundRouteEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainRoutesWithRequestBuilder(domainName: domainName, pageSize: pageSize, pageNumber: pageNumber, pattern: pattern)
        requestBuilder.execute { (response: Response<InboundRouteEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get routes
     
     - GET /api/v2/routing/email/domains/{domainName}/routes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "replyEmailAddress" : {
      "route" : "",
      "domain" : ""
    },
    "selfUri" : "aeiou",
    "pattern" : "aeiou",
    "language" : "",
    "autoBcc" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "priority" : 123,
    "fromEmail" : "aeiou",
    "skills" : [ "" ],
    "name" : "aeiou",
    "fromName" : "aeiou",
    "id" : "aeiou",
    "queue" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "flow" : "",
    "spamFlow" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter domainName: (path) email domain 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pattern: (query) Filter routes by the route&#39;s pattern property (optional)

     - returns: RequestBuilder<InboundRouteEntityListing> 
     */
    open class func getRoutingEmailDomainRoutesWithRequestBuilder(domainName: String, pageSize: Int? = nil, pageNumber: Int? = nil, pattern: String? = nil) -> RequestBuilder<InboundRouteEntityListing> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pattern": pattern
            
        ])

        let requestBuilder: RequestBuilder<InboundRouteEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get domains
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomains(completion: @escaping ((_ data: InboundDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainsWithRequestBuilder()
        requestBuilder.execute { (response: Response<InboundDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get domains
     
     - GET /api/v2/routing/email/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "customSMTPServer" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "mailFromSettings" : {
      "records" : [ {
        "name" : "aeiou",
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "mailFromDomain" : "aeiou",
      "status" : "aeiou"
    },
    "subDomain" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "mxRecordStatus" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<InboundDomainEntityListing> 
     */
    open class func getRoutingEmailDomainsWithRequestBuilder() -> RequestBuilder<InboundDomainEntityListing> {
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get email setup
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailSetup(completion: @escaping ((_ data: EmailSetup?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailSetupWithRequestBuilder()
        requestBuilder.execute { (response: Response<EmailSetup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get email setup
     
     - GET /api/v2/routing/email/setup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "rootDomain" : "aeiou"
}}]

     - returns: RequestBuilder<EmailSetup> 
     */
    open class func getRoutingEmailSetupWithRequestBuilder() -> RequestBuilder<EmailSetup> {
        let path = "/api/v2/routing/email/setup"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailSetup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortOrder_getRoutingLanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    
    
    /**
     
     Get the list of supported languages.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingLanguages(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingLanguages? = nil, name: String? = nil, _id: [String]? = nil, completion: @escaping ((_ data: LanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingLanguagesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name, _id: _id)
        requestBuilder.execute { (response: Response<LanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of supported languages.
     
     - GET /api/v2/routing/languages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "version" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<LanguageEntityListing> 
     */
    open class func getRoutingLanguagesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingLanguages? = nil, name: String? = nil, _id: [String]? = nil) -> RequestBuilder<LanguageEntityListing> {
        let path = "/api/v2/routing/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "name": name, 
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<LanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a recipient
     
     - parameter recipientId: (path) Recipient ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingMessageRecipient(recipientId: String, completion: @escaping ((_ data: Recipient?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingMessageRecipientWithRequestBuilder(recipientId: recipientId)
        requestBuilder.execute { (response: Response<Recipient>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a recipient
     
     - GET /api/v2/routing/message/recipients/{recipientId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "messengerType" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "flow" : {
    "publishedBy" : "",
    "savedVersion" : "",
    "outputSchema" : "{}",
    "inputSchema" : "{}",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "type" : "aeiou",
    "lockedUser" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "debugVersion" : "",
    "lockedClient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "publishedVersion" : {
      "generationId" : "aeiou",
      "debug" : true,
      "outputSchema" : "",
      "inputSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "createdByClient" : "",
      "selfUri" : "aeiou",
      "type" : "aeiou",
      "secure" : true,
      "configurationUri" : "aeiou",
      "configurationVersion" : "aeiou",
      "dateCreated" : 123456789,
      "publishResultUri" : "aeiou",
      "createdBy" : "",
      "name" : "aeiou",
      "id" : "aeiou",
      "commitVersion" : "aeiou"
    },
    "currentOperation" : {
      "errorMessageParams" : {
        "key" : "aeiou"
      },
      "actionStatus" : "aeiou",
      "errorMessage" : "aeiou",
      "client" : "",
      "errorCode" : "aeiou",
      "id" : "aeiou",
      "complete" : true,
      "user" : "",
      "errorDetails" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "actionName" : "aeiou"
    },
    "system" : true,
    "deleted" : true,
    "name" : "aeiou",
    "checkedInVersion" : "",
    "id" : "aeiou"
  }
}}]
     
     - parameter recipientId: (path) Recipient ID 

     - returns: RequestBuilder<Recipient> 
     */
    open class func getRoutingMessageRecipientWithRequestBuilder(recipientId: String) -> RequestBuilder<Recipient> {
        var path = "/api/v2/routing/message/recipients/{recipientId}"
        let recipientIdPreEscape = "\(recipientId)"
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recipient>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum MessengerType_getRoutingMessageRecipients: String { 
        case sms = "sms"
        case facebook = "facebook"
        case twitter = "twitter"
        case line = "line"
        case whatsapp = "whatsapp"
    }

    
    
    
    
    
    
    /**
     
     Get recipients
     
     - parameter messengerType: (query) Messenger Type (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingMessageRecipients(messengerType: MessengerType_getRoutingMessageRecipients? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: RecipientListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingMessageRecipientsWithRequestBuilder(messengerType: messengerType, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<RecipientListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get recipients
     
     - GET /api/v2/routing/message/recipients
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "messengerType" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "",
    "id" : "aeiou",
    "flow" : {
      "publishedBy" : "",
      "savedVersion" : "",
      "outputSchema" : "{}",
      "inputSchema" : "{}",
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "active" : true,
      "type" : "aeiou",
      "lockedUser" : {
        "addresses" : [ "" ],
        "acdAutoAnswer" : true,
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "division" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "authorization" : {
          "unusedRoles" : [ "" ],
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "allowConditions" : true,
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "skills" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "skillUri" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "name" : "aeiou",
            "defaultUser" : "",
            "id" : "aeiou",
            "type" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "lastTokenIssued" : {
          "dateIssued" : "2000-01-23T04:56:07.000+0000"
        },
        "email" : "aeiou",
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "manager" : "",
        "employerInfo" : {
          "employeeType" : "aeiou",
          "dateHire" : "aeiou",
          "employeeId" : "aeiou",
          "officialName" : "aeiou"
        },
        "languages" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou",
          "languageUri" : "aeiou",
          "proficiency" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "message" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "groups" : [ {
          "images" : [ "" ],
          "addresses" : [ {
            "extension" : "aeiou",
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "visibility" : "aeiou",
          "memberCount" : 123456789,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "owners" : [ "" ],
          "type" : "aeiou",
          "version" : 123,
          "rulesVisible" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ],
        "primaryContactInfo" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "biography" : {
          "hobbies" : [ "aeiou" ],
          "biography" : "aeiou",
          "interests" : [ "aeiou" ],
          "spouse" : "aeiou"
        },
        "certifications" : [ "aeiou" ],
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000",
          "indefinite" : true
        },
        "languagePreference" : "aeiou",
        "profileSkills" : [ "aeiou" ],
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "locations" : [ {
          "notes" : "aeiou",
          "coordinates" : {
            "key" : 1.3579000000000001069366817318950779736042022705078125
          },
          "locationDefinition" : "",
          "id" : "aeiou",
          "floorplanId" : "aeiou"
        } ],
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "locations" : [ {
            "images" : "aeiou",
            "address" : {
              "zipcode" : "aeiou",
              "country" : "aeiou",
              "city" : "aeiou",
              "street1" : "aeiou",
              "countryName" : "aeiou",
              "state" : "aeiou",
              "street2" : "aeiou"
            },
            "notes" : "aeiou",
            "floorplanImage" : [ "" ],
            "addressVerificationDetails" : {
              "dateStarted" : "2000-01-23T04:56:07.000+0000",
              "dateFinished" : "2000-01-23T04:56:07.000+0000",
              "service" : "smartystreets-us",
              "status" : "aeiou"
            },
            "selfUri" : "aeiou",
            "profileImage" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "emergencyNumber" : {
              "number" : "aeiou",
              "e164" : "aeiou",
              "type" : "aeiou"
            },
            "version" : 123,
            "path" : [ "aeiou" ],
            "addressStored" : true,
            "name" : "aeiou",
            "id" : "aeiou",
            "contactUser" : {
              "selfUri" : "aeiou",
              "id" : "aeiou"
            },
            "state" : "aeiou",
            "addressVerified" : true
          } ],
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "debugVersion" : "",
      "lockedClient" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "publishedVersion" : {
        "generationId" : "aeiou",
        "debug" : true,
        "outputSchema" : "",
        "inputSchema" : {
          "$schema" : "aeiou",
          "description" : "aeiou",
          "id" : "aeiou",
          "additionalProperties" : "{}",
          "title" : "aeiou",
          "type" : "aeiou",
          "required" : [ "aeiou" ],
          "properties" : {
            "key" : "{}"
          }
        },
        "createdByClient" : "",
        "selfUri" : "aeiou",
        "type" : "aeiou",
        "secure" : true,
        "configurationUri" : "aeiou",
        "configurationVersion" : "aeiou",
        "dateCreated" : 123456789,
        "publishResultUri" : "aeiou",
        "createdBy" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "commitVersion" : "aeiou"
      },
      "currentOperation" : {
        "errorMessageParams" : {
          "key" : "aeiou"
        },
        "actionStatus" : "aeiou",
        "errorMessage" : "aeiou",
        "client" : "",
        "errorCode" : "aeiou",
        "id" : "aeiou",
        "complete" : true,
        "user" : "",
        "errorDetails" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "actionName" : "aeiou"
      },
      "system" : true,
      "deleted" : true,
      "name" : "aeiou",
      "checkedInVersion" : "",
      "id" : "aeiou"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter messengerType: (query) Messenger Type (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<RecipientListing> 
     */
    open class func getRoutingMessageRecipientsWithRequestBuilder(messengerType: MessengerType_getRoutingMessageRecipients? = nil, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<RecipientListing> {
        let path = "/api/v2/routing/message/recipients"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "messengerType": messengerType?.rawValue, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<RecipientListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get details about this queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueue(queueId: String, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueWithRequestBuilder(queueId: queueId)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about this queue.
     
     - GET /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "memberCount" : 123,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoAnswerOnly" : true,
  "whisperPrompt" : "",
  "outboundEmailAddress" : {
    "route" : {
      "replyEmailAddress" : "",
      "selfUri" : "aeiou",
      "pattern" : "aeiou",
      "language" : "",
      "autoBcc" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "priority" : 123,
      "fromEmail" : "aeiou",
      "skills" : [ "" ],
      "name" : "aeiou",
      "fromName" : "aeiou",
      "id" : "aeiou",
      "queue" : "",
      "flow" : "",
      "spamFlow" : ""
    },
    "domain" : ""
  },
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "aeiou",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+0000",
      "features" : "{}",
      "versionId" : "aeiou",
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "pages" : [ {
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "startPageId" : "aeiou",
      "id" : "aeiou",
      "publishedDate" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "outboundMessagingAddresses" : {
    "smsAddress" : ""
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 

     - returns: RequestBuilder<Queue> 
     */
    open class func getRoutingQueueWithRequestBuilder(queueId: String) -> RequestBuilder<Queue> {
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get Estimated Wait Time
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueEstimatedwaittime(queueId: String, conversationId: String? = nil, completion: @escaping ((_ data: EstimatedWaitTimePredictions?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueEstimatedwaittimeWithRequestBuilder(queueId: queueId, conversationId: conversationId)
        requestBuilder.execute { (response: Response<EstimatedWaitTimePredictions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Estimated Wait Time
     
     - GET /api/v2/routing/queues/{queueId}/estimatedwaittime
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "formula" : "aeiou",
    "intent" : "aeiou",
    "estimatedWaitTimeSeconds" : 123
  } ]
}}]
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)

     - returns: RequestBuilder<EstimatedWaitTimePredictions> 
     */
    open class func getRoutingQueueEstimatedwaittimeWithRequestBuilder(queueId: String, conversationId: String? = nil) -> RequestBuilder<EstimatedWaitTimePredictions> {
        var path = "/api/v2/routing/queues/{queueId}/estimatedwaittime"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "conversationId": conversationId
            
        ])

        let requestBuilder: RequestBuilder<EstimatedWaitTimePredictions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get Estimated Wait Time
     
     - parameter queueId: (path) queueId 
     - parameter mediaType: (path) mediaType 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueMediatypeEstimatedwaittime(queueId: String, mediaType: String, completion: @escaping ((_ data: EstimatedWaitTimePredictions?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueMediatypeEstimatedwaittimeWithRequestBuilder(queueId: queueId, mediaType: mediaType)
        requestBuilder.execute { (response: Response<EstimatedWaitTimePredictions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Estimated Wait Time
     
     - GET /api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "formula" : "aeiou",
    "intent" : "aeiou",
    "estimatedWaitTimeSeconds" : 123
  } ]
}}]
     
     - parameter queueId: (path) queueId 
     - parameter mediaType: (path) mediaType 

     - returns: RequestBuilder<EstimatedWaitTimePredictions> 
     */
    open class func getRoutingQueueMediatypeEstimatedwaittimeWithRequestBuilder(queueId: String, mediaType: String) -> RequestBuilder<EstimatedWaitTimePredictions> {
        var path = "/api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let mediaTypePreEscape = "\(mediaType)"
        let mediaTypePostEscape = mediaTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mediaType}", with: mediaTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EstimatedWaitTimePredictions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    public enum Expand_getRoutingQueueUsers: String { 
        case routingstatus = "routingStatus"
        case presence = "presence"
        case conversationsummary = "conversationSummary"
        case outofoffice = "outOfOffice"
        case geolocation = "geolocation"
        case station = "station"
        case authorization = "authorization"
        case lasttokenissued = "lasttokenissued"
        case authorizationUnusedroles = "authorization.unusedRoles"
        case profileskills = "profileSkills"
        case certifications = "certifications"
        case locations = "locations"
        case groups = "groups"
        case skills = "skills"
        case languages = "languages"
        case languagepreference = "languagePreference"
        case employerinfo = "employerInfo"
        case biography = "biography"
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get the members of this queue
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter joined: (query) Filter by joined status (optional)
     - parameter name: (query) Filter by queue member name (optional)
     - parameter profileSkills: (query) Filter by profile skill (optional)
     - parameter skills: (query) Filter by skill (optional)
     - parameter languages: (query) Filter by language (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueUsers(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, joined: Bool? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil, completion: @escaping ((_ data: QueueMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueUsersWithRequestBuilder(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, joined: joined, name: name, profileSkills: profileSkills, skills: skills, languages: languages, routingStatus: routingStatus, presence: presence)
        requestBuilder.execute { (response: Response<QueueMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the members of this queue
     
     - GET /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "memberBy" : "aeiou",
    "routingStatus" : "",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "ringNumber" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter joined: (query) Filter by joined status (optional)
     - parameter name: (query) Filter by queue member name (optional)
     - parameter profileSkills: (query) Filter by profile skill (optional)
     - parameter skills: (query) Filter by skill (optional)
     - parameter languages: (query) Filter by language (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)

     - returns: RequestBuilder<QueueMemberEntityListing> 
     */
    open class func getRoutingQueueUsersWithRequestBuilder(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, joined: Bool? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil) -> RequestBuilder<QueueMemberEntityListing> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "joined": joined, 
            
            "name": name, 
            
            "profileSkills": profileSkills, 
            
            "skills": skills, 
            
            "languages": languages, 
            
            "routingStatus": routingStatus, 
            
            "presence": presence
            
        ])

        let requestBuilder: RequestBuilder<QueueMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get the wrap-up codes for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueWrapupcodes(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: WrapupCodeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueWrapupcodesWithRequestBuilder(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<WrapupCodeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the wrap-up codes for a queue
     
     - GET /api/v2/routing/queues/{queueId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<WrapupCodeEntityListing> 
     */
    open class func getRoutingQueueWrapupcodesWithRequestBuilder(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<WrapupCodeEntityListing> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<WrapupCodeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get list of queues.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueues(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, name: name, _id: _id, divisionId: divisionId)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of queues.
     
     - GET /api/v2/routing/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "autoAnswerOnly" : true,
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil) -> RequestBuilder<QueueEntityListing> {
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "name": name, 
            
            "id": _id, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortBy_getRoutingQueuesDivisionviews: String { 
        case name = "name"
        case _id = "id"
        case divisionid = "divisionId"
    }

    
    
    
    public enum SortOrder_getRoutingQueuesDivisionviews: String { 
        case asc = "asc"
        case desc = "desc"
        case score = "score"
    }

    
    
    
    
    
    
    
    
    /**
     
     Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
     
     - parameter pageSize: (query) Page size [max value is 100] (optional, default to 25)
     - parameter pageNumber: (query) Page number [max value is 5] (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) Queue ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviews? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
     
     - GET /api/v2/routing/queues/divisionviews
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "autoAnswerOnly" : true,
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size [max value is 100] (optional, default to 25)
     - parameter pageNumber: (query) Page number [max value is 5] (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) Queue ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviews? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil) -> RequestBuilder<QueueEntityListing> {
        let path = "/api/v2/routing/queues/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy?.rawValue, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "name": name, 
            
            "id": _id, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortBy_getRoutingQueuesDivisionviewsAll: String { 
        case name = "name"
        case _id = "id"
        case divisionid = "divisionId"
    }

    
    
    
    public enum SortOrder_getRoutingQueuesDivisionviewsAll: String { 
        case asc = "asc"
        case desc = "desc"
        case score = "score"
    }

    
    
    /**
     
     Get a paged listing of simplified queue objects.  Can be used to get a digest of all queues in an organization.
     
     - parameter pageSize: (query) Page size [max value is 500] (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesDivisionviewsAll(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviewsAll? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviewsAll? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesDivisionviewsAllWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a paged listing of simplified queue objects.  Can be used to get a digest of all queues in an organization.
     
     - GET /api/v2/routing/queues/divisionviews/all
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "autoAnswerOnly" : true,
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size [max value is 500] (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesDivisionviewsAllWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviewsAll? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviewsAll? = nil) -> RequestBuilder<QueueEntityListing> {
        let path = "/api/v2/routing/queues/divisionviews/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy?.rawValue, 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get a paged listing of queues the user is a member of.
     
     - parameter joined: (query) Joined (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesMe(joined: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesMeWithRequestBuilder(joined: joined, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a paged listing of queues the user is a member of.
     
     - GET /api/v2/routing/queues/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter joined: (query) Joined (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter sortOrder: (query) Sort order (optional, default to asc)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getRoutingQueuesMeWithRequestBuilder(joined: Bool? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<UserQueueEntityListing> {
        let path = "/api/v2/routing/queues/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "joined": joined, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder
            
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get an organization's routing settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettings(completion: @escaping ((_ data: RoutingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<RoutingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an organization's routing settings
     
     - GET /api/v2/routing/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetAgentScoreOnPresenceChange" : true
}}]

     - returns: RequestBuilder<RoutingSettings> 
     */
    open class func getRoutingSettingsWithRequestBuilder() -> RequestBuilder<RoutingSettings> {
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get Contact Center Settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettingsContactcenter(completion: @escaping ((_ data: ContactCenterSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsContactcenterWithRequestBuilder()
        requestBuilder.execute { (response: Response<ContactCenterSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Contact Center Settings
     
     - GET /api/v2/routing/settings/contactcenter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "removeSkillsFromBlindTransfer" : true
}}]

     - returns: RequestBuilder<ContactCenterSettings> 
     */
    open class func getRoutingSettingsContactcenterWithRequestBuilder() -> RequestBuilder<ContactCenterSettings> {
        let path = "/api/v2/routing/settings/contactcenter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactCenterSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get Transcription Settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettingsTranscription(completion: @escaping ((_ data: TranscriptionSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsTranscriptionWithRequestBuilder()
        requestBuilder.execute { (response: Response<TranscriptionSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Transcription Settings
     
     - GET /api/v2/routing/settings/transcription
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "transcription" : "aeiou",
  "transcriptionConfidenceThreshold" : 123
}}]

     - returns: RequestBuilder<TranscriptionSettings> 
     */
    open class func getRoutingSettingsTranscriptionWithRequestBuilder() -> RequestBuilder<TranscriptionSettings> {
        let path = "/api/v2/routing/settings/transcription"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptionSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkill(skillId: String, completion: @escaping ((_ data: RoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillWithRequestBuilder(skillId: skillId)
        requestBuilder.execute { (response: Response<RoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get Routing Skill
     
     - GET /api/v2/routing/skills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou"
}}]
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<RoutingSkill> 
     */
    open class func getRoutingSkillWithRequestBuilder(skillId: String) -> RequestBuilder<RoutingSkill> {
        var path = "/api/v2/routing/skills/{skillId}"
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get the list of routing skills.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Filter for results that start with this value (optional)
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkills(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil, completion: @escaping ((_ data: SkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, _id: _id)
        requestBuilder.execute { (response: Response<SkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the list of routing skills.
     
     - GET /api/v2/routing/skills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "version" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Filter for results that start with this value (optional)
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<SkillEntityListing> 
     */
    open class func getRoutingSkillsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil) -> RequestBuilder<SkillEntityListing> {
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "name": name, 
            
            "id": _id
            
        ])

        let requestBuilder: RequestBuilder<SkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get an Address by Id for SMS
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAddress(addressId: String, completion: @escaping ((_ data: SmsAddress?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAddressWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<SmsAddress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get an Address by Id for SMS
     
     - GET /api/v2/routing/sms/addresses/{addressId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "validated" : true,
  "city" : "aeiou",
  "street" : "aeiou",
  "countryCode" : "aeiou",
  "postalCode" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "region" : "aeiou"
}}]
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<SmsAddress> 
     */
    open class func getRoutingSmsAddressWithRequestBuilder(addressId: String) -> RequestBuilder<SmsAddress> {
        var path = "/api/v2/routing/sms/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsAddress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get a list of Addresses for SMS
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAddresses(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: SmsAddressEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAddressesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<SmsAddressEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Addresses for SMS
     
     - GET /api/v2/routing/sms/addresses
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "validated" : true,
    "city" : "aeiou",
    "street" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "region" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<SmsAddressEntityListing> 
     */
    open class func getRoutingSmsAddressesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<SmsAddressEntityListing> {
        let path = "/api/v2/routing/sms/addresses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SmsAddressEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum PhoneNumberType_getRoutingSmsAvailablephonenumbers: String { 
        case local = "local"
        case mobile = "mobile"
        case tollfree = "tollfree"
    }

    
    
    
    
    
    
    
    
    
    
    
    public enum AddressRequirement_getRoutingSmsAvailablephonenumbers: String { 
        case _none = "none"
        case any = "any"
        case local = "local"
        case foreign = "foreign"
    }

    
    
    /**
     
     Get a list of available phone numbers for SMS provisioning.
     
     - parameter countryCode: (query) The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned 
     - parameter phoneNumberType: (query) Type of available phone numbers searched 
     - parameter region: (query) Region/province/state that can be used to restrict the numbers returned (optional)
     - parameter city: (query) City that can be used to restrict the numbers returned (optional)
     - parameter areaCode: (query) Area code that can be used to restrict the numbers returned (optional)
     - parameter pattern: (query) A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit. (optional)
     - parameter addressRequirement: (query) This indicates whether the phone number requires to have an Address registered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAvailablephonenumbers(countryCode: String, phoneNumberType: PhoneNumberType_getRoutingSmsAvailablephonenumbers, region: String? = nil, city: String? = nil, areaCode: String? = nil, pattern: String? = nil, addressRequirement: AddressRequirement_getRoutingSmsAvailablephonenumbers? = nil, completion: @escaping ((_ data: SMSAvailablePhoneNumberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAvailablephonenumbersWithRequestBuilder(countryCode: countryCode, phoneNumberType: phoneNumberType, region: region, city: city, areaCode: areaCode, pattern: pattern, addressRequirement: addressRequirement)
        requestBuilder.execute { (response: Response<SMSAvailablePhoneNumberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of available phone numbers for SMS provisioning.
     
     - GET /api/v2/routing/sms/availablephonenumbers
     - This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addressRequirement" : "aeiou",
    "phoneNumber" : "aeiou",
    "capabilities" : [ "aeiou" ],
    "city" : "aeiou",
    "countryCode" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "phoneNumberType" : "aeiou",
    "id" : "aeiou",
    "region" : "aeiou"
  } ]
}}]
     
     - parameter countryCode: (query) The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned 
     - parameter phoneNumberType: (query) Type of available phone numbers searched 
     - parameter region: (query) Region/province/state that can be used to restrict the numbers returned (optional)
     - parameter city: (query) City that can be used to restrict the numbers returned (optional)
     - parameter areaCode: (query) Area code that can be used to restrict the numbers returned (optional)
     - parameter pattern: (query) A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit. (optional)
     - parameter addressRequirement: (query) This indicates whether the phone number requires to have an Address registered. (optional)

     - returns: RequestBuilder<SMSAvailablePhoneNumberEntityListing> 
     */
    open class func getRoutingSmsAvailablephonenumbersWithRequestBuilder(countryCode: String, phoneNumberType: PhoneNumberType_getRoutingSmsAvailablephonenumbers, region: String? = nil, city: String? = nil, areaCode: String? = nil, pattern: String? = nil, addressRequirement: AddressRequirement_getRoutingSmsAvailablephonenumbers? = nil) -> RequestBuilder<SMSAvailablePhoneNumberEntityListing> {
        let path = "/api/v2/routing/sms/availablephonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "countryCode": countryCode, 
            
            "region": region, 
            
            "city": city, 
            
            "areaCode": areaCode, 
            
            "phoneNumberType": phoneNumberType.rawValue, 
            
            "pattern": pattern, 
            
            "addressRequirement": addressRequirement?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<SMSAvailablePhoneNumberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsPhonenumber(addressId: String, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a phone number provisioned for SMS.
     
     - GET /api/v2/routing/sms/phonenumbers/{addressId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "purchaseDate" : "2000-01-23T04:56:07.000+0000",
  "capabilities" : [ "aeiou" ],
  "shortCodeBillingType" : "aeiou",
  "selfUri" : "aeiou",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoRenewable" : "aeiou",
  "phoneNumberStatus" : "aeiou",
  "renewalDate" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "addressId" : {
    "validated" : true,
    "city" : "aeiou",
    "street" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "region" : "aeiou"
  },
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "countryCode" : "aeiou",
  "name" : "aeiou",
  "phoneNumberType" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "cancellationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func getRoutingSmsPhonenumberWithRequestBuilder(addressId: String) -> RequestBuilder<SmsPhoneNumber> {
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum PhoneNumberType_getRoutingSmsPhonenumbers: String { 
        case local = "local"
        case mobile = "mobile"
        case tollfree = "tollfree"
        case shortcode = "shortcode"
    }

    
    
    
    public enum PhoneNumberStatus_getRoutingSmsPhonenumbers: String { 
        case active = "active"
        case invalid = "invalid"
        case porting = "porting"
    }

    
    
    
    
    
    
    /**
     
     Get a list of provisioned phone numbers.
     
     - parameter phoneNumber: (query) Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used. (optional)
     - parameter phoneNumberType: (query) Filter on phone number type (optional)
     - parameter phoneNumberStatus: (query) Filter on phone number status (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsPhonenumbers(phoneNumber: String? = nil, phoneNumberType: PhoneNumberType_getRoutingSmsPhonenumbers? = nil, phoneNumberStatus: PhoneNumberStatus_getRoutingSmsPhonenumbers? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: SmsPhoneNumberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsPhonenumbersWithRequestBuilder(phoneNumber: phoneNumber, phoneNumberType: phoneNumberType, phoneNumberStatus: phoneNumberStatus, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<SmsPhoneNumberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of provisioned phone numbers.
     
     - GET /api/v2/routing/sms/phonenumbers
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "purchaseDate" : "2000-01-23T04:56:07.000+0000",
    "capabilities" : [ "aeiou" ],
    "shortCodeBillingType" : "aeiou",
    "selfUri" : "aeiou",
    "provisionedThroughPureCloud" : true,
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "autoRenewable" : "aeiou",
    "phoneNumberStatus" : "aeiou",
    "renewalDate" : "2000-01-23T04:56:07.000+0000",
    "version" : 123,
    "addressId" : {
      "validated" : true,
      "city" : "aeiou",
      "street" : "aeiou",
      "countryCode" : "aeiou",
      "postalCode" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "region" : "aeiou"
    },
    "phoneNumber" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "countryCode" : "aeiou",
    "name" : "aeiou",
    "phoneNumberType" : "aeiou",
    "modifiedBy" : "",
    "id" : "aeiou",
    "cancellationDate" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter phoneNumber: (query) Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used. (optional)
     - parameter phoneNumberType: (query) Filter on phone number type (optional)
     - parameter phoneNumberStatus: (query) Filter on phone number status (optional)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<SmsPhoneNumberEntityListing> 
     */
    open class func getRoutingSmsPhonenumbersWithRequestBuilder(phoneNumber: String? = nil, phoneNumberType: PhoneNumberType_getRoutingSmsPhonenumbers? = nil, phoneNumberStatus: PhoneNumberStatus_getRoutingSmsPhonenumbers? = nil, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<SmsPhoneNumberEntityListing> {
        let path = "/api/v2/routing/sms/phonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "phoneNumber": phoneNumber, 
            
            "phoneNumberType": phoneNumberType?.rawValue, 
            
            "phoneNumberStatus": phoneNumberStatus?.rawValue, 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<SmsPhoneNumberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - GET /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Utilization> 
     */
    open class func getRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Utilization> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get the organization-wide max utilization settings.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUtilization(completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUtilizationWithRequestBuilder()
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get the organization-wide max utilization settings.
     
     - GET /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]

     - returns: RequestBuilder<Utilization> 
     */
    open class func getRoutingUtilizationWithRequestBuilder() -> RequestBuilder<Utilization> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get details about this wrap-up code.
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcode(codeId: String, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodeWithRequestBuilder(codeId: codeId)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about this wrap-up code.
     
     - GET /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func getRoutingWrapupcodeWithRequestBuilder(codeId: String) -> RequestBuilder<WrapupCode> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum SortBy_getRoutingWrapupcodes: String { 
        case name = "name"
        case _id = "id"
    }

    
    
    
    
    /**
     
     Get list of wrapup codes.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcodes(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingWrapupcodes? = nil, name: String? = nil, completion: @escaping ((_ data: WrapupCodeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, name: name)
        requestBuilder.execute { (response: Response<WrapupCodeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get list of wrapup codes.
     
     - GET /api/v2/routing/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)

     - returns: RequestBuilder<WrapupCodeEntityListing> 
     */
    open class func getRoutingWrapupcodesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingWrapupcodes? = nil, name: String? = nil) -> RequestBuilder<WrapupCodeEntityListing> {
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy?.rawValue, 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<WrapupCodeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get queues for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter joined: (query) Is joined to the queue (optional, default to true)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserQueues(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserQueuesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, joined: joined, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get queues for user
     
     - GET /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter joined: (query) Is joined to the queue (optional, default to true)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getUserQueuesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "joined": joined, 
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum SortOrder_getUserRoutinglanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     List routing language for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutinglanguages(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil, completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutinglanguagesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List routing language for user
     
     - GET /api/v2/users/{userId}/routinglanguages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func getUserRoutinglanguagesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil) -> RequestBuilder<UserLanguageEntityListing> {
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum SortOrder_getUserRoutingskills: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingskills(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil, completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List routing skills for user
     
     - GET /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func getUserRoutingskillsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortOrder": sortOrder?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update the ring number OR joined status for a User in a Queue
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueUser(queueId: String, memberId: String, body: QueueMember, completion: @escaping ((_ data: QueueMember?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueUserWithRequestBuilder(queueId: queueId, memberId: memberId, body: body)
        requestBuilder.execute { (response: Response<QueueMember>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the ring number OR joined status for a User in a Queue
     
     - PATCH /api/v2/routing/queues/{queueId}/users/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "joined" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "memberBy" : "aeiou",
  "routingStatus" : "",
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "ringNumber" : 123
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<QueueMember> 
     */
    open class func patchRoutingQueueUserWithRequestBuilder(queueId: String, memberId: String, body: QueueMember) -> RequestBuilder<QueueMember> {
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueMember>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Join or unjoin a set of users for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueUsers(queueId: String, body: [QueueMember], completion: @escaping ((_ data: QueueMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueUsersWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<QueueMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Join or unjoin a set of users for a queue
     
     - PATCH /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "memberBy" : "aeiou",
    "routingStatus" : "",
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "ringNumber" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 

     - returns: RequestBuilder<QueueMemberEntityListing> 
     */
    open class func patchRoutingQueueUsersWithRequestBuilder(queueId: String, body: [QueueMember]) -> RequestBuilder<QueueMemberEntityListing> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Update Contact Center Settings
     
     - parameter body: (body) Contact Center Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingSettingsContactcenter(body: ContactCenterSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingSettingsContactcenterWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Contact Center Settings
     
     - PATCH /api/v2/routing/settings/contactcenter
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) Contact Center Settings 

     - returns: RequestBuilder<Void> 
     */
    open class func patchRoutingSettingsContactcenterWithRequestBuilder(body: ContactCenterSettings) -> RequestBuilder<Void> {
        let path = "/api/v2/routing/settings/contactcenter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Join or unjoin a queue for a user
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueue(queueId: String, userId: String, body: UserQueue, completion: @escaping ((_ data: UserQueue?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueueWithRequestBuilder(queueId: queueId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserQueue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Join or unjoin a queue for a user
     
     - PATCH /api/v2/users/{userId}/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "joined" : true,
  "memberCount" : 123,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "whisperPrompt" : "",
  "outboundEmailAddress" : {
    "route" : {
      "replyEmailAddress" : "",
      "selfUri" : "aeiou",
      "pattern" : "aeiou",
      "language" : "",
      "autoBcc" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "priority" : 123,
      "fromEmail" : "aeiou",
      "skills" : [ "" ],
      "name" : "aeiou",
      "fromName" : "aeiou",
      "id" : "aeiou",
      "queue" : "",
      "flow" : "",
      "spamFlow" : ""
    },
    "domain" : ""
  },
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "aeiou",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+0000",
      "features" : "{}",
      "versionId" : "aeiou",
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "pages" : [ {
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "startPageId" : "aeiou",
      "id" : "aeiou",
      "publishedDate" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "outboundMessagingAddresses" : {
    "smsAddress" : ""
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<UserQueue> 
     */
    open class func patchUserQueueWithRequestBuilder(queueId: String, userId: String, body: UserQueue) -> RequestBuilder<UserQueue> {
        var path = "/api/v2/users/{userId}/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserQueue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Join or unjoin a set of queues for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueues(userId: String, body: [UserQueue], divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueuesWithRequestBuilder(userId: userId, body: body, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Join or unjoin a set of queues for a user
     
     - PATCH /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "memberCount" : 123,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "whisperPrompt" : "",
    "outboundEmailAddress" : {
      "route" : {
        "replyEmailAddress" : "",
        "selfUri" : "aeiou",
        "pattern" : "aeiou",
        "language" : "",
        "autoBcc" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "priority" : 123,
        "fromEmail" : "aeiou",
        "skills" : [ "" ],
        "name" : "aeiou",
        "fromName" : "aeiou",
        "id" : "aeiou",
        "queue" : "",
        "flow" : "",
        "spamFlow" : ""
      },
      "domain" : ""
    },
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "aeiou",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+0000",
        "features" : "{}",
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "pages" : [ {
          "versionId" : "aeiou",
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "startPageId" : "aeiou",
        "id" : "aeiou",
        "publishedDate" : "2000-01-23T04:56:07.000+0000"
      }
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "outboundMessagingAddresses" : {
      "smsAddress" : ""
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func patchUserQueuesWithRequestBuilder(userId: String, body: [UserQueue], divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "divisionId": divisionId
            
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update routing language proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguage(userId: String, languageId: String, body: UserRoutingLanguage, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update routing language proficiency or state.
     
     - PATCH /api/v2/users/{userId}/routinglanguages/{languageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "languageUri" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func patchUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String, body: UserRoutingLanguage) -> RequestBuilder<UserRoutingLanguage> {
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add bulk routing language to user. Max limit 50 languages
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguagesBulk(userId: String, body: [UserRoutingLanguagePost], completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguagesBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add bulk routing language to user. Max limit 50 languages
     
     - PATCH /api/v2/users/{userId}/routinglanguages/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "languageUri" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func patchUserRoutinglanguagesBulkWithRequestBuilder(userId: String, body: [UserRoutingLanguagePost]) -> RequestBuilder<UserLanguageEntityListing> {
        var path = "/api/v2/users/{userId}/routinglanguages/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Bulk add routing skills to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk add routing skills to user
     
     - PATCH /api/v2/users/{userId}/routingskills/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func patchUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Query for queue observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsQueuesObservationsQuery(body: QueueObservationQuery, completion: @escaping ((_ data: QueueObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueueObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Query for queue observations
     
     - POST /api/v2/analytics/queues/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "aeiou" ]
  },
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou",
      "observations" : [ {
        "routingPriority" : 123456789,
        "conversationId" : "aeiou",
        "convertedTo" : "aeiou",
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "sessionId" : "aeiou",
        "userId" : "aeiou",
        "addressTo" : "aeiou",
        "observationDate" : "2000-01-23T04:56:07.000+0000",
        "convertedFrom" : "aeiou",
        "dnis" : "aeiou",
        "scoredAgents" : [ {
          "scoredAgentId" : "aeiou",
          "agentScore" : 123
        } ],
        "requestedLanguageId" : "aeiou",
        "participantName" : "aeiou",
        "addressFrom" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QueueObservationQueryResponse> 
     */
    open class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: QueueObservationQuery) -> RequestBuilder<QueueObservationQueryResponse> {
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create a route
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailDomainRoutes(domainName: String, body: InboundRoute, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailDomainRoutesWithRequestBuilder(domainName: domainName, body: body)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a route
     
     - POST /api/v2/routing/email/domains/{domainName}/routes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "replyEmailAddress" : {
    "route" : "",
    "domain" : ""
  },
  "selfUri" : "aeiou",
  "pattern" : "aeiou",
  "language" : "",
  "autoBcc" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "priority" : 123,
  "fromEmail" : "aeiou",
  "skills" : [ "" ],
  "name" : "aeiou",
  "fromName" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "flow" : "",
  "spamFlow" : ""
}}]
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func postRoutingEmailDomainRoutesWithRequestBuilder(domainName: String, body: InboundRoute) -> RequestBuilder<InboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a domain
     
     - parameter body: (body) Domain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailDomains(body: InboundDomain, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailDomainsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a domain
     
     - POST /api/v2/routing/email/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "mailFromSettings" : {
    "records" : [ {
      "name" : "aeiou",
      "type" : "aeiou",
      "value" : "aeiou"
    } ],
    "mailFromDomain" : "aeiou",
    "status" : "aeiou"
  },
  "subDomain" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mxRecordStatus" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) Domain 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func postRoutingEmailDomainsWithRequestBuilder(body: InboundDomain) -> RequestBuilder<InboundDomain> {
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Language
     
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingLanguages(body: Language, completion: @escaping ((_ data: Language?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingLanguagesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Language>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Language
     
     - POST /api/v2/routing/languages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou"
}}]
     
     - parameter body: (body) Language 

     - returns: RequestBuilder<Language> 
     */
    open class func postRoutingLanguagesWithRequestBuilder(body: Language) -> RequestBuilder<Language> {
        let path = "/api/v2/routing/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Language>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Bulk add or delete up to 100 queue members
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueueUsers(queueId: String, body: [WritableEntity], delete: Bool? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueueUsersWithRequestBuilder(queueId: queueId, body: body, delete: delete)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Bulk add or delete up to 100 queue members
     
     - POST /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional, default to false)

     - returns: RequestBuilder<String> 
     */
    open class func postRoutingQueueUsersWithRequestBuilder(queueId: String, body: [WritableEntity], delete: Bool? = nil) -> RequestBuilder<String> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "delete": delete
            
        ])

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add up to 100 wrap-up codes to a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) List of wrapup codes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueueWrapupcodes(queueId: String, body: [WrapUpCodeReference], completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueueWrapupcodesWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add up to 100 wrap-up codes to a queue
     
     - POST /api/v2/routing/queues/{queueId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example=[ {
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) List of wrapup codes 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func postRoutingQueueWrapupcodesWithRequestBuilder(queueId: String, body: [WrapUpCodeReference]) -> RequestBuilder<[WrapupCode]> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a queue
     
     - parameter body: (body) Queue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueues(body: CreateQueueRequest, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueuesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a queue
     
     - POST /api/v2/routing/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "memberCount" : 123,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoAnswerOnly" : true,
  "whisperPrompt" : "",
  "outboundEmailAddress" : {
    "route" : {
      "replyEmailAddress" : "",
      "selfUri" : "aeiou",
      "pattern" : "aeiou",
      "language" : "",
      "autoBcc" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "priority" : 123,
      "fromEmail" : "aeiou",
      "skills" : [ "" ],
      "name" : "aeiou",
      "fromName" : "aeiou",
      "id" : "aeiou",
      "queue" : "",
      "flow" : "",
      "spamFlow" : ""
    },
    "domain" : ""
  },
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "aeiou",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+0000",
      "features" : "{}",
      "versionId" : "aeiou",
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "pages" : [ {
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "startPageId" : "aeiou",
      "id" : "aeiou",
      "publishedDate" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "outboundMessagingAddresses" : {
    "smsAddress" : ""
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) Queue 

     - returns: RequestBuilder<Queue> 
     */
    open class func postRoutingQueuesWithRequestBuilder(body: CreateQueueRequest) -> RequestBuilder<Queue> {
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create Skill
     
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSkills(body: RoutingSkill, completion: @escaping ((_ data: RoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSkillsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create Skill
     
     - POST /api/v2/routing/skills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou"
}}]
     
     - parameter body: (body) Skill 

     - returns: RequestBuilder<RoutingSkill> 
     */
    open class func postRoutingSkillsWithRequestBuilder(body: RoutingSkill) -> RequestBuilder<RoutingSkill> {
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Provision an Address for SMS
     
     - parameter body: (body) SmsAddress 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSmsAddresses(body: SmsAddressProvision, completion: @escaping ((_ data: SmsAddress?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSmsAddressesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SmsAddress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Provision an Address for SMS
     
     - POST /api/v2/routing/sms/addresses
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "validated" : true,
  "city" : "aeiou",
  "street" : "aeiou",
  "countryCode" : "aeiou",
  "postalCode" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "region" : "aeiou"
}}]
     
     - parameter body: (body) SmsAddress 

     - returns: RequestBuilder<SmsAddress> 
     */
    open class func postRoutingSmsAddressesWithRequestBuilder(body: SmsAddressProvision) -> RequestBuilder<SmsAddress> {
        let path = "/api/v2/routing/sms/addresses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsAddress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Provision a phone number for SMS
     
     - parameter body: (body) SmsPhoneNumber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSmsPhonenumbers(body: SmsPhoneNumberProvision, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSmsPhonenumbersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Provision a phone number for SMS
     
     - POST /api/v2/routing/sms/phonenumbers
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "purchaseDate" : "2000-01-23T04:56:07.000+0000",
  "capabilities" : [ "aeiou" ],
  "shortCodeBillingType" : "aeiou",
  "selfUri" : "aeiou",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoRenewable" : "aeiou",
  "phoneNumberStatus" : "aeiou",
  "renewalDate" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "addressId" : {
    "validated" : true,
    "city" : "aeiou",
    "street" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "region" : "aeiou"
  },
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "countryCode" : "aeiou",
  "name" : "aeiou",
  "phoneNumberType" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "cancellationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter body: (body) SmsPhoneNumber 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func postRoutingSmsPhonenumbersWithRequestBuilder(body: SmsPhoneNumberProvision) -> RequestBuilder<SmsPhoneNumber> {
        let path = "/api/v2/routing/sms/phonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a wrap-up code
     
     - parameter body: (body) WrapupCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingWrapupcodes(body: WrapupCode, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingWrapupcodesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a wrap-up code
     
     - POST /api/v2/routing/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) WrapupCode 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func postRoutingWrapupcodesWithRequestBuilder(body: WrapupCode) -> RequestBuilder<WrapupCode> {
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add routing language to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutinglanguages(userId: String, body: UserRoutingLanguagePost, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutinglanguagesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add routing language to user
     
     - POST /api/v2/users/{userId}/routinglanguages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "languageUri" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func postUserRoutinglanguagesWithRequestBuilder(userId: String, body: UserRoutingLanguagePost) -> RequestBuilder<UserRoutingLanguage> {
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutingskills(userId: String, body: UserRoutingSkillPost, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutingskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add routing skill to user
     
     - POST /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func postUserRoutingskillsWithRequestBuilder(userId: String, body: UserRoutingSkillPost) -> RequestBuilder<UserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingEmailDomainRoute(domainName: String, routeId: String, body: InboundRoute, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId, body: body)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a route
     
     - PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "replyEmailAddress" : {
    "route" : "",
    "domain" : ""
  },
  "selfUri" : "aeiou",
  "pattern" : "aeiou",
  "language" : "",
  "autoBcc" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "priority" : 123,
  "fromEmail" : "aeiou",
  "skills" : [ "" ],
  "name" : "aeiou",
  "fromName" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "flow" : "",
  "spamFlow" : ""
}}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func putRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String, body: InboundRoute) -> RequestBuilder<InboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a recipient
     
     - parameter recipientId: (path) Recipient ID 
     - parameter body: (body) Recipient 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingMessageRecipient(recipientId: String, body: Recipient, completion: @escaping ((_ data: Recipient?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingMessageRecipientWithRequestBuilder(recipientId: recipientId, body: body)
        requestBuilder.execute { (response: Response<Recipient>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a recipient
     
     - PUT /api/v2/routing/message/recipients/{recipientId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "messengerType" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "",
  "id" : "aeiou",
  "flow" : {
    "publishedBy" : "",
    "savedVersion" : "",
    "outputSchema" : "{}",
    "inputSchema" : "{}",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "active" : true,
    "type" : "aeiou",
    "lockedUser" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "debugVersion" : "",
    "lockedClient" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "publishedVersion" : {
      "generationId" : "aeiou",
      "debug" : true,
      "outputSchema" : "",
      "inputSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "createdByClient" : "",
      "selfUri" : "aeiou",
      "type" : "aeiou",
      "secure" : true,
      "configurationUri" : "aeiou",
      "configurationVersion" : "aeiou",
      "dateCreated" : 123456789,
      "publishResultUri" : "aeiou",
      "createdBy" : "",
      "name" : "aeiou",
      "id" : "aeiou",
      "commitVersion" : "aeiou"
    },
    "currentOperation" : {
      "errorMessageParams" : {
        "key" : "aeiou"
      },
      "actionStatus" : "aeiou",
      "errorMessage" : "aeiou",
      "client" : "",
      "errorCode" : "aeiou",
      "id" : "aeiou",
      "complete" : true,
      "user" : "",
      "errorDetails" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "actionName" : "aeiou"
    },
    "system" : true,
    "deleted" : true,
    "name" : "aeiou",
    "checkedInVersion" : "",
    "id" : "aeiou"
  }
}}]
     
     - parameter recipientId: (path) Recipient ID 
     - parameter body: (body) Recipient 

     - returns: RequestBuilder<Recipient> 
     */
    open class func putRoutingMessageRecipientWithRequestBuilder(recipientId: String, body: Recipient) -> RequestBuilder<Recipient> {
        var path = "/api/v2/routing/message/recipients/{recipientId}"
        let recipientIdPreEscape = "\(recipientId)"
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recipient>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingQueue(queueId: String, body: QueueRequest, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingQueueWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a queue
     
     - PUT /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "memberCount" : 123,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoAnswerOnly" : true,
  "whisperPrompt" : "",
  "outboundEmailAddress" : {
    "route" : {
      "replyEmailAddress" : "",
      "selfUri" : "aeiou",
      "pattern" : "aeiou",
      "language" : "",
      "autoBcc" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "priority" : 123,
      "fromEmail" : "aeiou",
      "skills" : [ "" ],
      "name" : "aeiou",
      "fromName" : "aeiou",
      "id" : "aeiou",
      "queue" : "",
      "flow" : "",
      "spamFlow" : ""
    },
    "domain" : ""
  },
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "aeiou",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+0000",
      "features" : "{}",
      "versionId" : "aeiou",
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "pages" : [ {
        "versionId" : "aeiou",
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "startPageId" : "aeiou",
      "id" : "aeiou",
      "publishedDate" : "2000-01-23T04:56:07.000+0000"
    }
  },
  "division" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "outboundMessagingAddresses" : {
    "smsAddress" : ""
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue 

     - returns: RequestBuilder<Queue> 
     */
    open class func putRoutingQueueWithRequestBuilder(queueId: String, body: QueueRequest) -> RequestBuilder<Queue> {
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update an organization's routing settings
     
     - parameter body: (body) Organization Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSettings(body: RoutingSettings, completion: @escaping ((_ data: RoutingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RoutingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an organization's routing settings
     
     - PUT /api/v2/routing/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetAgentScoreOnPresenceChange" : true
}}]
     
     - parameter body: (body) Organization Settings 

     - returns: RequestBuilder<RoutingSettings> 
     */
    open class func putRoutingSettingsWithRequestBuilder(body: RoutingSettings) -> RequestBuilder<RoutingSettings> {
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update Transcription Settings
     
     - parameter body: (body) Organization Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSettingsTranscription(body: TranscriptionSettings, completion: @escaping ((_ data: TranscriptionSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSettingsTranscriptionWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptionSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update Transcription Settings
     
     - PUT /api/v2/routing/settings/transcription
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "transcription" : "aeiou",
  "transcriptionConfidenceThreshold" : 123
}}]
     
     - parameter body: (body) Organization Settings 

     - returns: RequestBuilder<TranscriptionSettings> 
     */
    open class func putRoutingSettingsTranscriptionWithRequestBuilder(body: TranscriptionSettings) -> RequestBuilder<TranscriptionSettings> {
        let path = "/api/v2/routing/settings/transcription"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptionSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter body: (body) SmsPhoneNumber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSmsPhonenumber(addressId: String, body: SmsPhoneNumber, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId, body: body)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a phone number provisioned for SMS.
     
     - PUT /api/v2/routing/sms/phonenumbers/{addressId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "purchaseDate" : "2000-01-23T04:56:07.000+0000",
  "capabilities" : [ "aeiou" ],
  "shortCodeBillingType" : "aeiou",
  "selfUri" : "aeiou",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "autoRenewable" : "aeiou",
  "phoneNumberStatus" : "aeiou",
  "renewalDate" : "2000-01-23T04:56:07.000+0000",
  "version" : 123,
  "addressId" : {
    "validated" : true,
    "city" : "aeiou",
    "street" : "aeiou",
    "countryCode" : "aeiou",
    "postalCode" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "region" : "aeiou"
  },
  "phoneNumber" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "countryCode" : "aeiou",
  "name" : "aeiou",
  "phoneNumberType" : "aeiou",
  "modifiedBy" : "",
  "id" : "aeiou",
  "cancellationDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter addressId: (path) Address ID 
     - parameter body: (body) SmsPhoneNumber 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func putRoutingSmsPhonenumberWithRequestBuilder(addressId: String, body: SmsPhoneNumber) -> RequestBuilder<SmsPhoneNumber> {
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUserUtilization(userId: String, body: Utilization, completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUserUtilizationWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - PUT /api/v2/routing/users/{userId}/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 

     - returns: RequestBuilder<Utilization> 
     */
    open class func putRoutingUserUtilizationWithRequestBuilder(userId: String, body: Utilization) -> RequestBuilder<Utilization> {
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUtilization(body: Utilization, completion: @escaping ((_ data: Utilization?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUtilizationWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Utilization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
     
     - PUT /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter body: (body) utilization 

     - returns: RequestBuilder<Utilization> 
     */
    open class func putRoutingUtilizationWithRequestBuilder(body: Utilization) -> RequestBuilder<Utilization> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Utilization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingWrapupcode(codeId: String, body: WrapupCode, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingWrapupcodeWithRequestBuilder(codeId: codeId, body: body)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update wrap-up code
     
     - PUT /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func putRoutingWrapupcodeWithRequestBuilder(codeId: String, body: WrapupCode) -> RequestBuilder<WrapupCode> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskill(userId: String, skillId: String, body: UserRoutingSkill, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update routing skill proficiency or state.
     
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func putUserRoutingskillWithRequestBuilder(userId: String, skillId: String, body: UserRoutingSkill) -> RequestBuilder<UserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Replace all routing skills assigned to a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Replace all routing skills assigned to a user
     
     - PUT /api/v2/users/{userId}/routingskills/bulk
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func putUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
