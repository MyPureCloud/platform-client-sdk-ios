//
// IntegrationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class IntegrationsAPI {
    
    
    
    /**
     
     Delete integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegration(integrationId: String, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete integration.
     
     - DELETE /api/v2/integrations/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : {
    "configPropertiesSchemaUri" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "vendorWebsiteUri" : "aeiou",
    "salesContactUri" : "aeiou",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "aeiou" ],
        "title" : "aeiou",
        "required" : true
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "privacyPolicyUri" : "aeiou",
    "userPermissions" : [ "aeiou" ],
    "helpUri" : "aeiou",
    "vendorName" : "aeiou",
    "nonInstallable" : true,
    "marketplaceUri" : "aeiou",
    "termsOfServiceUri" : "aeiou",
    "faqUri" : "aeiou",
    "supportContactUri" : "aeiou",
    "provider" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "helpLinks" : [ {
      "description" : "aeiou",
      "title" : "aeiou",
      "uri" : "aeiou"
    } ],
    "category" : "aeiou",
    "maxInstances" : 123,
    "configAdvancedSchemaUri" : "aeiou",
    "vendorOAuthClientIds" : [ "aeiou" ]
  },
  "notes" : "aeiou",
  "reportedState" : {
    "effective" : "aeiou",
    "lastUpdated" : "2000-01-23T04:56:07.000+0000",
    "code" : "aeiou",
    "detail" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "intendedState" : "aeiou",
  "attributes" : {
    "key" : "aeiou"
  },
  "id" : "aeiou",
  "config" : {
    "current" : {
      "notes" : "aeiou",
      "advanced" : "{}",
      "credentials" : {
        "key" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "type" : {
            "name" : "aeiou",
            "displayOrder" : [ "aeiou" ],
            "id" : "aeiou",
            "properties" : "{}",
            "required" : [ "aeiou" ]
          }
        }
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "version" : 123,
      "properties" : "{}"
    }
  }
}}]
     
     - parameter integrationId: (path) Integration Id 

     - returns: RequestBuilder<Integration> 
     */
    open class func deleteIntegrationWithRequestBuilder(integrationId: String) -> RequestBuilder<Integration> {
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete an Action
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsAction(actionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsActionWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an Action
     
     - DELETE /api/v2/integrations/actions/{actionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsActionWithRequestBuilder(actionId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a Draft
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsActionDraft(actionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsActionDraftWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a Draft
     
     - DELETE /api/v2/integrations/actions/{actionId}/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsActionDraftWithRequestBuilder(actionId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Delete a set of credentials
     
     - parameter credentialId: (path) Credential ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIntegrationsCredential(credentialId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIntegrationsCredentialWithRequestBuilder(credentialId: credentialId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete a set of credentials
     
     - DELETE /api/v2/integrations/credentials/{credentialId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter credentialId: (path) Credential ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIntegrationsCredentialWithRequestBuilder(credentialId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegration(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationWithRequestBuilder(integrationId: integrationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get integration.
     
     - GET /api/v2/integrations/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : {
    "configPropertiesSchemaUri" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "vendorWebsiteUri" : "aeiou",
    "salesContactUri" : "aeiou",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "aeiou" ],
        "title" : "aeiou",
        "required" : true
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "privacyPolicyUri" : "aeiou",
    "userPermissions" : [ "aeiou" ],
    "helpUri" : "aeiou",
    "vendorName" : "aeiou",
    "nonInstallable" : true,
    "marketplaceUri" : "aeiou",
    "termsOfServiceUri" : "aeiou",
    "faqUri" : "aeiou",
    "supportContactUri" : "aeiou",
    "provider" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "helpLinks" : [ {
      "description" : "aeiou",
      "title" : "aeiou",
      "uri" : "aeiou"
    } ],
    "category" : "aeiou",
    "maxInstances" : 123,
    "configAdvancedSchemaUri" : "aeiou",
    "vendorOAuthClientIds" : [ "aeiou" ]
  },
  "notes" : "aeiou",
  "reportedState" : {
    "effective" : "aeiou",
    "lastUpdated" : "2000-01-23T04:56:07.000+0000",
    "code" : "aeiou",
    "detail" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "intendedState" : "aeiou",
  "attributes" : {
    "key" : "aeiou"
  },
  "id" : "aeiou",
  "config" : {
    "current" : {
      "notes" : "aeiou",
      "advanced" : "{}",
      "credentials" : {
        "key" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "type" : {
            "name" : "aeiou",
            "displayOrder" : [ "aeiou" ],
            "id" : "aeiou",
            "properties" : "{}",
            "required" : [ "aeiou" ]
          }
        }
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "version" : 123,
      "properties" : "{}"
    }
  }
}}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func getIntegrationWithRequestBuilder(integrationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<Integration> {
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get integration configuration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationConfigCurrent(integrationId: String, completion: @escaping ((_ data: IntegrationConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationConfigCurrentWithRequestBuilder(integrationId: integrationId)
        requestBuilder.execute { (response: Response<IntegrationConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get integration configuration.
     
     - GET /api/v2/integrations/{integrationId}/config/current
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "notes" : "aeiou",
  "advanced" : "{}",
  "credentials" : {
    "key" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "type" : {
        "name" : "aeiou",
        "displayOrder" : [ "aeiou" ],
        "id" : "aeiou",
        "properties" : "{}",
        "required" : [ "aeiou" ]
      }
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123,
  "properties" : "{}"
}}]
     
     - parameter integrationId: (path) Integration Id 

     - returns: RequestBuilder<IntegrationConfiguration> 
     */
    open class func getIntegrationConfigCurrentWithRequestBuilder(integrationId: String) -> RequestBuilder<IntegrationConfiguration> {
        var path = "/api/v2/integrations/{integrationId}/config/current"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List integrations
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrations(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: IntegrationEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<IntegrationEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List integrations
     
     - GET /api/v2/integrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "integrationType" : {
      "configPropertiesSchemaUri" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "vendorWebsiteUri" : "aeiou",
      "salesContactUri" : "aeiou",
      "credentials" : {
        "key" : {
          "credentialTypes" : [ "aeiou" ],
          "title" : "aeiou",
          "required" : true
        }
      },
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "privacyPolicyUri" : "aeiou",
      "userPermissions" : [ "aeiou" ],
      "helpUri" : "aeiou",
      "vendorName" : "aeiou",
      "nonInstallable" : true,
      "marketplaceUri" : "aeiou",
      "termsOfServiceUri" : "aeiou",
      "faqUri" : "aeiou",
      "supportContactUri" : "aeiou",
      "provider" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "helpLinks" : [ {
        "description" : "aeiou",
        "title" : "aeiou",
        "uri" : "aeiou"
      } ],
      "category" : "aeiou",
      "maxInstances" : 123,
      "configAdvancedSchemaUri" : "aeiou",
      "vendorOAuthClientIds" : [ "aeiou" ]
    },
    "notes" : "aeiou",
    "reportedState" : {
      "effective" : "aeiou",
      "lastUpdated" : "2000-01-23T04:56:07.000+0000",
      "code" : "aeiou",
      "detail" : {
        "messageWithParams" : "aeiou",
        "localizableMessageCode" : "aeiou",
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou"
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "intendedState" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "id" : "aeiou",
    "config" : {
      "current" : {
        "notes" : "aeiou",
        "advanced" : "{}",
        "credentials" : {
          "key" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "type" : {
              "name" : "aeiou",
              "displayOrder" : [ "aeiou" ],
              "id" : "aeiou",
              "properties" : "{}",
              "required" : [ "aeiou" ]
            }
          }
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "version" : 123,
        "properties" : "{}"
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<IntegrationEntityListing> 
     */
    open class func getIntegrationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<IntegrationEntityListing> {
        let path = "/api/v2/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<IntegrationEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getIntegrationsAction: String { 
        case contract = "contract"
    }

    
    
    
    
    /**
     
     Retrieves a single Action matching id.
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsAction(actionId: String, expand: Expand_getIntegrationsAction? = nil, includeConfig: Bool? = nil, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionWithRequestBuilder(actionId: actionId, expand: expand, includeConfig: includeConfig)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves a single Action matching id.
     
     - GET /api/v2/integrations/actions/{actionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional, default to false)

     - returns: RequestBuilder<Action> 
     */
    open class func getIntegrationsActionWithRequestBuilder(actionId: String, expand: Expand_getIntegrationsAction? = nil, includeConfig: Bool? = nil) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "includeConfig": includeConfig
            
        ])

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getIntegrationsActionDraft: String { 
        case contract = "contract"
    }

    
    
    
    
    /**
     
     Retrieve a Draft
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraft(actionId: String, expand: Expand_getIntegrationsActionDraft? = nil, includeConfig: Bool? = nil, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftWithRequestBuilder(actionId: actionId, expand: expand, includeConfig: includeConfig)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve a Draft
     
     - GET /api/v2/integrations/actions/{actionId}/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter expand: (query) Indicates a field in the response which should be expanded. (optional)
     - parameter includeConfig: (query) Return config in response. (optional, default to false)

     - returns: RequestBuilder<Action> 
     */
    open class func getIntegrationsActionDraftWithRequestBuilder(actionId: String, expand: Expand_getIntegrationsActionDraft? = nil, includeConfig: Bool? = nil) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "expand": expand?.rawValue, 
            
            "includeConfig": includeConfig
            
        ])

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve schema for a Draft based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftSchema(actionId: String, fileName: String, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftSchemaWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve schema for a Draft based on filename.
     
     - GET /api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "additionalProperties" : "{}",
  "title" : "aeiou",
  "type" : "aeiou",
  "required" : [ "aeiou" ],
  "properties" : {
    "key" : "{}"
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this draft. 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsActionDraftSchemaWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<JsonSchemaDocument> {
        var path = "/api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve templates for a Draft based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftTemplate(actionId: String, fileName: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftTemplateWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve templates for a Draft based on filename.
     
     - GET /api/v2/integrations/actions/{actionId}/draft/templates/{fileName}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{output=none}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action draft. 

     - returns: RequestBuilder<String> 
     */
    open class func getIntegrationsActionDraftTemplateWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<String> {
        var path = "/api/v2/integrations/actions/{actionId}/draft/templates/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Validate current Draft configuration.
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionDraftValidation(actionId: String, completion: @escaping ((_ data: DraftValidationResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionDraftValidationWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<DraftValidationResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Validate current Draft configuration.
     
     - GET /api/v2/integrations/actions/{actionId}/draft/validation
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "valid" : true,
  "errors" : [ {
    "messageWithParams" : "aeiou",
    "code" : "aeiou",
    "entityName" : "aeiou",
    "entityId" : "aeiou",
    "contextId" : "aeiou",
    "details" : [ {
      "fieldName" : "aeiou",
      "entityName" : "aeiou",
      "errorCode" : "aeiou",
      "entityId" : "aeiou"
    } ],
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou",
    "errors" : [ "" ],
    "status" : 123
  } ]
}}]
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<DraftValidationResult> 
     */
    open class func getIntegrationsActionDraftValidationWithRequestBuilder(actionId: String) -> RequestBuilder<DraftValidationResult> {
        var path = "/api/v2/integrations/actions/{actionId}/draft/validation"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DraftValidationResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve schema for an action based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionSchema(actionId: String, fileName: String, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionSchemaWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve schema for an action based on filename.
     
     - GET /api/v2/integrations/actions/{actionId}/schemas/{fileName}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "additionalProperties" : "{}",
  "title" : "aeiou",
  "type" : "aeiou",
  "required" : [ "aeiou" ],
  "properties" : {
    "key" : "{}"
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of schema file to be retrieved for this action. 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsActionSchemaWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<JsonSchemaDocument> {
        var path = "/api/v2/integrations/actions/{actionId}/schemas/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieve text of templates for an action based on filename.
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionTemplate(actionId: String, fileName: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionTemplateWithRequestBuilder(actionId: actionId, fileName: fileName)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieve text of templates for an action based on filename.
     
     - GET /api/v2/integrations/actions/{actionId}/templates/{fileName}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{output=none}]
     
     - parameter actionId: (path) actionId 
     - parameter fileName: (path) Name of template file to be retrieved for this action. 

     - returns: RequestBuilder<String> 
     */
    open class func getIntegrationsActionTemplateWithRequestBuilder(actionId: String, fileName: String) -> RequestBuilder<String> {
        var path = "/api/v2/integrations/actions/{actionId}/templates/{fileName}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActions: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    
    
    
    
    
    
    
    public enum Secure_getIntegrationsActions: String { 
        case _true = "true"
        case _false = "false"
    }

    
    
    
    public enum IncludeAuthActions_getIntegrationsActions: String { 
        case _true = "true"
        case _false = "false"
    }

    
    
    /**
     
     Retrieves all actions associated with filters passed in via query param.
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter category: (query) Filter by category name (optional)
     - parameter name: (query) Filter by action name. Provide full or just the first part of name. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActions(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActions? = nil, category: String? = nil, name: String? = nil, secure: Secure_getIntegrationsActions? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActions? = nil, completion: @escaping ((_ data: ActionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, secure: secure, includeAuthActions: includeAuthActions)
        requestBuilder.execute { (response: Response<ActionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves all actions associated with filters passed in via query param.
     
     - GET /api/v2/integrations/actions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "contract" : {
      "output" : {
        "successSchemaFlattened" : "",
        "errorSchemaUri" : "aeiou",
        "errorSchemaFlattened" : "{}",
        "successSchema" : {
          "$schema" : "aeiou",
          "description" : "aeiou",
          "id" : "aeiou",
          "additionalProperties" : "{}",
          "title" : "aeiou",
          "type" : "aeiou",
          "required" : [ "aeiou" ],
          "properties" : {
            "key" : "{}"
          }
        },
        "successSchemaUri" : "aeiou",
        "errorSchema" : ""
      },
      "input" : {
        "inputSchemaFlattened" : "",
        "inputSchema" : "",
        "inputSchemaUri" : "aeiou"
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "integrationId" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "secure" : true,
    "version" : 123,
    "config" : {
      "request" : {
        "headers" : {
          "key" : "aeiou"
        },
        "requestUrlTemplate" : "aeiou",
        "requestType" : "aeiou",
        "requestTemplate" : "aeiou",
        "requestTemplateUri" : "aeiou"
      },
      "response" : {
        "translationMapDefaults" : {
          "key" : "aeiou"
        },
        "translationMap" : {
          "key" : "aeiou"
        },
        "successTemplateUri" : "aeiou",
        "successTemplate" : "aeiou"
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter category: (query) Filter by category name (optional)
     - parameter name: (query) Filter by action name. Provide full or just the first part of name. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)

     - returns: RequestBuilder<ActionEntityListing> 
     */
    open class func getIntegrationsActionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActions? = nil, category: String? = nil, name: String? = nil, secure: Secure_getIntegrationsActions? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActions? = nil) -> RequestBuilder<ActionEntityListing> {
        let path = "/api/v2/integrations/actions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "category": category, 
            
            "name": name, 
            
            "secure": secure?.rawValue, 
            
            "includeAuthActions": includeAuthActions?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<ActionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActionsCategories: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    
    
    
    public enum Secure_getIntegrationsActionsCategories: String { 
        case _true = "true"
        case _false = "false"
    }

    
    
    /**
     
     Retrieves all categories of available Actions
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionsCategories(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsCategories? = nil, secure: Secure_getIntegrationsActionsCategories? = nil, completion: @escaping ((_ data: CategoryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsCategoriesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, secure: secure)
        requestBuilder.execute { (response: Response<CategoryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves all categories of available Actions
     
     - GET /api/v2/integrations/actions/categories
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "name" : "aeiou"
  } ],
  "pageSize" : 123
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)

     - returns: RequestBuilder<CategoryEntityListing> 
     */
    open class func getIntegrationsActionsCategoriesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsCategories? = nil, secure: Secure_getIntegrationsActionsCategories? = nil) -> RequestBuilder<CategoryEntityListing> {
        let path = "/api/v2/integrations/actions/categories"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "secure": secure?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<CategoryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    public enum SortOrder_getIntegrationsActionsDrafts: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    
    
    
    
    
    
    
    public enum Secure_getIntegrationsActionsDrafts: String { 
        case _true = "true"
        case _false = "false"
    }

    
    
    
    public enum IncludeAuthActions_getIntegrationsActionsDrafts: String { 
        case _true = "true"
        case _false = "false"
    }

    
    
    /**
     
     Retrieves all action drafts associated with the filters passed in via query param.
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter category: (query) Filter by category name (optional)
     - parameter name: (query) Filter by action name. Provide full or just the first part of name. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsActionsDrafts(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsDrafts? = nil, category: String? = nil, name: String? = nil, secure: Secure_getIntegrationsActionsDrafts? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActionsDrafts? = nil, completion: @escaping ((_ data: ActionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsActionsDraftsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, secure: secure, includeAuthActions: includeAuthActions)
        requestBuilder.execute { (response: Response<ActionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieves all action drafts associated with the filters passed in via query param.
     
     - GET /api/v2/integrations/actions/drafts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "contract" : {
      "output" : {
        "successSchemaFlattened" : "",
        "errorSchemaUri" : "aeiou",
        "errorSchemaFlattened" : "{}",
        "successSchema" : {
          "$schema" : "aeiou",
          "description" : "aeiou",
          "id" : "aeiou",
          "additionalProperties" : "{}",
          "title" : "aeiou",
          "type" : "aeiou",
          "required" : [ "aeiou" ],
          "properties" : {
            "key" : "{}"
          }
        },
        "successSchemaUri" : "aeiou",
        "errorSchema" : ""
      },
      "input" : {
        "inputSchemaFlattened" : "",
        "inputSchema" : "",
        "inputSchemaUri" : "aeiou"
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "integrationId" : "aeiou",
    "id" : "aeiou",
    "category" : "aeiou",
    "secure" : true,
    "version" : 123,
    "config" : {
      "request" : {
        "headers" : {
          "key" : "aeiou"
        },
        "requestUrlTemplate" : "aeiou",
        "requestType" : "aeiou",
        "requestTemplate" : "aeiou",
        "requestTemplateUri" : "aeiou"
      },
      "response" : {
        "translationMapDefaults" : {
          "key" : "aeiou"
        },
        "translationMap" : {
          "key" : "aeiou"
        },
        "successTemplateUri" : "aeiou",
        "successTemplate" : "aeiou"
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter sortBy: (query) Root level field name to sort on. (optional)
     - parameter sortOrder: (query) Direction to sort &#39;sortBy&#39; field. (optional, default to asc)
     - parameter category: (query) Filter by category name (optional)
     - parameter name: (query) Filter by action name. Provide full or just the first part of name. (optional)
     - parameter secure: (query) Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions. (optional)
     - parameter includeAuthActions: (query) Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions. (optional, default to false)

     - returns: RequestBuilder<ActionEntityListing> 
     */
    open class func getIntegrationsActionsDraftsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, nextPage: String? = nil, previousPage: String? = nil, sortBy: String? = nil, sortOrder: SortOrder_getIntegrationsActionsDrafts? = nil, category: String? = nil, name: String? = nil, secure: Secure_getIntegrationsActionsDrafts? = nil, includeAuthActions: IncludeAuthActions_getIntegrationsActionsDrafts? = nil) -> RequestBuilder<ActionEntityListing> {
        let path = "/api/v2/integrations/actions/drafts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage, 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder?.rawValue, 
            
            "category": category, 
            
            "name": name, 
            
            "secure": secure?.rawValue, 
            
            "includeAuthActions": includeAuthActions?.rawValue
            
        ])

        let requestBuilder: RequestBuilder<ActionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List permitted client app integrations for the logged in user
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsClientapps(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: ClientAppEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsClientappsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<ClientAppEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List permitted client app integrations for the logged in user
     
     - GET /api/v2/integrations/clientapps
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "integrationType" : {
      "configPropertiesSchemaUri" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "vendorWebsiteUri" : "aeiou",
      "salesContactUri" : "aeiou",
      "credentials" : {
        "key" : {
          "credentialTypes" : [ "aeiou" ],
          "title" : "aeiou",
          "required" : true
        }
      },
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "privacyPolicyUri" : "aeiou",
      "userPermissions" : [ "aeiou" ],
      "helpUri" : "aeiou",
      "vendorName" : "aeiou",
      "nonInstallable" : true,
      "marketplaceUri" : "aeiou",
      "termsOfServiceUri" : "aeiou",
      "faqUri" : "aeiou",
      "supportContactUri" : "aeiou",
      "provider" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "helpLinks" : [ {
        "description" : "aeiou",
        "title" : "aeiou",
        "uri" : "aeiou"
      } ],
      "category" : "aeiou",
      "maxInstances" : 123,
      "configAdvancedSchemaUri" : "aeiou",
      "vendorOAuthClientIds" : [ "aeiou" ]
    },
    "notes" : "aeiou",
    "reportedState" : {
      "effective" : "aeiou",
      "lastUpdated" : "2000-01-23T04:56:07.000+0000",
      "code" : "aeiou",
      "detail" : {
        "messageWithParams" : "aeiou",
        "localizableMessageCode" : "aeiou",
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou"
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "intendedState" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "id" : "aeiou",
    "config" : {
      "effective" : {
        "notes" : "aeiou",
        "advanced" : {
          "key" : "{}"
        },
        "credentials" : {
          "key" : ""
        },
        "name" : "aeiou",
        "properties" : {
          "key" : "{}"
        }
      },
      "current" : {
        "notes" : "aeiou",
        "advanced" : "{}",
        "credentials" : {
          "key" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "type" : {
              "name" : "aeiou",
              "displayOrder" : [ "aeiou" ],
              "id" : "aeiou",
              "properties" : "{}",
              "required" : [ "aeiou" ]
            }
          }
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "version" : 123,
        "properties" : "{}"
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<ClientAppEntityListing> 
     */
    open class func getIntegrationsClientappsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<ClientAppEntityListing> {
        let path = "/api/v2/integrations/clientapps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<ClientAppEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a single credential with sensitive fields redacted
     
     - parameter credentialId: (path) Credential ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredential(credentialId: String, completion: @escaping ((_ data: Credential?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialWithRequestBuilder(credentialId: credentialId)
        requestBuilder.execute { (response: Response<Credential>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a single credential with sensitive fields redacted
     
     - GET /api/v2/integrations/credentials/{credentialId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "type" : {
    "name" : "aeiou",
    "displayOrder" : [ "aeiou" ],
    "id" : "aeiou",
    "properties" : "{}",
    "required" : [ "aeiou" ]
  },
  "credentialFields" : {
    "key" : "aeiou"
  }
}}]
     
     - parameter credentialId: (path) Credential ID 

     - returns: RequestBuilder<Credential> 
     */
    open class func getIntegrationsCredentialWithRequestBuilder(credentialId: String) -> RequestBuilder<Credential> {
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Credential>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     List multiple sets of credentials
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredentials(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: CredentialInfoListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<CredentialInfoListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List multiple sets of credentials
     
     - GET /api/v2/integrations/credentials
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "type" : {
      "name" : "aeiou",
      "displayOrder" : [ "aeiou" ],
      "id" : "aeiou",
      "properties" : "{}",
      "required" : [ "aeiou" ]
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<CredentialInfoListing> 
     */
    open class func getIntegrationsCredentialsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<CredentialInfoListing> {
        let path = "/api/v2/integrations/credentials"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<CredentialInfoListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     List all credential types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsCredentialsTypes(completion: @escaping ((_ data: CredentialTypeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsCredentialsTypesWithRequestBuilder()
        requestBuilder.execute { (response: Response<CredentialTypeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List all credential types
     
     - GET /api/v2/integrations/credentials/types
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "name" : "aeiou",
    "displayOrder" : [ "aeiou" ],
    "id" : "aeiou",
    "properties" : "{}",
    "required" : [ "aeiou" ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]

     - returns: RequestBuilder<CredentialTypeListing> 
     */
    open class func getIntegrationsCredentialsTypesWithRequestBuilder() -> RequestBuilder<CredentialTypeListing> {
        let path = "/api/v2/integrations/credentials/types"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialTypeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List all events
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Order by (optional, default to descending)
     - parameter entityId: (query) Include only events with this entity ID (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsEventlog(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, entityId: String? = nil, completion: @escaping ((_ data: IntegrationEventEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsEventlogWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, entityId: entityId)
        requestBuilder.execute { (response: Response<IntegrationEventEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List all events
     
     - GET /api/v2/integrations/eventlog
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "eventCode" : "aeiou",
    "level" : "aeiou",
    "entities" : [ {
      "entityType" : "aeiou",
      "id" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "contextAttributes" : {
      "key" : "aeiou"
    },
    "correlationId" : "aeiou",
    "id" : "aeiou",
    "detailMessage" : "",
    "message" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    },
    "user" : {
      "addresses" : [ "" ],
      "acdAutoAnswer" : true,
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "division" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "authorization" : {
        "unusedRoles" : [ "" ],
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "allowConditions" : true,
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "skills" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "skillUri" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "name" : "aeiou",
          "defaultUser" : "",
          "id" : "aeiou",
          "type" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+0000"
      },
      "email" : "aeiou",
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "manager" : "",
      "employerInfo" : {
        "employeeType" : "aeiou",
        "dateHire" : "aeiou",
        "employeeId" : "aeiou",
        "officialName" : "aeiou"
      },
      "languages" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou",
        "languageUri" : "aeiou",
        "proficiency" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "message" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "groups" : [ {
        "images" : [ "" ],
        "addresses" : [ {
          "extension" : "aeiou",
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "visibility" : "aeiou",
        "memberCount" : 123456789,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "owners" : [ "" ],
        "type" : "aeiou",
        "version" : 123,
        "rulesVisible" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "biography" : {
        "hobbies" : [ "aeiou" ],
        "biography" : "aeiou",
        "interests" : [ "aeiou" ],
        "spouse" : "aeiou"
      },
      "certifications" : [ "aeiou" ],
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000",
        "indefinite" : true
      },
      "languagePreference" : "aeiou",
      "profileSkills" : [ "aeiou" ],
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "locations" : [ {
        "notes" : "aeiou",
        "coordinates" : {
          "key" : 1.3579000000000001069366817318950779736042022705078125
        },
        "locationDefinition" : "",
        "id" : "aeiou",
        "floorplanId" : "aeiou"
      } ],
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "locations" : [ {
          "images" : "aeiou",
          "address" : {
            "zipcode" : "aeiou",
            "country" : "aeiou",
            "city" : "aeiou",
            "street1" : "aeiou",
            "countryName" : "aeiou",
            "state" : "aeiou",
            "street2" : "aeiou"
          },
          "notes" : "aeiou",
          "floorplanImage" : [ "" ],
          "addressVerificationDetails" : {
            "dateStarted" : "2000-01-23T04:56:07.000+0000",
            "dateFinished" : "2000-01-23T04:56:07.000+0000",
            "service" : "smartystreets-us",
            "status" : "aeiou"
          },
          "selfUri" : "aeiou",
          "profileImage" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "emergencyNumber" : {
            "number" : "aeiou",
            "e164" : "aeiou",
            "type" : "aeiou"
          },
          "version" : 123,
          "path" : [ "aeiou" ],
          "addressStored" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "contactUser" : {
            "selfUri" : "aeiou",
            "id" : "aeiou"
          },
          "state" : "aeiou",
          "addressVerified" : true
        } ],
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "timestamp" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to timestamp)
     - parameter sortOrder: (query) Order by (optional, default to descending)
     - parameter entityId: (query) Include only events with this entity ID (optional)

     - returns: RequestBuilder<IntegrationEventEntityListing> 
     */
    open class func getIntegrationsEventlogWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, entityId: String? = nil) -> RequestBuilder<IntegrationEventEntityListing> {
        let path = "/api/v2/integrations/eventlog"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "sortOrder": sortOrder, 
            
            "entityId": entityId
            
        ])

        let requestBuilder: RequestBuilder<IntegrationEventEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get a single event
     
     - parameter eventId: (path) Event Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsEventlogEventId(eventId: String, completion: @escaping ((_ data: IntegrationEvent?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsEventlogEventIdWithRequestBuilder(eventId: eventId)
        requestBuilder.execute { (response: Response<IntegrationEvent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a single event
     
     - GET /api/v2/integrations/eventlog/{eventId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "eventCode" : "aeiou",
  "level" : "aeiou",
  "entities" : [ {
    "entityType" : "aeiou",
    "id" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "contextAttributes" : {
    "key" : "aeiou"
  },
  "correlationId" : "aeiou",
  "id" : "aeiou",
  "detailMessage" : "",
  "message" : {
    "messageWithParams" : "aeiou",
    "localizableMessageCode" : "aeiou",
    "messageParams" : {
      "key" : "aeiou"
    },
    "message" : "aeiou"
  },
  "user" : {
    "addresses" : [ "" ],
    "acdAutoAnswer" : true,
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "division" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "authorization" : {
      "unusedRoles" : [ "" ],
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "allowConditions" : true,
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "skills" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "skillUri" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "name" : "aeiou",
        "defaultUser" : "",
        "id" : "aeiou",
        "type" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+0000"
    },
    "email" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "manager" : "",
    "employerInfo" : {
      "employeeType" : "aeiou",
      "dateHire" : "aeiou",
      "employeeId" : "aeiou",
      "officialName" : "aeiou"
    },
    "languages" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "languageUri" : "aeiou",
      "proficiency" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "message" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "groups" : [ {
      "images" : [ "" ],
      "addresses" : [ {
        "extension" : "aeiou",
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "visibility" : "aeiou",
      "memberCount" : 123456789,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "owners" : [ "" ],
      "type" : "aeiou",
      "version" : 123,
      "rulesVisible" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "aeiou",
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "biography" : {
      "hobbies" : [ "aeiou" ],
      "biography" : "aeiou",
      "interests" : [ "aeiou" ],
      "spouse" : "aeiou"
    },
    "certifications" : [ "aeiou" ],
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000",
      "indefinite" : true
    },
    "languagePreference" : "aeiou",
    "profileSkills" : [ "aeiou" ],
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "locations" : [ {
      "notes" : "aeiou",
      "coordinates" : {
        "key" : 1.3579000000000001069366817318950779736042022705078125
      },
      "locationDefinition" : "",
      "id" : "aeiou",
      "floorplanId" : "aeiou"
    } ],
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "locations" : [ {
        "images" : "aeiou",
        "address" : {
          "zipcode" : "aeiou",
          "country" : "aeiou",
          "city" : "aeiou",
          "street1" : "aeiou",
          "countryName" : "aeiou",
          "state" : "aeiou",
          "street2" : "aeiou"
        },
        "notes" : "aeiou",
        "floorplanImage" : [ "" ],
        "addressVerificationDetails" : {
          "dateStarted" : "2000-01-23T04:56:07.000+0000",
          "dateFinished" : "2000-01-23T04:56:07.000+0000",
          "service" : "smartystreets-us",
          "status" : "aeiou"
        },
        "selfUri" : "aeiou",
        "profileImage" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "emergencyNumber" : {
          "number" : "aeiou",
          "e164" : "aeiou",
          "type" : "aeiou"
        },
        "version" : 123,
        "path" : [ "aeiou" ],
        "addressStored" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "contactUser" : {
          "selfUri" : "aeiou",
          "id" : "aeiou"
        },
        "state" : "aeiou",
        "addressVerified" : true
      } ],
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "timestamp" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter eventId: (path) Event Id 

     - returns: RequestBuilder<IntegrationEvent> 
     */
    open class func getIntegrationsEventlogEventIdWithRequestBuilder(eventId: String) -> RequestBuilder<IntegrationEvent> {
        var path = "/api/v2/integrations/eventlog/{eventId}"
        let eventIdPreEscape = "\(eventId)"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationEvent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get details about a Dialogflow agent
     
     - parameter agentId: (path) The agent ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowAgent(agentId: String, completion: @escaping ((_ data: DialogflowAgent?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowAgentWithRequestBuilder(agentId: agentId)
        requestBuilder.execute { (response: Response<DialogflowAgent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about a Dialogflow agent
     
     - GET /api/v2/integrations/speech/dialogflow/agents/{agentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "name" : "aeiou",
    "parameters" : {
      "key" : {
        "name" : "aeiou",
        "type" : "aeiou"
      }
    }
  } ],
  "languages" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "project" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "id" : "aeiou"
}}]
     
     - parameter agentId: (path) The agent ID 

     - returns: RequestBuilder<DialogflowAgent> 
     */
    open class func getIntegrationsSpeechDialogflowAgentWithRequestBuilder(agentId: String) -> RequestBuilder<DialogflowAgent> {
        var path = "/api/v2/integrations/speech/dialogflow/agents/{agentId}"
        let agentIdPreEscape = "\(agentId)"
        let agentIdPostEscape = agentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{agentId}", with: agentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DialogflowAgent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of Dialogflow agents in the customers' Google accounts
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter name: (query) Filter on agent name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechDialogflowAgents(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: DialogflowAgentSummaryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechDialogflowAgentsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<DialogflowAgentSummaryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Dialogflow agents in the customers' Google accounts
     
     - GET /api/v2/integrations/speech/dialogflow/agents
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "project" : {
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "description" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter name: (query) Filter on agent name (optional)

     - returns: RequestBuilder<DialogflowAgentSummaryEntityListing> 
     */
    open class func getIntegrationsSpeechDialogflowAgentsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<DialogflowAgentSummaryEntityListing> {
        let path = "/api/v2/integrations/speech/dialogflow/agents"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<DialogflowAgentSummaryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get details about a Lex bot alias
     
     - parameter aliasId: (path) The alias ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBotAlias(aliasId: String, completion: @escaping ((_ data: LexBotAlias?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotAliasWithRequestBuilder(aliasId: aliasId)
        requestBuilder.execute { (response: Response<LexBotAlias>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about a Lex bot alias
     
     - GET /api/v2/integrations/speech/lex/bot/alias/{aliasId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "slots" : {
      "key" : {
        "name" : "aeiou",
        "description" : "aeiou",
        "type" : "aeiou",
        "priority" : 123
      }
    },
    "name" : "aeiou",
    "description" : "aeiou",
    "version" : "aeiou"
  } ],
  "bot" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou"
  },
  "failureReason" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "botVersion" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter aliasId: (path) The alias ID 

     - returns: RequestBuilder<LexBotAlias> 
     */
    open class func getIntegrationsSpeechLexBotAliasWithRequestBuilder(aliasId: String) -> RequestBuilder<LexBotAlias> {
        var path = "/api/v2/integrations/speech/lex/bot/alias/{aliasId}"
        let aliasIdPreEscape = "\(aliasId)"
        let aliasIdPostEscape = aliasIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{aliasId}", with: aliasIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LexBotAlias>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum Status_getIntegrationsSpeechLexBotBotIdAliases: String { 
        case ready = "READY"
        case failed = "FAILED"
        case building = "BUILDING"
        case notBuilt = "NOT_BUILT"
    }

    
    
    
    
    /**
     
     Get a list of aliases for a bot in the customer's AWS accounts
     
     - parameter botId: (path) The bot ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBotBotIdAliases(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexBotBotIdAliases? = nil, name: String? = nil, completion: @escaping ((_ data: LexBotAliasEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotBotIdAliasesWithRequestBuilder(botId: botId, pageNumber: pageNumber, pageSize: pageSize, status: status, name: name)
        requestBuilder.execute { (response: Response<LexBotAliasEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of aliases for a bot in the customer's AWS accounts
     
     - GET /api/v2/integrations/speech/lex/bot/{botId}/aliases
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "intents" : [ {
      "slots" : {
        "key" : {
          "name" : "aeiou",
          "description" : "aeiou",
          "type" : "aeiou",
          "priority" : 123
        }
      },
      "name" : "aeiou",
      "description" : "aeiou",
      "version" : "aeiou"
    } ],
    "bot" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "id" : "aeiou"
    },
    "failureReason" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "botVersion" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter botId: (path) The bot ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter status: (query) Filter on alias status (optional)
     - parameter name: (query) Filter on alias name (optional)

     - returns: RequestBuilder<LexBotAliasEntityListing> 
     */
    open class func getIntegrationsSpeechLexBotBotIdAliasesWithRequestBuilder(botId: String, pageNumber: Int? = nil, pageSize: Int? = nil, status: Status_getIntegrationsSpeechLexBotBotIdAliases? = nil, name: String? = nil) -> RequestBuilder<LexBotAliasEntityListing> {
        var path = "/api/v2/integrations/speech/lex/bot/{botId}/aliases"
        let botIdPreEscape = "\(botId)"
        let botIdPostEscape = botIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botId}", with: botIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "status": status?.rawValue, 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<LexBotAliasEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of Lex bots in the customers' AWS accounts
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter name: (query) Filter on bot name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechLexBots(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil, completion: @escaping ((_ data: LexBotEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechLexBotsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, name: name)
        requestBuilder.execute { (response: Response<LexBotEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of Lex bots in the customers' AWS accounts
     
     - GET /api/v2/integrations/speech/lex/bots
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter name: (query) Filter on bot name (optional)

     - returns: RequestBuilder<LexBotEntityListing> 
     */
    open class func getIntegrationsSpeechLexBotsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, name: String? = nil) -> RequestBuilder<LexBotEntityListing> {
        let path = "/api/v2/integrations/speech/lex/bots"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "name": name
            
        ])

        let requestBuilder: RequestBuilder<LexBotEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get details about a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter includeVoices: (query) Include voices for the engine (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngine(engineId: String, includeVoices: Bool? = nil, completion: @escaping ((_ data: TtsEngineEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineWithRequestBuilder(engineId: engineId, includeVoices: includeVoices)
        requestBuilder.execute { (response: Response<TtsEngineEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about a TTS engine
     
     - GET /api/v2/integrations/speech/tts/engines/{engineId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "outputFormats" : [ "aeiou" ],
  "isDefault" : true,
  "languages" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "voices" : [ {
    "isDefault" : true,
    "gender" : "aeiou",
    "engine" : "",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou"
  } ],
  "isSecure" : true,
  "id" : "aeiou"
}}]
     
     - parameter engineId: (path) The engine ID 
     - parameter includeVoices: (query) Include voices for the engine (optional, default to false)

     - returns: RequestBuilder<TtsEngineEntity> 
     */
    open class func getIntegrationsSpeechTtsEngineWithRequestBuilder(engineId: String, includeVoices: Bool? = nil) -> RequestBuilder<TtsEngineEntity> {
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeVoices": includeVoices
            
        ])

        let requestBuilder: RequestBuilder<TtsEngineEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get details about a specific voice for a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter voiceId: (path) The voice ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngineVoice(engineId: String, voiceId: String, completion: @escaping ((_ data: TtsVoiceEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineVoiceWithRequestBuilder(engineId: engineId, voiceId: voiceId)
        requestBuilder.execute { (response: Response<TtsVoiceEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get details about a specific voice for a TTS engine
     
     - GET /api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isDefault" : true,
  "gender" : "aeiou",
  "engine" : {
    "outputFormats" : [ "aeiou" ],
    "isDefault" : true,
    "languages" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "voices" : [ "" ],
    "isSecure" : true,
    "id" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter engineId: (path) The engine ID 
     - parameter voiceId: (path) The voice ID 

     - returns: RequestBuilder<TtsVoiceEntity> 
     */
    open class func getIntegrationsSpeechTtsEngineVoiceWithRequestBuilder(engineId: String, voiceId: String) -> RequestBuilder<TtsVoiceEntity> {
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let voiceIdPreEscape = "\(voiceId)"
        let voiceIdPostEscape = voiceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{voiceId}", with: voiceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsVoiceEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Get a list of voices for a TTS engine
     
     - parameter engineId: (path) The engine ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngineVoices(engineId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: TtsVoiceEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEngineVoicesWithRequestBuilder(engineId: engineId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<TtsVoiceEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of voices for a TTS engine
     
     - GET /api/v2/integrations/speech/tts/engines/{engineId}/voices
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "isDefault" : true,
    "gender" : "aeiou",
    "engine" : {
      "outputFormats" : [ "aeiou" ],
      "isDefault" : true,
      "languages" : [ "aeiou" ],
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "voices" : [ "" ],
      "isSecure" : true,
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter engineId: (path) The engine ID 
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<TtsVoiceEntityListing> 
     */
    open class func getIntegrationsSpeechTtsEngineVoicesWithRequestBuilder(engineId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<TtsVoiceEntityListing> {
        var path = "/api/v2/integrations/speech/tts/engines/{engineId}/voices"
        let engineIdPreEscape = "\(engineId)"
        let engineIdPostEscape = engineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{engineId}", with: engineIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<TtsVoiceEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Get a list of TTS engines enabled for org
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter includeVoices: (query) Include voices for the engine (optional, default to false)
     - parameter name: (query) Filter on engine name (optional)
     - parameter language: (query) Filter on supported language. If includeVoices=true then the voices are also filtered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsEngines(pageNumber: Int? = nil, pageSize: Int? = nil, includeVoices: Bool? = nil, name: String? = nil, language: String? = nil, completion: @escaping ((_ data: TtsEngineEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsEnginesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, includeVoices: includeVoices, name: name, language: language)
        requestBuilder.execute { (response: Response<TtsEngineEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get a list of TTS engines enabled for org
     
     - GET /api/v2/integrations/speech/tts/engines
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "outputFormats" : [ "aeiou" ],
    "isDefault" : true,
    "languages" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "voices" : [ {
      "isDefault" : true,
      "gender" : "aeiou",
      "engine" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "id" : "aeiou"
    } ],
    "isSecure" : true,
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter includeVoices: (query) Include voices for the engine (optional, default to false)
     - parameter name: (query) Filter on engine name (optional)
     - parameter language: (query) Filter on supported language. If includeVoices=true then the voices are also filtered. (optional)

     - returns: RequestBuilder<TtsEngineEntityListing> 
     */
    open class func getIntegrationsSpeechTtsEnginesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, includeVoices: Bool? = nil, name: String? = nil, language: String? = nil) -> RequestBuilder<TtsEngineEntityListing> {
        let path = "/api/v2/integrations/speech/tts/engines"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "includeVoices": includeVoices, 
            
            "name": name, 
            
            "language": language
            
        ])

        let requestBuilder: RequestBuilder<TtsEngineEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     
     Get TTS settings for an org
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsSpeechTtsSettings(completion: @escaping ((_ data: TtsSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsSpeechTtsSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<TtsSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get TTS settings for an org
     
     - GET /api/v2/integrations/speech/tts/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultEngine" : "aeiou",
  "languageOverrides" : [ {
    "voice" : "aeiou",
    "engine" : "aeiou",
    "language" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<TtsSettings> 
     */
    open class func getIntegrationsSpeechTtsSettingsWithRequestBuilder() -> RequestBuilder<TtsSettings> {
        let path = "/api/v2/integrations/speech/tts/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     
     Get integration type.
     
     - parameter typeId: (path) Integration Type Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsType(typeId: String, completion: @escaping ((_ data: IntegrationType?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypeWithRequestBuilder(typeId: typeId)
        requestBuilder.execute { (response: Response<IntegrationType>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get integration type.
     
     - GET /api/v2/integrations/types/{typeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "configPropertiesSchemaUri" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "vendorWebsiteUri" : "aeiou",
  "salesContactUri" : "aeiou",
  "credentials" : {
    "key" : {
      "credentialTypes" : [ "aeiou" ],
      "title" : "aeiou",
      "required" : true
    }
  },
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "privacyPolicyUri" : "aeiou",
  "userPermissions" : [ "aeiou" ],
  "helpUri" : "aeiou",
  "vendorName" : "aeiou",
  "nonInstallable" : true,
  "marketplaceUri" : "aeiou",
  "termsOfServiceUri" : "aeiou",
  "faqUri" : "aeiou",
  "supportContactUri" : "aeiou",
  "provider" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "helpLinks" : [ {
    "description" : "aeiou",
    "title" : "aeiou",
    "uri" : "aeiou"
  } ],
  "category" : "aeiou",
  "maxInstances" : 123,
  "configAdvancedSchemaUri" : "aeiou",
  "vendorOAuthClientIds" : [ "aeiou" ]
}}]
     
     - parameter typeId: (path) Integration Type Id 

     - returns: RequestBuilder<IntegrationType> 
     */
    open class func getIntegrationsTypeWithRequestBuilder(typeId: String) -> RequestBuilder<IntegrationType> {
        var path = "/api/v2/integrations/types/{typeId}"
        let typeIdPreEscape = "\(typeId)"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationType>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum ConfigType_getIntegrationsTypeConfigschema: String { 
        case properties = "properties"
        case advanced = "advanced"
    }

    
    
    /**
     
     Get properties config schema for an integration type.
     
     - parameter typeId: (path) Integration Type Id 
     - parameter configType: (path) Config schema type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsTypeConfigschema(typeId: String, configType: ConfigType_getIntegrationsTypeConfigschema, completion: @escaping ((_ data: JsonSchemaDocument?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypeConfigschemaWithRequestBuilder(typeId: typeId, configType: configType)
        requestBuilder.execute { (response: Response<JsonSchemaDocument>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get properties config schema for an integration type.
     
     - GET /api/v2/integrations/types/{typeId}/configschemas/{configType}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "$schema" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "additionalProperties" : "{}",
  "title" : "aeiou",
  "type" : "aeiou",
  "required" : [ "aeiou" ],
  "properties" : {
    "key" : "{}"
  }
}}]
     
     - parameter typeId: (path) Integration Type Id 
     - parameter configType: (path) Config schema type 

     - returns: RequestBuilder<JsonSchemaDocument> 
     */
    open class func getIntegrationsTypeConfigschemaWithRequestBuilder(typeId: String, configType: ConfigType_getIntegrationsTypeConfigschema) -> RequestBuilder<JsonSchemaDocument> {
        var path = "/api/v2/integrations/types/{typeId}/configschemas/{configType}"
        let typeIdPreEscape = "\(typeId)"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let configTypePreEscape = "\(configType.rawValue)"
        let configTypePostEscape = configTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configType}", with: configTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSchemaDocument>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List integration types
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntegrationsTypes(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: IntegrationTypeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIntegrationsTypesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<IntegrationTypeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     List integration types
     
     - GET /api/v2/integrations/types
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "configPropertiesSchemaUri" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "vendorWebsiteUri" : "aeiou",
    "salesContactUri" : "aeiou",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "aeiou" ],
        "title" : "aeiou",
        "required" : true
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "privacyPolicyUri" : "aeiou",
    "userPermissions" : [ "aeiou" ],
    "helpUri" : "aeiou",
    "vendorName" : "aeiou",
    "nonInstallable" : true,
    "marketplaceUri" : "aeiou",
    "termsOfServiceUri" : "aeiou",
    "faqUri" : "aeiou",
    "supportContactUri" : "aeiou",
    "provider" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "helpLinks" : [ {
      "description" : "aeiou",
      "title" : "aeiou",
      "uri" : "aeiou"
    } ],
    "category" : "aeiou",
    "maxInstances" : 123,
    "configAdvancedSchemaUri" : "aeiou",
    "vendorOAuthClientIds" : [ "aeiou" ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<IntegrationTypeEntityListing> 
     */
    open class func getIntegrationsTypesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<IntegrationTypeEntityListing> {
        let path = "/api/v2/integrations/types"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<IntegrationTypeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     
     Update an integration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Update (optional)
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegration(integrationId: String, body: Integration? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationWithRequestBuilder(integrationId: integrationId, body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an integration.
     
     - PATCH /api/v2/integrations/{integrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : {
    "configPropertiesSchemaUri" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "vendorWebsiteUri" : "aeiou",
    "salesContactUri" : "aeiou",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "aeiou" ],
        "title" : "aeiou",
        "required" : true
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "privacyPolicyUri" : "aeiou",
    "userPermissions" : [ "aeiou" ],
    "helpUri" : "aeiou",
    "vendorName" : "aeiou",
    "nonInstallable" : true,
    "marketplaceUri" : "aeiou",
    "termsOfServiceUri" : "aeiou",
    "faqUri" : "aeiou",
    "supportContactUri" : "aeiou",
    "provider" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "helpLinks" : [ {
      "description" : "aeiou",
      "title" : "aeiou",
      "uri" : "aeiou"
    } ],
    "category" : "aeiou",
    "maxInstances" : 123,
    "configAdvancedSchemaUri" : "aeiou",
    "vendorOAuthClientIds" : [ "aeiou" ]
  },
  "notes" : "aeiou",
  "reportedState" : {
    "effective" : "aeiou",
    "lastUpdated" : "2000-01-23T04:56:07.000+0000",
    "code" : "aeiou",
    "detail" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "intendedState" : "aeiou",
  "attributes" : {
    "key" : "aeiou"
  },
  "id" : "aeiou",
  "config" : {
    "current" : {
      "notes" : "aeiou",
      "advanced" : "{}",
      "credentials" : {
        "key" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "type" : {
            "name" : "aeiou",
            "displayOrder" : [ "aeiou" ],
            "id" : "aeiou",
            "properties" : "{}",
            "required" : [ "aeiou" ]
          }
        }
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "version" : 123,
      "properties" : "{}"
    }
  }
}}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Update (optional)
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func patchIntegrationWithRequestBuilder(integrationId: String, body: Integration? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<Integration> {
        var path = "/api/v2/integrations/{integrationId}"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "sortBy": sortBy, 
            
            "expand": expand, 
            
            "nextPage": nextPage, 
            
            "previousPage": previousPage
            
        ])

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Patch an Action
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegrationsAction(actionId: String, body: UpdateActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationsActionWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Patch an Action
     
     - PATCH /api/v2/integrations/actions/{actionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func patchIntegrationsActionWithRequestBuilder(actionId: String, body: UpdateActionInput) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an existing Draft
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action Draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchIntegrationsActionDraft(actionId: String, body: UpdateDraftInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = patchIntegrationsActionDraftWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an existing Draft
     
     - PATCH /api/v2/integrations/actions/{actionId}/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action Draft. 

     - returns: RequestBuilder<Action> 
     */
    open class func patchIntegrationsActionDraftWithRequestBuilder(actionId: String, body: UpdateDraftInput) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an integration.
     
     - parameter body: (body) Integration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrations(body: CreateIntegrationRequest? = nil, completion: @escaping ((_ data: Integration?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Integration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an integration.
     
     - POST /api/v2/integrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "integrationType" : {
    "configPropertiesSchemaUri" : "aeiou",
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "vendorWebsiteUri" : "aeiou",
    "salesContactUri" : "aeiou",
    "credentials" : {
      "key" : {
        "credentialTypes" : [ "aeiou" ],
        "title" : "aeiou",
        "required" : true
      }
    },
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "privacyPolicyUri" : "aeiou",
    "userPermissions" : [ "aeiou" ],
    "helpUri" : "aeiou",
    "vendorName" : "aeiou",
    "nonInstallable" : true,
    "marketplaceUri" : "aeiou",
    "termsOfServiceUri" : "aeiou",
    "faqUri" : "aeiou",
    "supportContactUri" : "aeiou",
    "provider" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "helpLinks" : [ {
      "description" : "aeiou",
      "title" : "aeiou",
      "uri" : "aeiou"
    } ],
    "category" : "aeiou",
    "maxInstances" : 123,
    "configAdvancedSchemaUri" : "aeiou",
    "vendorOAuthClientIds" : [ "aeiou" ]
  },
  "notes" : "aeiou",
  "reportedState" : {
    "effective" : "aeiou",
    "lastUpdated" : "2000-01-23T04:56:07.000+0000",
    "code" : "aeiou",
    "detail" : {
      "messageWithParams" : "aeiou",
      "localizableMessageCode" : "aeiou",
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "intendedState" : "aeiou",
  "attributes" : {
    "key" : "aeiou"
  },
  "id" : "aeiou",
  "config" : {
    "current" : {
      "notes" : "aeiou",
      "advanced" : "{}",
      "credentials" : {
        "key" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "type" : {
            "name" : "aeiou",
            "displayOrder" : [ "aeiou" ],
            "id" : "aeiou",
            "properties" : "{}",
            "required" : [ "aeiou" ]
          }
        }
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "version" : 123,
      "properties" : "{}"
    }
  }
}}]
     
     - parameter body: (body) Integration (optional)

     - returns: RequestBuilder<Integration> 
     */
    open class func postIntegrationsWithRequestBuilder(body: CreateIntegrationRequest? = nil) -> RequestBuilder<Integration> {
        let path = "/api/v2/integrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Integration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new Draft from existing Action
     
     - parameter actionId: (path) actionId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraft(actionId: String, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftWithRequestBuilder(actionId: actionId)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new Draft from existing Action
     
     - POST /api/v2/integrations/actions/{actionId}/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionDraftWithRequestBuilder(actionId: String) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}/draft"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Publish a Draft and make it the active Action configuration
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraftPublish(actionId: String, body: PublishDraftInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftPublishWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish a Draft and make it the active Action configuration
     
     - POST /api/v2/integrations/actions/{actionId}/draft/publish
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Input used to patch the Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionDraftPublishWithRequestBuilder(actionId: String, body: PublishDraftInput) -> RequestBuilder<Action> {
        var path = "/api/v2/integrations/actions/{actionId}/draft/publish"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionDraftTest(actionId: String, body: JSON, completion: @escaping ((_ data: TestExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionDraftTestWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<TestExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - POST /api/v2/integrations/actions/{actionId}/draft/test
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "operations" : [ {
    "result" : "{}",
    "success" : true,
    "name" : "aeiou",
    "step" : 123,
    "error" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    }
  } ],
  "success" : true,
  "error" : "",
  "finalResult" : "{}"
}}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<TestExecutionResult> 
     */
    open class func postIntegrationsActionDraftTestWithRequestBuilder(actionId: String, body: JSON) -> RequestBuilder<TestExecutionResult> {
        var path = "/api/v2/integrations/actions/{actionId}/draft/test"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionExecute(actionId: String, body: JSON, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionExecuteWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.
     
     - POST /api/v2/integrations/actions/{actionId}/execute
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<JSON> 
     */
    open class func postIntegrationsActionExecuteWithRequestBuilder(actionId: String, body: JSON) -> RequestBuilder<JSON> {
        var path = "/api/v2/integrations/actions/{actionId}/execute"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionTest(actionId: String, body: JSON, completion: @escaping ((_ data: TestExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionTestWithRequestBuilder(actionId: actionId, body: body)
        requestBuilder.execute { (response: Response<TestExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.
     
     - POST /api/v2/integrations/actions/{actionId}/test
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "operations" : [ {
    "result" : "{}",
    "success" : true,
    "name" : "aeiou",
    "step" : 123,
    "error" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    }
  } ],
  "success" : true,
  "error" : "",
  "finalResult" : "{}"
}}]
     
     - parameter actionId: (path) actionId 
     - parameter body: (body) Map of parameters used for variable substitution. 

     - returns: RequestBuilder<TestExecutionResult> 
     */
    open class func postIntegrationsActionTestWithRequestBuilder(actionId: String, body: JSON) -> RequestBuilder<TestExecutionResult> {
        var path = "/api/v2/integrations/actions/{actionId}/test"
        let actionIdPreEscape = "\(actionId)"
        let actionIdPostEscape = actionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionId}", with: actionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new Action
     
     - parameter body: (body) Input used to create Action. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActions(body: PostActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new Action
     
     - POST /api/v2/integrations/actions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter body: (body) Input used to create Action. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionsWithRequestBuilder(body: PostActionInput) -> RequestBuilder<Action> {
        let path = "/api/v2/integrations/actions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a new Draft
     
     - parameter body: (body) Input used to create Action Draft. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsActionsDrafts(body: PostActionInput, completion: @escaping ((_ data: Action?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsActionsDraftsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Action>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a new Draft
     
     - POST /api/v2/integrations/actions/drafts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "contract" : {
    "output" : {
      "successSchemaFlattened" : "",
      "errorSchemaUri" : "aeiou",
      "errorSchemaFlattened" : "{}",
      "successSchema" : {
        "$schema" : "aeiou",
        "description" : "aeiou",
        "id" : "aeiou",
        "additionalProperties" : "{}",
        "title" : "aeiou",
        "type" : "aeiou",
        "required" : [ "aeiou" ],
        "properties" : {
          "key" : "{}"
        }
      },
      "successSchemaUri" : "aeiou",
      "errorSchema" : ""
    },
    "input" : {
      "inputSchemaFlattened" : "",
      "inputSchema" : "",
      "inputSchemaUri" : "aeiou"
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "integrationId" : "aeiou",
  "id" : "aeiou",
  "category" : "aeiou",
  "secure" : true,
  "version" : 123,
  "config" : {
    "request" : {
      "headers" : {
        "key" : "aeiou"
      },
      "requestUrlTemplate" : "aeiou",
      "requestType" : "aeiou",
      "requestTemplate" : "aeiou",
      "requestTemplateUri" : "aeiou"
    },
    "response" : {
      "translationMapDefaults" : {
        "key" : "aeiou"
      },
      "translationMap" : {
        "key" : "aeiou"
      },
      "successTemplateUri" : "aeiou",
      "successTemplate" : "aeiou"
    }
  }
}}]
     
     - parameter body: (body) Input used to create Action Draft. 

     - returns: RequestBuilder<Action> 
     */
    open class func postIntegrationsActionsDraftsWithRequestBuilder(body: PostActionInput) -> RequestBuilder<Action> {
        let path = "/api/v2/integrations/actions/drafts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Action>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create a set of credentials
     
     - parameter body: (body) Credential (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsCredentials(body: Credential? = nil, completion: @escaping ((_ data: CredentialInfo?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsCredentialsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CredentialInfo>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create a set of credentials
     
     - POST /api/v2/integrations/credentials
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "type" : {
    "name" : "aeiou",
    "displayOrder" : [ "aeiou" ],
    "id" : "aeiou",
    "properties" : "{}",
    "required" : [ "aeiou" ]
  }
}}]
     
     - parameter body: (body) Credential (optional)

     - returns: RequestBuilder<CredentialInfo> 
     */
    open class func postIntegrationsCredentialsWithRequestBuilder(body: Credential? = nil) -> RequestBuilder<CredentialInfo> {
        let path = "/api/v2/integrations/credentials"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialInfo>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Add a vendor connection
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIntegrationsWorkforcemanagementVendorconnection(body: VendorConnectionRequest? = nil, completion: @escaping ((_ data: UserActionCategoryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postIntegrationsWorkforcemanagementVendorconnectionWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserActionCategoryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Add a vendor connection
     
     - POST /api/v2/integrations/workforcemanagement/vendorconnection
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "nextUri" : "aeiou",
  "previousUri" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<UserActionCategoryEntityListing> 
     */
    open class func postIntegrationsWorkforcemanagementVendorconnectionWithRequestBuilder(body: VendorConnectionRequest? = nil) -> RequestBuilder<UserActionCategoryEntityListing> {
        let path = "/api/v2/integrations/workforcemanagement/vendorconnection"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserActionCategoryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update integration configuration.
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Configuration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationConfigCurrent(integrationId: String, body: IntegrationConfiguration? = nil, completion: @escaping ((_ data: IntegrationConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationConfigCurrentWithRequestBuilder(integrationId: integrationId, body: body)
        requestBuilder.execute { (response: Response<IntegrationConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update integration configuration.
     
     - PUT /api/v2/integrations/{integrationId}/config/current
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "notes" : "aeiou",
  "advanced" : "{}",
  "credentials" : {
    "key" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "type" : {
        "name" : "aeiou",
        "displayOrder" : [ "aeiou" ],
        "id" : "aeiou",
        "properties" : "{}",
        "required" : [ "aeiou" ]
      }
    }
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "version" : 123,
  "properties" : "{}"
}}]
     
     - parameter integrationId: (path) Integration Id 
     - parameter body: (body) Integration Configuration (optional)

     - returns: RequestBuilder<IntegrationConfiguration> 
     */
    open class func putIntegrationConfigCurrentWithRequestBuilder(integrationId: String, body: IntegrationConfiguration? = nil) -> RequestBuilder<IntegrationConfiguration> {
        var path = "/api/v2/integrations/{integrationId}/config/current"
        let integrationIdPreEscape = "\(integrationId)"
        let integrationIdPostEscape = integrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{integrationId}", with: integrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IntegrationConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update a set of credentials
     
     - parameter credentialId: (path) Credential ID 
     - parameter body: (body) Credential (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsCredential(credentialId: String, body: Credential? = nil, completion: @escaping ((_ data: CredentialInfo?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsCredentialWithRequestBuilder(credentialId: credentialId, body: body)
        requestBuilder.execute { (response: Response<CredentialInfo>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update a set of credentials
     
     - PUT /api/v2/integrations/credentials/{credentialId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "type" : {
    "name" : "aeiou",
    "displayOrder" : [ "aeiou" ],
    "id" : "aeiou",
    "properties" : "{}",
    "required" : [ "aeiou" ]
  }
}}]
     
     - parameter credentialId: (path) Credential ID 
     - parameter body: (body) Credential (optional)

     - returns: RequestBuilder<CredentialInfo> 
     */
    open class func putIntegrationsCredentialWithRequestBuilder(credentialId: String, body: Credential? = nil) -> RequestBuilder<CredentialInfo> {
        var path = "/api/v2/integrations/credentials/{credentialId}"
        let credentialIdPreEscape = "\(credentialId)"
        let credentialIdPostEscape = credentialIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{credentialId}", with: credentialIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CredentialInfo>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     
     Update TTS settings for an org
     
     - parameter body: (body) Updated TtsSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIntegrationsSpeechTtsSettings(body: TtsSettings, completion: @escaping ((_ data: TtsSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putIntegrationsSpeechTtsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TtsSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update TTS settings for an org
     
     - PUT /api/v2/integrations/speech/tts/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultEngine" : "aeiou",
  "languageOverrides" : [ {
    "voice" : "aeiou",
    "engine" : "aeiou",
    "language" : "aeiou"
  } ]
}}]
     
     - parameter body: (body) Updated TtsSettings 

     - returns: RequestBuilder<TtsSettings> 
     */
    open class func putIntegrationsSpeechTtsSettingsWithRequestBuilder(body: TtsSettings) -> RequestBuilder<TtsSettings> {
        let path = "/api/v2/integrations/speech/tts/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TtsSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
