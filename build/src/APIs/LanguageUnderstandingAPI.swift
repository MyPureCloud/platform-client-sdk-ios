//
// LanguageUnderstandingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LanguageUnderstandingAPI {
    
    
    
    /**
     
     Delete an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomain(domainId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an NLU Domain.
     
     - DELETE /api/v2/languageunderstanding/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainWithRequestBuilder(domainId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete the feedback on the NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId: String, feedbackId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: domainId, feedbackId: feedbackId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete the feedback on the NLU Domain Version.
     
     - DELETE /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: String, feedbackId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let feedbackIdPreEscape = "\(feedbackId)"
        let feedbackIdPostEscape = feedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{feedbackId}", with: feedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Delete an NLU Domain Version
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     
     Delete an NLU Domain Version
     
     - DELETE /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     
     Find an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomain(domainId: String, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Find an NLU Domain.
     
     - GET /api/v2/languageunderstanding/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastPublishedVersion" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "draftVersion" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : "",
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func getLanguageunderstandingDomainWithRequestBuilder(domainId: String) -> RequestBuilder<NluDomain> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Assessment_getLanguageunderstandingDomainFeedback: String { 
        case incorrect = "Incorrect"
        case correct = "Correct"
        case unknown = "Unknown"
        case disabled = "Disabled"
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    public enum Fields_getLanguageunderstandingDomainFeedback: String { 
        case version = "version"
        case datecreated = "dateCreated"
        case text = "text"
        case intents = "intents"
    }

    
    
    /**
     
     Get all feedback in the given NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter intentName: (query) The top intent name to retrieve feedback for. (optional)
     - parameter assessment: (query) The top assessment to retrieve feedback for. (optional)
     - parameter dateStart: (query) Begin of time window as ISO-8601 date. (optional)
     - parameter dateEnd: (query) End of time window as ISO-8601 date. (optional)
     - parameter includeDeleted: (query) Whether to include soft-deleted items in the result. (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainFeedback(domainId: String, intentName: String? = nil, assessment: Assessment_getLanguageunderstandingDomainFeedback? = nil, dateStart: Date? = nil, dateEnd: Date? = nil, includeDeleted: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: NluFeedbackListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: domainId, intentName: intentName, assessment: assessment, dateStart: dateStart, dateEnd: dateEnd, includeDeleted: includeDeleted, pageNumber: pageNumber, pageSize: pageSize, fields: fields)
        requestBuilder.execute { (response: Response<NluFeedbackListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all feedback in the given NLU Domain Version.
     
     - GET /api/v2/languageunderstanding/domains/{domainId}/feedback
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "intents" : [ {
      "assessment" : "aeiou",
      "entities" : [ {
        "entityType" : "aeiou",
        "probability" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou",
        "value" : {
          "raw" : "aeiou",
          "resolved" : "aeiou"
        }
      } ],
      "probability" : 1.3579000000000001069366817318950779736042022705078125,
      "name" : "aeiou"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "id" : "aeiou",
    "text" : "aeiou",
    "version" : {
      "intents" : [ {
        "utterances" : [ {
          "segments" : [ {
            "text" : "aeiou",
            "entity" : {
              "name" : "aeiou"
            }
          } ]
        } ],
        "name" : "aeiou",
        "entityTypeBindings" : [ {
          "entityType" : "aeiou",
          "entityName" : "aeiou"
        } ]
      } ],
      "dateTrained" : "2000-01-23T04:56:07.000+0000",
      "trainingStatus" : "aeiou",
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "published" : true,
      "datePublished" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "domain" : {
        "lastPublishedVersion" : "",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "language" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "draftVersion" : ""
      },
      "entityTypes" : [ {
        "name" : "aeiou",
        "description" : "aeiou",
        "mechanism" : {
          "restricted" : true,
          "type" : "aeiou",
          "items" : [ {
            "synonyms" : [ "aeiou" ],
            "value" : "aeiou"
          } ]
        }
      } ],
      "id" : "aeiou",
      "evaluationStatus" : "aeiou"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter intentName: (query) The top intent name to retrieve feedback for. (optional)
     - parameter assessment: (query) The top assessment to retrieve feedback for. (optional)
     - parameter dateStart: (query) Begin of time window as ISO-8601 date. (optional)
     - parameter dateEnd: (query) End of time window as ISO-8601 date. (optional)
     - parameter includeDeleted: (query) Whether to include soft-deleted items in the result. (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)

     - returns: RequestBuilder<NluFeedbackListing> 
     */
    open class func getLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: String, intentName: String? = nil, assessment: Assessment_getLanguageunderstandingDomainFeedback? = nil, dateStart: Date? = nil, dateEnd: Date? = nil, includeDeleted: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, fields: [String]? = nil) -> RequestBuilder<NluFeedbackListing> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "intentName": intentName, 
            
            "assessment": assessment?.rawValue, 
            
            "dateStart": dateStart?.encodeToJSON(), 
            
            "dateEnd": dateEnd?.encodeToJSON(), 
            
            "includeDeleted": includeDeleted, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON(), 
            
            "fields": fields
            
        ])

        let requestBuilder: RequestBuilder<NluFeedbackListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum Fields_getLanguageunderstandingDomainFeedbackFeedbackId: String { 
        case version = "version"
        case datecreated = "dateCreated"
        case text = "text"
        case intents = "intents"
    }

    
    
    /**
     
     Find a Feedback
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainFeedbackFeedbackId(domainId: String, feedbackId: String, fields: [String]? = nil, completion: @escaping ((_ data: NluFeedbackResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: domainId, feedbackId: feedbackId, fields: fields)
        requestBuilder.execute { (response: Response<NluFeedbackResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Find a Feedback
     
     - GET /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "assessment" : "aeiou",
    "entities" : [ {
      "entityType" : "aeiou",
      "probability" : 1.3579000000000001069366817318950779736042022705078125,
      "name" : "aeiou",
      "value" : {
        "raw" : "aeiou",
        "resolved" : "aeiou"
      }
    } ],
    "probability" : 1.3579000000000001069366817318950779736042022705078125,
    "name" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "text" : "aeiou",
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)

     - returns: RequestBuilder<NluFeedbackResponse> 
     */
    open class func getLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: String, feedbackId: String, fields: [String]? = nil) -> RequestBuilder<NluFeedbackResponse> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let feedbackIdPreEscape = "\(feedbackId)"
        let feedbackIdPostEscape = feedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{feedbackId}", with: feedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "fields": fields
            
        ])

        let requestBuilder: RequestBuilder<NluFeedbackResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Find an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, includeUtterances: Bool? = nil, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, includeUtterances: includeUtterances)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Find an NLU Domain Version.
     
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "segments" : [ {
        "text" : "aeiou",
        "entity" : {
          "name" : "aeiou"
        }
      } ]
    } ],
    "name" : "aeiou",
    "entityTypeBindings" : [ {
      "entityType" : "aeiou",
      "entityName" : "aeiou"
    } ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+0000",
  "trainingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "domain" : {
    "lastPublishedVersion" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "draftVersion" : ""
  },
  "entityTypes" : [ {
    "name" : "aeiou",
    "description" : "aeiou",
    "mechanism" : {
      "restricted" : true,
      "type" : "aeiou",
      "items" : [ {
        "synonyms" : [ "aeiou" ],
        "value" : "aeiou"
      } ]
    }
  } ],
  "id" : "aeiou",
  "evaluationStatus" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func getLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String, includeUtterances: Bool? = nil) -> RequestBuilder<NluDomainVersion> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeUtterances": includeUtterances
            
        ])

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Retrieved quality report for the specified NLU Domain Version
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersionReport(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersionQualityReport?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionReportWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersionQualityReport>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Retrieved quality report for the specified NLU Domain Version
     
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "summary" : {
    "metrics" : [ {
      "name" : "aeiou",
      "value" : 1.3579000000000001069366817318950779736042022705078125
    } ]
  },
  "confusionMatrix" : [ {
    "columns" : [ {
      "name" : "aeiou",
      "value" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "name" : "aeiou"
  } ],
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersionQualityReport> 
     */
    open class func getLanguageunderstandingDomainVersionReportWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersionQualityReport> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersionQualityReport>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    
    /**
     
     Get all NLU Domain Versions for a given Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersions(domainId: String, includeUtterances: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: NluDomainVersionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: domainId, includeUtterances: includeUtterances, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<NluDomainVersionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all NLU Domain Versions for a given Domain.
     
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<NluDomainVersionListing> 
     */
    open class func getLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: String, includeUtterances: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<NluDomainVersionListing> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "includeUtterances": includeUtterances, 
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<NluDomainVersionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Get all NLU Domains.
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomains(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: NluDomainListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<NluDomainListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Get all NLU Domains.
     
     - GET /api/v2/languageunderstanding/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "lastPublishedVersion" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "draftVersion" : {
      "intents" : [ {
        "utterances" : [ {
          "segments" : [ {
            "text" : "aeiou",
            "entity" : {
              "name" : "aeiou"
            }
          } ]
        } ],
        "name" : "aeiou",
        "entityTypeBindings" : [ {
          "entityType" : "aeiou",
          "entityName" : "aeiou"
        } ]
      } ],
      "dateTrained" : "2000-01-23T04:56:07.000+0000",
      "trainingStatus" : "aeiou",
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "published" : true,
      "datePublished" : "2000-01-23T04:56:07.000+0000",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "domain" : "",
      "entityTypes" : [ {
        "name" : "aeiou",
        "description" : "aeiou",
        "mechanism" : {
          "restricted" : true,
          "type" : "aeiou",
          "items" : [ {
            "synonyms" : [ "aeiou" ],
            "value" : "aeiou"
          } ]
        }
      } ],
      "id" : "aeiou",
      "evaluationStatus" : "aeiou"
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Page size (optional, default to 25)

     - returns: RequestBuilder<NluDomainListing> 
     */
    open class func getLanguageunderstandingDomainsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<NluDomainListing> {
        let path = "/api/v2/languageunderstanding/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            
            "pageNumber": pageNumber?.encodeToJSON(), 
            
            "pageSize": pageSize?.encodeToJSON()
            
        ])

        let requestBuilder: RequestBuilder<NluDomainListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Update an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The updated NLU Domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLanguageunderstandingDomain(domainId: String, body: NluDomain, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLanguageunderstandingDomainWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an NLU Domain.
     
     - PATCH /api/v2/languageunderstanding/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastPublishedVersion" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "draftVersion" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : "",
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The updated NLU Domain. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func patchLanguageunderstandingDomainWithRequestBuilder(domainId: String, body: NluDomain) -> RequestBuilder<NluDomain> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create feedback for the NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The Feedback to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainFeedback(domainId: String, body: NluFeedbackRequest, completion: @escaping ((_ data: NluFeedbackResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<NluFeedbackResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create feedback for the NLU Domain Version.
     
     - POST /api/v2/languageunderstanding/domains/{domainId}/feedback
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "assessment" : "aeiou",
    "entities" : [ {
      "entityType" : "aeiou",
      "probability" : 1.3579000000000001069366817318950779736042022705078125,
      "name" : "aeiou",
      "value" : {
        "raw" : "aeiou",
        "resolved" : "aeiou"
      }
    } ],
    "probability" : 1.3579000000000001069366817318950779736042022705078125,
    "name" : "aeiou"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "id" : "aeiou",
  "text" : "aeiou",
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The Feedback to create. 

     - returns: RequestBuilder<NluFeedbackResponse> 
     */
    open class func postLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: String, body: NluFeedbackRequest) -> RequestBuilder<NluFeedbackResponse> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluFeedbackResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Detect intent, entities, etc. in the submitted text using the specified NLU domain version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The input data to perform detection on. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionDetect(domainId: String, domainVersionId: String, body: NluDetectionRequest, completion: @escaping ((_ data: NluDetectionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionDetectWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, body: body)
        requestBuilder.execute { (response: Response<NluDetectionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Detect intent, entities, etc. in the submitted text using the specified NLU domain version.
     
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "output" : {
    "dialogActs" : [ {
      "probability" : 1.3579000000000001069366817318950779736042022705078125,
      "name" : "aeiou"
    } ],
    "intents" : [ {
      "entities" : [ {
        "entityType" : "aeiou",
        "probability" : 1.3579000000000001069366817318950779736042022705078125,
        "name" : "aeiou",
        "value" : {
          "raw" : "aeiou",
          "resolved" : "aeiou"
        }
      } ],
      "probability" : 1.3579000000000001069366817318950779736042022705078125,
      "name" : "aeiou"
    } ]
  },
  "input" : {
    "text" : "aeiou"
  },
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The input data to perform detection on. 

     - returns: RequestBuilder<NluDetectionResponse> 
     */
    open class func postLanguageunderstandingDomainVersionDetectWithRequestBuilder(domainId: String, domainVersionId: String, body: NluDetectionRequest) -> RequestBuilder<NluDetectionResponse> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDetectionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Publish the draft NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionPublish(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionPublishWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Publish the draft NLU Domain Version.
     
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "segments" : [ {
        "text" : "aeiou",
        "entity" : {
          "name" : "aeiou"
        }
      } ]
    } ],
    "name" : "aeiou",
    "entityTypeBindings" : [ {
      "entityType" : "aeiou",
      "entityName" : "aeiou"
    } ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+0000",
  "trainingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "domain" : {
    "lastPublishedVersion" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "draftVersion" : ""
  },
  "entityTypes" : [ {
    "name" : "aeiou",
    "description" : "aeiou",
    "mechanism" : {
      "restricted" : true,
      "type" : "aeiou",
      "items" : [ {
        "synonyms" : [ "aeiou" ],
        "value" : "aeiou"
      } ]
    }
  } ],
  "id" : "aeiou",
  "evaluationStatus" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func postLanguageunderstandingDomainVersionPublishWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersion> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Train the draft NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionTrain(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersionTrainingResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionTrainWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersionTrainingResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Train the draft NLU Domain Version.
     
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "message" : "aeiou",
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : {
      "lastPublishedVersion" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "language" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "draftVersion" : ""
    },
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersionTrainingResponse> 
     */
    open class func postLanguageunderstandingDomainVersionTrainWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersionTrainingResponse> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        
            
            
        let body: Data? = nil
            
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersionTrainingResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    /**
     
     Create an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The NLU Domain Version to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersions(domainId: String, body: NluDomainVersion, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an NLU Domain Version.
     
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "segments" : [ {
        "text" : "aeiou",
        "entity" : {
          "name" : "aeiou"
        }
      } ]
    } ],
    "name" : "aeiou",
    "entityTypeBindings" : [ {
      "entityType" : "aeiou",
      "entityName" : "aeiou"
    } ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+0000",
  "trainingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "domain" : {
    "lastPublishedVersion" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "draftVersion" : ""
  },
  "entityTypes" : [ {
    "name" : "aeiou",
    "description" : "aeiou",
    "mechanism" : {
      "restricted" : true,
      "type" : "aeiou",
      "items" : [ {
        "synonyms" : [ "aeiou" ],
        "value" : "aeiou"
      } ]
    }
  } ],
  "id" : "aeiou",
  "evaluationStatus" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The NLU Domain Version to create. 

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func postLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: String, body: NluDomainVersion) -> RequestBuilder<NluDomainVersion> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Create an NLU Domain.
     
     - parameter body: (body) The NLU Domain to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomains(body: NluDomain, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Create an NLU Domain.
     
     - POST /api/v2/languageunderstanding/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "lastPublishedVersion" : "",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "draftVersion" : {
    "intents" : [ {
      "utterances" : [ {
        "segments" : [ {
          "text" : "aeiou",
          "entity" : {
            "name" : "aeiou"
          }
        } ]
      } ],
      "name" : "aeiou",
      "entityTypeBindings" : [ {
        "entityType" : "aeiou",
        "entityName" : "aeiou"
      } ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+0000",
    "trainingStatus" : "aeiou",
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+0000",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "domain" : "",
    "entityTypes" : [ {
      "name" : "aeiou",
      "description" : "aeiou",
      "mechanism" : {
        "restricted" : true,
        "type" : "aeiou",
        "items" : [ {
          "synonyms" : [ "aeiou" ],
          "value" : "aeiou"
        } ]
      }
    } ],
    "id" : "aeiou",
    "evaluationStatus" : "aeiou"
  }
}}]
     
     - parameter body: (body) The NLU Domain to create. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func postLanguageunderstandingDomainsWithRequestBuilder(body: NluDomain) -> RequestBuilder<NluDomain> {
        let path = "/api/v2/languageunderstanding/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     
     Update an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The updated NLU Domain Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, body: NluDomainVersion, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = putLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, body: body)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Update an NLU Domain Version.
     
     - PUT /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "segments" : [ {
        "text" : "aeiou",
        "entity" : {
          "name" : "aeiou"
        }
      } ]
    } ],
    "name" : "aeiou",
    "entityTypeBindings" : [ {
      "entityType" : "aeiou",
      "entityName" : "aeiou"
    } ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+0000",
  "trainingStatus" : "aeiou",
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+0000",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "domain" : {
    "lastPublishedVersion" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "language" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "draftVersion" : ""
  },
  "entityTypes" : [ {
    "name" : "aeiou",
    "description" : "aeiou",
    "mechanism" : {
      "restricted" : true,
      "type" : "aeiou",
      "items" : [ {
        "synonyms" : [ "aeiou" ],
        "value" : "aeiou"
      } ]
    }
  } ],
  "id" : "aeiou",
  "evaluationStatus" : "aeiou"
}}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The updated NLU Domain Version. 

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func putLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String, body: NluDomainVersion) -> RequestBuilder<NluDomainVersion> {
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
