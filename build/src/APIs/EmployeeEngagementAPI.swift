//
// EmployeeEngagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EmployeeEngagementAPI {
    
    
    /**
     Deletes a celebration
     
     - parameter celebrationId: (path) The ID of the celebration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEmployeeengagementCelebration(celebrationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteEmployeeengagementCelebrationWithRequestBuilder(celebrationId: celebrationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a celebration
     - DELETE /api/v2/employeeengagement/celebrations/{celebrationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter celebrationId: (path) The ID of the celebration 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEmployeeengagementCelebrationWithRequestBuilder(celebrationId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/employeeengagement/celebrations/{celebrationId}"
        let celebrationIdPreEscape = "\(celebrationId)"
        let celebrationIdPostEscape = celebrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{celebrationId}", with: celebrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Get all celebrations
     
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmployeeengagementCelebrations(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: GetCelebrationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmployeeengagementCelebrationsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<GetCelebrationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all celebrations
     - GET /api/v2/employeeengagement/celebrations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "note" : "note",
    "dateCreated" : "2023-01-01T01:01:01Z",
    "sourceEntity" : "{}",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "recipient" : "{}",
    "id" : "id",
    "type" : "Recognition",
    "title" : "title"
  }, {
    "note" : "note",
    "dateCreated" : "2023-01-01T01:01:01Z",
    "sourceEntity" : "{}",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "recipient" : "{}",
    "id" : "id",
    "type" : "Recognition",
    "title" : "title"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "previousUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)

     - returns: RequestBuilder<GetCelebrationListing> 
     */
    open class func getEmployeeengagementCelebrationsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<GetCelebrationListing> {        
        let path = "/api/v2/employeeengagement/celebrations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var requestUrl = URLComponents(string: URLString)
        requestUrl?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<GetCelebrationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    /**
     Gets a single recognition
     
     - parameter recognitionId: (path) The Recognition ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmployeeengagementRecognition(recognitionId: String, completion: @escaping ((_ data: Recognition?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmployeeengagementRecognitionWithRequestBuilder(recognitionId: recognitionId)
        requestBuilder.execute { (response: Response<Recognition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets a single recognition
     - GET /api/v2/employeeengagement/recognitions/{recognitionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateAcknowledged" : "2023-01-01T01:01:01Z",
  "note" : "note",
  "dateCreated" : "2023-01-01T01:01:01Z",
  "createdBy" : "{}",
  "contextType" : "Interaction",
  "selfUri" : "https://openapi-generator.tech",
  "recipient" : "{}",
  "contextId" : "contextId",
  "id" : "id",
  "type" : "ThankYou",
  "title" : "title",
  "dateDisplayed" : "2023-01-01T01:01:01Z"
}, statusCode=200}]
     
     - parameter recognitionId: (path) The Recognition ID 

     - returns: RequestBuilder<Recognition> 
     */
    open class func getEmployeeengagementRecognitionWithRequestBuilder(recognitionId: String) -> RequestBuilder<Recognition> {        
        var path = "/api/v2/employeeengagement/recognitions/{recognitionId}"
        let recognitionIdPreEscape = "\(recognitionId)"
        let recognitionIdPostEscape = recognitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recognitionId}", with: recognitionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recognition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: requestUrl!, body: body)
    }

    
    
    
    
    /**
     Set a state for a celebration
     
     - parameter celebrationId: (path) The ID of the celebration 
     - parameter body: (body) Patch Celebration state 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchEmployeeengagementCelebration(celebrationId: String, body: CelebrationStateParam, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchEmployeeengagementCelebrationWithRequestBuilder(celebrationId: celebrationId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Set a state for a celebration
     - PATCH /api/v2/employeeengagement/celebrations/{celebrationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter celebrationId: (path) The ID of the celebration 
     - parameter body: (body) Patch Celebration state 

     - returns: RequestBuilder<Void> 
     */
    open class func patchEmployeeengagementCelebrationWithRequestBuilder(celebrationId: String, body: CelebrationStateParam) -> RequestBuilder<Void> {        
        var path = "/api/v2/employeeengagement/celebrations/{celebrationId}"
        let celebrationIdPreEscape = "\(celebrationId)"
        let celebrationIdPostEscape = celebrationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{celebrationId}", with: celebrationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: requestUrl!, body: body)
    }

    
    
    /**
     Creates a recognition
     
     - parameter body: (body) Create Recognition 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEmployeeengagementRecognitions(body: CreateRecognition, completion: @escaping ((_ data: RecognitionBase?,_ error: Error?) -> Void)) {
        let requestBuilder = postEmployeeengagementRecognitionsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RecognitionBase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates a recognition
     - POST /api/v2/employeeengagement/recognitions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "note" : "note",
  "dateCreated" : "2023-01-01T01:01:01Z",
  "createdBy" : "{}",
  "contextType" : "Interaction",
  "selfUri" : "https://openapi-generator.tech",
  "recipient" : "{}",
  "contextId" : "contextId",
  "id" : "id",
  "type" : "ThankYou",
  "title" : "title"
}, statusCode=200}]
     
     - parameter body: (body) Create Recognition 

     - returns: RequestBuilder<RecognitionBase> 
     */
    open class func postEmployeeengagementRecognitionsWithRequestBuilder(body: CreateRecognition) -> RequestBuilder<RecognitionBase> {        
        let path = "/api/v2/employeeengagement/recognitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let requestUrl = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RecognitionBase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: requestUrl!, body: body)
    }

}
