//
// WebDeploymentsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WebDeploymentsAPI {
    
    /**
     Delete all versions of a configuration
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebdeploymentsConfiguration(configurationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebdeploymentsConfigurationWithRequestBuilder(configurationId: configurationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete all versions of a configuration
     - DELETE /api/v2/webdeployments/configurations/{configurationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter configurationId: (path) The configuration version ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebdeploymentsConfigurationWithRequestBuilder(configurationId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a deployment
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebdeploymentsDeployment(deploymentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebdeploymentsDeploymentWithRequestBuilder(deploymentId: deploymentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a deployment
     - DELETE /api/v2/webdeployments/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter deploymentId: (path) The deployment ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebdeploymentsDeploymentWithRequestBuilder(deploymentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/webdeployments/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Get a configuration version
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter versionId: (path) The version of the configuration to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsConfigurationVersion(configurationId: String, versionId: String, completion: @escaping ((_ data: WebDeploymentConfigurationVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsConfigurationVersionWithRequestBuilder(configurationId: configurationId, versionId: versionId)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a configuration version
     - GET /api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headlessMode" : "{}",
  "languages" : "en-us, de-de",
  "journeyEvents" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "customI18nLabels" : [ {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  }, {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  } ],
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "cobrowse" : "{}",
  "authenticationSettings" : "{}",
  "version" : "DRAFT, 1, 2",
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "en-us, de-de",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "messenger" : "{}",
  "publishedUser" : "{}",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "position" : "{}",
  "supportCenter" : "{}",
  "createdUser" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter versionId: (path) The version of the configuration to get 

     - returns: RequestBuilder<WebDeploymentConfigurationVersion> 
     */
    open class func getWebdeploymentsConfigurationVersionWithRequestBuilder(configurationId: String, versionId: String) -> RequestBuilder<WebDeploymentConfigurationVersion> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the versions of a configuration
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsConfigurationVersions(configurationId: String, completion: @escaping ((_ data: WebDeploymentConfigurationVersionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsConfigurationVersionsWithRequestBuilder(configurationId: configurationId)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the versions of a configuration
     - GET /api/v2/webdeployments/configurations/{configurationId}/versions
     - This returns the 50 most recent versions for this configuration
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "headlessMode" : "{}",
    "languages" : "en-us, de-de",
    "journeyEvents" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "customI18nLabels" : [ {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    }, {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    } ],
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "cobrowse" : "{}",
    "authenticationSettings" : "{}",
    "version" : "DRAFT, 1, 2",
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "en-us, de-de",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "messenger" : "{}",
    "publishedUser" : "{}",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "position" : "{}",
    "supportCenter" : "{}",
    "createdUser" : "{}",
    "status" : "Pending"
  }, {
    "headlessMode" : "{}",
    "languages" : "en-us, de-de",
    "journeyEvents" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "customI18nLabels" : [ {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    }, {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    } ],
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "cobrowse" : "{}",
    "authenticationSettings" : "{}",
    "version" : "DRAFT, 1, 2",
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "en-us, de-de",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "messenger" : "{}",
    "publishedUser" : "{}",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "position" : "{}",
    "supportCenter" : "{}",
    "createdUser" : "{}",
    "status" : "Pending"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter configurationId: (path) The configuration version ID 

     - returns: RequestBuilder<WebDeploymentConfigurationVersionEntityListing> 
     */
    open class func getWebdeploymentsConfigurationVersionsWithRequestBuilder(configurationId: String) -> RequestBuilder<WebDeploymentConfigurationVersionEntityListing> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}/versions"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the configuration draft
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsConfigurationVersionsDraft(configurationId: String, completion: @escaping ((_ data: WebDeploymentConfigurationVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsConfigurationVersionsDraftWithRequestBuilder(configurationId: configurationId)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the configuration draft
     - GET /api/v2/webdeployments/configurations/{configurationId}/versions/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headlessMode" : "{}",
  "languages" : "en-us, de-de",
  "journeyEvents" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "customI18nLabels" : [ {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  }, {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  } ],
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "cobrowse" : "{}",
  "authenticationSettings" : "{}",
  "version" : "DRAFT, 1, 2",
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "en-us, de-de",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "messenger" : "{}",
  "publishedUser" : "{}",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "position" : "{}",
  "supportCenter" : "{}",
  "createdUser" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter configurationId: (path) The configuration version ID 

     - returns: RequestBuilder<WebDeploymentConfigurationVersion> 
     */
    open class func getWebdeploymentsConfigurationVersionsDraftWithRequestBuilder(configurationId: String) -> RequestBuilder<WebDeploymentConfigurationVersion> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     View configuration drafts
     
     - parameter showOnlyPublished: (query) Get only configuration drafts with published versions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsConfigurations(showOnlyPublished: Bool? = nil, completion: @escaping ((_ data: WebDeploymentConfigurationVersionEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsConfigurationsWithRequestBuilder(showOnlyPublished: showOnlyPublished)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersionEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     View configuration drafts
     - GET /api/v2/webdeployments/configurations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "headlessMode" : "{}",
    "languages" : "en-us, de-de",
    "journeyEvents" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "customI18nLabels" : [ {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    }, {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    } ],
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "cobrowse" : "{}",
    "authenticationSettings" : "{}",
    "version" : "DRAFT, 1, 2",
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "en-us, de-de",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "messenger" : "{}",
    "publishedUser" : "{}",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "position" : "{}",
    "supportCenter" : "{}",
    "createdUser" : "{}",
    "status" : "Pending"
  }, {
    "headlessMode" : "{}",
    "languages" : "en-us, de-de",
    "journeyEvents" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "customI18nLabels" : [ {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    }, {
      "localizedLabels" : [ {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      }, {
        "value" : "value",
        "key" : "MessengerHomeHeaderTitle"
      } ],
      "language" : "language"
    } ],
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "cobrowse" : "{}",
    "authenticationSettings" : "{}",
    "version" : "DRAFT, 1, 2",
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "defaultLanguage" : "en-us, de-de",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "messenger" : "{}",
    "publishedUser" : "{}",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "position" : "{}",
    "supportCenter" : "{}",
    "createdUser" : "{}",
    "status" : "Pending"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter showOnlyPublished: (query) Get only configuration drafts with published versions (optional)

     - returns: RequestBuilder<WebDeploymentConfigurationVersionEntityListing> 
     */
    open class func getWebdeploymentsConfigurationsWithRequestBuilder(showOnlyPublished: Bool? = nil) -> RequestBuilder<WebDeploymentConfigurationVersionEntityListing> {        
        let path = "/api/v2/webdeployments/configurations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "showOnlyPublished": showOnlyPublished
        ])

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersionEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a deployment
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsDeployment(deploymentId: String, completion: @escaping ((_ data: WebDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsDeploymentWithRequestBuilder(deploymentId: deploymentId)
        requestBuilder.execute { (response: Response<WebDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a deployment
     - GET /api/v2/webdeployments/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "snippet" : "snippet",
  "allowAllDomains" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "configuration" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "flow" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter deploymentId: (path) The deployment ID 

     - returns: RequestBuilder<WebDeployment> 
     */
    open class func getWebdeploymentsDeploymentWithRequestBuilder(deploymentId: String) -> RequestBuilder<WebDeployment> {        
        var path = "/api/v2/webdeployments/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get active configuration for a given deployment
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter type: (query) Get active configuration on a deployment (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsDeploymentConfigurations(deploymentId: String, type: String? = nil, completion: @escaping ((_ data: WebDeploymentActiveConfigurationOnDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsDeploymentConfigurationsWithRequestBuilder(deploymentId: deploymentId, type: type)
        requestBuilder.execute { (response: Response<WebDeploymentActiveConfigurationOnDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get active configuration for a given deployment
     - GET /api/v2/webdeployments/deployments/{deploymentId}/configurations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "configurationVersion" : "{}",
  "deployment" : "{}"
}, statusCode=200}]
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter type: (query) Get active configuration on a deployment (optional)

     - returns: RequestBuilder<WebDeploymentActiveConfigurationOnDeployment> 
     */
    open class func getWebdeploymentsDeploymentConfigurationsWithRequestBuilder(deploymentId: String, type: String? = nil) -> RequestBuilder<WebDeploymentActiveConfigurationOnDeployment> {        
        var path = "/api/v2/webdeployments/deployments/{deploymentId}/configurations"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type
        ])

        let requestBuilder: RequestBuilder<WebDeploymentActiveConfigurationOnDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get deployments
     
     - parameter expand: (query) The specified entity attributes will be filled. Comma separated values expected. Valid values: (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebdeploymentsDeployments(expand: [String]? = nil, completion: @escaping ((_ data: ExpandableWebDeploymentEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebdeploymentsDeploymentsWithRequestBuilder(expand: expand)
        requestBuilder.execute { (response: Response<ExpandableWebDeploymentEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get deployments
     - GET /api/v2/webdeployments/deployments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "snippet" : "snippet",
    "allowAllDomains" : true,
    "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
    "configuration" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "flow" : "{}",
    "status" : "Pending"
  }, {
    "snippet" : "snippet",
    "allowAllDomains" : true,
    "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
    "configuration" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "lastModifiedUser" : "{}",
    "id" : "id",
    "flow" : "{}",
    "status" : "Pending"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter expand: (query) The specified entity attributes will be filled. Comma separated values expected. Valid values: (optional)

     - returns: RequestBuilder<ExpandableWebDeploymentEntityListing> 
     */
    open class func getWebdeploymentsDeploymentsWithRequestBuilder(expand: [String]? = nil) -> RequestBuilder<ExpandableWebDeploymentEntityListing> {        
        let path = "/api/v2/webdeployments/deployments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ExpandableWebDeploymentEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Publish the configuration draft and create a new version
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebdeploymentsConfigurationVersionsDraftPublish(configurationId: String, completion: @escaping ((_ data: WebDeploymentConfigurationVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebdeploymentsConfigurationVersionsDraftPublishWithRequestBuilder(configurationId: configurationId)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish the configuration draft and create a new version
     - POST /api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headlessMode" : "{}",
  "languages" : "en-us, de-de",
  "journeyEvents" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "customI18nLabels" : [ {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  }, {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  } ],
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "cobrowse" : "{}",
  "authenticationSettings" : "{}",
  "version" : "DRAFT, 1, 2",
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "en-us, de-de",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "messenger" : "{}",
  "publishedUser" : "{}",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "position" : "{}",
  "supportCenter" : "{}",
  "createdUser" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter configurationId: (path) The configuration version ID 

     - returns: RequestBuilder<WebDeploymentConfigurationVersion> 
     */
    open class func postWebdeploymentsConfigurationVersionsDraftPublishWithRequestBuilder(configurationId: String) -> RequestBuilder<WebDeploymentConfigurationVersion> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a configuration draft
     
     - parameter configurationVersion: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebdeploymentsConfigurations(configurationVersion: WebDeploymentConfigurationVersion, completion: @escaping ((_ data: WebDeploymentConfigurationVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebdeploymentsConfigurationsWithRequestBuilder(configurationVersion: configurationVersion)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a configuration draft
     - POST /api/v2/webdeployments/configurations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headlessMode" : "{}",
  "languages" : "en-us, de-de",
  "journeyEvents" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "customI18nLabels" : [ {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  }, {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  } ],
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "cobrowse" : "{}",
  "authenticationSettings" : "{}",
  "version" : "DRAFT, 1, 2",
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "en-us, de-de",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "messenger" : "{}",
  "publishedUser" : "{}",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "position" : "{}",
  "supportCenter" : "{}",
  "createdUser" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter configurationVersion: (body)  

     - returns: RequestBuilder<WebDeploymentConfigurationVersion> 
     */
    open class func postWebdeploymentsConfigurationsWithRequestBuilder(configurationVersion: WebDeploymentConfigurationVersion) -> RequestBuilder<WebDeploymentConfigurationVersion> {        
        let path = "/api/v2/webdeployments/configurations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: configurationVersion)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a deployment
     
     - parameter deployment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebdeploymentsDeployments(deployment: WebDeployment, completion: @escaping ((_ data: WebDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebdeploymentsDeploymentsWithRequestBuilder(deployment: deployment)
        requestBuilder.execute { (response: Response<WebDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a deployment
     - POST /api/v2/webdeployments/deployments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "snippet" : "snippet",
  "allowAllDomains" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "configuration" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "flow" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter deployment: (body)  

     - returns: RequestBuilder<WebDeployment> 
     */
    open class func postWebdeploymentsDeploymentsWithRequestBuilder(deployment: WebDeployment) -> RequestBuilder<WebDeployment> {        
        let path = "/api/v2/webdeployments/deployments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: deployment)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update the configuration draft
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter configurationVersion: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebdeploymentsConfigurationVersionsDraft(configurationId: String, configurationVersion: WebDeploymentConfigurationVersion, completion: @escaping ((_ data: WebDeploymentConfigurationVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = putWebdeploymentsConfigurationVersionsDraftWithRequestBuilder(configurationId: configurationId, configurationVersion: configurationVersion)
        requestBuilder.execute { (response: Response<WebDeploymentConfigurationVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the configuration draft
     - PUT /api/v2/webdeployments/configurations/{configurationId}/versions/draft
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headlessMode" : "{}",
  "languages" : "en-us, de-de",
  "journeyEvents" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "customI18nLabels" : [ {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  }, {
    "localizedLabels" : [ {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    }, {
      "value" : "value",
      "key" : "MessengerHomeHeaderTitle"
    } ],
    "language" : "language"
  } ],
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "cobrowse" : "{}",
  "authenticationSettings" : "{}",
  "version" : "DRAFT, 1, 2",
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "defaultLanguage" : "en-us, de-de",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "messenger" : "{}",
  "publishedUser" : "{}",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "position" : "{}",
  "supportCenter" : "{}",
  "createdUser" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter configurationId: (path) The configuration version ID 
     - parameter configurationVersion: (body)  

     - returns: RequestBuilder<WebDeploymentConfigurationVersion> 
     */
    open class func putWebdeploymentsConfigurationVersionsDraftWithRequestBuilder(configurationId: String, configurationVersion: WebDeploymentConfigurationVersion) -> RequestBuilder<WebDeploymentConfigurationVersion> {        
        var path = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft"
        let configurationIdPreEscape = "\(configurationId)"
        let configurationIdPostEscape = configurationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{configurationId}", with: configurationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: configurationVersion)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeploymentConfigurationVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a deployment
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter deployment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebdeploymentsDeployment(deploymentId: String, deployment: WebDeployment, completion: @escaping ((_ data: WebDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = putWebdeploymentsDeploymentWithRequestBuilder(deploymentId: deploymentId, deployment: deployment)
        requestBuilder.execute { (response: Response<WebDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a deployment
     - PUT /api/v2/webdeployments/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "snippet" : "snippet",
  "allowAllDomains" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "configuration" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "lastModifiedUser" : "{}",
  "id" : "id",
  "flow" : "{}",
  "status" : "Pending"
}, statusCode=200}]
     
     - parameter deploymentId: (path) The deployment ID 
     - parameter deployment: (body)  

     - returns: RequestBuilder<WebDeployment> 
     */
    open class func putWebdeploymentsDeploymentWithRequestBuilder(deploymentId: String, deployment: WebDeployment) -> RequestBuilder<WebDeployment> {        
        var path = "/api/v2/webdeployments/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: deployment)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
