//
// UploadsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UploadsAPI {
    
    
    
    /**
     
     Creates presigned url for uploading a public asset image
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUploadsPublicassetsImages(body: UploadUrlRequest, completion: @escaping ((_ data: UploadUrlResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUploadsPublicassetsImagesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UploadUrlResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates presigned url for uploading a public asset image
     
     - POST /api/v2/uploads/publicassets/images
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headers" : {
    "key" : "aeiou"
  },
  "uploadKey" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UploadUrlResponse> 
     */
    open class func postUploadsPublicassetsImagesWithRequestBuilder(body: UploadUrlRequest) -> RequestBuilder<UploadUrlResponse> {
        let path = "/api/v2/uploads/publicassets/images"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadUrlResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Creates presigned url for uploading a recording file
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUploadsRecordings(body: UploadUrlRequest, completion: @escaping ((_ data: UploadUrlResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUploadsRecordingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UploadUrlResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates presigned url for uploading a recording file
     
     - POST /api/v2/uploads/recordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headers" : {
    "key" : "aeiou"
  },
  "uploadKey" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UploadUrlResponse> 
     */
    open class func postUploadsRecordingsWithRequestBuilder(body: UploadUrlRequest) -> RequestBuilder<UploadUrlResponse> {
        let path = "/api/v2/uploads/recordings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadUrlResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Creates presigned url for uploading WFM historical data file. Requires data in csv format.
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUploadsWorkforcemanagementHistoricaldataCsv(body: UploadUrlRequest, completion: @escaping ((_ data: UploadUrlResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUploadsWorkforcemanagementHistoricaldataCsvWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UploadUrlResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates presigned url for uploading WFM historical data file. Requires data in csv format.
     
     - POST /api/v2/uploads/workforcemanagement/historicaldata/csv
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headers" : {
    "key" : "aeiou"
  },
  "uploadKey" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UploadUrlResponse> 
     */
    open class func postUploadsWorkforcemanagementHistoricaldataCsvWithRequestBuilder(body: UploadUrlRequest) -> RequestBuilder<UploadUrlResponse> {
        let path = "/api/v2/uploads/workforcemanagement/historicaldata/csv"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadUrlResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     
     Creates presigned url for uploading WFM historical data file. Requires data in json format.
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUploadsWorkforcemanagementHistoricaldataJson(body: UploadUrlRequest, completion: @escaping ((_ data: UploadUrlResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUploadsWorkforcemanagementHistoricaldataJsonWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UploadUrlResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     
     Creates presigned url for uploading WFM historical data file. Requires data in json format.
     
     - POST /api/v2/uploads/workforcemanagement/historicaldata/json
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headers" : {
    "key" : "aeiou"
  },
  "uploadKey" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UploadUrlResponse> 
     */
    open class func postUploadsWorkforcemanagementHistoricaldataJsonWithRequestBuilder(body: UploadUrlRequest) -> RequestBuilder<UploadUrlResponse> {
        let path = "/api/v2/uploads/workforcemanagement/historicaldata/json"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadUrlResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
