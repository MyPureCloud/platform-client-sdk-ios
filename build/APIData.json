{
  "deletealertinginteractionstatsalert": {
    "operationId": "deletealertinginteractionstatsalert",
    "functionName": "deleteAlertingInteractionstatsAlert",
    "signature": "deleteAlertingInteractionstatsAlert(alertId)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet alertId: String = \"\" // Alert ID\n\n// Delete an interaction stats alert\nDeleteAlertingInteractionstatsAlertRequest.deleteAlertingInteractionstatsAlert(alertId: alertId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAlertingInteractionstatsAlertRequest.deleteAlertingInteractionstatsAlert was successful\")\n    }\n}"
  },
  "deletealertinginteractionstatsrule": {
    "operationId": "deletealertinginteractionstatsrule",
    "functionName": "deleteAlertingInteractionstatsRule",
    "signature": "deleteAlertingInteractionstatsRule(ruleId)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleId: String = \"\" // Rule ID\n\n// Delete an interaction stats rule.\nDeleteAlertingInteractionstatsRuleRequest.deleteAlertingInteractionstatsRule(ruleId: ruleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAlertingInteractionstatsRuleRequest.deleteAlertingInteractionstatsRule was successful\")\n    }\n}"
  },
  "getalertingalertsactive": {
    "operationId": "getalertingalertsactive",
    "functionName": "getAlertingAlertsActive",
    "signature": "getAlertingAlertsActive()",
    "return": "ActiveAlertCount",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Gets active alert count for a user.\nGetAlertingAlertsActiveRequest.getAlertingAlertsActive() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingAlertsActiveRequest.getAlertingAlertsActive was successful\")\n        dump(response)\n    }\n}"
  },
  "getalertinginteractionstatsalert": {
    "operationId": "getalertinginteractionstatsalert",
    "functionName": "getAlertingInteractionstatsAlert",
    "signature": "getAlertingInteractionstatsAlert(alertId, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlert",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet alertId: String = \"\" // Alert ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get an interaction stats alert\nGetAlertingInteractionstatsAlertRequest.getAlertingInteractionstatsAlert(alertId: alertId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingInteractionstatsAlertRequest.getAlertingInteractionstatsAlert was successful\")\n        dump(response)\n    }\n}"
  },
  "getalertinginteractionstatsalerts": {
    "operationId": "getalertinginteractionstatsalerts",
    "functionName": "getAlertingInteractionstatsAlerts",
    "signature": "getAlertingInteractionstatsAlerts(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsAlertContainer",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get interaction stats alert list.\nGetAlertingInteractionstatsAlertsRequest.getAlertingInteractionstatsAlerts(expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingInteractionstatsAlertsRequest.getAlertingInteractionstatsAlerts was successful\")\n        dump(response)\n    }\n}"
  },
  "getalertinginteractionstatsalertsunread": {
    "operationId": "getalertinginteractionstatsalertsunread",
    "functionName": "getAlertingInteractionstatsAlertsUnread",
    "signature": "getAlertingInteractionstatsAlertsUnread()",
    "return": "UnreadMetric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Gets user unread count of interaction stats alerts.\nGetAlertingInteractionstatsAlertsUnreadRequest.getAlertingInteractionstatsAlertsUnread() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingInteractionstatsAlertsUnreadRequest.getAlertingInteractionstatsAlertsUnread was successful\")\n        dump(response)\n    }\n}"
  },
  "getalertinginteractionstatsrule": {
    "operationId": "getalertinginteractionstatsrule",
    "functionName": "getAlertingInteractionstatsRule",
    "signature": "getAlertingInteractionstatsRule(ruleId, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleId: String = \"\" // Rule ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get an interaction stats rule.\nGetAlertingInteractionstatsRuleRequest.getAlertingInteractionstatsRule(ruleId: ruleId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingInteractionstatsRuleRequest.getAlertingInteractionstatsRule was successful\")\n        dump(response)\n    }\n}"
  },
  "getalertinginteractionstatsrules": {
    "operationId": "getalertinginteractionstatsrules",
    "functionName": "getAlertingInteractionstatsRules",
    "signature": "getAlertingInteractionstatsRules(expand)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRuleContainer",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get an interaction stats rule list.\nGetAlertingInteractionstatsRulesRequest.getAlertingInteractionstatsRules(expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAlertingInteractionstatsRulesRequest.getAlertingInteractionstatsRules was successful\")\n        dump(response)\n    }\n}"
  },
  "postalertinginteractionstatsrules": {
    "operationId": "postalertinginteractionstatsrules",
    "functionName": "postAlertingInteractionstatsRules",
    "signature": "postAlertingInteractionstatsRules(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "InteractionStatsRule",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: InteractionStatsRule = new InteractionStatsRule(...) // AlertingRule\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Create an interaction stats rule.\nPostAlertingInteractionstatsRulesRequest.postAlertingInteractionstatsRules(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAlertingInteractionstatsRulesRequest.postAlertingInteractionstatsRules was successful\")\n        dump(response)\n    }\n}"
  },
  "putalertinginteractionstatsalert": {
    "operationId": "putalertinginteractionstatsalert",
    "functionName": "putAlertingInteractionstatsAlert",
    "signature": "putAlertingInteractionstatsAlert(alertId, body, expand)",
    "parameters": [
      {
        "name": "alertId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UnreadStatus",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UnreadStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet alertId: String = \"\" // Alert ID\nlet body: UnreadStatus = new UnreadStatus(...) // InteractionStatsAlert\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Update an interaction stats alert read status\nPutAlertingInteractionstatsAlertRequest.putAlertingInteractionstatsAlert(alertId: alertId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAlertingInteractionstatsAlertRequest.putAlertingInteractionstatsAlert was successful\")\n        dump(response)\n    }\n}"
  },
  "putalertinginteractionstatsrule": {
    "operationId": "putalertinginteractionstatsrule",
    "functionName": "putAlertingInteractionstatsRule",
    "signature": "putAlertingInteractionstatsRule(ruleId, body, expand)",
    "parameters": [
      {
        "name": "ruleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InteractionStatsRule",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "InteractionStatsRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleId: String = \"\" // Rule ID\nlet body: InteractionStatsRule = new InteractionStatsRule(...) // AlertingRule\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Update an interaction stats rule\nPutAlertingInteractionstatsRuleRequest.putAlertingInteractionstatsRule(ruleId: ruleId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAlertingInteractionstatsRuleRequest.putAlertingInteractionstatsRule was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteanalyticsconversationsdetailsjob": {
    "operationId": "deleteanalyticsconversationsdetailsjob",
    "functionName": "deleteAnalyticsConversationsDetailsJob",
    "signature": "deleteAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Delete/cancel an async request\nDeleteAnalyticsConversationsDetailsJobRequest.deleteAnalyticsConversationsDetailsJob(jobId: jobId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAnalyticsConversationsDetailsJobRequest.deleteAnalyticsConversationsDetailsJob was successful\")\n    }\n}"
  },
  "deleteanalyticsreportingschedule": {
    "operationId": "deleteanalyticsreportingschedule",
    "functionName": "deleteAnalyticsReportingSchedule",
    "signature": "deleteAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Delete a scheduled report job.\nDeleteAnalyticsReportingScheduleRequest.deleteAnalyticsReportingSchedule(scheduleId: scheduleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAnalyticsReportingScheduleRequest.deleteAnalyticsReportingSchedule was successful\")\n    }\n}"
  },
  "deleteanalyticsusersdetailsjob": {
    "operationId": "deleteanalyticsusersdetailsjob",
    "functionName": "deleteAnalyticsUsersDetailsJob",
    "signature": "deleteAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Delete/cancel an async request\nDeleteAnalyticsUsersDetailsJobRequest.deleteAnalyticsUsersDetailsJob(jobId: jobId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAnalyticsUsersDetailsJobRequest.deleteAnalyticsUsersDetailsJob was successful\")\n    }\n}"
  },
  "getanalyticsbotflowreportingturns": {
    "operationId": "getanalyticsbotflowreportingturns",
    "functionName": "getAnalyticsBotflowReportingturns",
    "signature": "getAnalyticsBotflowReportingturns(botFlowId, after, pageSize, actionId, sessionId)",
    "parameters": [
      {
        "name": "botFlowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sessionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportingTurnsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet botFlowId: String = \"\" // ID of the bot flow.\nlet after: String = \"\" // The cursor that points to the ID of the last item in the list of entities that has been returned.\nlet pageSize: String = \"\" // Max number of entities to return. Maximum of 250\nlet actionId: String = \"\" // Optional action ID to get the reporting turns associated to a particular flow action\nlet sessionId: String = \"\" // Optional session ID to get the reporting turns for a particular session\n\n// Get Reporting Turns.\nGetAnalyticsBotflowReportingturnsRequest.getAnalyticsBotflowReportingturns(botFlowId: botFlowId, after: after, pageSize: pageSize, actionId: actionId, sessionId: sessionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsBotflowReportingturnsRequest.getAnalyticsBotflowReportingturns was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsconversationdetails": {
    "operationId": "getanalyticsconversationdetails",
    "functionName": "getAnalyticsConversationDetails",
    "signature": "getAnalyticsConversationDetails(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributes",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get a conversation by id\nGetAnalyticsConversationDetailsRequest.getAnalyticsConversationDetails(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsConversationDetailsRequest.getAnalyticsConversationDetails was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsconversationsdetails": {
    "operationId": "getanalyticsconversationsdetails",
    "functionName": "getAnalyticsConversationsDetails",
    "signature": "getAnalyticsConversationsDetails(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // Comma-separated conversation ids\n\n// Gets multiple conversations by id\nGetAnalyticsConversationsDetailsRequest.getAnalyticsConversationsDetails(_id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsConversationsDetailsRequest.getAnalyticsConversationsDetails was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsconversationsdetailsjob": {
    "operationId": "getanalyticsconversationsdetailsjob",
    "functionName": "getAnalyticsConversationsDetailsJob",
    "signature": "getAnalyticsConversationsDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Get status for async query for conversation details\nGetAnalyticsConversationsDetailsJobRequest.getAnalyticsConversationsDetailsJob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsConversationsDetailsJobRequest.getAnalyticsConversationsDetailsJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsconversationsdetailsjobresults": {
    "operationId": "getanalyticsconversationsdetailsjobresults",
    "functionName": "getAnalyticsConversationsDetailsJobResults",
    "signature": "getAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "AnalyticsConversationAsyncQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\nlet pageSize: Int = 0 // The desired maximum number of results\n\n// Fetch a page of results for an async query\nGetAnalyticsConversationsDetailsJobResultsRequest.getAnalyticsConversationsDetailsJobResults(jobId: jobId, cursor: cursor, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsConversationsDetailsJobResultsRequest.getAnalyticsConversationsDetailsJobResults was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsconversationsdetailsjobsavailability": {
    "operationId": "getanalyticsconversationsdetailsjobsavailability",
    "functionName": "getAnalyticsConversationsDetailsJobsAvailability",
    "signature": "getAnalyticsConversationsDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Lookup the datalake availability date and time\nGetAnalyticsConversationsDetailsJobsAvailabilityRequest.getAnalyticsConversationsDetailsJobsAvailability() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsConversationsDetailsJobsAvailabilityRequest.getAnalyticsConversationsDetailsJobsAvailability was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingexports": {
    "operationId": "getanalyticsreportingexports",
    "functionName": "getAnalyticsReportingExports",
    "signature": "getAnalyticsReportingExports(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ReportingExportJobListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get all view export requests for a user\nGetAnalyticsReportingExportsRequest.getAnalyticsReportingExports(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingExportsRequest.getAnalyticsReportingExports was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingexportsmetadata": {
    "operationId": "getanalyticsreportingexportsmetadata",
    "functionName": "getAnalyticsReportingExportsMetadata",
    "signature": "getAnalyticsReportingExportsMetadata()",
    "return": "ReportingExportMetadataJobListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get all export metadata\nGetAnalyticsReportingExportsMetadataRequest.getAnalyticsReportingExportsMetadata() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingExportsMetadataRequest.getAnalyticsReportingExportsMetadata was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingmetadata": {
    "operationId": "getanalyticsreportingmetadata",
    "functionName": "getAnalyticsReportingMetadata",
    "signature": "getAnalyticsReportingMetadata(pageNumber, pageSize, locale)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaDataEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet locale: String = \"\" // Locale\n\n// Get list of reporting metadata.\nGetAnalyticsReportingMetadataRequest.getAnalyticsReportingMetadata(pageNumber: pageNumber, pageSize: pageSize, locale: locale) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingMetadataRequest.getAnalyticsReportingMetadata was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingreportidmetadata": {
    "operationId": "getanalyticsreportingreportidmetadata",
    "functionName": "getAnalyticsReportingReportIdMetadata",
    "signature": "getAnalyticsReportingReportIdMetadata(reportId, locale)",
    "parameters": [
      {
        "name": "reportId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ReportMetaData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet reportId: String = \"\" // Report ID\nlet locale: String = \"\" // Locale\n\n// Get a reporting metadata.\nGetAnalyticsReportingReportIdMetadataRequest.getAnalyticsReportingReportIdMetadata(reportId: reportId, locale: locale) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingReportIdMetadataRequest.getAnalyticsReportingReportIdMetadata was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingreportformats": {
    "operationId": "getanalyticsreportingreportformats",
    "functionName": "getAnalyticsReportingReportformats",
    "signature": "getAnalyticsReportingReportformats()",
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of report formats\nGetAnalyticsReportingReportformatsRequest.getAnalyticsReportingReportformats() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingReportformatsRequest.getAnalyticsReportingReportformats was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingschedule": {
    "operationId": "getanalyticsreportingschedule",
    "functionName": "getAnalyticsReportingSchedule",
    "signature": "getAnalyticsReportingSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Get a scheduled report job.\nGetAnalyticsReportingScheduleRequest.getAnalyticsReportingSchedule(scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingScheduleRequest.getAnalyticsReportingSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingschedulehistory": {
    "operationId": "getanalyticsreportingschedulehistory",
    "functionName": "getAnalyticsReportingScheduleHistory",
    "signature": "getAnalyticsReportingScheduleHistory(scheduleId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ReportRunEntryEntityDomainListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\nlet pageNumber: Int = 0 // \nlet pageSize: Int = 0 // \n\n// Get list of completed scheduled report jobs.\nGetAnalyticsReportingScheduleHistoryRequest.getAnalyticsReportingScheduleHistory(scheduleId: scheduleId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingScheduleHistoryRequest.getAnalyticsReportingScheduleHistory was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingschedulehistorylatest": {
    "operationId": "getanalyticsreportingschedulehistorylatest",
    "functionName": "getAnalyticsReportingScheduleHistoryLatest",
    "signature": "getAnalyticsReportingScheduleHistoryLatest(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Get most recently completed scheduled report job.\nGetAnalyticsReportingScheduleHistoryLatestRequest.getAnalyticsReportingScheduleHistoryLatest(scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingScheduleHistoryLatestRequest.getAnalyticsReportingScheduleHistoryLatest was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingschedulehistoryrunid": {
    "operationId": "getanalyticsreportingschedulehistoryrunid",
    "functionName": "getAnalyticsReportingScheduleHistoryRunId",
    "signature": "getAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)",
    "parameters": [
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ReportRunEntry",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet runId: String = \"\" // Run ID\nlet scheduleId: String = \"\" // Schedule ID\n\n// A completed scheduled report job\nGetAnalyticsReportingScheduleHistoryRunIdRequest.getAnalyticsReportingScheduleHistoryRunId(runId: runId, scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingScheduleHistoryRunIdRequest.getAnalyticsReportingScheduleHistoryRunId was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingschedules": {
    "operationId": "getanalyticsreportingschedules",
    "functionName": "getAnalyticsReportingSchedules",
    "signature": "getAnalyticsReportingSchedules(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ReportScheduleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a list of scheduled report jobs\nGetAnalyticsReportingSchedulesRequest.getAnalyticsReportingSchedules(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingSchedulesRequest.getAnalyticsReportingSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingsettings": {
    "operationId": "getanalyticsreportingsettings",
    "functionName": "getAnalyticsReportingSettings",
    "signature": "getAnalyticsReportingSettings()",
    "return": "AnalyticsReportingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get AnalyticsReportingSettings for an organization\nGetAnalyticsReportingSettingsRequest.getAnalyticsReportingSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingSettingsRequest.getAnalyticsReportingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsreportingtimeperiods": {
    "operationId": "getanalyticsreportingtimeperiods",
    "functionName": "getAnalyticsReportingTimeperiods",
    "signature": "getAnalyticsReportingTimeperiods()",
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of report time periods.\nGetAnalyticsReportingTimeperiodsRequest.getAnalyticsReportingTimeperiods() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsReportingTimeperiodsRequest.getAnalyticsReportingTimeperiods was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsusersdetailsjob": {
    "operationId": "getanalyticsusersdetailsjob",
    "functionName": "getAnalyticsUsersDetailsJob",
    "signature": "getAnalyticsUsersDetailsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AsyncQueryStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Get status for async query for user details\nGetAnalyticsUsersDetailsJobRequest.getAnalyticsUsersDetailsJob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsUsersDetailsJobRequest.getAnalyticsUsersDetailsJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsusersdetailsjobresults": {
    "operationId": "getanalyticsusersdetailsjobresults",
    "functionName": "getAnalyticsUsersDetailsJobResults",
    "signature": "getAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "AnalyticsUserDetailsAsyncQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\nlet pageSize: Int = 0 // The desired maximum number of results\n\n// Fetch a page of results for an async query\nGetAnalyticsUsersDetailsJobResultsRequest.getAnalyticsUsersDetailsJobResults(jobId: jobId, cursor: cursor, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsUsersDetailsJobResultsRequest.getAnalyticsUsersDetailsJobResults was successful\")\n        dump(response)\n    }\n}"
  },
  "getanalyticsusersdetailsjobsavailability": {
    "operationId": "getanalyticsusersdetailsjobsavailability",
    "functionName": "getAnalyticsUsersDetailsJobsAvailability",
    "signature": "getAnalyticsUsersDetailsJobsAvailability()",
    "return": "DataAvailabilityResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Lookup the datalake availability date and time\nGetAnalyticsUsersDetailsJobsAvailabilityRequest.getAnalyticsUsersDetailsJobsAvailability() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAnalyticsUsersDetailsJobsAvailabilityRequest.getAnalyticsUsersDetailsJobsAvailability was successful\")\n        dump(response)\n    }\n}"
  },
  "patchanalyticsreportingsettings": {
    "operationId": "patchanalyticsreportingsettings",
    "functionName": "patchAnalyticsReportingSettings",
    "signature": "patchAnalyticsReportingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AnalyticsReportingSettings",
        "required": "true"
      }
    ],
    "return": "AnalyticsReportingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AnalyticsReportingSettings = new AnalyticsReportingSettings(...) // AnalyticsReportingSettingsRequest\n\n// Patch AnalyticsReportingSettings values for an organization\nPatchAnalyticsReportingSettingsRequest.patchAnalyticsReportingSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchAnalyticsReportingSettingsRequest.patchAnalyticsReportingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsbotsaggregatesquery": {
    "operationId": "postanalyticsbotsaggregatesquery",
    "functionName": "postAnalyticsBotsAggregatesQuery",
    "signature": "postAnalyticsBotsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BotAggregationQuery",
        "required": "true"
      }
    ],
    "return": "BotAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BotAggregationQuery = new BotAggregationQuery(...) // query\n\n// Query for bot aggregates\nPostAnalyticsBotsAggregatesQueryRequest.postAnalyticsBotsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsBotsAggregatesQueryRequest.postAnalyticsBotsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsconversationdetailsproperties": {
    "operationId": "postanalyticsconversationdetailsproperties",
    "functionName": "postAnalyticsConversationDetailsProperties",
    "signature": "postAnalyticsConversationDetailsProperties(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PropertyIndexRequest",
        "required": "true"
      }
    ],
    "return": "PropertyIndexRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: PropertyIndexRequest = new PropertyIndexRequest(...) // request\n\n// Index conversation properties\nPostAnalyticsConversationDetailsPropertiesRequest.postAnalyticsConversationDetailsProperties(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsConversationDetailsPropertiesRequest.postAnalyticsConversationDetailsProperties was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsconversationsaggregatesquery": {
    "operationId": "postanalyticsconversationsaggregatesquery",
    "functionName": "postAnalyticsConversationsAggregatesQuery",
    "signature": "postAnalyticsConversationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ConversationAggregationQuery",
        "required": "true"
      }
    ],
    "return": "ConversationAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ConversationAggregationQuery = new ConversationAggregationQuery(...) // query\n\n// Query for conversation aggregates\nPostAnalyticsConversationsAggregatesQueryRequest.postAnalyticsConversationsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsConversationsAggregatesQueryRequest.postAnalyticsConversationsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsconversationsdetailsjobs": {
    "operationId": "postanalyticsconversationsdetailsjobs",
    "functionName": "postAnalyticsConversationsDetailsJobs",
    "signature": "postAnalyticsConversationsDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AsyncConversationQuery",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AsyncConversationQuery = new AsyncConversationQuery(...) // query\n\n// Query for conversation details asynchronously\nPostAnalyticsConversationsDetailsJobsRequest.postAnalyticsConversationsDetailsJobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsConversationsDetailsJobsRequest.postAnalyticsConversationsDetailsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsconversationsdetailsquery": {
    "operationId": "postanalyticsconversationsdetailsquery",
    "functionName": "postAnalyticsConversationsDetailsQuery",
    "signature": "postAnalyticsConversationsDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ConversationQuery",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ConversationQuery = new ConversationQuery(...) // query\n\n// Query for conversation details\nPostAnalyticsConversationsDetailsQueryRequest.postAnalyticsConversationsDetailsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsConversationsDetailsQueryRequest.postAnalyticsConversationsDetailsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsconversationstranscriptsquery": {
    "operationId": "postanalyticsconversationstranscriptsquery",
    "functionName": "postAnalyticsConversationsTranscriptsQuery",
    "signature": "postAnalyticsConversationsTranscriptsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TranscriptConversationDetailSearchRequest",
        "required": "true"
      }
    ],
    "return": "AnalyticsConversationWithoutAttributesMultiGetResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TranscriptConversationDetailSearchRequest = new TranscriptConversationDetailSearchRequest(...) // Search request options\n\n// Search resources.\nPostAnalyticsConversationsTranscriptsQueryRequest.postAnalyticsConversationsTranscriptsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsConversationsTranscriptsQueryRequest.postAnalyticsConversationsTranscriptsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsevaluationsaggregatesquery": {
    "operationId": "postanalyticsevaluationsaggregatesquery",
    "functionName": "postAnalyticsEvaluationsAggregatesQuery",
    "signature": "postAnalyticsEvaluationsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EvaluationAggregationQuery",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EvaluationAggregationQuery = new EvaluationAggregationQuery(...) // query\n\n// Query for evaluation aggregates\nPostAnalyticsEvaluationsAggregatesQueryRequest.postAnalyticsEvaluationsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsEvaluationsAggregatesQueryRequest.postAnalyticsEvaluationsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsflowsaggregatesquery": {
    "operationId": "postanalyticsflowsaggregatesquery",
    "functionName": "postAnalyticsFlowsAggregatesQuery",
    "signature": "postAnalyticsFlowsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FlowAggregationQuery",
        "required": "true"
      }
    ],
    "return": "FlowAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FlowAggregationQuery = new FlowAggregationQuery(...) // query\n\n// Query for flow aggregates\nPostAnalyticsFlowsAggregatesQueryRequest.postAnalyticsFlowsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsFlowsAggregatesQueryRequest.postAnalyticsFlowsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsflowsobservationsquery": {
    "operationId": "postanalyticsflowsobservationsquery",
    "functionName": "postAnalyticsFlowsObservationsQuery",
    "signature": "postAnalyticsFlowsObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FlowObservationQuery",
        "required": "true"
      }
    ],
    "return": "FlowObservationQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FlowObservationQuery = new FlowObservationQuery(...) // query\n\n// Query for flow observations\nPostAnalyticsFlowsObservationsQueryRequest.postAnalyticsFlowsObservationsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsFlowsObservationsQueryRequest.postAnalyticsFlowsObservationsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsjourneysaggregatesquery": {
    "operationId": "postanalyticsjourneysaggregatesquery",
    "functionName": "postAnalyticsJourneysAggregatesQuery",
    "signature": "postAnalyticsJourneysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "JourneyAggregationQuery",
        "required": "true"
      }
    ],
    "return": "JourneyAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: JourneyAggregationQuery = new JourneyAggregationQuery(...) // query\n\n// Query for journey aggregates\nPostAnalyticsJourneysAggregatesQueryRequest.postAnalyticsJourneysAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsJourneysAggregatesQueryRequest.postAnalyticsJourneysAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsqueuesobservationsquery": {
    "operationId": "postanalyticsqueuesobservationsquery",
    "functionName": "postAnalyticsQueuesObservationsQuery",
    "signature": "postAnalyticsQueuesObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "QueueObservationQuery",
        "required": "true"
      }
    ],
    "return": "QueueObservationQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: QueueObservationQuery = new QueueObservationQuery(...) // query\n\n// Query for queue observations\nPostAnalyticsQueuesObservationsQueryRequest.postAnalyticsQueuesObservationsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsQueuesObservationsQueryRequest.postAnalyticsQueuesObservationsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsreportingexports": {
    "operationId": "postanalyticsreportingexports",
    "functionName": "postAnalyticsReportingExports",
    "signature": "postAnalyticsReportingExports(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ReportingExportJobRequest",
        "required": "true"
      }
    ],
    "return": "ReportingExportJobResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ReportingExportJobRequest = new ReportingExportJobRequest(...) // ReportingExportJobRequest\n\n// Generate a view export request\nPostAnalyticsReportingExportsRequest.postAnalyticsReportingExports(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsReportingExportsRequest.postAnalyticsReportingExports was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsreportingschedulerunreport": {
    "operationId": "postanalyticsreportingschedulerunreport",
    "functionName": "postAnalyticsReportingScheduleRunreport",
    "signature": "postAnalyticsReportingScheduleRunreport(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RunNowResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Place a scheduled report immediately into the reporting queue\nPostAnalyticsReportingScheduleRunreportRequest.postAnalyticsReportingScheduleRunreport(scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsReportingScheduleRunreportRequest.postAnalyticsReportingScheduleRunreport was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsreportingschedules": {
    "operationId": "postanalyticsreportingschedules",
    "functionName": "postAnalyticsReportingSchedules",
    "signature": "postAnalyticsReportingSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ReportSchedule",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ReportSchedule = new ReportSchedule(...) // ReportSchedule\n\n// Create a scheduled report job\nPostAnalyticsReportingSchedulesRequest.postAnalyticsReportingSchedules(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsReportingSchedulesRequest.postAnalyticsReportingSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticssurveysaggregatesquery": {
    "operationId": "postanalyticssurveysaggregatesquery",
    "functionName": "postAnalyticsSurveysAggregatesQuery",
    "signature": "postAnalyticsSurveysAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SurveyAggregationQuery",
        "required": "true"
      }
    ],
    "return": "SurveyAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SurveyAggregationQuery = new SurveyAggregationQuery(...) // query\n\n// Query for survey aggregates\nPostAnalyticsSurveysAggregatesQueryRequest.postAnalyticsSurveysAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsSurveysAggregatesQueryRequest.postAnalyticsSurveysAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticstranscriptsaggregatesquery": {
    "operationId": "postanalyticstranscriptsaggregatesquery",
    "functionName": "postAnalyticsTranscriptsAggregatesQuery",
    "signature": "postAnalyticsTranscriptsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TranscriptAggregationQuery",
        "required": "true"
      }
    ],
    "return": "TranscriptAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TranscriptAggregationQuery = new TranscriptAggregationQuery(...) // query\n\n// Query for transcript aggregates\nPostAnalyticsTranscriptsAggregatesQueryRequest.postAnalyticsTranscriptsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsTranscriptsAggregatesQueryRequest.postAnalyticsTranscriptsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsusersaggregatesquery": {
    "operationId": "postanalyticsusersaggregatesquery",
    "functionName": "postAnalyticsUsersAggregatesQuery",
    "signature": "postAnalyticsUsersAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UserAggregationQuery",
        "required": "true"
      }
    ],
    "return": "UserAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UserAggregationQuery = new UserAggregationQuery(...) // query\n\n// Query for user aggregates\nPostAnalyticsUsersAggregatesQueryRequest.postAnalyticsUsersAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsUsersAggregatesQueryRequest.postAnalyticsUsersAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsusersdetailsjobs": {
    "operationId": "postanalyticsusersdetailsjobs",
    "functionName": "postAnalyticsUsersDetailsJobs",
    "signature": "postAnalyticsUsersDetailsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AsyncUserDetailsQuery",
        "required": "true"
      }
    ],
    "return": "AsyncQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AsyncUserDetailsQuery = new AsyncUserDetailsQuery(...) // query\n\n// Query for user details asynchronously\nPostAnalyticsUsersDetailsJobsRequest.postAnalyticsUsersDetailsJobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsUsersDetailsJobsRequest.postAnalyticsUsersDetailsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsusersdetailsquery": {
    "operationId": "postanalyticsusersdetailsquery",
    "functionName": "postAnalyticsUsersDetailsQuery",
    "signature": "postAnalyticsUsersDetailsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UserDetailsQuery",
        "required": "true"
      }
    ],
    "return": "AnalyticsUserDetailsQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UserDetailsQuery = new UserDetailsQuery(...) // query\n\n// Query for user details\nPostAnalyticsUsersDetailsQueryRequest.postAnalyticsUsersDetailsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsUsersDetailsQueryRequest.postAnalyticsUsersDetailsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postanalyticsusersobservationsquery": {
    "operationId": "postanalyticsusersobservationsquery",
    "functionName": "postAnalyticsUsersObservationsQuery",
    "signature": "postAnalyticsUsersObservationsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UserObservationQuery",
        "required": "true"
      }
    ],
    "return": "UserObservationQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UserObservationQuery = new UserObservationQuery(...) // query\n\n// Query for user observations\nPostAnalyticsUsersObservationsQueryRequest.postAnalyticsUsersObservationsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAnalyticsUsersObservationsQueryRequest.postAnalyticsUsersObservationsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "putanalyticsreportingschedule": {
    "operationId": "putanalyticsreportingschedule",
    "functionName": "putAnalyticsReportingSchedule",
    "signature": "putAnalyticsReportingSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ReportSchedule",
        "required": "true"
      }
    ],
    "return": "ReportSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\nlet body: ReportSchedule = new ReportSchedule(...) // ReportSchedule\n\n// Update a scheduled report job.\nPutAnalyticsReportingScheduleRequest.putAnalyticsReportingSchedule(scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAnalyticsReportingScheduleRequest.putAnalyticsReportingSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "deletearchitectemergencygroup": {
    "operationId": "deletearchitectemergencygroup",
    "functionName": "deleteArchitectEmergencygroup",
    "signature": "deleteArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emergencyGroupId: String = \"\" // Emergency group ID\n\n// Deletes a emergency group by ID\nDeleteArchitectEmergencygroupRequest.deleteArchitectEmergencygroup(emergencyGroupId: emergencyGroupId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectEmergencygroupRequest.deleteArchitectEmergencygroup was successful\")\n    }\n}"
  },
  "deletearchitectivr": {
    "operationId": "deletearchitectivr",
    "functionName": "deleteArchitectIvr",
    "signature": "deleteArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ivrId: String = \"\" // IVR id\n\n// Delete an IVR Config.\nDeleteArchitectIvrRequest.deleteArchitectIvr(ivrId: ivrId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectIvrRequest.deleteArchitectIvr was successful\")\n    }\n}"
  },
  "deletearchitectprompt": {
    "operationId": "deletearchitectprompt",
    "functionName": "deleteArchitectPrompt",
    "signature": "deleteArchitectPrompt(promptId, allResources)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "allResources",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet allResources: Bool = true // Whether or not to delete all the prompt resources\n\n// Delete specified user prompt\nDeleteArchitectPromptRequest.deleteArchitectPrompt(promptId: promptId, allResources: allResources) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectPromptRequest.deleteArchitectPrompt was successful\")\n    }\n}"
  },
  "deletearchitectpromptresource": {
    "operationId": "deletearchitectpromptresource",
    "functionName": "deleteArchitectPromptResource",
    "signature": "deleteArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\n\n// Delete specified user prompt resource\nDeleteArchitectPromptResourceRequest.deleteArchitectPromptResource(promptId: promptId, languageCode: languageCode) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectPromptResourceRequest.deleteArchitectPromptResource was successful\")\n    }\n}"
  },
  "deletearchitectpromptresourceaudio": {
    "operationId": "deletearchitectpromptresourceaudio",
    "functionName": "deleteArchitectPromptResourceAudio",
    "signature": "deleteArchitectPromptResourceAudio(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\n\n// Delete specified user prompt resource audio\nDeleteArchitectPromptResourceAudioRequest.deleteArchitectPromptResourceAudio(promptId: promptId, languageCode: languageCode) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectPromptResourceAudioRequest.deleteArchitectPromptResourceAudio was successful\")\n    }\n}"
  },
  "deletearchitectprompts": {
    "operationId": "deletearchitectprompts",
    "functionName": "deleteArchitectPrompts",
    "signature": "deleteArchitectPrompts(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // List of Prompt IDs\n\n// Batch-delete a list of prompts\nDeleteArchitectPromptsRequest.deleteArchitectPrompts(_id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteArchitectPromptsRequest.deleteArchitectPrompts was successful\")\n        dump(response)\n    }\n}"
  },
  "deletearchitectschedule": {
    "operationId": "deletearchitectschedule",
    "functionName": "deleteArchitectSchedule",
    "signature": "deleteArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Delete a schedule by id\nDeleteArchitectScheduleRequest.deleteArchitectSchedule(scheduleId: scheduleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectScheduleRequest.deleteArchitectSchedule was successful\")\n    }\n}"
  },
  "deletearchitectschedulegroup": {
    "operationId": "deletearchitectschedulegroup",
    "functionName": "deleteArchitectSchedulegroup",
    "signature": "deleteArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleGroupId: String = \"\" // Schedule group ID\n\n// Deletes a schedule group by ID\nDeleteArchitectSchedulegroupRequest.deleteArchitectSchedulegroup(scheduleGroupId: scheduleGroupId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectSchedulegroupRequest.deleteArchitectSchedulegroup was successful\")\n    }\n}"
  },
  "deletearchitectsystempromptresource": {
    "operationId": "deletearchitectsystempromptresource",
    "functionName": "deleteArchitectSystempromptResource",
    "signature": "deleteArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\n\n// Delete a system prompt resource override.\nDeleteArchitectSystempromptResourceRequest.deleteArchitectSystempromptResource(promptId: promptId, languageCode: languageCode) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteArchitectSystempromptResourceRequest.deleteArchitectSystempromptResource was successful\")\n    }\n}"
  },
  "deleteflow": {
    "operationId": "deleteflow",
    "functionName": "deleteFlow",
    "signature": "deleteFlow(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\n\n// Delete flow\nDeleteFlowRequest.deleteFlow(flowId: flowId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteFlowRequest.deleteFlow was successful\")\n    }\n}"
  },
  "deleteflows": {
    "operationId": "deleteflows",
    "functionName": "deleteFlows",
    "signature": "deleteFlows(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // List of Flow IDs\n\n// Batch-delete a list of flows\nDeleteFlowsRequest.deleteFlows(_id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteFlowsRequest.deleteFlows was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteflowsdatatable": {
    "operationId": "deleteflowsdatatable",
    "functionName": "deleteFlowsDatatable",
    "signature": "deleteFlowsDatatable(datatableId, force)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet force: Bool = true // force delete, even if in use\n\n// deletes a specific datatable by id\nDeleteFlowsDatatableRequest.deleteFlowsDatatable(datatableId: datatableId, force: force) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteFlowsDatatableRequest.deleteFlowsDatatable was successful\")\n    }\n}"
  },
  "deleteflowsdatatablerow": {
    "operationId": "deleteflowsdatatablerow",
    "functionName": "deleteFlowsDatatableRow",
    "signature": "deleteFlowsDatatableRow(datatableId, rowId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet rowId: String = \"\" // the key for the row\n\n// Delete a row entry\nDeleteFlowsDatatableRowRequest.deleteFlowsDatatableRow(datatableId: datatableId, rowId: rowId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteFlowsDatatableRowRequest.deleteFlowsDatatableRow was successful\")\n    }\n}"
  },
  "deleteflowsmilestone": {
    "operationId": "deleteflowsmilestone",
    "functionName": "deleteFlowsMilestone",
    "signature": "deleteFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet milestoneId: String = \"\" // flow milestone ID\n\n// Delete a flow milestone.\nDeleteFlowsMilestoneRequest.deleteFlowsMilestone(milestoneId: milestoneId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteFlowsMilestoneRequest.deleteFlowsMilestone was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytracking": {
    "operationId": "getarchitectdependencytracking",
    "functionName": "getArchitectDependencytracking",
    "signature": "getArchitectDependencytracking(name, pageNumber, pageSize, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet name: String = \"\" // Object name to search for\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet objectType: [String] = [\"\"] // Object type(s) to search for\nlet consumedResources: Bool = true // Include resources each result item consumes\nlet consumingResources: Bool = true // Include resources that consume each result item\nlet consumedResourceType: [String] = [\"\"] // Types of consumed resources to return, if consumed resources are requested\nlet consumingResourceType: [String] = [\"\"] // Types of consuming resources to return, if consuming resources are requested\n\n// Get Dependency Tracking objects that have a given display name\nGetArchitectDependencytrackingRequest.getArchitectDependencytracking(name: name, pageNumber: pageNumber, pageSize: pageSize, objectType: objectType, consumedResources: consumedResources, consumingResources: consumingResources, consumedResourceType: consumedResourceType, consumingResourceType: consumingResourceType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingRequest.getArchitectDependencytracking was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingbuild": {
    "operationId": "getarchitectdependencytrackingbuild",
    "functionName": "getArchitectDependencytrackingBuild",
    "signature": "getArchitectDependencytrackingBuild()",
    "return": "DependencyStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Dependency Tracking build status for an organization\nGetArchitectDependencytrackingBuildRequest.getArchitectDependencytrackingBuild() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingBuildRequest.getArchitectDependencytrackingBuild was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingconsumedresources": {
    "operationId": "getarchitectdependencytrackingconsumedresources",
    "functionName": "getArchitectDependencytrackingConsumedresources",
    "signature": "getArchitectDependencytrackingConsumedresources(_id, version, objectType, resourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "_id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ConsumedResourcesEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: String = \"\" // Consuming object ID\nlet version: String = \"\" // Consuming object version\nlet objectType: GetArchitectDependencytrackingConsumedresourcesRequest.ObjectType_getArchitectDependencytrackingConsumedresources = GetArchitectDependencytrackingConsumedresourcesRequest.ObjectType_getArchitectDependencytrackingConsumedresources.enummember // Consuming object type.  Only versioned types are allowed here.\nlet resourceType: [String] = [\"\"] // Types of consumed resources to show\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get resources that are consumed by a given Dependency Tracking object\nGetArchitectDependencytrackingConsumedresourcesRequest.getArchitectDependencytrackingConsumedresources(_id: _id, version: version, objectType: objectType, resourceType: resourceType, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingConsumedresourcesRequest.getArchitectDependencytrackingConsumedresources was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingconsumingresources": {
    "operationId": "getarchitectdependencytrackingconsumingresources",
    "functionName": "getArchitectDependencytrackingConsumingresources",
    "signature": "getArchitectDependencytrackingConsumingresources(_id, objectType, resourceType, version, pageNumber, pageSize, flowFilter)",
    "parameters": [
      {
        "name": "_id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "resourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConsumingResourcesEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: String = \"\" // Consumed object ID\nlet objectType: GetArchitectDependencytrackingConsumingresourcesRequest.ObjectType_getArchitectDependencytrackingConsumingresources = GetArchitectDependencytrackingConsumingresourcesRequest.ObjectType_getArchitectDependencytrackingConsumingresources.enummember // Consumed object type\nlet resourceType: [String] = [\"\"] // Types of consuming resources to show.  Only versioned types are allowed here.\nlet version: String = \"\" // Object version\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet flowFilter: GetArchitectDependencytrackingConsumingresourcesRequest.FlowFilter_getArchitectDependencytrackingConsumingresources = GetArchitectDependencytrackingConsumingresourcesRequest.FlowFilter_getArchitectDependencytrackingConsumingresources.enummember // Show only checkedIn or published flows\n\n// Get resources that consume a given Dependency Tracking object\nGetArchitectDependencytrackingConsumingresourcesRequest.getArchitectDependencytrackingConsumingresources(_id: _id, objectType: objectType, resourceType: resourceType, version: version, pageNumber: pageNumber, pageSize: pageSize, flowFilter: flowFilter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingConsumingresourcesRequest.getArchitectDependencytrackingConsumingresources was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingdeletedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingdeletedresourceconsumers",
    "functionName": "getArchitectDependencytrackingDeletedresourceconsumers",
    "signature": "getArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "flowFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet name: String = \"\" // Name to search for\nlet objectType: [String] = [\"\"] // Object type(s) to search for\nlet flowFilter: GetArchitectDependencytrackingDeletedresourceconsumersRequest.FlowFilter_getArchitectDependencytrackingDeletedresourceconsumers = GetArchitectDependencytrackingDeletedresourceconsumersRequest.FlowFilter_getArchitectDependencytrackingDeletedresourceconsumers.enummember // Show only checkedIn or published flows\nlet consumedResources: Bool = true // Return consumed resources?\nlet consumedResourceType: [String] = [\"\"] // Resource type(s) to return\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get Dependency Tracking objects that consume deleted resources\nGetArchitectDependencytrackingDeletedresourceconsumersRequest.getArchitectDependencytrackingDeletedresourceconsumers(name: name, objectType: objectType, flowFilter: flowFilter, consumedResources: consumedResources, consumedResourceType: consumedResourceType, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingDeletedresourceconsumersRequest.getArchitectDependencytrackingDeletedresourceconsumers was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingobject": {
    "operationId": "getarchitectdependencytrackingobject",
    "functionName": "getArchitectDependencytrackingObject",
    "signature": "getArchitectDependencytrackingObject(_id, version, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType, consumedResourceRequest)",
    "parameters": [
      {
        "name": "_id",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumingResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumingResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResourceRequest",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "DependencyObject",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: String = \"\" // Object ID\nlet version: String = \"\" // Object version\nlet objectType: GetArchitectDependencytrackingObjectRequest.ObjectType_getArchitectDependencytrackingObject = GetArchitectDependencytrackingObjectRequest.ObjectType_getArchitectDependencytrackingObject.enummember // Object type\nlet consumedResources: Bool = true // Include resources this item consumes\nlet consumingResources: Bool = true // Include resources that consume this item\nlet consumedResourceType: [String] = [\"\"] // Types of consumed resources to return, if consumed resources are requested\nlet consumingResourceType: [String] = [\"\"] // Types of consuming resources to return, if consuming resources are requested\nlet consumedResourceRequest: Bool = true // Indicate that this is going to look up a consumed resource object\n\n// Get a Dependency Tracking object\nGetArchitectDependencytrackingObjectRequest.getArchitectDependencytrackingObject(_id: _id, version: version, objectType: objectType, consumedResources: consumedResources, consumingResources: consumingResources, consumedResourceType: consumedResourceType, consumingResourceType: consumingResourceType, consumedResourceRequest: consumedResourceRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingObjectRequest.getArchitectDependencytrackingObject was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingtype": {
    "operationId": "getarchitectdependencytrackingtype",
    "functionName": "getArchitectDependencytrackingType",
    "signature": "getArchitectDependencytrackingType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DependencyType",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet typeId: String = \"\" // Type ID\n\n// Get a Dependency Tracking type.\nGetArchitectDependencytrackingTypeRequest.getArchitectDependencytrackingType(typeId: typeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingTypeRequest.getArchitectDependencytrackingType was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingtypes": {
    "operationId": "getarchitectdependencytrackingtypes",
    "functionName": "getArchitectDependencytrackingTypes",
    "signature": "getArchitectDependencytrackingTypes(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DependencyTypeEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get Dependency Tracking types.\nGetArchitectDependencytrackingTypesRequest.getArchitectDependencytrackingTypes(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingTypesRequest.getArchitectDependencytrackingTypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectdependencytrackingupdatedresourceconsumers": {
    "operationId": "getarchitectdependencytrackingupdatedresourceconsumers",
    "functionName": "getArchitectDependencytrackingUpdatedresourceconsumers",
    "signature": "getArchitectDependencytrackingUpdatedresourceconsumers(name, objectType, consumedResources, consumedResourceType, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "consumedResources",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "consumedResourceType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DependencyObjectEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet name: String = \"\" // Name to search for\nlet objectType: [String] = [\"\"] // Object type(s) to search for\nlet consumedResources: Bool = true // Return consumed resources?\nlet consumedResourceType: [String] = [\"\"] // Resource type(s) to return\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get Dependency Tracking objects that depend on updated resources\nGetArchitectDependencytrackingUpdatedresourceconsumersRequest.getArchitectDependencytrackingUpdatedresourceconsumers(name: name, objectType: objectType, consumedResources: consumedResources, consumedResourceType: consumedResourceType, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectDependencytrackingUpdatedresourceconsumersRequest.getArchitectDependencytrackingUpdatedresourceconsumers was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectemergencygroup": {
    "operationId": "getarchitectemergencygroup",
    "functionName": "getArchitectEmergencygroup",
    "signature": "getArchitectEmergencygroup(emergencyGroupId)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emergencyGroupId: String = \"\" // Emergency group ID\n\n// Gets a emergency group by ID\nGetArchitectEmergencygroupRequest.getArchitectEmergencygroup(emergencyGroupId: emergencyGroupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectEmergencygroupRequest.getArchitectEmergencygroup was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectemergencygroups": {
    "operationId": "getarchitectemergencygroups",
    "functionName": "getArchitectEmergencygroups",
    "signature": "getArchitectEmergencygroups(pageNumber, pageSize, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EmergencyGroupListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name of the Emergency Group to filter by.\n\n// Get a list of emergency groups.\nGetArchitectEmergencygroupsRequest.getArchitectEmergencygroups(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectEmergencygroupsRequest.getArchitectEmergencygroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectivr": {
    "operationId": "getarchitectivr",
    "functionName": "getArchitectIvr",
    "signature": "getArchitectIvr(ivrId)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ivrId: String = \"\" // IVR id\n\n// Get an IVR config.\nGetArchitectIvrRequest.getArchitectIvr(ivrId: ivrId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectIvrRequest.getArchitectIvr was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectivrs": {
    "operationId": "getarchitectivrs",
    "functionName": "getArchitectIvrs",
    "signature": "getArchitectIvrs(pageNumber, pageSize, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IVREntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name of the IVR to filter by.\n\n// Get IVR configs.\nGetArchitectIvrsRequest.getArchitectIvrs(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectIvrsRequest.getArchitectIvrs was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectprompt": {
    "operationId": "getarchitectprompt",
    "functionName": "getArchitectPrompt",
    "signature": "getArchitectPrompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\n\n// Get specified user prompt\nGetArchitectPromptRequest.getArchitectPrompt(promptId: promptId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectPromptRequest.getArchitectPrompt was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectprompthistoryhistoryid": {
    "operationId": "getarchitectprompthistoryhistoryid",
    "functionName": "getArchitectPromptHistoryHistoryId",
    "signature": "getArchitectPromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet historyId: String = \"\" // History request ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortOrder: String = \"\" // Sort order\nlet sortBy: GetArchitectPromptHistoryHistoryIdRequest.SortBy_getArchitectPromptHistoryHistoryId = GetArchitectPromptHistoryHistoryIdRequest.SortBy_getArchitectPromptHistoryHistoryId.enummember // Sort by\nlet action: [String] = [\"\"] // Flow actions to include (omit to include all)\n\n// Get generated prompt history\nGetArchitectPromptHistoryHistoryIdRequest.getArchitectPromptHistoryHistoryId(promptId: promptId, historyId: historyId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, sortBy: sortBy, action: action) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectPromptHistoryHistoryIdRequest.getArchitectPromptHistoryHistoryId was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectpromptresource": {
    "operationId": "getarchitectpromptresource",
    "functionName": "getArchitectPromptResource",
    "signature": "getArchitectPromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\n\n// Get specified user prompt resource\nGetArchitectPromptResourceRequest.getArchitectPromptResource(promptId: promptId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectPromptResourceRequest.getArchitectPromptResource was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectpromptresources": {
    "operationId": "getarchitectpromptresources",
    "functionName": "getArchitectPromptResources",
    "signature": "getArchitectPromptResources(promptId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "PromptAssetEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a pageable list of user prompt resources\nGetArchitectPromptResourcesRequest.getArchitectPromptResources(promptId: promptId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectPromptResourcesRequest.getArchitectPromptResources was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectprompts": {
    "operationId": "getarchitectprompts",
    "functionName": "getArchitectPrompts",
    "signature": "getArchitectPrompts(pageNumber, pageSize, name, _description, nameOrDescription, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "_description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PromptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet name: [String] = [\"\"] // Name\nlet _description: String = \"\" // Description\nlet nameOrDescription: String = \"\" // Name or description\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\n\n// Get a pageable list of user prompts\nGetArchitectPromptsRequest.getArchitectPrompts(pageNumber: pageNumber, pageSize: pageSize, name: name, _description: _description, nameOrDescription: nameOrDescription, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectPromptsRequest.getArchitectPrompts was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectschedule": {
    "operationId": "getarchitectschedule",
    "functionName": "getArchitectSchedule",
    "signature": "getArchitectSchedule(scheduleId)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\n\n// Get a schedule by ID\nGetArchitectScheduleRequest.getArchitectSchedule(scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectScheduleRequest.getArchitectSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectschedulegroup": {
    "operationId": "getarchitectschedulegroup",
    "functionName": "getArchitectSchedulegroup",
    "signature": "getArchitectSchedulegroup(scheduleGroupId)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleGroupId: String = \"\" // Schedule group ID\n\n// Gets a schedule group by ID\nGetArchitectSchedulegroupRequest.getArchitectSchedulegroup(scheduleGroupId: scheduleGroupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSchedulegroupRequest.getArchitectSchedulegroup was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectschedulegroups": {
    "operationId": "getarchitectschedulegroups",
    "functionName": "getArchitectSchedulegroups",
    "signature": "getArchitectSchedulegroups(pageNumber, pageSize, sortBy, sortOrder, name, scheduleIds, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scheduleIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleGroupEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name of the Schedule Group to filter by.\nlet scheduleIds: String = \"\" // A comma-delimited list of Schedule IDs to filter by.\nlet divisionId: [String] = [\"\"] // List of divisionIds on which to filter.\n\n// Get a list of schedule groups.\nGetArchitectSchedulegroupsRequest.getArchitectSchedulegroups(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, name: name, scheduleIds: scheduleIds, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSchedulegroupsRequest.getArchitectSchedulegroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectschedules": {
    "operationId": "getarchitectschedules",
    "functionName": "getArchitectSchedules",
    "signature": "getArchitectSchedules(pageNumber, pageSize, sortBy, sortOrder, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScheduleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name of the Schedule to filter by.\nlet divisionId: [String] = [\"\"] // List of divisionIds on which to filter.\n\n// Get a list of schedules.\nGetArchitectSchedulesRequest.getArchitectSchedules(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, name: name, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSchedulesRequest.getArchitectSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectsystemprompt": {
    "operationId": "getarchitectsystemprompt",
    "functionName": "getArchitectSystemprompt",
    "signature": "getArchitectSystemprompt(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPrompt",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // promptId\n\n// Get a system prompt\nGetArchitectSystempromptRequest.getArchitectSystemprompt(promptId: promptId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSystempromptRequest.getArchitectSystemprompt was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectsystemprompthistoryhistoryid": {
    "operationId": "getarchitectsystemprompthistoryhistoryid",
    "functionName": "getArchitectSystempromptHistoryHistoryId",
    "signature": "getArchitectSystempromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // promptId\nlet historyId: String = \"\" // History request ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortOrder: String = \"\" // Sort order\nlet sortBy: GetArchitectSystempromptHistoryHistoryIdRequest.SortBy_getArchitectSystempromptHistoryHistoryId = GetArchitectSystempromptHistoryHistoryIdRequest.SortBy_getArchitectSystempromptHistoryHistoryId.enummember // Sort by\nlet action: [String] = [\"\"] // Flow actions to include (omit to include all)\n\n// Get generated prompt history\nGetArchitectSystempromptHistoryHistoryIdRequest.getArchitectSystempromptHistoryHistoryId(promptId: promptId, historyId: historyId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, sortBy: sortBy, action: action) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSystempromptHistoryHistoryIdRequest.getArchitectSystempromptHistoryHistoryId was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectsystempromptresource": {
    "operationId": "getarchitectsystempromptresource",
    "functionName": "getArchitectSystempromptResource",
    "signature": "getArchitectSystempromptResource(promptId, languageCode)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\n\n// Get a system prompt resource.\nGetArchitectSystempromptResourceRequest.getArchitectSystempromptResource(promptId: promptId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSystempromptResourceRequest.getArchitectSystempromptResource was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectsystempromptresources": {
    "operationId": "getarchitectsystempromptresources",
    "functionName": "getArchitectSystempromptResources",
    "signature": "getArchitectSystempromptResources(promptId, pageNumber, pageSize, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptAssetEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\n\n// Get system prompt resources.\nGetArchitectSystempromptResourcesRequest.getArchitectSystempromptResources(promptId: promptId, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSystempromptResourcesRequest.getArchitectSystempromptResources was successful\")\n        dump(response)\n    }\n}"
  },
  "getarchitectsystemprompts": {
    "operationId": "getarchitectsystemprompts",
    "functionName": "getArchitectSystemprompts",
    "signature": "getArchitectSystemprompts(pageNumber, pageSize, sortBy, sortOrder, name, _description, nameOrDescription)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SystemPromptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name\nlet _description: String = \"\" // Description\nlet nameOrDescription: String = \"\" // Name or description\n\n// Get System Prompts\nGetArchitectSystempromptsRequest.getArchitectSystemprompts(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, name: name, _description: _description, nameOrDescription: nameOrDescription) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetArchitectSystempromptsRequest.getArchitectSystemprompts was successful\")\n        dump(response)\n    }\n}"
  },
  "getflow": {
    "operationId": "getflow",
    "functionName": "getFlow",
    "signature": "getFlow(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet deleted: Bool = true // Deleted flows\n\n// Get flow\nGetFlowRequest.getFlow(flowId: flowId, deleted: deleted) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowRequest.getFlow was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowhistoryhistoryid": {
    "operationId": "getflowhistoryhistoryid",
    "functionName": "getFlowHistoryHistoryId",
    "signature": "getFlowHistoryHistoryId(flowId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "historyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "action",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "HistoryListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet historyId: String = \"\" // History request ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortOrder: String = \"\" // Sort order\nlet sortBy: GetFlowHistoryHistoryIdRequest.SortBy_getFlowHistoryHistoryId = GetFlowHistoryHistoryIdRequest.SortBy_getFlowHistoryHistoryId.enummember // Sort by\nlet action: [String] = [\"\"] // Flow actions to include (omit to include all)\n\n// Get generated flow history\nGetFlowHistoryHistoryIdRequest.getFlowHistoryHistoryId(flowId: flowId, historyId: historyId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, sortBy: sortBy, action: action) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowHistoryHistoryIdRequest.getFlowHistoryHistoryId was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowlatestconfiguration": {
    "operationId": "getflowlatestconfiguration",
    "functionName": "getFlowLatestconfiguration",
    "signature": "getFlowLatestconfiguration(flowId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet deleted: Bool = true // Deleted flows\n\n// Get the latest configuration for flow\nGetFlowLatestconfigurationRequest.getFlowLatestconfiguration(flowId: flowId, deleted: deleted) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowLatestconfigurationRequest.getFlowLatestconfiguration was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowversion": {
    "operationId": "getflowversion",
    "functionName": "getFlowVersion",
    "signature": "getFlowVersion(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FlowVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet versionId: String = \"\" // Version ID\nlet deleted: String = \"\" // Deleted flows\n\n// Get flow version\nGetFlowVersionRequest.getFlowVersion(flowId: flowId, versionId: versionId, deleted: deleted) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowVersionRequest.getFlowVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowversionconfiguration": {
    "operationId": "getflowversionconfiguration",
    "functionName": "getFlowVersionConfiguration",
    "signature": "getFlowVersionConfiguration(flowId, versionId, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet versionId: String = \"\" // Version ID\nlet deleted: String = \"\" // Deleted flows\n\n// Create flow version configuration\nGetFlowVersionConfigurationRequest.getFlowVersionConfiguration(flowId: flowId, versionId: versionId, deleted: deleted) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowVersionConfigurationRequest.getFlowVersionConfiguration was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowversions": {
    "operationId": "getflowversions",
    "functionName": "getFlowVersions",
    "signature": "getFlowVersions(flowId, pageNumber, pageSize, deleted)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "FlowVersionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet deleted: Bool = true // Include Deleted flows\n\n// Get flow version list\nGetFlowVersionsRequest.getFlowVersions(flowId: flowId, pageNumber: pageNumber, pageSize: pageSize, deleted: deleted) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowVersionsRequest.getFlowVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getflows": {
    "operationId": "getflows",
    "functionName": "getFlows",
    "signature": "getFlows(type, pageNumber, pageSize, sortBy, sortOrder, _id, name, _description, nameOrDescription, publishVersionId, editableBy, lockedBy, lockedByClientId, secure, deleted, includeSchemas, publishedAfter, publishedBefore, divisionId)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "editableBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lockedByClientId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet type: [String] = [\"\"] // Type\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet _description: String = \"\" // Description\nlet nameOrDescription: String = \"\" // Name or description\nlet publishVersionId: String = \"\" // Publish version ID\nlet editableBy: String = \"\" // Editable by\nlet lockedBy: String = \"\" // Locked by\nlet lockedByClientId: String = \"\" // Locked by client ID\nlet secure: GetFlowsRequest.Secure_getFlows = GetFlowsRequest.Secure_getFlows.enummember // Secure\nlet deleted: Bool = true // Include deleted\nlet includeSchemas: Bool = true // Include variable schemas\nlet publishedAfter: String = 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01 // Published after\nlet publishedBefore: String = 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01 // Published before\nlet divisionId: [String] = [\"\"] // division ID(s)\n\n// Get a pageable list of flows, filtered by query parameters\nGetFlowsRequest.getFlows(type: type, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, _description: _description, nameOrDescription: nameOrDescription, publishVersionId: publishVersionId, editableBy: editableBy, lockedBy: lockedBy, lockedByClientId: lockedByClientId, secure: secure, deleted: deleted, includeSchemas: includeSchemas, publishedAfter: publishedAfter, publishedBefore: publishedBefore, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsRequest.getFlows was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatable": {
    "operationId": "getflowsdatatable",
    "functionName": "getFlowsDatatable",
    "signature": "getFlowsDatatable(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet expand: GetFlowsDatatableRequest.Expand_getFlowsDatatable = GetFlowsDatatableRequest.Expand_getFlowsDatatable.enummember // Expand instructions for the result\n\n// Returns a specific datatable by id\nGetFlowsDatatableRequest.getFlowsDatatable(datatableId: datatableId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableRequest.getFlowsDatatable was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatableexportjob": {
    "operationId": "getflowsdatatableexportjob",
    "functionName": "getFlowsDatatableExportJob",
    "signature": "getFlowsDatatableExportJob(datatableId, exportJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "exportJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet exportJobId: String = \"\" // id of export job\n\n// Returns the state information about an export job\nGetFlowsDatatableExportJobRequest.getFlowsDatatableExportJob(datatableId: datatableId, exportJobId: exportJobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableExportJobRequest.getFlowsDatatableExportJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatableimportjob": {
    "operationId": "getflowsdatatableimportjob",
    "functionName": "getFlowsDatatableImportJob",
    "signature": "getFlowsDatatableImportJob(datatableId, importJobId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importJobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet importJobId: String = \"\" // id of import job\n\n// Returns the state information about an import job\nGetFlowsDatatableImportJobRequest.getFlowsDatatableImportJob(datatableId: datatableId, importJobId: importJobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableImportJobRequest.getFlowsDatatableImportJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatableimportjobs": {
    "operationId": "getflowsdatatableimportjobs",
    "functionName": "getFlowsDatatableImportJobs",
    "signature": "getFlowsDatatableImportJobs(datatableId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DataTableImportEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get all recent import jobs\nGetFlowsDatatableImportJobsRequest.getFlowsDatatableImportJobs(datatableId: datatableId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableImportJobsRequest.getFlowsDatatableImportJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatablerow": {
    "operationId": "getflowsdatatablerow",
    "functionName": "getFlowsDatatableRow",
    "signature": "getFlowsDatatableRow(datatableId, rowId, showbrief)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "showbrief",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet rowId: String = \"\" // The key for the row\nlet showbrief: Bool = true // if true returns just the key field for the row\n\n// Returns a specific row for the datatable\nGetFlowsDatatableRowRequest.getFlowsDatatableRow(datatableId: datatableId, rowId: rowId, showbrief: showbrief) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableRowRequest.getFlowsDatatableRow was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatablerows": {
    "operationId": "getflowsdatatablerows",
    "functionName": "getFlowsDatatableRows",
    "signature": "getFlowsDatatableRows(datatableId, pageNumber, pageSize, showbrief)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "showbrief",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "DataTableRowEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet showbrief: Bool = true // If true returns just the key value of the row\n\n// Returns the rows for the datatable with the given id\nGetFlowsDatatableRowsRequest.getFlowsDatatableRows(datatableId: datatableId, pageNumber: pageNumber, pageSize: pageSize, showbrief: showbrief) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatableRowsRequest.getFlowsDatatableRows was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatables": {
    "operationId": "getflowsdatatables",
    "functionName": "getFlowsDatatables",
    "signature": "getFlowsDatatables(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: GetFlowsDatatablesRequest.Expand_getFlowsDatatables = GetFlowsDatatablesRequest.Expand_getFlowsDatatables.enummember // Expand instructions for the result\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: GetFlowsDatatablesRequest.SortBy_getFlowsDatatables = GetFlowsDatatablesRequest.SortBy_getFlowsDatatables.enummember // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet divisionId: [String] = [\"\"] // division ID(s)\nlet name: String = \"\" // Name to filter by\n\n// Retrieve a list of datatables for the org\nGetFlowsDatatablesRequest.getFlowsDatatables(expand: expand, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, divisionId: divisionId, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatablesRequest.getFlowsDatatables was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatablesdivisionview": {
    "operationId": "getflowsdatatablesdivisionview",
    "functionName": "getFlowsDatatablesDivisionview",
    "signature": "getFlowsDatatablesDivisionview(datatableId, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet expand: GetFlowsDatatablesDivisionviewRequest.Expand_getFlowsDatatablesDivisionview = GetFlowsDatatablesDivisionviewRequest.Expand_getFlowsDatatablesDivisionview.enummember // Expand instructions for the result\n\n// Returns a specific datatable by id\nGetFlowsDatatablesDivisionviewRequest.getFlowsDatatablesDivisionview(datatableId: datatableId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatablesDivisionviewRequest.getFlowsDatatablesDivisionview was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdatatablesdivisionviews": {
    "operationId": "getflowsdatatablesdivisionviews",
    "functionName": "getFlowsDatatablesDivisionviews",
    "signature": "getFlowsDatatablesDivisionviews(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
    "parameters": [
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTablesDomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: GetFlowsDatatablesDivisionviewsRequest.Expand_getFlowsDatatablesDivisionviews = GetFlowsDatatablesDivisionviewsRequest.Expand_getFlowsDatatablesDivisionviews.enummember // Expand instructions for the result\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: GetFlowsDatatablesDivisionviewsRequest.SortBy_getFlowsDatatablesDivisionviews = GetFlowsDatatablesDivisionviewsRequest.SortBy_getFlowsDatatablesDivisionviews.enummember // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet divisionId: [String] = [\"\"] // division ID(s)\nlet name: String = \"\" // Name to filter by\n\n// Retrieve a list of datatables for the org\nGetFlowsDatatablesDivisionviewsRequest.getFlowsDatatablesDivisionviews(expand: expand, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, divisionId: divisionId, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDatatablesDivisionviewsRequest.getFlowsDatatablesDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsdivisionviews": {
    "operationId": "getflowsdivisionviews",
    "functionName": "getFlowsDivisionviews",
    "signature": "getFlowsDivisionviews(type, pageNumber, pageSize, sortBy, sortOrder, _id, name, publishVersionId, publishedAfter, publishedBefore, divisionId, includeSchemas)",
    "parameters": [
      {
        "name": "type",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishVersionId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedAfter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "publishedBefore",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeSchemas",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "FlowDivisionViewEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet type: [String] = [\"\"] // Type\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet publishVersionId: String = \"\" // Publish version ID\nlet publishedAfter: String = 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01 // Published after\nlet publishedBefore: String = 2015-01-01T12:00:00-0600, 2015-01-01T18:00:00Z, 2015-01-01T12:00:00.000-0600, 2015-01-01T18:00:00.000Z, 2015-01-01 // Published before\nlet divisionId: [String] = [\"\"] // division ID(s)\nlet includeSchemas: Bool = true // Include variable schemas\n\n// Get a pageable list of basic flow information objects filterable by query parameters.\nGetFlowsDivisionviewsRequest.getFlowsDivisionviews(type: type, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, publishVersionId: publishVersionId, publishedAfter: publishedAfter, publishedBefore: publishedBefore, divisionId: divisionId, includeSchemas: includeSchemas) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsDivisionviewsRequest.getFlowsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsexecution": {
    "operationId": "getflowsexecution",
    "functionName": "getFlowsExecution",
    "signature": "getFlowsExecution(flowExecutionId)",
    "parameters": [
      {
        "name": "flowExecutionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowRuntimeExecution",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowExecutionId: String = \"\" // flow execution ID\n\n// Get a flow execution's details. Flow execution details are available for several days after the flow is started.\nGetFlowsExecutionRequest.getFlowsExecution(flowExecutionId: flowExecutionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsExecutionRequest.getFlowsExecution was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsjob": {
    "operationId": "getflowsjob",
    "functionName": "getFlowsJob",
    "signature": "getFlowsJob(jobId, expand)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ArchitectJobStateResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // Job ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Fetch Architect Job Status\nGetFlowsJobRequest.getFlowsJob(jobId: jobId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsJobRequest.getFlowsJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsmilestone": {
    "operationId": "getflowsmilestone",
    "functionName": "getFlowsMilestone",
    "signature": "getFlowsMilestone(milestoneId)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowMilestone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet milestoneId: String = \"\" // flow milestone ID\n\n// Get a flow milestone\nGetFlowsMilestoneRequest.getFlowsMilestone(milestoneId: milestoneId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsMilestoneRequest.getFlowsMilestone was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsmilestones": {
    "operationId": "getflowsmilestones",
    "functionName": "getFlowsMilestones",
    "signature": "getFlowsMilestones(pageNumber, pageSize, sortBy, sortOrder, _id, name, _description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet _description: String = \"\" // Description\nlet nameOrDescription: String = \"\" // Name or description\nlet divisionId: [String] = [\"\"] // division ID(s)\n\n// Get a pageable list of flow milestones, filtered by query parameters\nGetFlowsMilestonesRequest.getFlowsMilestones(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, _description: _description, nameOrDescription: nameOrDescription, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsMilestonesRequest.getFlowsMilestones was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsmilestonesdivisionviews": {
    "operationId": "getflowsmilestonesdivisionviews",
    "functionName": "getFlowsMilestonesDivisionviews",
    "signature": "getFlowsMilestonesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, _id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowMilestoneDivisionViewEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet divisionId: [String] = [\"\"] // division ID(s)\n\n// Get a pageable list of basic flow milestone information objects filterable by query parameters.\nGetFlowsMilestonesDivisionviewsRequest.getFlowsMilestonesDivisionviews(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsMilestonesDivisionviewsRequest.getFlowsMilestonesDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsoutcome": {
    "operationId": "getflowsoutcome",
    "functionName": "getFlowsOutcome",
    "signature": "getFlowsOutcome(flowOutcomeId)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FlowOutcome",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowOutcomeId: String = \"\" // flow outcome ID\n\n// Get a flow outcome\nGetFlowsOutcomeRequest.getFlowsOutcome(flowOutcomeId: flowOutcomeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsOutcomeRequest.getFlowsOutcome was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsoutcomes": {
    "operationId": "getflowsoutcomes",
    "functionName": "getFlowsOutcomes",
    "signature": "getFlowsOutcomes(pageNumber, pageSize, sortBy, sortOrder, _id, name, _description, nameOrDescription, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_description",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nameOrDescription",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet _description: String = \"\" // Description\nlet nameOrDescription: String = \"\" // Name or description\nlet divisionId: [String] = [\"\"] // division ID(s)\n\n// Get a pageable list of flow outcomes, filtered by query parameters\nGetFlowsOutcomesRequest.getFlowsOutcomes(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, _description: _description, nameOrDescription: nameOrDescription, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsOutcomesRequest.getFlowsOutcomes was successful\")\n        dump(response)\n    }\n}"
  },
  "getflowsoutcomesdivisionviews": {
    "operationId": "getflowsoutcomesdivisionviews",
    "functionName": "getFlowsOutcomesDivisionviews",
    "signature": "getFlowsOutcomesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, _id, name, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "FlowOutcomeDivisionViewEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet _id: [String] = [\"\"] // ID\nlet name: String = \"\" // Name\nlet divisionId: [String] = [\"\"] // division ID(s)\n\n// Get a pageable list of basic flow outcome information objects filterable by query parameters.\nGetFlowsOutcomesDivisionviewsRequest.getFlowsOutcomesDivisionviews(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, _id: _id, name: name, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFlowsOutcomesDivisionviewsRequest.getFlowsOutcomesDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectdependencytrackingbuild": {
    "operationId": "postarchitectdependencytrackingbuild",
    "functionName": "postArchitectDependencytrackingBuild",
    "signature": "postArchitectDependencytrackingBuild()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Rebuild Dependency Tracking data for an organization\nPostArchitectDependencytrackingBuildRequest.postArchitectDependencytrackingBuild() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostArchitectDependencytrackingBuildRequest.postArchitectDependencytrackingBuild was successful\")\n    }\n}"
  },
  "postarchitectemergencygroups": {
    "operationId": "postarchitectemergencygroups",
    "functionName": "postArchitectEmergencygroups",
    "signature": "postArchitectEmergencygroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EmergencyGroup",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EmergencyGroup = new EmergencyGroup(...) // \n\n// Creates a new emergency group\nPostArchitectEmergencygroupsRequest.postArchitectEmergencygroups(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectEmergencygroupsRequest.postArchitectEmergencygroups was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectivrs": {
    "operationId": "postarchitectivrs",
    "functionName": "postArchitectIvrs",
    "signature": "postArchitectIvrs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "IVR",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: IVR = new IVR(...) // \n\n// Create IVR config.\nPostArchitectIvrsRequest.postArchitectIvrs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectIvrsRequest.postArchitectIvrs was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectprompthistory": {
    "operationId": "postarchitectprompthistory",
    "functionName": "postArchitectPromptHistory",
    "signature": "postArchitectPromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\n\n// Generate prompt history\nPostArchitectPromptHistoryRequest.postArchitectPromptHistory(promptId: promptId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectPromptHistoryRequest.postArchitectPromptHistory was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectpromptresources": {
    "operationId": "postarchitectpromptresources",
    "functionName": "postArchitectPromptResources",
    "signature": "postArchitectPromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PromptAssetCreate",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet body: PromptAssetCreate = new PromptAssetCreate(...) // \n\n// Create a new user prompt resource\nPostArchitectPromptResourcesRequest.postArchitectPromptResources(promptId: promptId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectPromptResourcesRequest.postArchitectPromptResources was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectprompts": {
    "operationId": "postarchitectprompts",
    "functionName": "postArchitectPrompts",
    "signature": "postArchitectPrompts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Prompt",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Prompt = new Prompt(...) // \n\n// Create a new user prompt\nPostArchitectPromptsRequest.postArchitectPrompts(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectPromptsRequest.postArchitectPrompts was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectschedulegroups": {
    "operationId": "postarchitectschedulegroups",
    "functionName": "postArchitectSchedulegroups",
    "signature": "postArchitectSchedulegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ScheduleGroup",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ScheduleGroup = new ScheduleGroup(...) // \n\n// Creates a new schedule group\nPostArchitectSchedulegroupsRequest.postArchitectSchedulegroups(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectSchedulegroupsRequest.postArchitectSchedulegroups was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectschedules": {
    "operationId": "postarchitectschedules",
    "functionName": "postArchitectSchedules",
    "signature": "postArchitectSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Schedule",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Schedule = new Schedule(...) // \n\n// Create a new schedule.\nPostArchitectSchedulesRequest.postArchitectSchedules(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectSchedulesRequest.postArchitectSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectsystemprompthistory": {
    "operationId": "postarchitectsystemprompthistory",
    "functionName": "postArchitectSystempromptHistory",
    "signature": "postArchitectSystempromptHistory(promptId)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // promptId\n\n// Generate system prompt history\nPostArchitectSystempromptHistoryRequest.postArchitectSystempromptHistory(promptId: promptId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectSystempromptHistoryRequest.postArchitectSystempromptHistory was successful\")\n        dump(response)\n    }\n}"
  },
  "postarchitectsystempromptresources": {
    "operationId": "postarchitectsystempromptresources",
    "functionName": "postArchitectSystempromptResources",
    "signature": "postArchitectSystempromptResources(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SystemPromptAsset",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet body: SystemPromptAsset = new SystemPromptAsset(...) // \n\n// Create system prompt resource override.\nPostArchitectSystempromptResourcesRequest.postArchitectSystempromptResources(promptId: promptId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostArchitectSystempromptResourcesRequest.postArchitectSystempromptResources was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowhistory": {
    "operationId": "postflowhistory",
    "functionName": "postFlowHistory",
    "signature": "postFlowHistory(flowId)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\n\n// Generate flow history\nPostFlowHistoryRequest.postFlowHistory(flowId: flowId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowHistoryRequest.postFlowHistory was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowversions": {
    "operationId": "postflowversions",
    "functionName": "postFlowVersions",
    "signature": "postFlowVersions(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String:JSON]",
        "required": "true"
      }
    ],
    "return": "FlowVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet body: [String:JSON] = new JSON(...) // \n\n// Create flow version\nPostFlowVersionsRequest.postFlowVersions(flowId: flowId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowVersionsRequest.postFlowVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "postflows": {
    "operationId": "postflows",
    "functionName": "postFlows",
    "signature": "postFlows(body, language)",
    "parameters": [
      {
        "name": "body",
        "type": "Flow",
        "required": "true"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Flow = new Flow(...) // \nlet language: String = \"\" // Language\n\n// Create flow\nPostFlowsRequest.postFlows(body: body, language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsRequest.postFlows was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionscheckin": {
    "operationId": "postflowsactionscheckin",
    "functionName": "postFlowsActionsCheckin",
    "signature": "postFlowsActionsCheckin(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\n\n// Check-in flow\nPostFlowsActionsCheckinRequest.postFlowsActionsCheckin(flow: flow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsCheckinRequest.postFlowsActionsCheckin was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionscheckout": {
    "operationId": "postflowsactionscheckout",
    "functionName": "postFlowsActionsCheckout",
    "signature": "postFlowsActionsCheckout(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\n\n// Check-out flow\nPostFlowsActionsCheckoutRequest.postFlowsActionsCheckout(flow: flow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsCheckoutRequest.postFlowsActionsCheckout was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionsdeactivate": {
    "operationId": "postflowsactionsdeactivate",
    "functionName": "postFlowsActionsDeactivate",
    "signature": "postFlowsActionsDeactivate(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\n\n// Deactivate flow\nPostFlowsActionsDeactivateRequest.postFlowsActionsDeactivate(flow: flow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsDeactivateRequest.postFlowsActionsDeactivate was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionspublish": {
    "operationId": "postflowsactionspublish",
    "functionName": "postFlowsActionsPublish",
    "signature": "postFlowsActionsPublish(flow, version)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\nlet version: String = \"\" // version\n\n// Publish flow\nPostFlowsActionsPublishRequest.postFlowsActionsPublish(flow: flow, version: version) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsPublishRequest.postFlowsActionsPublish was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionsrevert": {
    "operationId": "postflowsactionsrevert",
    "functionName": "postFlowsActionsRevert",
    "signature": "postFlowsActionsRevert(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\n\n// Revert flow\nPostFlowsActionsRevertRequest.postFlowsActionsRevert(flow: flow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsRevertRequest.postFlowsActionsRevert was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsactionsunlock": {
    "operationId": "postflowsactionsunlock",
    "functionName": "postFlowsActionsUnlock",
    "signature": "postFlowsActionsUnlock(flow)",
    "parameters": [
      {
        "name": "flow",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flow: String = \"\" // Flow ID\n\n// Unlock flow\nPostFlowsActionsUnlockRequest.postFlowsActionsUnlock(flow: flow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsActionsUnlockRequest.postFlowsActionsUnlock was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsdatatableexportjobs": {
    "operationId": "postflowsdatatableexportjobs",
    "functionName": "postFlowsDatatableExportJobs",
    "signature": "postFlowsDatatableExportJobs(datatableId)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataTableExportJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\n\n// Begin an export process for exporting all rows from a datatable\nPostFlowsDatatableExportJobsRequest.postFlowsDatatableExportJobs(datatableId: datatableId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsDatatableExportJobsRequest.postFlowsDatatableExportJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsdatatableimportjobs": {
    "operationId": "postflowsdatatableimportjobs",
    "functionName": "postFlowsDatatableImportJobs",
    "signature": "postFlowsDatatableImportJobs(datatableId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DataTableImportJob",
        "required": "true"
      }
    ],
    "return": "DataTableImportJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet body: DataTableImportJob = new DataTableImportJob(...) // import job information\n\n// Begin an import process for importing rows into a datatable\nPostFlowsDatatableImportJobsRequest.postFlowsDatatableImportJobs(datatableId: datatableId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsDatatableImportJobsRequest.postFlowsDatatableImportJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsdatatablerows": {
    "operationId": "postflowsdatatablerows",
    "functionName": "postFlowsDatatableRows",
    "signature": "postFlowsDatatableRows(datatableId, dataTableRow)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "dataTableRow",
        "type": "[String:JSON]",
        "required": "true"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet dataTableRow: [String:JSON] = new JSON(...) // \n\n// Create a new row entry for the datatable.\nPostFlowsDatatableRowsRequest.postFlowsDatatableRows(datatableId: datatableId, dataTableRow: dataTableRow) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsDatatableRowsRequest.postFlowsDatatableRows was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsdatatables": {
    "operationId": "postflowsdatatables",
    "functionName": "postFlowsDatatables",
    "signature": "postFlowsDatatables(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DataTable",
        "required": "true"
      }
    ],
    "return": "DataTable",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DataTable = new DataTable(...) // datatable json-schema\n\n// Create a new datatable with the specified json-schema definition\nPostFlowsDatatablesRequest.postFlowsDatatables(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsDatatablesRequest.postFlowsDatatables was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsexecutions": {
    "operationId": "postflowsexecutions",
    "functionName": "postFlowsExecutions",
    "signature": "postFlowsExecutions(flowLaunchRequest)",
    "parameters": [
      {
        "name": "flowLaunchRequest",
        "type": "FlowExecutionLaunchRequest",
        "required": "true"
      }
    ],
    "return": "FlowExecutionLaunchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowLaunchRequest: FlowExecutionLaunchRequest = new FlowExecutionLaunchRequest(...) // \n\n// Launch an instance of a flow definition, for flow types that support it such as the 'workflow' type.\nPostFlowsExecutionsRequest.postFlowsExecutions(flowLaunchRequest: flowLaunchRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsExecutionsRequest.postFlowsExecutions was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsjobs": {
    "operationId": "postflowsjobs",
    "functionName": "postFlowsJobs",
    "signature": "postFlowsJobs()",
    "return": "RegisterArchitectJobResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Register Architect Job. Returns a URL where a file, such as an Architect flow YAML file, can be PUT which will then initiate the job.\nPostFlowsJobsRequest.postFlowsJobs() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsJobsRequest.postFlowsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsmilestones": {
    "operationId": "postflowsmilestones",
    "functionName": "postFlowsMilestones",
    "signature": "postFlowsMilestones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FlowMilestone",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FlowMilestone = new FlowMilestone(...) // \n\n// Create a flow milestone\nPostFlowsMilestonesRequest.postFlowsMilestones(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsMilestonesRequest.postFlowsMilestones was successful\")\n        dump(response)\n    }\n}"
  },
  "postflowsoutcomes": {
    "operationId": "postflowsoutcomes",
    "functionName": "postFlowsOutcomes",
    "signature": "postFlowsOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FlowOutcome",
        "required": "false"
      }
    ],
    "return": "FlowOutcome",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FlowOutcome = new FlowOutcome(...) // \n\n// Create a flow outcome\nPostFlowsOutcomesRequest.postFlowsOutcomes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostFlowsOutcomesRequest.postFlowsOutcomes was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectemergencygroup": {
    "operationId": "putarchitectemergencygroup",
    "functionName": "putArchitectEmergencygroup",
    "signature": "putArchitectEmergencygroup(emergencyGroupId, body)",
    "parameters": [
      {
        "name": "emergencyGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EmergencyGroup",
        "required": "true"
      }
    ],
    "return": "EmergencyGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emergencyGroupId: String = \"\" // Emergency group ID\nlet body: EmergencyGroup = new EmergencyGroup(...) // \n\n// Updates a emergency group by ID\nPutArchitectEmergencygroupRequest.putArchitectEmergencygroup(emergencyGroupId: emergencyGroupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectEmergencygroupRequest.putArchitectEmergencygroup was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectivr": {
    "operationId": "putarchitectivr",
    "functionName": "putArchitectIvr",
    "signature": "putArchitectIvr(ivrId, body)",
    "parameters": [
      {
        "name": "ivrId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "IVR",
        "required": "true"
      }
    ],
    "return": "IVR",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ivrId: String = \"\" // IVR id\nlet body: IVR = new IVR(...) // \n\n// Update an IVR Config.\nPutArchitectIvrRequest.putArchitectIvr(ivrId: ivrId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectIvrRequest.putArchitectIvr was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectprompt": {
    "operationId": "putarchitectprompt",
    "functionName": "putArchitectPrompt",
    "signature": "putArchitectPrompt(promptId, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Prompt",
        "required": "true"
      }
    ],
    "return": "Prompt",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet body: Prompt = new Prompt(...) // \n\n// Update specified user prompt\nPutArchitectPromptRequest.putArchitectPrompt(promptId: promptId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectPromptRequest.putArchitectPrompt was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectpromptresource": {
    "operationId": "putarchitectpromptresource",
    "functionName": "putArchitectPromptResource",
    "signature": "putArchitectPromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PromptAsset",
        "required": "true"
      }
    ],
    "return": "PromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\nlet body: PromptAsset = new PromptAsset(...) // \n\n// Update specified user prompt resource\nPutArchitectPromptResourceRequest.putArchitectPromptResource(promptId: promptId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectPromptResourceRequest.putArchitectPromptResource was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectschedule": {
    "operationId": "putarchitectschedule",
    "functionName": "putArchitectSchedule",
    "signature": "putArchitectSchedule(scheduleId, body)",
    "parameters": [
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Schedule",
        "required": "true"
      }
    ],
    "return": "Schedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleId: String = \"\" // Schedule ID\nlet body: Schedule = new Schedule(...) // \n\n// Update schedule by ID\nPutArchitectScheduleRequest.putArchitectSchedule(scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectScheduleRequest.putArchitectSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectschedulegroup": {
    "operationId": "putarchitectschedulegroup",
    "functionName": "putArchitectSchedulegroup",
    "signature": "putArchitectSchedulegroup(scheduleGroupId, body)",
    "parameters": [
      {
        "name": "scheduleGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScheduleGroup",
        "required": "true"
      }
    ],
    "return": "ScheduleGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scheduleGroupId: String = \"\" // Schedule group ID\nlet body: ScheduleGroup = new ScheduleGroup(...) // \n\n// Updates a schedule group by ID\nPutArchitectSchedulegroupRequest.putArchitectSchedulegroup(scheduleGroupId: scheduleGroupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectSchedulegroupRequest.putArchitectSchedulegroup was successful\")\n        dump(response)\n    }\n}"
  },
  "putarchitectsystempromptresource": {
    "operationId": "putarchitectsystempromptresource",
    "functionName": "putArchitectSystempromptResource",
    "signature": "putArchitectSystempromptResource(promptId, languageCode, body)",
    "parameters": [
      {
        "name": "promptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SystemPromptAsset",
        "required": "true"
      }
    ],
    "return": "SystemPromptAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet promptId: String = \"\" // Prompt ID\nlet languageCode: String = \"\" // Language\nlet body: SystemPromptAsset = new SystemPromptAsset(...) // \n\n// Updates a system prompt resource override.\nPutArchitectSystempromptResourceRequest.putArchitectSystempromptResource(promptId: promptId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutArchitectSystempromptResourceRequest.putArchitectSystempromptResource was successful\")\n        dump(response)\n    }\n}"
  },
  "putflow": {
    "operationId": "putflow",
    "functionName": "putFlow",
    "signature": "putFlow(flowId, body)",
    "parameters": [
      {
        "name": "flowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Flow",
        "required": "true"
      }
    ],
    "return": "Flow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowId: String = \"\" // Flow ID\nlet body: Flow = new Flow(...) // \n\n// Update flow\nPutFlowRequest.putFlow(flowId: flowId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFlowRequest.putFlow was successful\")\n        dump(response)\n    }\n}"
  },
  "putflowsdatatable": {
    "operationId": "putflowsdatatable",
    "functionName": "putFlowsDatatable",
    "signature": "putFlowsDatatable(datatableId, body, expand)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DataTable",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DataTable",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet body: DataTable = new DataTable(...) // datatable json-schema\nlet expand: PutFlowsDatatableRequest.Expand_putFlowsDatatable = PutFlowsDatatableRequest.Expand_putFlowsDatatable.enummember // Expand instructions for the result\n\n// Updates a specific datatable by id\nPutFlowsDatatableRequest.putFlowsDatatable(datatableId: datatableId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFlowsDatatableRequest.putFlowsDatatable was successful\")\n        dump(response)\n    }\n}"
  },
  "putflowsdatatablerow": {
    "operationId": "putflowsdatatablerow",
    "functionName": "putFlowsDatatableRow",
    "signature": "putFlowsDatatableRow(datatableId, rowId, body)",
    "parameters": [
      {
        "name": "datatableId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rowId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String:JSON]",
        "required": "false"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet datatableId: String = \"\" // id of datatable\nlet rowId: String = \"\" // the key for the row\nlet body: [String:JSON] = new JSON(...) // datatable row\n\n// Update a row entry\nPutFlowsDatatableRowRequest.putFlowsDatatableRow(datatableId: datatableId, rowId: rowId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFlowsDatatableRowRequest.putFlowsDatatableRow was successful\")\n        dump(response)\n    }\n}"
  },
  "putflowsmilestone": {
    "operationId": "putflowsmilestone",
    "functionName": "putFlowsMilestone",
    "signature": "putFlowsMilestone(milestoneId, body)",
    "parameters": [
      {
        "name": "milestoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "FlowMilestone",
        "required": "false"
      }
    ],
    "return": "FlowMilestone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet milestoneId: String = \"\" // flow milestone ID\nlet body: FlowMilestone = new FlowMilestone(...) // \n\n// Updates a flow milestone\nPutFlowsMilestoneRequest.putFlowsMilestone(milestoneId: milestoneId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFlowsMilestoneRequest.putFlowsMilestone was successful\")\n        dump(response)\n    }\n}"
  },
  "putflowsoutcome": {
    "operationId": "putflowsoutcome",
    "functionName": "putFlowsOutcome",
    "signature": "putFlowsOutcome(flowOutcomeId, body)",
    "parameters": [
      {
        "name": "flowOutcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "FlowOutcome",
        "required": "false"
      }
    ],
    "return": "Operation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet flowOutcomeId: String = \"\" // flow outcome ID\nlet body: FlowOutcome = new FlowOutcome(...) // \n\n// Updates a flow outcome\nPutFlowsOutcomeRequest.putFlowsOutcome(flowOutcomeId: flowOutcomeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFlowsOutcomeRequest.putFlowsOutcome was successful\")\n        dump(response)\n    }\n}"
  },
  "getauditsqueryrealtimeservicemapping": {
    "operationId": "getauditsqueryrealtimeservicemapping",
    "functionName": "getAuditsQueryRealtimeServicemapping",
    "signature": "getAuditsQueryRealtimeServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get service mapping information used in realtime audits.\nGetAuditsQueryRealtimeServicemappingRequest.getAuditsQueryRealtimeServicemapping() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuditsQueryRealtimeServicemappingRequest.getAuditsQueryRealtimeServicemapping was successful\")\n        dump(response)\n    }\n}"
  },
  "getauditsqueryservicemapping": {
    "operationId": "getauditsqueryservicemapping",
    "functionName": "getAuditsQueryServicemapping",
    "signature": "getAuditsQueryServicemapping()",
    "return": "AuditQueryServiceMapping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get service mapping information used in audits.\nGetAuditsQueryServicemappingRequest.getAuditsQueryServicemapping() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuditsQueryServicemappingRequest.getAuditsQueryServicemapping was successful\")\n        dump(response)\n    }\n}"
  },
  "getauditsquerytransactionid": {
    "operationId": "getauditsquerytransactionid",
    "functionName": "getAuditsQueryTransactionId",
    "signature": "getAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet transactionId: String = \"\" // Transaction ID\n\n// Get status of audit query execution\nGetAuditsQueryTransactionIdRequest.getAuditsQueryTransactionId(transactionId: transactionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuditsQueryTransactionIdRequest.getAuditsQueryTransactionId was successful\")\n        dump(response)\n    }\n}"
  },
  "getauditsquerytransactionidresults": {
    "operationId": "getauditsquerytransactionidresults",
    "functionName": "getAuditsQueryTransactionIdResults",
    "signature": "getAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditQueryExecutionResultsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet transactionId: String = \"\" // Transaction ID\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\nlet pageSize: Int = 0 // Page size\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get results of audit query\nGetAuditsQueryTransactionIdResultsRequest.getAuditsQueryTransactionIdResults(transactionId: transactionId, cursor: cursor, pageSize: pageSize, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuditsQueryTransactionIdResultsRequest.getAuditsQueryTransactionIdResults was successful\")\n        dump(response)\n    }\n}"
  },
  "postauditsquery": {
    "operationId": "postauditsquery",
    "functionName": "postAuditsQuery",
    "signature": "postAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AuditQueryRequest",
        "required": "true"
      }
    ],
    "return": "AuditQueryExecutionStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AuditQueryRequest = new AuditQueryRequest(...) // query\n\n// Create audit query execution\nPostAuditsQueryRequest.postAuditsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuditsQueryRequest.postAuditsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postauditsqueryrealtime": {
    "operationId": "postauditsqueryrealtime",
    "functionName": "postAuditsQueryRealtime",
    "signature": "postAuditsQueryRealtime(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "AuditRealtimeQueryRequest",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AuditRealtimeQueryResultsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AuditRealtimeQueryRequest = new AuditRealtimeQueryRequest(...) // query\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// This endpoint will only retrieve 14 days worth of audits for certain services. Please use /query to get a full list and older audits.\nPostAuditsQueryRealtimeRequest.postAuditsQueryRealtime(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuditsQueryRealtimeRequest.postAuditsQueryRealtime was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteauthorizationdivision": {
    "operationId": "deleteauthorizationdivision",
    "functionName": "deleteAuthorizationDivision",
    "signature": "deleteAuthorizationDivision(divisionId, force)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet force: Bool = true // Force delete this division as well as the grants and objects associated with it\n\n// Delete a division.\nDeleteAuthorizationDivisionRequest.deleteAuthorizationDivision(divisionId: divisionId, force: force) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAuthorizationDivisionRequest.deleteAuthorizationDivision was successful\")\n    }\n}"
  },
  "deleteauthorizationrole": {
    "operationId": "deleteauthorizationrole",
    "functionName": "deleteAuthorizationRole",
    "signature": "deleteAuthorizationRole(roleId)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\n\n// Delete an organization role.\nDeleteAuthorizationRoleRequest.deleteAuthorizationRole(roleId: roleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAuthorizationRoleRequest.deleteAuthorizationRole was successful\")\n    }\n}"
  },
  "deleteauthorizationsubjectdivisionrole": {
    "operationId": "deleteauthorizationsubjectdivisionrole",
    "functionName": "deleteAuthorizationSubjectDivisionRole",
    "signature": "deleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet divisionId: String = \"\" // the id of the division of the grant\nlet roleId: String = \"\" // the id of the role of the grant\n\n// Delete a grant of a role in a division\nDeleteAuthorizationSubjectDivisionRoleRequest.deleteAuthorizationSubjectDivisionRole(subjectId: subjectId, divisionId: divisionId, roleId: roleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteAuthorizationSubjectDivisionRoleRequest.deleteAuthorizationSubjectDivisionRole was successful\")\n    }\n}"
  },
  "getauthorizationdivision": {
    "operationId": "getauthorizationdivision",
    "functionName": "getAuthorizationDivision",
    "signature": "getAuthorizationDivision(divisionId, objectCount)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectCount",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AuthzDivision",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet objectCount: Bool = true // Get count of objects in this division, grouped by type\n\n// Returns an authorization division.\nGetAuthorizationDivisionRequest.getAuthorizationDivision(divisionId: divisionId, objectCount: objectCount) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionRequest.getAuthorizationDivision was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisiongrants": {
    "operationId": "getauthorizationdivisiongrants",
    "functionName": "getAuthorizationDivisionGrants",
    "signature": "getAuthorizationDivisionGrants(divisionId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionGrantEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Gets all grants for a given division.\nGetAuthorizationDivisionGrantsRequest.getAuthorizationDivisionGrants(divisionId: divisionId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionGrantsRequest.getAuthorizationDivisionGrants was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisions": {
    "operationId": "getauthorizationdivisions",
    "functionName": "getAuthorizationDivisions",
    "signature": "getAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, _id, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "objectCount",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AuthzDivisionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet objectCount: Bool = true // Include the count of objects contained in the division\nlet _id: [String] = [\"\"] // Optionally request specific divisions by their IDs\nlet name: String = \"\" // Search term to filter by division name\n\n// Retrieve a list of all divisions defined for the organization\nGetAuthorizationDivisionsRequest.getAuthorizationDivisions(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, objectCount: objectCount, _id: _id, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionsRequest.getAuthorizationDivisions was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisionshome": {
    "operationId": "getauthorizationdivisionshome",
    "functionName": "getAuthorizationDivisionsHome",
    "signature": "getAuthorizationDivisionsHome()",
    "return": "AuthzDivision",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Retrieve the home division for the organization.\nGetAuthorizationDivisionsHomeRequest.getAuthorizationDivisionsHome() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionsHomeRequest.getAuthorizationDivisionsHome was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisionslimit": {
    "operationId": "getauthorizationdivisionslimit",
    "functionName": "getAuthorizationDivisionsLimit",
    "signature": "getAuthorizationDivisionsLimit()",
    "return": "Int",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Returns the maximum allowed number of divisions.\nGetAuthorizationDivisionsLimitRequest.getAuthorizationDivisionsLimit() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionsLimitRequest.getAuthorizationDivisionsLimit was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisionspermittedme": {
    "operationId": "getauthorizationdivisionspermittedme",
    "functionName": "getAuthorizationDivisionspermittedMe",
    "signature": "getAuthorizationDivisionspermittedMe(permission, name)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[AuthzDivision]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet permission: String = \"\" // The permission string, including the object to access, e.g. routing:queue:view\nlet name: String = \"\" // Search term to filter by division name\n\n// Returns which divisions the current user has the given permission in.\nGetAuthorizationDivisionspermittedMeRequest.getAuthorizationDivisionspermittedMe(permission: permission, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionspermittedMeRequest.getAuthorizationDivisionspermittedMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisionspermittedpagedme": {
    "operationId": "getauthorizationdivisionspermittedpagedme",
    "functionName": "getAuthorizationDivisionspermittedPagedMe",
    "signature": "getAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet permission: String = \"\" // The permission string, including the object to access, e.g. routing:queue:view\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Returns which divisions the current user has the given permission in.\nGetAuthorizationDivisionspermittedPagedMeRequest.getAuthorizationDivisionspermittedPagedMe(permission: permission, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionspermittedPagedMeRequest.getAuthorizationDivisionspermittedPagedMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationdivisionspermittedpagedsubjectid": {
    "operationId": "getauthorizationdivisionspermittedpagedsubjectid",
    "functionName": "getAuthorizationDivisionspermittedPagedSubjectId",
    "signature": "getAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "permission",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DivsPermittedEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet permission: String = \"\" // The permission string, including the object to access, e.g. routing:queue:view\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Returns which divisions the specified user has the given permission in.\nGetAuthorizationDivisionspermittedPagedSubjectIdRequest.getAuthorizationDivisionspermittedPagedSubjectId(subjectId: subjectId, permission: permission, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationDivisionspermittedPagedSubjectIdRequest.getAuthorizationDivisionspermittedPagedSubjectId was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationpermissions": {
    "operationId": "getauthorizationpermissions",
    "functionName": "getAuthorizationPermissions",
    "signature": "getAuthorizationPermissions(pageSize, pageNumber, queryType, query)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "queryType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "query",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PermissionCollectionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet queryType: GetAuthorizationPermissionsRequest.QueryType_getAuthorizationPermissions = GetAuthorizationPermissionsRequest.QueryType_getAuthorizationPermissions.enummember // Query filter type\nlet query: String = \"\" // Comma-separated list of permissions or domains to query\n\n// Get all permissions.\nGetAuthorizationPermissionsRequest.getAuthorizationPermissions(pageSize: pageSize, pageNumber: pageNumber, queryType: queryType, query: query) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationPermissionsRequest.getAuthorizationPermissions was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationproducts": {
    "operationId": "getauthorizationproducts",
    "functionName": "getAuthorizationProducts",
    "signature": "getAuthorizationProducts()",
    "return": "OrganizationProductEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of enabled products\nGetAuthorizationProductsRequest.getAuthorizationProducts() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationProductsRequest.getAuthorizationProducts was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationrole": {
    "operationId": "getauthorizationrole",
    "functionName": "getAuthorizationRole",
    "signature": "getAuthorizationRole(roleId, expand)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand. \\\"unusedPermissions\\\" returns the permissions not used for the role\n\n// Get a single organization role.\nGetAuthorizationRoleRequest.getAuthorizationRole(roleId: roleId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationRoleRequest.getAuthorizationRole was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationrolecomparedefaultrightroleid": {
    "operationId": "getauthorizationrolecomparedefaultrightroleid",
    "functionName": "getAuthorizationRoleComparedefaultRightRoleId",
    "signature": "getAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet leftRoleId: String = \"\" // Left Role ID\nlet rightRoleId: String = \"\" // Right Role id\n\n// Get an org role to default role comparison\nGetAuthorizationRoleComparedefaultRightRoleIdRequest.getAuthorizationRoleComparedefaultRightRoleId(leftRoleId: leftRoleId, rightRoleId: rightRoleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationRoleComparedefaultRightRoleIdRequest.getAuthorizationRoleComparedefaultRightRoleId was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationrolesubjectgrants": {
    "operationId": "getauthorizationrolesubjectgrants",
    "functionName": "getAuthorizationRoleSubjectgrants",
    "signature": "getAuthorizationRoleSubjectgrants(roleId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SubjectDivisionGrantsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// Get the subjects' granted divisions in the specified role.\nGetAuthorizationRoleSubjectgrantsRequest.getAuthorizationRoleSubjectgrants(roleId: roleId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationRoleSubjectgrantsRequest.getAuthorizationRoleSubjectgrants was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationroleusers": {
    "operationId": "getauthorizationroleusers",
    "functionName": "getAuthorizationRoleUsers",
    "signature": "getAuthorizationRoleUsers(roleId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of the users in a specified role.\nGetAuthorizationRoleUsersRequest.getAuthorizationRoleUsers(roleId: roleId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationRoleUsersRequest.getAuthorizationRoleUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationroles": {
    "operationId": "getauthorizationroles",
    "functionName": "getAuthorizationRoles",
    "signature": "getAuthorizationRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, permission, defaultRoleId, userCount, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "defaultRoleId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "userCount",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet name: String = \"\" // \nlet permission: [String] = [\"\"] // \nlet defaultRoleId: [String] = [\"\"] // \nlet userCount: Bool = true // \nlet _id: [String] = [\"\"] // id\n\n// Retrieve a list of all roles defined for the organization\nGetAuthorizationRolesRequest.getAuthorizationRoles(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, permission: permission, defaultRoleId: defaultRoleId, userCount: userCount, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationRolesRequest.getAuthorizationRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationsubject": {
    "operationId": "getauthorizationsubject",
    "functionName": "getAuthorizationSubject",
    "signature": "getAuthorizationSubject(subjectId)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AuthzSubject",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\n\n// Returns a listing of roles and permissions for a user.\nGetAuthorizationSubjectRequest.getAuthorizationSubject(subjectId: subjectId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationSubjectRequest.getAuthorizationSubject was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationsubjectsme": {
    "operationId": "getauthorizationsubjectsme",
    "functionName": "getAuthorizationSubjectsMe",
    "signature": "getAuthorizationSubjectsMe()",
    "return": "AuthzSubject",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Returns a listing of roles and permissions for the currently authenticated user.\nGetAuthorizationSubjectsMeRequest.getAuthorizationSubjectsMe() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationSubjectsMeRequest.getAuthorizationSubjectsMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getauthorizationsubjectsrolecounts": {
    "operationId": "getauthorizationsubjectsrolecounts",
    "functionName": "getAuthorizationSubjectsRolecounts",
    "signature": "getAuthorizationSubjectsRolecounts(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // id\n\n// Get the count of roles granted to a list of subjects\nGetAuthorizationSubjectsRolecountsRequest.getAuthorizationSubjectsRolecounts(_id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetAuthorizationSubjectsRolecountsRequest.getAuthorizationSubjectsRolecounts was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserroles": {
    "operationId": "getuserroles",
    "functionName": "getUserRoles",
    "signature": "getUserRoles(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Returns a listing of roles and permissions for a user.\nGetUserRolesRequest.getUserRoles(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserRolesRequest.getUserRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "patchauthorizationrole": {
    "operationId": "patchauthorizationrole",
    "functionName": "patchAuthorizationRole",
    "signature": "patchAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainOrganizationRole",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet body: DomainOrganizationRole = new DomainOrganizationRole(...) // Organization role\n\n// Patch Organization Role for needsUpdate Field\nPatchAuthorizationRoleRequest.patchAuthorizationRole(roleId: roleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchAuthorizationRoleRequest.patchAuthorizationRole was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationdivisionobject": {
    "operationId": "postauthorizationdivisionobject",
    "functionName": "postAuthorizationDivisionObject",
    "signature": "postAuthorizationDivisionObject(divisionId, objectType, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "objectType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet objectType: PostAuthorizationDivisionObjectRequest.ObjectType_postAuthorizationDivisionObject = PostAuthorizationDivisionObjectRequest.ObjectType_postAuthorizationDivisionObject.enummember // The type of the objects. Must be one of the valid object types\nlet body: [String] = [\"\"] // Object Id List\n\n// Assign a list of objects to a division\nPostAuthorizationDivisionObjectRequest.postAuthorizationDivisionObject(divisionId: divisionId, objectType: objectType, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationDivisionObjectRequest.postAuthorizationDivisionObject was successful\")\n    }\n}"
  },
  "postauthorizationdivisionrestore": {
    "operationId": "postauthorizationdivisionrestore",
    "functionName": "postAuthorizationDivisionRestore",
    "signature": "postAuthorizationDivisionRestore(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AuthzDivision",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet body: AuthzDivision = new AuthzDivision(...) // Recreated division data\n\n// Recreate a previously deleted division.\nPostAuthorizationDivisionRestoreRequest.postAuthorizationDivisionRestore(divisionId: divisionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuthorizationDivisionRestoreRequest.postAuthorizationDivisionRestore was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationdivisions": {
    "operationId": "postauthorizationdivisions",
    "functionName": "postAuthorizationDivisions",
    "signature": "postAuthorizationDivisions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AuthzDivision",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AuthzDivision = new AuthzDivision(...) // Division\n\n// Create a division.\nPostAuthorizationDivisionsRequest.postAuthorizationDivisions(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuthorizationDivisionsRequest.postAuthorizationDivisions was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationrole": {
    "operationId": "postauthorizationrole",
    "functionName": "postAuthorizationRole",
    "signature": "postAuthorizationRole(roleId, body, subjectType)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SubjectDivisions",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet body: SubjectDivisions = new SubjectDivisions(...) // Subjects and Divisions\nlet subjectType: String = \"\" // what the type of the subjects are (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n\n// Bulk-grant subjects and divisions with an organization role.\nPostAuthorizationRoleRequest.postAuthorizationRole(roleId: roleId, body: body, subjectType: subjectType) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationRoleRequest.postAuthorizationRole was successful\")\n    }\n}"
  },
  "postauthorizationrolecomparedefaultrightroleid": {
    "operationId": "postauthorizationrolecomparedefaultrightroleid",
    "functionName": "postAuthorizationRoleComparedefaultRightRoleId",
    "signature": "postAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)",
    "parameters": [
      {
        "name": "leftRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "rightRoleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainOrganizationRole",
        "required": "true"
      }
    ],
    "return": "DomainOrgRoleDifference",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet leftRoleId: String = \"\" // Left Role ID\nlet rightRoleId: String = \"\" // Right Role id\nlet body: DomainOrganizationRole = new DomainOrganizationRole(...) // Organization role\n\n// Get an unsaved org role to default role comparison\nPostAuthorizationRoleComparedefaultRightRoleIdRequest.postAuthorizationRoleComparedefaultRightRoleId(leftRoleId: leftRoleId, rightRoleId: rightRoleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuthorizationRoleComparedefaultRightRoleIdRequest.postAuthorizationRoleComparedefaultRightRoleId was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationroles": {
    "operationId": "postauthorizationroles",
    "functionName": "postAuthorizationRoles",
    "signature": "postAuthorizationRoles(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DomainOrganizationRoleCreate",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DomainOrganizationRoleCreate = new DomainOrganizationRoleCreate(...) // Organization role\n\n// Create an organization role.\nPostAuthorizationRolesRequest.postAuthorizationRoles(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuthorizationRolesRequest.postAuthorizationRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationrolesdefault": {
    "operationId": "postauthorizationrolesdefault",
    "functionName": "postAuthorizationRolesDefault",
    "signature": "postAuthorizationRolesDefault(force)",
    "parameters": [
      {
        "name": "force",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet force: Bool = true // Restore default roles\n\n// Restores all default roles\nPostAuthorizationRolesDefaultRequest.postAuthorizationRolesDefault(force: force) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostAuthorizationRolesDefaultRequest.postAuthorizationRolesDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "postauthorizationsubjectbulkadd": {
    "operationId": "postauthorizationsubjectbulkadd",
    "functionName": "postAuthorizationSubjectBulkadd",
    "signature": "postAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoleDivisionGrants",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet body: RoleDivisionGrants = new RoleDivisionGrants(...) // Pairs of role and division IDs\nlet subjectType: String = \"\" // what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n\n// Bulk-grant roles and divisions to a subject.\nPostAuthorizationSubjectBulkaddRequest.postAuthorizationSubjectBulkadd(subjectId: subjectId, body: body, subjectType: subjectType) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationSubjectBulkaddRequest.postAuthorizationSubjectBulkadd was successful\")\n    }\n}"
  },
  "postauthorizationsubjectbulkremove": {
    "operationId": "postauthorizationsubjectbulkremove",
    "functionName": "postAuthorizationSubjectBulkremove",
    "signature": "postAuthorizationSubjectBulkremove(subjectId, body)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoleDivisionGrants",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet body: RoleDivisionGrants = new RoleDivisionGrants(...) // Pairs of role and division IDs\n\n// Bulk-remove grants from a subject.\nPostAuthorizationSubjectBulkremoveRequest.postAuthorizationSubjectBulkremove(subjectId: subjectId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationSubjectBulkremoveRequest.postAuthorizationSubjectBulkremove was successful\")\n    }\n}"
  },
  "postauthorizationsubjectbulkreplace": {
    "operationId": "postauthorizationsubjectbulkreplace",
    "functionName": "postAuthorizationSubjectBulkreplace",
    "signature": "postAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoleDivisionGrants",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet body: RoleDivisionGrants = new RoleDivisionGrants(...) // Pairs of role and division IDs\nlet subjectType: String = \"\" // what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT)\n\n// Replace subject's roles and divisions with the exact list supplied in the request.\nPostAuthorizationSubjectBulkreplaceRequest.postAuthorizationSubjectBulkreplace(subjectId: subjectId, body: body, subjectType: subjectType) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationSubjectBulkreplaceRequest.postAuthorizationSubjectBulkreplace was successful\")\n    }\n}"
  },
  "postauthorizationsubjectdivisionrole": {
    "operationId": "postauthorizationsubjectdivisionrole",
    "functionName": "postAuthorizationSubjectDivisionRole",
    "signature": "postAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
    "parameters": [
      {
        "name": "subjectId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "subjectType",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet subjectId: String = \"\" // Subject ID (user or group)\nlet divisionId: String = \"\" // the id of the division to which to make the grant\nlet roleId: String = \"\" // the id of the role to grant\nlet subjectType: String = \"\" // what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints)\n\n// Make a grant of a role in a division\nPostAuthorizationSubjectDivisionRoleRequest.postAuthorizationSubjectDivisionRole(subjectId: subjectId, divisionId: divisionId, roleId: roleId, subjectType: subjectType) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostAuthorizationSubjectDivisionRoleRequest.postAuthorizationSubjectDivisionRole was successful\")\n    }\n}"
  },
  "putauthorizationdivision": {
    "operationId": "putauthorizationdivision",
    "functionName": "putAuthorizationDivision",
    "signature": "putAuthorizationDivision(divisionId, body)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AuthzDivision",
        "required": "true"
      }
    ],
    "return": "AuthzDivision",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: String = \"\" // Division ID\nlet body: AuthzDivision = new AuthzDivision(...) // Updated division data\n\n// Update a division.\nPutAuthorizationDivisionRequest.putAuthorizationDivision(divisionId: divisionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAuthorizationDivisionRequest.putAuthorizationDivision was successful\")\n        dump(response)\n    }\n}"
  },
  "putauthorizationrole": {
    "operationId": "putauthorizationrole",
    "functionName": "putAuthorizationRole",
    "signature": "putAuthorizationRole(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainOrganizationRoleUpdate",
        "required": "true"
      }
    ],
    "return": "DomainOrganizationRole",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet body: DomainOrganizationRoleUpdate = new DomainOrganizationRoleUpdate(...) // Organization role\n\n// Update an organization role.\nPutAuthorizationRoleRequest.putAuthorizationRole(roleId: roleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAuthorizationRoleRequest.putAuthorizationRole was successful\")\n        dump(response)\n    }\n}"
  },
  "putauthorizationroleusersadd": {
    "operationId": "putauthorizationroleusersadd",
    "functionName": "putAuthorizationRoleUsersAdd",
    "signature": "putAuthorizationRoleUsersAdd(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet body: [String] = [\"\"] // List of user IDs\n\n// Sets the users for the role\nPutAuthorizationRoleUsersAddRequest.putAuthorizationRoleUsersAdd(roleId: roleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAuthorizationRoleUsersAddRequest.putAuthorizationRoleUsersAdd was successful\")\n        dump(response)\n    }\n}"
  },
  "putauthorizationroleusersremove": {
    "operationId": "putauthorizationroleusersremove",
    "functionName": "putAuthorizationRoleUsersRemove",
    "signature": "putAuthorizationRoleUsersRemove(roleId, body)",
    "parameters": [
      {
        "name": "roleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet roleId: String = \"\" // Role ID\nlet body: [String] = [\"\"] // List of user IDs\n\n// Removes the users from the role\nPutAuthorizationRoleUsersRemoveRequest.putAuthorizationRoleUsersRemove(roleId: roleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAuthorizationRoleUsersRemoveRequest.putAuthorizationRoleUsersRemove was successful\")\n        dump(response)\n    }\n}"
  },
  "putauthorizationrolesdefault": {
    "operationId": "putauthorizationrolesdefault",
    "functionName": "putAuthorizationRolesDefault",
    "signature": "putAuthorizationRolesDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[DomainOrganizationRole]",
        "required": "true"
      }
    ],
    "return": "OrganizationRoleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [DomainOrganizationRole] = [new DomainOrganizationRole(...)] // Organization roles list\n\n// Restore specified default roles\nPutAuthorizationRolesDefaultRequest.putAuthorizationRolesDefault(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutAuthorizationRolesDefaultRequest.putAuthorizationRolesDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserroles": {
    "operationId": "putuserroles",
    "functionName": "putUserRoles",
    "signature": "putUserRoles(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [String] = [\"\"] // List of roles\n\n// Sets the user's roles\nPutUserRolesRequest.putUserRoles(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserRolesRequest.putUserRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "getbillingreportsbillableusage": {
    "operationId": "getbillingreportsbillableusage",
    "functionName": "getBillingReportsBillableusage",
    "signature": "getBillingReportsBillableusage(startDate, endDate)",
    "parameters": [
      {
        "name": "startDate",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endDate",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "BillingUsageReport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startDate: Date = new Date(...) // The period start date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endDate: Date = new Date(...) // The period end date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n\n// Get a report of the billable license usages\nGetBillingReportsBillableusageRequest.getBillingReportsBillableusage(startDate: startDate, endDate: endDate) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetBillingReportsBillableusageRequest.getBillingReportsBillableusage was successful\")\n        dump(response)\n    }\n}"
  },
  "getbillingtrusteebillingoverviewtrustororgid": {
    "operationId": "getbillingtrusteebillingoverviewtrustororgid",
    "functionName": "getBillingTrusteebillingoverviewTrustorOrgId",
    "signature": "getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, billingPeriodIndex)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "billingPeriodIndex",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrusteeBillingOverview",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // The organization ID of the trustor (customer) organization.\nlet billingPeriodIndex: Int = 0 // 0 for active period (overview data may change until period closes). 1 for prior completed billing period. 2 for two billing cycles prior, and so on.\n\n// Get the billing overview for an organization that is managed by a partner.\nGetBillingTrusteebillingoverviewTrustorOrgIdRequest.getBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId: trustorOrgId, billingPeriodIndex: billingPeriodIndex) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetBillingTrusteebillingoverviewTrustorOrgIdRequest.getBillingTrusteebillingoverviewTrustorOrgId was successful\")\n        dump(response)\n    }\n}"
  },
  "getchatsettings": {
    "operationId": "getchatsettings",
    "functionName": "getChatSettings",
    "signature": "getChatSettings()",
    "return": "ChatSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Chat Settings.\nGetChatSettingsRequest.getChatSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetChatSettingsRequest.getChatSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "patchchatsettings": {
    "operationId": "patchchatsettings",
    "functionName": "patchChatSettings",
    "signature": "patchChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ChatSettings",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ChatSettings = new ChatSettings(...) // Chat\n\n// Patch Chat Settings.\nPatchChatSettingsRequest.patchChatSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchChatSettingsRequest.patchChatSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "putchatsettings": {
    "operationId": "putchatsettings",
    "functionName": "putChatSettings",
    "signature": "putChatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ChatSettings",
        "required": "true"
      }
    ],
    "return": "ChatSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ChatSettings = new ChatSettings(...) // Chat\n\n// Update Chat Settings.\nPutChatSettingsRequest.putChatSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutChatSettingsRequest.putChatSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "deletecoachingappointment": {
    "operationId": "deletecoachingappointment",
    "functionName": "deleteCoachingAppointment",
    "signature": "deleteCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentReference",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\n\n// Delete an existing appointment\nDeleteCoachingAppointmentRequest.deleteCoachingAppointment(appointmentId: appointmentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteCoachingAppointmentRequest.deleteCoachingAppointment was successful\")\n        dump(response)\n    }\n}"
  },
  "deletecoachingappointmentannotation": {
    "operationId": "deletecoachingappointmentannotation",
    "functionName": "deleteCoachingAppointmentAnnotation",
    "signature": "deleteCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet annotationId: String = \"\" // The ID of the annotation.\n\n// Delete an existing annotation\nDeleteCoachingAppointmentAnnotationRequest.deleteCoachingAppointmentAnnotation(appointmentId: appointmentId, annotationId: annotationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteCoachingAppointmentAnnotationRequest.deleteCoachingAppointmentAnnotation was successful\")\n    }\n}"
  },
  "getcoachingappointment": {
    "operationId": "getcoachingappointment",
    "functionName": "getCoachingAppointment",
    "signature": "getCoachingAppointment(appointmentId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\n\n// Retrieve an appointment\nGetCoachingAppointmentRequest.getCoachingAppointment(appointmentId: appointmentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentRequest.getCoachingAppointment was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingappointmentannotation": {
    "operationId": "getcoachingappointmentannotation",
    "functionName": "getCoachingAppointmentAnnotation",
    "signature": "getCoachingAppointmentAnnotation(appointmentId, annotationId)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet annotationId: String = \"\" // The ID of the annotation.\n\n// Retrieve an annotation.\nGetCoachingAppointmentAnnotationRequest.getCoachingAppointmentAnnotation(appointmentId: appointmentId, annotationId: annotationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentAnnotationRequest.getCoachingAppointmentAnnotation was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingappointmentannotations": {
    "operationId": "getcoachingappointmentannotations",
    "functionName": "getCoachingAppointmentAnnotations",
    "signature": "getCoachingAppointmentAnnotations(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "CoachingAnnotationList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a list of annotations.\nGetCoachingAppointmentAnnotationsRequest.getCoachingAppointmentAnnotations(appointmentId: appointmentId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentAnnotationsRequest.getCoachingAppointmentAnnotations was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingappointmentstatuses": {
    "operationId": "getcoachingappointmentstatuses",
    "functionName": "getCoachingAppointmentStatuses",
    "signature": "getCoachingAppointmentStatuses(appointmentId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentStatusResponseList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get the list of status changes for a coaching appointment.\nGetCoachingAppointmentStatusesRequest.getCoachingAppointmentStatuses(appointmentId: appointmentId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentStatusesRequest.getCoachingAppointmentStatuses was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingappointments": {
    "operationId": "getcoachingappointments",
    "functionName": "getCoachingAppointments",
    "signature": "getCoachingAppointments(userIds, interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "userIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userIds: [String] = [\"\"] // The user IDs for which to retrieve appointments\nlet interval: String = \"\" // Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet statuses: [String] = [\"\"] // Appointment Statuses to filter by\nlet facilitatorIds: [String] = [\"\"] // The facilitator IDs for which to retrieve appointments\nlet sortOrder: GetCoachingAppointmentsRequest.SortOrder_getCoachingAppointments = GetCoachingAppointmentsRequest.SortOrder_getCoachingAppointments.enummember // Sort (by due date) either Asc or Desc\nlet relationships: [String] = [\"\"] // Relationships to filter by\nlet completionInterval: String = \"\" // Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetCoachingAppointmentsRequest.Overdue_getCoachingAppointments = GetCoachingAppointmentsRequest.Overdue_getCoachingAppointments.enummember // Overdue status to filter by\nlet intervalCondition: GetCoachingAppointmentsRequest.IntervalCondition_getCoachingAppointments = GetCoachingAppointmentsRequest.IntervalCondition_getCoachingAppointments.enummember // Filter condition for interval\n\n// Get appointments for users and optional date range\nGetCoachingAppointmentsRequest.getCoachingAppointments(userIds: userIds, interval: interval, pageNumber: pageNumber, pageSize: pageSize, statuses: statuses, facilitatorIds: facilitatorIds, sortOrder: sortOrder, relationships: relationships, completionInterval: completionInterval, overdue: overdue, intervalCondition: intervalCondition) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentsRequest.getCoachingAppointments was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingappointmentsme": {
    "operationId": "getcoachingappointmentsme",
    "functionName": "getCoachingAppointmentsMe",
    "signature": "getCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
    "parameters": [
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "facilitatorIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "relationships",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "intervalCondition",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CoachingAppointmentResponseList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet interval: String = \"\" // Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet statuses: [String] = [\"\"] // Appointment Statuses to filter by\nlet facilitatorIds: [String] = [\"\"] // The facilitator IDs for which to retrieve appointments\nlet sortOrder: GetCoachingAppointmentsMeRequest.SortOrder_getCoachingAppointmentsMe = GetCoachingAppointmentsMeRequest.SortOrder_getCoachingAppointmentsMe.enummember // Sort (by due date) either Asc or Desc\nlet relationships: [String] = [\"\"] // Relationships to filter by\nlet completionInterval: String = \"\" // Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetCoachingAppointmentsMeRequest.Overdue_getCoachingAppointmentsMe = GetCoachingAppointmentsMeRequest.Overdue_getCoachingAppointmentsMe.enummember // Overdue status to filter by\nlet intervalCondition: GetCoachingAppointmentsMeRequest.IntervalCondition_getCoachingAppointmentsMe = GetCoachingAppointmentsMeRequest.IntervalCondition_getCoachingAppointmentsMe.enummember // Filter condition for interval\n\n// Get my appointments for a given date range\nGetCoachingAppointmentsMeRequest.getCoachingAppointmentsMe(interval: interval, pageNumber: pageNumber, pageSize: pageSize, statuses: statuses, facilitatorIds: facilitatorIds, sortOrder: sortOrder, relationships: relationships, completionInterval: completionInterval, overdue: overdue, intervalCondition: intervalCondition) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingAppointmentsMeRequest.getCoachingAppointmentsMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingnotification": {
    "operationId": "getcoachingnotification",
    "functionName": "getCoachingNotification",
    "signature": "getCoachingNotification(notificationId, expand)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotification",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet notificationId: String = \"\" // The ID of the notification.\nlet expand: [String] = [\"\"] // Indicates a field in the response which should be expanded.\n\n// Get an existing notification\nGetCoachingNotificationRequest.getCoachingNotification(notificationId: notificationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingNotificationRequest.getCoachingNotification was successful\")\n        dump(response)\n    }\n}"
  },
  "getcoachingnotifications": {
    "operationId": "getcoachingnotifications",
    "functionName": "getCoachingNotifications",
    "signature": "getCoachingNotifications(pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CoachingNotificationList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet expand: [String] = [\"\"] // Indicates a field in the response which should be expanded.\n\n// Retrieve the list of your notifications.\nGetCoachingNotificationsRequest.getCoachingNotifications(pageNumber: pageNumber, pageSize: pageSize, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetCoachingNotificationsRequest.getCoachingNotifications was successful\")\n        dump(response)\n    }\n}"
  },
  "patchcoachingappointment": {
    "operationId": "patchcoachingappointment",
    "functionName": "patchCoachingAppointment",
    "signature": "patchCoachingAppointment(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateCoachingAppointmentRequest",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet body: UpdateCoachingAppointmentRequest = new UpdateCoachingAppointmentRequest(...) // The new version of the appointment\n\n// Update an existing appointment\nPatchCoachingAppointmentRequest.patchCoachingAppointment(appointmentId: appointmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchCoachingAppointmentRequest.patchCoachingAppointment was successful\")\n        dump(response)\n    }\n}"
  },
  "patchcoachingappointmentannotation": {
    "operationId": "patchcoachingappointmentannotation",
    "functionName": "patchCoachingAppointmentAnnotation",
    "signature": "patchCoachingAppointmentAnnotation(appointmentId, annotationId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CoachingAnnotation",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet annotationId: String = \"\" // The ID of the annotation.\nlet body: CoachingAnnotation = new CoachingAnnotation(...) // The new version of the annotation\n\n// Update an existing annotation.\nPatchCoachingAppointmentAnnotationRequest.patchCoachingAppointmentAnnotation(appointmentId: appointmentId, annotationId: annotationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchCoachingAppointmentAnnotationRequest.patchCoachingAppointmentAnnotation was successful\")\n        dump(response)\n    }\n}"
  },
  "patchcoachingappointmentstatus": {
    "operationId": "patchcoachingappointmentstatus",
    "functionName": "patchCoachingAppointmentStatus",
    "signature": "patchCoachingAppointmentStatus(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CoachingAppointmentStatusRequest",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet body: CoachingAppointmentStatusRequest = new CoachingAppointmentStatusRequest(...) // Updated status of the coaching appointment\n\n// Update the status of a coaching appointment\nPatchCoachingAppointmentStatusRequest.patchCoachingAppointmentStatus(appointmentId: appointmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchCoachingAppointmentStatusRequest.patchCoachingAppointmentStatus was successful\")\n        dump(response)\n    }\n}"
  },
  "patchcoachingnotification": {
    "operationId": "patchcoachingnotification",
    "functionName": "patchCoachingNotification",
    "signature": "patchCoachingNotification(notificationId, body)",
    "parameters": [
      {
        "name": "notificationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CoachingNotification",
        "required": "true"
      }
    ],
    "return": "CoachingNotification",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet notificationId: String = \"\" // The ID of the notification.\nlet body: CoachingNotification = new CoachingNotification(...) // Change the read state of a notification\n\n// Update an existing notification.\nPatchCoachingNotificationRequest.patchCoachingNotification(notificationId: notificationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchCoachingNotificationRequest.patchCoachingNotification was successful\")\n        dump(response)\n    }\n}"
  },
  "postcoachingappointmentannotations": {
    "operationId": "postcoachingappointmentannotations",
    "functionName": "postCoachingAppointmentAnnotations",
    "signature": "postCoachingAppointmentAnnotations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CoachingAnnotationCreateRequest",
        "required": "true"
      }
    ],
    "return": "CoachingAnnotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet body: CoachingAnnotationCreateRequest = new CoachingAnnotationCreateRequest(...) // The annotation to add\n\n// Create a new annotation.\nPostCoachingAppointmentAnnotationsRequest.postCoachingAppointmentAnnotations(appointmentId: appointmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCoachingAppointmentAnnotationsRequest.postCoachingAppointmentAnnotations was successful\")\n        dump(response)\n    }\n}"
  },
  "postcoachingappointmentconversations": {
    "operationId": "postcoachingappointmentconversations",
    "functionName": "postCoachingAppointmentConversations",
    "signature": "postCoachingAppointmentConversations(appointmentId, body)",
    "parameters": [
      {
        "name": "appointmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AddConversationRequest",
        "required": "true"
      }
    ],
    "return": "AddConversationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet appointmentId: String = \"\" // The ID of the coaching appointment.\nlet body: AddConversationRequest = new AddConversationRequest(...) // body\n\n// Add a conversation to an appointment\nPostCoachingAppointmentConversationsRequest.postCoachingAppointmentConversations(appointmentId: appointmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCoachingAppointmentConversationsRequest.postCoachingAppointmentConversations was successful\")\n        dump(response)\n    }\n}"
  },
  "postcoachingappointments": {
    "operationId": "postcoachingappointments",
    "functionName": "postCoachingAppointments",
    "signature": "postCoachingAppointments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateCoachingAppointmentRequest",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateCoachingAppointmentRequest = new CreateCoachingAppointmentRequest(...) // The appointment to add\n\n// Create a new appointment\nPostCoachingAppointmentsRequest.postCoachingAppointments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCoachingAppointmentsRequest.postCoachingAppointments was successful\")\n        dump(response)\n    }\n}"
  },
  "postcoachingappointmentsaggregatesquery": {
    "operationId": "postcoachingappointmentsaggregatesquery",
    "functionName": "postCoachingAppointmentsAggregatesQuery",
    "signature": "postCoachingAppointmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CoachingAppointmentAggregateRequest",
        "required": "true"
      }
    ],
    "return": "CoachingAppointmentAggregateResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CoachingAppointmentAggregateRequest = new CoachingAppointmentAggregateRequest(...) // Aggregate Request\n\n// Retrieve aggregated appointment data\nPostCoachingAppointmentsAggregatesQueryRequest.postCoachingAppointmentsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCoachingAppointmentsAggregatesQueryRequest.postCoachingAppointmentsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postcoachingscheduleslotsquery": {
    "operationId": "postcoachingscheduleslotsquery",
    "functionName": "postCoachingScheduleslotsQuery",
    "signature": "postCoachingScheduleslotsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CoachingSlotsRequest",
        "required": "true"
      }
    ],
    "return": "CoachingSlotsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CoachingSlotsRequest = new CoachingSlotsRequest(...) // The slot search request\n\n// Get list of possible slots where a coaching appointment can be scheduled.\nPostCoachingScheduleslotsQueryRequest.postCoachingScheduleslotsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCoachingScheduleslotsQueryRequest.postCoachingScheduleslotsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "deletecontentmanagementdocument": {
    "operationId": "deletecontentmanagementdocument",
    "functionName": "deleteContentmanagementDocument",
    "signature": "deleteContentmanagementDocument(documentId, _override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "_override",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet _override: Bool = true // Override any lock on the document\n\n// Delete a document.\nDeleteContentmanagementDocumentRequest.deleteContentmanagementDocument(documentId: documentId, _override: _override) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementDocumentRequest.deleteContentmanagementDocument was successful\")\n    }\n}"
  },
  "deletecontentmanagementshare": {
    "operationId": "deletecontentmanagementshare",
    "functionName": "deleteContentmanagementShare",
    "signature": "deleteContentmanagementShare(shareId)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet shareId: String = \"\" // Share ID\n\n// Deletes an existing share.\nDeleteContentmanagementShareRequest.deleteContentmanagementShare(shareId: shareId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementShareRequest.deleteContentmanagementShare was successful\")\n    }\n}"
  },
  "deletecontentmanagementstatusstatusid": {
    "operationId": "deletecontentmanagementstatusstatusid",
    "functionName": "deleteContentmanagementStatusStatusId",
    "signature": "deleteContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet statusId: String = \"\" // Status ID\n\n// Cancel the command for this status\nDeleteContentmanagementStatusStatusIdRequest.deleteContentmanagementStatusStatusId(statusId: statusId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementStatusStatusIdRequest.deleteContentmanagementStatusStatusId was successful\")\n    }\n}"
  },
  "deletecontentmanagementworkspace": {
    "operationId": "deletecontentmanagementworkspace",
    "functionName": "deleteContentmanagementWorkspace",
    "signature": "deleteContentmanagementWorkspace(workspaceId, moveChildrenToWorkspaceId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "moveChildrenToWorkspaceId",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet moveChildrenToWorkspaceId: String = \"\" // New location for objects in deleted workspace.\n\n// Delete a workspace\nDeleteContentmanagementWorkspaceRequest.deleteContentmanagementWorkspace(workspaceId: workspaceId, moveChildrenToWorkspaceId: moveChildrenToWorkspaceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementWorkspaceRequest.deleteContentmanagementWorkspace was successful\")\n    }\n}"
  },
  "deletecontentmanagementworkspacemember": {
    "operationId": "deletecontentmanagementworkspacemember",
    "functionName": "deleteContentmanagementWorkspaceMember",
    "signature": "deleteContentmanagementWorkspaceMember(workspaceId, memberId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet memberId: String = \"\" // Member ID\n\n// Delete a member from a workspace\nDeleteContentmanagementWorkspaceMemberRequest.deleteContentmanagementWorkspaceMember(workspaceId: workspaceId, memberId: memberId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementWorkspaceMemberRequest.deleteContentmanagementWorkspaceMember was successful\")\n    }\n}"
  },
  "deletecontentmanagementworkspacetagvalue": {
    "operationId": "deletecontentmanagementworkspacetagvalue",
    "functionName": "deleteContentmanagementWorkspaceTagvalue",
    "signature": "deleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet tagId: String = \"\" // Tag ID\n\n// Delete workspace tag\nDeleteContentmanagementWorkspaceTagvalueRequest.deleteContentmanagementWorkspaceTagvalue(workspaceId: workspaceId, tagId: tagId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteContentmanagementWorkspaceTagvalueRequest.deleteContentmanagementWorkspaceTagvalue was successful\")\n    }\n}"
  },
  "getcontentmanagementdocument": {
    "operationId": "getcontentmanagementdocument",
    "functionName": "getContentmanagementDocument",
    "signature": "getContentmanagementDocument(documentId, expand)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a document.\nGetContentmanagementDocumentRequest.getContentmanagementDocument(documentId: documentId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementDocumentRequest.getContentmanagementDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementdocumentaudits": {
    "operationId": "getcontentmanagementdocumentaudits",
    "functionName": "getContentmanagementDocumentAudits",
    "signature": "getContentmanagementDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "transactionFilter",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentAuditEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet transactionFilter: String = \"\" // Transaction filter\nlet level: String = \"\" // level\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\n\n// Get a list of audits for a document.\nGetContentmanagementDocumentAuditsRequest.getContentmanagementDocumentAudits(documentId: documentId, pageSize: pageSize, pageNumber: pageNumber, transactionFilter: transactionFilter, level: level, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementDocumentAuditsRequest.getContentmanagementDocumentAudits was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementdocumentcontent": {
    "operationId": "getcontentmanagementdocumentcontent",
    "functionName": "getContentmanagementDocumentContent",
    "signature": "getContentmanagementDocumentContent(documentId, disposition, contentType)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet disposition: GetContentmanagementDocumentContentRequest.Disposition_getContentmanagementDocumentContent = GetContentmanagementDocumentContentRequest.Disposition_getContentmanagementDocumentContent.enummember // Request how the content will be downloaded: a file attachment or inline. Default is attachment.\nlet contentType: String = \"\" // The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\n\n// Download a document.\nGetContentmanagementDocumentContentRequest.getContentmanagementDocumentContent(documentId: documentId, disposition: disposition, contentType: contentType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementDocumentContentRequest.getContentmanagementDocumentContent was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementdocuments": {
    "operationId": "getcontentmanagementdocuments",
    "functionName": "getContentmanagementDocuments",
    "signature": "getContentmanagementDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet name: String = \"\" // Name\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // name or dateCreated\nlet sortOrder: String = \"\" // ascending or descending\n\n// Get a list of documents.\nGetContentmanagementDocumentsRequest.getContentmanagementDocuments(workspaceId: workspaceId, name: name, expand: expand, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementDocumentsRequest.getContentmanagementDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementquery": {
    "operationId": "getcontentmanagementquery",
    "functionName": "getContentmanagementQuery",
    "signature": "getContentmanagementQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "queryPhrase",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queryPhrase: String = \"\" // Phrase tokens are ANDed together over all searchable fields\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // name or dateCreated\nlet sortOrder: String = \"\" // ascending or descending\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Query content\nGetContentmanagementQueryRequest.getContentmanagementQuery(queryPhrase: queryPhrase, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementQueryRequest.getContentmanagementQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementsecurityprofile": {
    "operationId": "getcontentmanagementsecurityprofile",
    "functionName": "getContentmanagementSecurityprofile",
    "signature": "getContentmanagementSecurityprofile(securityProfileId)",
    "parameters": [
      {
        "name": "securityProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecurityProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet securityProfileId: String = \"\" // Security Profile Id\n\n// Get a Security Profile\nGetContentmanagementSecurityprofileRequest.getContentmanagementSecurityprofile(securityProfileId: securityProfileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementSecurityprofileRequest.getContentmanagementSecurityprofile was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementsecurityprofiles": {
    "operationId": "getcontentmanagementsecurityprofiles",
    "functionName": "getContentmanagementSecurityprofiles",
    "signature": "getContentmanagementSecurityprofiles()",
    "return": "SecurityProfileEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a List of Security Profiles\nGetContentmanagementSecurityprofilesRequest.getContentmanagementSecurityprofiles() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementSecurityprofilesRequest.getContentmanagementSecurityprofiles was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementshare": {
    "operationId": "getcontentmanagementshare",
    "functionName": "getContentmanagementShare",
    "signature": "getContentmanagementShare(shareId, expand)",
    "parameters": [
      {
        "name": "shareId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Share",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet shareId: String = \"\" // Share ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Retrieve details about an existing share.\nGetContentmanagementShareRequest.getContentmanagementShare(shareId: shareId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementShareRequest.getContentmanagementShare was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementsharedsharedid": {
    "operationId": "getcontentmanagementsharedsharedid",
    "functionName": "getContentmanagementSharedSharedId",
    "signature": "getContentmanagementSharedSharedId(sharedId, redirect, disposition, contentType, expand)",
    "parameters": [
      {
        "name": "sharedId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "redirect",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "disposition",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contentType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SharedResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sharedId: String = \"\" // Shared ID\nlet redirect: Bool = true // Turn on or off redirect\nlet disposition: GetContentmanagementSharedSharedIdRequest.Disposition_getContentmanagementSharedSharedId = GetContentmanagementSharedSharedIdRequest.Disposition_getContentmanagementSharedSharedId.enummember // Request how the share content will be downloaded: attached as a file or inline. Default is attachment.\nlet contentType: String = \"\" // The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav\nlet expand: GetContentmanagementSharedSharedIdRequest.Expand_getContentmanagementSharedSharedId = GetContentmanagementSharedSharedIdRequest.Expand_getContentmanagementSharedSharedId.enummember // Expand some document fields\n\n// Get shared documents. Securely download a shared document.\nGetContentmanagementSharedSharedIdRequest.getContentmanagementSharedSharedId(sharedId: sharedId, redirect: redirect, disposition: disposition, contentType: contentType, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementSharedSharedIdRequest.getContentmanagementSharedSharedId was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementshares": {
    "operationId": "getcontentmanagementshares",
    "functionName": "getContentmanagementShares",
    "signature": "getContentmanagementShares(entityId, expand, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "entityId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ShareEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet entityId: String = \"\" // Filters the shares returned to only the entity specified by the value of this parameter.\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Gets a list of shares.  You must specify at least one filter (e.g. entityId).\nGetContentmanagementSharesRequest.getContentmanagementShares(entityId: entityId, expand: expand, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementSharesRequest.getContentmanagementShares was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementstatus": {
    "operationId": "getcontentmanagementstatus",
    "functionName": "getContentmanagementStatus",
    "signature": "getContentmanagementStatus(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "CommandStatusEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of statuses for pending operations\nGetContentmanagementStatusRequest.getContentmanagementStatus(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementStatusRequest.getContentmanagementStatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementstatusstatusid": {
    "operationId": "getcontentmanagementstatusstatusid",
    "functionName": "getContentmanagementStatusStatusId",
    "signature": "getContentmanagementStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CommandStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet statusId: String = \"\" // Status ID\n\n// Get a status.\nGetContentmanagementStatusStatusIdRequest.getContentmanagementStatusStatusId(statusId: statusId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementStatusStatusIdRequest.getContentmanagementStatusStatusId was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementusage": {
    "operationId": "getcontentmanagementusage",
    "functionName": "getContentmanagementUsage",
    "signature": "getContentmanagementUsage()",
    "return": "Usage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get usage details.\nGetContentmanagementUsageRequest.getContentmanagementUsage() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementUsageRequest.getContentmanagementUsage was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspace": {
    "operationId": "getcontentmanagementworkspace",
    "functionName": "getContentmanagementWorkspace",
    "signature": "getContentmanagementWorkspace(workspaceId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Workspace",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a workspace.\nGetContentmanagementWorkspaceRequest.getContentmanagementWorkspace(workspaceId: workspaceId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceRequest.getContentmanagementWorkspace was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspacedocuments": {
    "operationId": "getcontentmanagementworkspacedocuments",
    "functionName": "getContentmanagementWorkspaceDocuments",
    "signature": "getContentmanagementWorkspaceDocuments(workspaceId, expand, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DocumentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // name or dateCreated\nlet sortOrder: String = \"\" // ascending or descending\n\n// Get a list of documents.\nGetContentmanagementWorkspaceDocumentsRequest.getContentmanagementWorkspaceDocuments(workspaceId: workspaceId, expand: expand, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceDocumentsRequest.getContentmanagementWorkspaceDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspacemember": {
    "operationId": "getcontentmanagementworkspacemember",
    "functionName": "getContentmanagementWorkspaceMember",
    "signature": "getContentmanagementWorkspaceMember(workspaceId, memberId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMember",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet memberId: String = \"\" // Member ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a workspace member\nGetContentmanagementWorkspaceMemberRequest.getContentmanagementWorkspaceMember(workspaceId: workspaceId, memberId: memberId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceMemberRequest.getContentmanagementWorkspaceMember was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspacemembers": {
    "operationId": "getcontentmanagementworkspacemembers",
    "functionName": "getContentmanagementWorkspaceMembers",
    "signature": "getContentmanagementWorkspaceMembers(workspaceId, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceMemberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a list workspace members\nGetContentmanagementWorkspaceMembersRequest.getContentmanagementWorkspaceMembers(workspaceId: workspaceId, pageSize: pageSize, pageNumber: pageNumber, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceMembersRequest.getContentmanagementWorkspaceMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspacetagvalue": {
    "operationId": "getcontentmanagementworkspacetagvalue",
    "functionName": "getContentmanagementWorkspaceTagvalue",
    "signature": "getContentmanagementWorkspaceTagvalue(workspaceId, tagId, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet tagId: String = \"\" // Tag ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a workspace tag\nGetContentmanagementWorkspaceTagvalueRequest.getContentmanagementWorkspaceTagvalue(workspaceId: workspaceId, tagId: tagId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceTagvalueRequest.getContentmanagementWorkspaceTagvalue was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspacetagvalues": {
    "operationId": "getcontentmanagementworkspacetagvalues",
    "functionName": "getContentmanagementWorkspaceTagvalues",
    "signature": "getContentmanagementWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "value",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet value: String = \"\" // filter the list of tags returned\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a list of workspace tags\nGetContentmanagementWorkspaceTagvaluesRequest.getContentmanagementWorkspaceTagvalues(workspaceId: workspaceId, value: value, pageSize: pageSize, pageNumber: pageNumber, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspaceTagvaluesRequest.getContentmanagementWorkspaceTagvalues was successful\")\n        dump(response)\n    }\n}"
  },
  "getcontentmanagementworkspaces": {
    "operationId": "getcontentmanagementworkspaces",
    "functionName": "getContentmanagementWorkspaces",
    "signature": "getContentmanagementWorkspaces(pageSize, pageNumber, access, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "access",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkspaceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet access: [String] = [\"\"] // Requested access level.\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a list of workspaces.\nGetContentmanagementWorkspacesRequest.getContentmanagementWorkspaces(pageSize: pageSize, pageNumber: pageNumber, access: access, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetContentmanagementWorkspacesRequest.getContentmanagementWorkspaces was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementauditquery": {
    "operationId": "postcontentmanagementauditquery",
    "functionName": "postContentmanagementAuditquery",
    "signature": "postContentmanagementAuditquery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ContentQueryRequest",
        "required": "true"
      }
    ],
    "return": "QueryResults",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ContentQueryRequest = new ContentQueryRequest(...) // Allows for a filtered query returning facet information\n\n// Query audits\nPostContentmanagementAuditqueryRequest.postContentmanagementAuditquery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementAuditqueryRequest.postContentmanagementAuditquery was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementdocument": {
    "operationId": "postcontentmanagementdocument",
    "functionName": "postContentmanagementDocument",
    "signature": "postContentmanagementDocument(documentId, body, expand, _override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DocumentUpdate",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_override",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet body: DocumentUpdate = new DocumentUpdate(...) // Document\nlet expand: PostContentmanagementDocumentRequest.Expand_postContentmanagementDocument = PostContentmanagementDocumentRequest.Expand_postContentmanagementDocument.enummember // Expand some document fields\nlet _override: Bool = true // Override any lock on the document\n\n// Update a document.\nPostContentmanagementDocumentRequest.postContentmanagementDocument(documentId: documentId, body: body, expand: expand, _override: _override) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementDocumentRequest.postContentmanagementDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementdocumentcontent": {
    "operationId": "postcontentmanagementdocumentcontent",
    "functionName": "postContentmanagementDocumentContent",
    "signature": "postContentmanagementDocumentContent(documentId, body, _override)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ReplaceRequest",
        "required": "true"
      },
      {
        "name": "_override",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ReplaceResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet body: ReplaceRequest = new ReplaceRequest(...) // Replace Request\nlet _override: Bool = true // Override any lock on the document\n\n// Replace the contents of a document.\nPostContentmanagementDocumentContentRequest.postContentmanagementDocumentContent(documentId: documentId, body: body, _override: _override) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementDocumentContentRequest.postContentmanagementDocumentContent was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementdocuments": {
    "operationId": "postcontentmanagementdocuments",
    "functionName": "postContentmanagementDocuments",
    "signature": "postContentmanagementDocuments(body, copySource, moveSource, _override)",
    "parameters": [
      {
        "name": "body",
        "type": "DocumentUpload",
        "required": "true"
      },
      {
        "name": "copySource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "moveSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_override",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Document",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DocumentUpload = new DocumentUpload(...) // Document\nlet copySource: String = \"\" // Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source.\nlet moveSource: String = \"\" // Move a document to a new workspace. Provide a document ID as the move source.\nlet _override: Bool = true // Override any lock on the source document\n\n// Add a document.\nPostContentmanagementDocumentsRequest.postContentmanagementDocuments(body: body, copySource: copySource, moveSource: moveSource, _override: _override) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementDocumentsRequest.postContentmanagementDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementquery": {
    "operationId": "postcontentmanagementquery",
    "functionName": "postContentmanagementQuery",
    "signature": "postContentmanagementQuery(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "QueryRequest",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueryResults",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: QueryRequest = new QueryRequest(...) // Allows for a filtered query returning facet information\nlet expand: PostContentmanagementQueryRequest.Expand_postContentmanagementQuery = PostContentmanagementQueryRequest.Expand_postContentmanagementQuery.enummember // Expand some document fields\n\n// Query content\nPostContentmanagementQueryRequest.postContentmanagementQuery(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementQueryRequest.postContentmanagementQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementshares": {
    "operationId": "postcontentmanagementshares",
    "functionName": "postContentmanagementShares",
    "signature": "postContentmanagementShares(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateShareRequest",
        "required": "true"
      }
    ],
    "return": "CreateShareResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateShareRequest = new CreateShareRequest(...) // CreateShareRequest - entity id and type and a single member or list of members are required\n\n// Creates a new share or updates an existing share if the entity has already been shared\nPostContentmanagementSharesRequest.postContentmanagementShares(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementSharesRequest.postContentmanagementShares was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementworkspacetagvalues": {
    "operationId": "postcontentmanagementworkspacetagvalues",
    "functionName": "postContentmanagementWorkspaceTagvalues",
    "signature": "postContentmanagementWorkspaceTagvalues(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TagValue",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet body: TagValue = new TagValue(...) // tag\n\n// Create a workspace tag\nPostContentmanagementWorkspaceTagvaluesRequest.postContentmanagementWorkspaceTagvalues(workspaceId: workspaceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementWorkspaceTagvaluesRequest.postContentmanagementWorkspaceTagvalues was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementworkspacetagvaluesquery": {
    "operationId": "postcontentmanagementworkspacetagvaluesquery",
    "functionName": "postContentmanagementWorkspaceTagvaluesQuery",
    "signature": "postContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, expand)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TagQueryRequest",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TagValueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet body: TagQueryRequest = new TagQueryRequest(...) // query\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Perform a prefix query on tags in the workspace\nPostContentmanagementWorkspaceTagvaluesQueryRequest.postContentmanagementWorkspaceTagvaluesQuery(workspaceId: workspaceId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementWorkspaceTagvaluesQueryRequest.postContentmanagementWorkspaceTagvaluesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postcontentmanagementworkspaces": {
    "operationId": "postcontentmanagementworkspaces",
    "functionName": "postContentmanagementWorkspaces",
    "signature": "postContentmanagementWorkspaces(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WorkspaceCreate",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WorkspaceCreate = new WorkspaceCreate(...) // Workspace\n\n// Create a group workspace\nPostContentmanagementWorkspacesRequest.postContentmanagementWorkspaces(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostContentmanagementWorkspacesRequest.postContentmanagementWorkspaces was successful\")\n        dump(response)\n    }\n}"
  },
  "putcontentmanagementworkspace": {
    "operationId": "putcontentmanagementworkspace",
    "functionName": "putContentmanagementWorkspace",
    "signature": "putContentmanagementWorkspace(workspaceId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Workspace",
        "required": "true"
      }
    ],
    "return": "Workspace",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet body: Workspace = new Workspace(...) // Workspace\n\n// Update a workspace\nPutContentmanagementWorkspaceRequest.putContentmanagementWorkspace(workspaceId: workspaceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutContentmanagementWorkspaceRequest.putContentmanagementWorkspace was successful\")\n        dump(response)\n    }\n}"
  },
  "putcontentmanagementworkspacemember": {
    "operationId": "putcontentmanagementworkspacemember",
    "functionName": "putContentmanagementWorkspaceMember",
    "signature": "putContentmanagementWorkspaceMember(workspaceId, memberId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WorkspaceMember",
        "required": "true"
      }
    ],
    "return": "WorkspaceMember",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet memberId: String = \"\" // Member ID\nlet body: WorkspaceMember = new WorkspaceMember(...) // Workspace Member\n\n// Add a member to a workspace\nPutContentmanagementWorkspaceMemberRequest.putContentmanagementWorkspaceMember(workspaceId: workspaceId, memberId: memberId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutContentmanagementWorkspaceMemberRequest.putContentmanagementWorkspaceMember was successful\")\n        dump(response)\n    }\n}"
  },
  "putcontentmanagementworkspacetagvalue": {
    "operationId": "putcontentmanagementworkspacetagvalue",
    "functionName": "putContentmanagementWorkspaceTagvalue",
    "signature": "putContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)",
    "parameters": [
      {
        "name": "workspaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "tagId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TagValue",
        "required": "true"
      }
    ],
    "return": "TagValue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workspaceId: String = \"\" // Workspace ID\nlet tagId: String = \"\" // Tag ID\nlet body: TagValue = new TagValue(...) // Workspace\n\n// Update a workspace tag. Will update all documents with the new tag value.\nPutContentmanagementWorkspaceTagvalueRequest.putContentmanagementWorkspaceTagvalue(workspaceId: workspaceId, tagId: tagId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutContentmanagementWorkspaceTagvalueRequest.putContentmanagementWorkspaceTagvalue was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteconversationparticipantcode": {
    "operationId": "deleteconversationparticipantcode",
    "functionName": "deleteConversationParticipantCode",
    "signature": "deleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "addCommunicationCode",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet addCommunicationCode: String = \"\" // addCommunicationCode\n\n// Delete a code used to add a communication to this participant\nDeleteConversationParticipantCodeRequest.deleteConversationParticipantCode(conversationId: conversationId, participantId: participantId, addCommunicationCode: addCommunicationCode) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationParticipantCodeRequest.deleteConversationParticipantCode was successful\")\n    }\n}"
  },
  "deleteconversationparticipantflaggedreason": {
    "operationId": "deleteconversationparticipantflaggedreason",
    "functionName": "deleteConversationParticipantFlaggedreason",
    "signature": "deleteConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\n\n// Remove flagged reason from conversation participant.\nDeleteConversationParticipantFlaggedreasonRequest.deleteConversationParticipantFlaggedreason(conversationId: conversationId, participantId: participantId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationParticipantFlaggedreasonRequest.deleteConversationParticipantFlaggedreason was successful\")\n    }\n}"
  },
  "deleteconversationscallparticipantconsult": {
    "operationId": "deleteconversationscallparticipantconsult",
    "functionName": "deleteConversationsCallParticipantConsult",
    "signature": "deleteConversationsCallParticipantConsult(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Cancel the transfer\nDeleteConversationsCallParticipantConsultRequest.deleteConversationsCallParticipantConsult(conversationId: conversationId, participantId: participantId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsCallParticipantConsultRequest.deleteConversationsCallParticipantConsult was successful\")\n    }\n}"
  },
  "deleteconversationsemailmessagesdraftattachment": {
    "operationId": "deleteconversationsemailmessagesdraftattachment",
    "functionName": "deleteConversationsEmailMessagesDraftAttachment",
    "signature": "deleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attachmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet attachmentId: String = \"\" // attachmentId\n\n// Delete attachment from draft\nDeleteConversationsEmailMessagesDraftAttachmentRequest.deleteConversationsEmailMessagesDraftAttachment(conversationId: conversationId, attachmentId: attachmentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsEmailMessagesDraftAttachmentRequest.deleteConversationsEmailMessagesDraftAttachment was successful\")\n    }\n}"
  },
  "deleteconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\n\n// Delete a Facebook messaging integration\nDeleteConversationsMessagingIntegrationsFacebookIntegrationIdRequest.deleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: integrationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsMessagingIntegrationsFacebookIntegrationIdRequest.deleteConversationsMessagingIntegrationsFacebookIntegrationId was successful\")\n    }\n}"
  },
  "deleteconversationsmessagingintegrationslineintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationslineintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\n\n// Delete a LINE messenger integration\nDeleteConversationsMessagingIntegrationsLineIntegrationIdRequest.deleteConversationsMessagingIntegrationsLineIntegrationId(integrationId: integrationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsMessagingIntegrationsLineIntegrationIdRequest.deleteConversationsMessagingIntegrationsLineIntegrationId was successful\")\n    }\n}"
  },
  "deleteconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationsopenintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\n\n// Delete an Open messaging integration\nDeleteConversationsMessagingIntegrationsOpenIntegrationIdRequest.deleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId: integrationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsMessagingIntegrationsOpenIntegrationIdRequest.deleteConversationsMessagingIntegrationsOpenIntegrationId was successful\")\n    }\n}"
  },
  "deleteconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\n\n// Delete a Twitter messaging integration\nDeleteConversationsMessagingIntegrationsTwitterIntegrationIdRequest.deleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId: integrationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsMessagingIntegrationsTwitterIntegrationIdRequest.deleteConversationsMessagingIntegrationsTwitterIntegrationId was successful\")\n    }\n}"
  },
  "deleteconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "deleteconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\n\n// Delete a WhatsApp messaging integration\nDeleteConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.deleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: integrationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.deleteConversationsMessagingIntegrationsWhatsappIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "deleteconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\n\n// Delete a supported content profile\nDeleteConversationsMessagingSupportedcontentSupportedContentIdRequest.deleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationsMessagingSupportedcontentSupportedContentIdRequest.deleteConversationsMessagingSupportedcontentSupportedContentId was successful\")\n    }\n}"
  },
  "getconversation": {
    "operationId": "getconversation",
    "functionName": "getConversation",
    "signature": "getConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\n\n// Get conversation\nGetConversationRequest.getConversation(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRequest.getConversation was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationparticipantsecureivrsession": {
    "operationId": "getconversationparticipantsecureivrsession",
    "functionName": "getConversationParticipantSecureivrsession",
    "signature": "getConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "secureSessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSession",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet secureSessionId: String = \"\" // secure IVR session ID\n\n// Fetch info on a secure session\nGetConversationParticipantSecureivrsessionRequest.getConversationParticipantSecureivrsession(conversationId: conversationId, participantId: participantId, secureSessionId: secureSessionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationParticipantSecureivrsessionRequest.getConversationParticipantSecureivrsession was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationparticipantsecureivrsessions": {
    "operationId": "getconversationparticipantsecureivrsessions",
    "functionName": "getConversationParticipantSecureivrsessions",
    "signature": "getConversationParticipantSecureivrsessions(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SecureSessionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\n\n// Get a list of secure sessions for this participant.\nGetConversationParticipantSecureivrsessionsRequest.getConversationParticipantSecureivrsessions(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationParticipantSecureivrsessionsRequest.getConversationParticipantSecureivrsessions was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationparticipantwrapup": {
    "operationId": "getconversationparticipantwrapup",
    "functionName": "getConversationParticipantWrapup",
    "signature": "getConversationParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationParticipantWrapupRequest.getConversationParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationParticipantWrapupRequest.getConversationParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationparticipantwrapupcodes": {
    "operationId": "getconversationparticipantwrapupcodes",
    "functionName": "getConversationParticipantWrapupcodes",
    "signature": "getConversationParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\n\n// Get list of wrapup codes for this conversation participant\nGetConversationParticipantWrapupcodesRequest.getConversationParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationParticipantWrapupcodesRequest.getConversationParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversations": {
    "operationId": "getconversations",
    "functionName": "getConversations",
    "signature": "getConversations(communicationType)",
    "parameters": [
      {
        "name": "communicationType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet communicationType: String = \"\" // Call or Chat communication filtering\n\n// Get active conversations for the logged in user\nGetConversationsRequest.getConversations(communicationType: communicationType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsRequest.getConversations was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscall": {
    "operationId": "getconversationscall",
    "functionName": "getConversationsCall",
    "signature": "getConversationsCall(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get call conversation\nGetConversationsCallRequest.getConversationsCall(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallRequest.getConversationsCall was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallparticipantwrapup": {
    "operationId": "getconversationscallparticipantwrapup",
    "functionName": "getConversationsCallParticipantWrapup",
    "signature": "getConversationsCallParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsCallParticipantWrapupRequest.getConversationsCallParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallParticipantWrapupRequest.getConversationsCallParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallparticipantwrapupcodes": {
    "operationId": "getconversationscallparticipantwrapupcodes",
    "functionName": "getConversationsCallParticipantWrapupcodes",
    "signature": "getConversationsCallParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsCallParticipantWrapupcodesRequest.getConversationsCallParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallParticipantWrapupcodesRequest.getConversationsCallParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallback": {
    "operationId": "getconversationscallback",
    "functionName": "getConversationsCallback",
    "signature": "getConversationsCallback(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallbackConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get callback conversation\nGetConversationsCallbackRequest.getConversationsCallback(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallbackRequest.getConversationsCallback was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallbackparticipantwrapup": {
    "operationId": "getconversationscallbackparticipantwrapup",
    "functionName": "getConversationsCallbackParticipantWrapup",
    "signature": "getConversationsCallbackParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsCallbackParticipantWrapupRequest.getConversationsCallbackParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallbackParticipantWrapupRequest.getConversationsCallbackParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallbackparticipantwrapupcodes": {
    "operationId": "getconversationscallbackparticipantwrapupcodes",
    "functionName": "getConversationsCallbackParticipantWrapupcodes",
    "signature": "getConversationsCallbackParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsCallbackParticipantWrapupcodesRequest.getConversationsCallbackParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallbackParticipantWrapupcodesRequest.getConversationsCallbackParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallbacks": {
    "operationId": "getconversationscallbacks",
    "functionName": "getConversationsCallbacks",
    "signature": "getConversationsCallbacks()",
    "return": "CallbackConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active callback conversations for the logged in user\nGetConversationsCallbacksRequest.getConversationsCallbacks() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallbacksRequest.getConversationsCallbacks was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscalls": {
    "operationId": "getconversationscalls",
    "functionName": "getConversationsCalls",
    "signature": "getConversationsCalls()",
    "return": "CallConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active call conversations for the logged in user\nGetConversationsCallsRequest.getConversationsCalls() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallsRequest.getConversationsCalls was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallshistory": {
    "operationId": "getconversationscallshistory",
    "functionName": "getConversationsCallsHistory",
    "signature": "getConversationsCallsHistory(pageSize, pageNumber, interval, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "CallHistoryConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size, maximum 50\nlet pageNumber: Int = 0 // Page number\nlet interval: String = \"\" // Interval string; format is ISO-8601. Separate start and end times with forward slash '/'\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get call history\nGetConversationsCallsHistoryRequest.getConversationsCallsHistory(pageSize: pageSize, pageNumber: pageNumber, interval: interval, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallsHistoryRequest.getConversationsCallsHistory was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscallsmaximumconferenceparties": {
    "operationId": "getconversationscallsmaximumconferenceparties",
    "functionName": "getConversationsCallsMaximumconferenceparties",
    "signature": "getConversationsCallsMaximumconferenceparties()",
    "return": "MaxParticipants",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the maximum number of participants that this user can have on a conference\nGetConversationsCallsMaximumconferencepartiesRequest.getConversationsCallsMaximumconferenceparties() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCallsMaximumconferencepartiesRequest.getConversationsCallsMaximumconferenceparties was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschat": {
    "operationId": "getconversationschat",
    "functionName": "getConversationsChat",
    "signature": "getConversationsChat(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get chat conversation\nGetConversationsChatRequest.getConversationsChat(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatRequest.getConversationsChat was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschatmessage": {
    "operationId": "getconversationschatmessage",
    "functionName": "getConversationsChatMessage",
    "signature": "getConversationsChatMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet messageId: String = \"\" // messageId\n\n// Get a web chat conversation message\nGetConversationsChatMessageRequest.getConversationsChatMessage(conversationId: conversationId, messageId: messageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatMessageRequest.getConversationsChatMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschatmessages": {
    "operationId": "getconversationschatmessages",
    "functionName": "getConversationsChatMessages",
    "signature": "getConversationsChatMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet after: String = \"\" // If specified, get the messages chronologically after the id of this message\nlet before: String = \"\" // If specified, get the messages chronologically before the id of this message\nlet sortOrder: GetConversationsChatMessagesRequest.SortOrder_getConversationsChatMessages = GetConversationsChatMessagesRequest.SortOrder_getConversationsChatMessages.enummember // Sort order\nlet maxResults: Int = 0 // Limit the returned number of messages, up to a maximum of 100\n\n// Get the messages of a chat conversation.\nGetConversationsChatMessagesRequest.getConversationsChatMessages(conversationId: conversationId, after: after, before: before, sortOrder: sortOrder, maxResults: maxResults) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatMessagesRequest.getConversationsChatMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschatparticipantwrapup": {
    "operationId": "getconversationschatparticipantwrapup",
    "functionName": "getConversationsChatParticipantWrapup",
    "signature": "getConversationsChatParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsChatParticipantWrapupRequest.getConversationsChatParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatParticipantWrapupRequest.getConversationsChatParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschatparticipantwrapupcodes": {
    "operationId": "getconversationschatparticipantwrapupcodes",
    "functionName": "getConversationsChatParticipantWrapupcodes",
    "signature": "getConversationsChatParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsChatParticipantWrapupcodesRequest.getConversationsChatParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatParticipantWrapupcodesRequest.getConversationsChatParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationschats": {
    "operationId": "getconversationschats",
    "functionName": "getConversationsChats",
    "signature": "getConversationsChats()",
    "return": "ChatConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active chat conversations for the logged in user\nGetConversationsChatsRequest.getConversationsChats() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsChatsRequest.getConversationsChats was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscobrowsesession": {
    "operationId": "getconversationscobrowsesession",
    "functionName": "getConversationsCobrowsesession",
    "signature": "getConversationsCobrowsesession(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CobrowseConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get cobrowse conversation\nGetConversationsCobrowsesessionRequest.getConversationsCobrowsesession(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCobrowsesessionRequest.getConversationsCobrowsesession was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscobrowsesessionparticipantwrapup": {
    "operationId": "getconversationscobrowsesessionparticipantwrapup",
    "functionName": "getConversationsCobrowsesessionParticipantWrapup",
    "signature": "getConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsCobrowsesessionParticipantWrapupRequest.getConversationsCobrowsesessionParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCobrowsesessionParticipantWrapupRequest.getConversationsCobrowsesessionParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscobrowsesessionparticipantwrapupcodes": {
    "operationId": "getconversationscobrowsesessionparticipantwrapupcodes",
    "functionName": "getConversationsCobrowsesessionParticipantWrapupcodes",
    "signature": "getConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsCobrowsesessionParticipantWrapupcodesRequest.getConversationsCobrowsesessionParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCobrowsesessionParticipantWrapupcodesRequest.getConversationsCobrowsesessionParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationscobrowsesessions": {
    "operationId": "getconversationscobrowsesessions",
    "functionName": "getConversationsCobrowsesessions",
    "signature": "getConversationsCobrowsesessions()",
    "return": "CobrowseConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active cobrowse conversations for the logged in user\nGetConversationsCobrowsesessionsRequest.getConversationsCobrowsesessions() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsCobrowsesessionsRequest.getConversationsCobrowsesessions was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemail": {
    "operationId": "getconversationsemail",
    "functionName": "getConversationsEmail",
    "signature": "getConversationsEmail(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get email conversation\nGetConversationsEmailRequest.getConversationsEmail(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailRequest.getConversationsEmail was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailmessage": {
    "operationId": "getconversationsemailmessage",
    "functionName": "getConversationsEmailMessage",
    "signature": "getConversationsEmailMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet messageId: String = \"\" // messageId\n\n// Get conversation message\nGetConversationsEmailMessageRequest.getConversationsEmailMessage(conversationId: conversationId, messageId: messageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailMessageRequest.getConversationsEmailMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailmessages": {
    "operationId": "getconversationsemailmessages",
    "functionName": "getConversationsEmailMessages",
    "signature": "getConversationsEmailMessages(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessageListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get conversation messages\nGetConversationsEmailMessagesRequest.getConversationsEmailMessages(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailMessagesRequest.getConversationsEmailMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailmessagesdraft": {
    "operationId": "getconversationsemailmessagesdraft",
    "functionName": "getConversationsEmailMessagesDraft",
    "signature": "getConversationsEmailMessagesDraft(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get conversation draft reply\nGetConversationsEmailMessagesDraftRequest.getConversationsEmailMessagesDraft(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailMessagesDraftRequest.getConversationsEmailMessagesDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailparticipantwrapup": {
    "operationId": "getconversationsemailparticipantwrapup",
    "functionName": "getConversationsEmailParticipantWrapup",
    "signature": "getConversationsEmailParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsEmailParticipantWrapupRequest.getConversationsEmailParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailParticipantWrapupRequest.getConversationsEmailParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailparticipantwrapupcodes": {
    "operationId": "getconversationsemailparticipantwrapupcodes",
    "functionName": "getConversationsEmailParticipantWrapupcodes",
    "signature": "getConversationsEmailParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsEmailParticipantWrapupcodesRequest.getConversationsEmailParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailParticipantWrapupcodesRequest.getConversationsEmailParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemailsettings": {
    "operationId": "getconversationsemailsettings",
    "functionName": "getConversationsEmailSettings",
    "signature": "getConversationsEmailSettings(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailsSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get emails settings for a given conversation\nGetConversationsEmailSettingsRequest.getConversationsEmailSettings(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailSettingsRequest.getConversationsEmailSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsemails": {
    "operationId": "getconversationsemails",
    "functionName": "getConversationsEmails",
    "signature": "getConversationsEmails()",
    "return": "EmailConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active email conversations for the logged in user\nGetConversationsEmailsRequest.getConversationsEmails() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsEmailsRequest.getConversationsEmails was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessage": {
    "operationId": "getconversationsmessage",
    "functionName": "getConversationsMessage",
    "signature": "getConversationsMessage(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get message conversation\nGetConversationsMessageRequest.getConversationsMessage(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageRequest.getConversationsMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagecommunicationmessagesmediamediaid": {
    "operationId": "getconversationsmessagecommunicationmessagesmediamediaid",
    "functionName": "getConversationsMessageCommunicationMessagesMediaMediaId",
    "signature": "getConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet communicationId: String = \"\" // communicationId\nlet mediaId: String = \"\" // mediaId\n\n// Get media\nGetConversationsMessageCommunicationMessagesMediaMediaIdRequest.getConversationsMessageCommunicationMessagesMediaMediaId(conversationId: conversationId, communicationId: communicationId, mediaId: mediaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageCommunicationMessagesMediaMediaIdRequest.getConversationsMessageCommunicationMessagesMediaMediaId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagedetails": {
    "operationId": "getconversationsmessagedetails",
    "functionName": "getConversationsMessageDetails",
    "signature": "getConversationsMessageDetails(messageId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // messageId\n\n// Get message\nGetConversationsMessageDetailsRequest.getConversationsMessageDetails(messageId: messageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageDetailsRequest.getConversationsMessageDetails was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagemessage": {
    "operationId": "getconversationsmessagemessage",
    "functionName": "getConversationsMessageMessage",
    "signature": "getConversationsMessageMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet messageId: String = \"\" // messageId\n\n// Get conversation message\nGetConversationsMessageMessageRequest.getConversationsMessageMessage(conversationId: conversationId, messageId: messageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageMessageRequest.getConversationsMessageMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessageparticipantwrapup": {
    "operationId": "getconversationsmessageparticipantwrapup",
    "functionName": "getConversationsMessageParticipantWrapup",
    "signature": "getConversationsMessageParticipantWrapup(conversationId, participantId, provisional)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "provisional",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AssignedWrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet provisional: Bool = true // Indicates if the wrap-up code is provisional.\n\n// Get the wrap-up for this conversation participant. \nGetConversationsMessageParticipantWrapupRequest.getConversationsMessageParticipantWrapup(conversationId: conversationId, participantId: participantId, provisional: provisional) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageParticipantWrapupRequest.getConversationsMessageParticipantWrapup was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessageparticipantwrapupcodes": {
    "operationId": "getconversationsmessageparticipantwrapupcodes",
    "functionName": "getConversationsMessageParticipantWrapupcodes",
    "signature": "getConversationsMessageParticipantWrapupcodes(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" //  conversationId\nlet participantId: String = \"\" // participantId\n\n// Get list of wrapup codes for this conversation participant\nGetConversationsMessageParticipantWrapupcodesRequest.getConversationsMessageParticipantWrapupcodes(conversationId: conversationId, participantId: participantId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessageParticipantWrapupcodesRequest.getConversationsMessageParticipantWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessages": {
    "operationId": "getconversationsmessages",
    "functionName": "getConversationsMessages",
    "signature": "getConversationsMessages()",
    "return": "MessageConversationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get active message conversations for the logged in user\nGetConversationsMessagesRequest.getConversationsMessages() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagesRequest.getConversationsMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingfacebookapp": {
    "operationId": "getconversationsmessagingfacebookapp",
    "functionName": "getConversationsMessagingFacebookApp",
    "signature": "getConversationsMessagingFacebookApp()",
    "return": "FacebookAppCredentials",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Genesys Facebook App Id\nGetConversationsMessagingFacebookAppRequest.getConversationsMessagingFacebookApp() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingFacebookAppRequest.getConversationsMessagingFacebookApp was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrations": {
    "operationId": "getconversationsmessagingintegrations",
    "functionName": "getConversationsMessagingIntegrations",
    "signature": "getConversationsMessagingIntegrations(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsRequest.Expand_getConversationsMessagingIntegrations = GetConversationsMessagingIntegrationsRequest.Expand_getConversationsMessagingIntegrations.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of Integrations\nGetConversationsMessagingIntegrationsRequest.getConversationsMessagingIntegrations(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsRequest.getConversationsMessagingIntegrations was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationsfacebook": {
    "operationId": "getconversationsmessagingintegrationsfacebook",
    "functionName": "getConversationsMessagingIntegrationsFacebook",
    "signature": "getConversationsMessagingIntegrationsFacebook(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsFacebookRequest.Expand_getConversationsMessagingIntegrationsFacebook = GetConversationsMessagingIntegrationsFacebookRequest.Expand_getConversationsMessagingIntegrationsFacebook.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of Facebook Integrations\nGetConversationsMessagingIntegrationsFacebookRequest.getConversationsMessagingIntegrationsFacebook(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsFacebookRequest.getConversationsMessagingIntegrationsFacebook was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "getconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "getConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FacebookIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet expand: GetConversationsMessagingIntegrationsFacebookIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsFacebookIntegrationId = GetConversationsMessagingIntegrationsFacebookIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsFacebookIntegrationId.enummember // Expand instructions for the return value.\n\n// Get a Facebook messaging integration\nGetConversationsMessagingIntegrationsFacebookIntegrationIdRequest.getConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: integrationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsFacebookIntegrationIdRequest.getConversationsMessagingIntegrationsFacebookIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationsline": {
    "operationId": "getconversationsmessagingintegrationsline",
    "functionName": "getConversationsMessagingIntegrationsLine",
    "signature": "getConversationsMessagingIntegrationsLine(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsLineRequest.Expand_getConversationsMessagingIntegrationsLine = GetConversationsMessagingIntegrationsLineRequest.Expand_getConversationsMessagingIntegrationsLine.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of LINE messenger Integrations\nGetConversationsMessagingIntegrationsLineRequest.getConversationsMessagingIntegrationsLine(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsLineRequest.getConversationsMessagingIntegrationsLine was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationslineintegrationid": {
    "operationId": "getconversationsmessagingintegrationslineintegrationid",
    "functionName": "getConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "getConversationsMessagingIntegrationsLineIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LineIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet expand: GetConversationsMessagingIntegrationsLineIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsLineIntegrationId = GetConversationsMessagingIntegrationsLineIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsLineIntegrationId.enummember // Expand instructions for the return value.\n\n// Get a LINE messenger integration\nGetConversationsMessagingIntegrationsLineIntegrationIdRequest.getConversationsMessagingIntegrationsLineIntegrationId(integrationId: integrationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsLineIntegrationIdRequest.getConversationsMessagingIntegrationsLineIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationsopen": {
    "operationId": "getconversationsmessagingintegrationsopen",
    "functionName": "getConversationsMessagingIntegrationsOpen",
    "signature": "getConversationsMessagingIntegrationsOpen(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsOpenRequest.Expand_getConversationsMessagingIntegrationsOpen = GetConversationsMessagingIntegrationsOpenRequest.Expand_getConversationsMessagingIntegrationsOpen.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of Open messaging integrations\nGetConversationsMessagingIntegrationsOpenRequest.getConversationsMessagingIntegrationsOpen(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsOpenRequest.getConversationsMessagingIntegrationsOpen was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "getconversationsmessagingintegrationsopenintegrationid",
    "functionName": "getConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "getConversationsMessagingIntegrationsOpenIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OpenIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet expand: GetConversationsMessagingIntegrationsOpenIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsOpenIntegrationId = GetConversationsMessagingIntegrationsOpenIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsOpenIntegrationId.enummember // Expand instructions for the return value.\n\n// Get an Open messaging integration\nGetConversationsMessagingIntegrationsOpenIntegrationIdRequest.getConversationsMessagingIntegrationsOpenIntegrationId(integrationId: integrationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsOpenIntegrationIdRequest.getConversationsMessagingIntegrationsOpenIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationstwitter": {
    "operationId": "getconversationsmessagingintegrationstwitter",
    "functionName": "getConversationsMessagingIntegrationsTwitter",
    "signature": "getConversationsMessagingIntegrationsTwitter(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsTwitterRequest.Expand_getConversationsMessagingIntegrationsTwitter = GetConversationsMessagingIntegrationsTwitterRequest.Expand_getConversationsMessagingIntegrationsTwitter.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of Twitter Integrations\nGetConversationsMessagingIntegrationsTwitterRequest.getConversationsMessagingIntegrationsTwitter(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsTwitterRequest.getConversationsMessagingIntegrationsTwitter was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "getconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "getConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TwitterIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet expand: GetConversationsMessagingIntegrationsTwitterIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsTwitterIntegrationId = GetConversationsMessagingIntegrationsTwitterIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsTwitterIntegrationId.enummember // Expand instructions for the return value.\n\n// Get a Twitter messaging integration\nGetConversationsMessagingIntegrationsTwitterIntegrationIdRequest.getConversationsMessagingIntegrationsTwitterIntegrationId(integrationId: integrationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsTwitterIntegrationIdRequest.getConversationsMessagingIntegrationsTwitterIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationswhatsapp": {
    "operationId": "getconversationsmessagingintegrationswhatsapp",
    "functionName": "getConversationsMessagingIntegrationsWhatsapp",
    "signature": "getConversationsMessagingIntegrationsWhatsapp(pageSize, pageNumber, expand, supportedContentId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: GetConversationsMessagingIntegrationsWhatsappRequest.Expand_getConversationsMessagingIntegrationsWhatsapp = GetConversationsMessagingIntegrationsWhatsappRequest.Expand_getConversationsMessagingIntegrationsWhatsapp.enummember // Expand instructions for the return value.\nlet supportedContentId: String = \"\" // Filter integrations returned based on the supported content ID\n\n// Get a list of WhatsApp Integrations\nGetConversationsMessagingIntegrationsWhatsappRequest.getConversationsMessagingIntegrationsWhatsapp(pageSize: pageSize, pageNumber: pageNumber, expand: expand, supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsWhatsappRequest.getConversationsMessagingIntegrationsWhatsapp was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "getconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "getConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, expand)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet expand: GetConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsWhatsappIntegrationId = GetConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.Expand_getConversationsMessagingIntegrationsWhatsappIntegrationId.enummember // Expand instructions for the return value.\n\n// Get a WhatsApp messaging integration\nGetConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.getConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: integrationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.getConversationsMessagingIntegrationsWhatsappIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingsticker": {
    "operationId": "getconversationsmessagingsticker",
    "functionName": "getConversationsMessagingSticker",
    "signature": "getConversationsMessagingSticker(messengerType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "MessagingStickerEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messengerType: GetConversationsMessagingStickerRequest.MessengerType_getConversationsMessagingSticker = GetConversationsMessagingStickerRequest.MessengerType_getConversationsMessagingSticker.enummember // Messenger Type\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of Messaging Stickers\nGetConversationsMessagingStickerRequest.getConversationsMessagingSticker(messengerType: messengerType, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingStickerRequest.getConversationsMessagingSticker was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingsupportedcontent": {
    "operationId": "getconversationsmessagingsupportedcontent",
    "functionName": "getConversationsMessagingSupportedcontent",
    "signature": "getConversationsMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of Supported Content profiles\nGetConversationsMessagingSupportedcontentRequest.getConversationsMessagingSupportedcontent(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingSupportedcontentRequest.getConversationsMessagingSupportedcontent was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingsupportedcontentdefault": {
    "operationId": "getconversationsmessagingsupportedcontentdefault",
    "functionName": "getConversationsMessagingSupportedcontentDefault",
    "signature": "getConversationsMessagingSupportedcontentDefault()",
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the organization's default supported content profile that will be used as the default when creating an integration.\nGetConversationsMessagingSupportedcontentDefaultRequest.getConversationsMessagingSupportedcontentDefault() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingSupportedcontentDefaultRequest.getConversationsMessagingSupportedcontentDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "getConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\n\n// Get a supported content profile\nGetConversationsMessagingSupportedcontentSupportedContentIdRequest.getConversationsMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingSupportedcontentSupportedContentIdRequest.getConversationsMessagingSupportedcontentSupportedContentId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationsmessagingthreadingtimeline": {
    "operationId": "getconversationsmessagingthreadingtimeline",
    "functionName": "getConversationsMessagingThreadingtimeline",
    "signature": "getConversationsMessagingThreadingtimeline()",
    "return": "ConversationThreadingWindow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get conversation threading window timeline for each messaging type\nGetConversationsMessagingThreadingtimelineRequest.getConversationsMessagingThreadingtimeline() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationsMessagingThreadingtimelineRequest.getConversationsMessagingThreadingtimeline was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationparticipant": {
    "operationId": "patchconversationparticipant",
    "functionName": "patchConversationParticipant",
    "signature": "patchConversationParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Update request\n\n// Update a participant.\nPatchConversationParticipantRequest.patchConversationParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationParticipantRequest.patchConversationParticipant was successful\")\n    }\n}"
  },
  "patchconversationparticipantattributes": {
    "operationId": "patchconversationparticipantattributes",
    "functionName": "patchConversationParticipantAttributes",
    "signature": "patchConversationParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // Participant attributes\n\n// Update the attributes on a conversation participant.\nPatchConversationParticipantAttributesRequest.patchConversationParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationParticipantAttributesRequest.patchConversationParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationscall": {
    "operationId": "patchconversationscall",
    "functionName": "patchConversationsCall",
    "signature": "patchConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by setting its recording state, merging in other conversations to create a conference, or disconnecting all of the participants\nPatchConversationsCallRequest.patchConversationsCall(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallRequest.patchConversationsCall was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscallparticipant": {
    "operationId": "patchconversationscallparticipant",
    "functionName": "patchConversationsCallParticipant",
    "signature": "patchConversationsCallParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant request\n\n// Update conversation participant\nPatchConversationsCallParticipantRequest.patchConversationsCallParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCallParticipantRequest.patchConversationsCallParticipant was successful\")\n    }\n}"
  },
  "patchconversationscallparticipantattributes": {
    "operationId": "patchconversationscallparticipantattributes",
    "functionName": "patchConversationsCallParticipantAttributes",
    "signature": "patchConversationsCallParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // Participant attributes\n\n// Update the attributes on a conversation participant.\nPatchConversationsCallParticipantAttributesRequest.patchConversationsCallParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCallParticipantAttributesRequest.patchConversationsCallParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationscallparticipantcommunication": {
    "operationId": "patchconversationscallparticipantcommunication",
    "functionName": "patchConversationsCallParticipantCommunication",
    "signature": "patchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsCallParticipantCommunicationRequest.patchConversationsCallParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallParticipantCommunicationRequest.patchConversationsCallParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscallparticipantconsult": {
    "operationId": "patchconversationscallparticipantconsult",
    "functionName": "patchConversationsCallParticipantConsult",
    "signature": "patchConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ConsultTransferUpdate",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ConsultTransferUpdate = new ConsultTransferUpdate(...) // new speak to\n\n// Change who can speak\nPatchConversationsCallParticipantConsultRequest.patchConversationsCallParticipantConsult(conversationId: conversationId, participantId: participantId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallParticipantConsultRequest.patchConversationsCallParticipantConsult was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscallback": {
    "operationId": "patchconversationscallback",
    "functionName": "patchConversationsCallback",
    "signature": "patchConversationsCallback(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by disconnecting all of the participants\nPatchConversationsCallbackRequest.patchConversationsCallback(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallbackRequest.patchConversationsCallback was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscallbackparticipant": {
    "operationId": "patchconversationscallbackparticipant",
    "functionName": "patchConversationsCallbackParticipant",
    "signature": "patchConversationsCallbackParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant\nPatchConversationsCallbackParticipantRequest.patchConversationsCallbackParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCallbackParticipantRequest.patchConversationsCallbackParticipant was successful\")\n    }\n}"
  },
  "patchconversationscallbackparticipantattributes": {
    "operationId": "patchconversationscallbackparticipantattributes",
    "functionName": "patchConversationsCallbackParticipantAttributes",
    "signature": "patchConversationsCallbackParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // Attributes\n\n// Update the attributes on a conversation participant.\nPatchConversationsCallbackParticipantAttributesRequest.patchConversationsCallbackParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCallbackParticipantAttributesRequest.patchConversationsCallbackParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationscallbackparticipantcommunication": {
    "operationId": "patchconversationscallbackparticipantcommunication",
    "functionName": "patchConversationsCallbackParticipantCommunication",
    "signature": "patchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsCallbackParticipantCommunicationRequest.patchConversationsCallbackParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallbackParticipantCommunicationRequest.patchConversationsCallbackParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscallbacks": {
    "operationId": "patchconversationscallbacks",
    "functionName": "patchConversationsCallbacks",
    "signature": "patchConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PatchCallbackRequest",
        "required": "true"
      }
    ],
    "return": "PatchCallbackResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PatchCallbackRequest = new PatchCallbackRequest(...) // PatchCallbackRequest\n\n// Update a scheduled callback\nPatchConversationsCallbacksRequest.patchConversationsCallbacks(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCallbacksRequest.patchConversationsCallbacks was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationschat": {
    "operationId": "patchconversationschat",
    "functionName": "patchConversationsChat",
    "signature": "patchConversationsChat(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by disconnecting all of the participants\nPatchConversationsChatRequest.patchConversationsChat(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsChatRequest.patchConversationsChat was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationschatparticipant": {
    "operationId": "patchconversationschatparticipant",
    "functionName": "patchConversationsChatParticipant",
    "signature": "patchConversationsChatParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Update request\n\n// Update conversation participant\nPatchConversationsChatParticipantRequest.patchConversationsChatParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsChatParticipantRequest.patchConversationsChatParticipant was successful\")\n    }\n}"
  },
  "patchconversationschatparticipantattributes": {
    "operationId": "patchconversationschatparticipantattributes",
    "functionName": "patchConversationsChatParticipantAttributes",
    "signature": "patchConversationsChatParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // Participant attributes\n\n// Update the attributes on a conversation participant.\nPatchConversationsChatParticipantAttributesRequest.patchConversationsChatParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsChatParticipantAttributesRequest.patchConversationsChatParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationschatparticipantcommunication": {
    "operationId": "patchconversationschatparticipantcommunication",
    "functionName": "patchConversationsChatParticipantCommunication",
    "signature": "patchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsChatParticipantCommunicationRequest.patchConversationsChatParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsChatParticipantCommunicationRequest.patchConversationsChatParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscobrowsesession": {
    "operationId": "patchconversationscobrowsesession",
    "functionName": "patchConversationsCobrowsesession",
    "signature": "patchConversationsCobrowsesession(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by disconnecting all of the participants\nPatchConversationsCobrowsesessionRequest.patchConversationsCobrowsesession(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCobrowsesessionRequest.patchConversationsCobrowsesession was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationscobrowsesessionparticipant": {
    "operationId": "patchconversationscobrowsesessionparticipant",
    "functionName": "patchConversationsCobrowsesessionParticipant",
    "signature": "patchConversationsCobrowsesessionParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // \n\n// Update conversation participant\nPatchConversationsCobrowsesessionParticipantRequest.patchConversationsCobrowsesessionParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCobrowsesessionParticipantRequest.patchConversationsCobrowsesessionParticipant was successful\")\n    }\n}"
  },
  "patchconversationscobrowsesessionparticipantattributes": {
    "operationId": "patchconversationscobrowsesessionparticipantattributes",
    "functionName": "patchConversationsCobrowsesessionParticipantAttributes",
    "signature": "patchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // \n\n// Update the attributes on a conversation participant.\nPatchConversationsCobrowsesessionParticipantAttributesRequest.patchConversationsCobrowsesessionParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsCobrowsesessionParticipantAttributesRequest.patchConversationsCobrowsesessionParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationscobrowsesessionparticipantcommunication": {
    "operationId": "patchconversationscobrowsesessionparticipantcommunication",
    "functionName": "patchConversationsCobrowsesessionParticipantCommunication",
    "signature": "patchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsCobrowsesessionParticipantCommunicationRequest.patchConversationsCobrowsesessionParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsCobrowsesessionParticipantCommunicationRequest.patchConversationsCobrowsesessionParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsemail": {
    "operationId": "patchconversationsemail",
    "functionName": "patchConversationsEmail",
    "signature": "patchConversationsEmail(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by disconnecting all of the participants\nPatchConversationsEmailRequest.patchConversationsEmail(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsEmailRequest.patchConversationsEmail was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsemailparticipant": {
    "operationId": "patchconversationsemailparticipant",
    "functionName": "patchConversationsEmailParticipant",
    "signature": "patchConversationsEmailParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Update request\n\n// Update conversation participant\nPatchConversationsEmailParticipantRequest.patchConversationsEmailParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsEmailParticipantRequest.patchConversationsEmailParticipant was successful\")\n    }\n}"
  },
  "patchconversationsemailparticipantattributes": {
    "operationId": "patchconversationsemailparticipantattributes",
    "functionName": "patchConversationsEmailParticipantAttributes",
    "signature": "patchConversationsEmailParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // Participant attributes\n\n// Update the attributes on a conversation participant.\nPatchConversationsEmailParticipantAttributesRequest.patchConversationsEmailParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsEmailParticipantAttributesRequest.patchConversationsEmailParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationsemailparticipantcommunication": {
    "operationId": "patchconversationsemailparticipantcommunication",
    "functionName": "patchConversationsEmailParticipantCommunication",
    "signature": "patchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsEmailParticipantCommunicationRequest.patchConversationsEmailParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsEmailParticipantCommunicationRequest.patchConversationsEmailParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessage": {
    "operationId": "patchconversationsmessage",
    "functionName": "patchConversationsMessage",
    "signature": "patchConversationsMessage(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Update a conversation by disconnecting all of the participants\nPatchConversationsMessageRequest.patchConversationsMessage(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessageRequest.patchConversationsMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessageparticipant": {
    "operationId": "patchconversationsmessageparticipant",
    "functionName": "patchConversationsMessageParticipant",
    "signature": "patchConversationsMessageParticipant(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" //  conversationId\nlet participantId: String = \"\" // participantId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // \n\n// Update conversation participant\nPatchConversationsMessageParticipantRequest.patchConversationsMessageParticipant(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsMessageParticipantRequest.patchConversationsMessageParticipant was successful\")\n    }\n}"
  },
  "patchconversationsmessageparticipantattributes": {
    "operationId": "patchconversationsmessageparticipantattributes",
    "functionName": "patchConversationsMessageParticipantAttributes",
    "signature": "patchConversationsMessageParticipantAttributes(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ParticipantAttributes",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" //  conversationId\nlet participantId: String = \"\" // participantId\nlet body: ParticipantAttributes = new ParticipantAttributes(...) // \n\n// Update the attributes on a conversation participant.\nPatchConversationsMessageParticipantAttributesRequest.patchConversationsMessageParticipantAttributes(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchConversationsMessageParticipantAttributesRequest.patchConversationsMessageParticipantAttributes was successful\")\n    }\n}"
  },
  "patchconversationsmessageparticipantcommunication": {
    "operationId": "patchconversationsmessageparticipantcommunication",
    "functionName": "patchConversationsMessageParticipantCommunication",
    "signature": "patchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MediaParticipantRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" //  conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: MediaParticipantRequest = new MediaParticipantRequest(...) // Participant\n\n// Update conversation participant's communication by disconnecting it.\nPatchConversationsMessageParticipantCommunicationRequest.patchConversationsMessageParticipantCommunication(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessageParticipantCommunicationRequest.patchConversationsMessageParticipantCommunication was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessagingintegrationsfacebookintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsfacebookintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsFacebookIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "FacebookIntegrationUpdateRequest",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet body: FacebookIntegrationUpdateRequest = new FacebookIntegrationUpdateRequest(...) // FacebookIntegrationUpdateRequest\n\n// Update Facebook messaging integration\nPatchConversationsMessagingIntegrationsFacebookIntegrationIdRequest.patchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessagingIntegrationsFacebookIntegrationIdRequest.patchConversationsMessagingIntegrationsFacebookIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessagingintegrationsopenintegrationid": {
    "operationId": "patchconversationsmessagingintegrationsopenintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsOpenIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OpenIntegrationUpdateRequest",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet body: OpenIntegrationUpdateRequest = new OpenIntegrationUpdateRequest(...) // OpenIntegrationUpdateRequest\n\n// Update an Open messaging integration\nPatchConversationsMessagingIntegrationsOpenIntegrationIdRequest.patchConversationsMessagingIntegrationsOpenIntegrationId(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessagingIntegrationsOpenIntegrationIdRequest.patchConversationsMessagingIntegrationsOpenIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessagingintegrationstwitterintegrationid": {
    "operationId": "patchconversationsmessagingintegrationstwitterintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsTwitterIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TwitterIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet body: TwitterIntegrationRequest = new TwitterIntegrationRequest(...) // TwitterIntegrationRequest\n\n// Update Twitter messaging integration\nPatchConversationsMessagingIntegrationsTwitterIntegrationIdRequest.patchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessagingIntegrationsTwitterIntegrationIdRequest.patchConversationsMessagingIntegrationsTwitterIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessagingintegrationswhatsappintegrationid": {
    "operationId": "patchconversationsmessagingintegrationswhatsappintegrationid",
    "functionName": "patchConversationsMessagingIntegrationsWhatsappIntegrationId",
    "signature": "patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WhatsAppIntegrationUpdateRequest",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet body: WhatsAppIntegrationUpdateRequest = new WhatsAppIntegrationUpdateRequest(...) // WhatsAppIntegrationUpdateRequest\n\n// Update or activate a WhatsApp messaging integration\nPatchConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.patchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessagingIntegrationsWhatsappIntegrationIdRequest.patchConversationsMessagingIntegrationsWhatsappIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "patchconversationsmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchconversationsmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchConversationsMessagingSupportedcontentSupportedContentId",
    "signature": "patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SupportedContent",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\nlet body: SupportedContent = new SupportedContent(...) // SupportedContent\n\n// Update a supported content profile\nPatchConversationsMessagingSupportedcontentSupportedContentIdRequest.patchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchConversationsMessagingSupportedcontentSupportedContentIdRequest.patchConversationsMessagingSupportedcontentSupportedContentId was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationassign": {
    "operationId": "postconversationassign",
    "functionName": "postConversationAssign",
    "signature": "postConversationAssign(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ConversationUser",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet body: ConversationUser = new ConversationUser(...) // Targeted user\n\n// Attempts to manually assign a specified conversation to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.\nPostConversationAssignRequest.postConversationAssign(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationAssignRequest.postConversationAssign was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationdisconnect": {
    "operationId": "postconversationdisconnect",
    "functionName": "postConversationDisconnect",
    "signature": "postConversationDisconnect(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\n\n// Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.\nPostConversationDisconnectRequest.postConversationDisconnect(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationDisconnectRequest.postConversationDisconnect was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationparticipantcallbacks": {
    "operationId": "postconversationparticipantcallbacks",
    "functionName": "postConversationParticipantCallbacks",
    "signature": "postConversationParticipantCallbacks(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateCallbackOnConversationCommand",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: CreateCallbackOnConversationCommand = new CreateCallbackOnConversationCommand(...) // \n\n// Create a new callback for the specified participant on the conversation.\nPostConversationParticipantCallbacksRequest.postConversationParticipantCallbacks(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationParticipantCallbacksRequest.postConversationParticipantCallbacks was successful\")\n    }\n}"
  },
  "postconversationparticipantdigits": {
    "operationId": "postconversationparticipantdigits",
    "functionName": "postConversationParticipantDigits",
    "signature": "postConversationParticipantDigits(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Digits",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: Digits = new Digits(...) // Digits\n\n// Sends DTMF to the participant\nPostConversationParticipantDigitsRequest.postConversationParticipantDigits(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationParticipantDigitsRequest.postConversationParticipantDigits was successful\")\n    }\n}"
  },
  "postconversationparticipantreplace": {
    "operationId": "postconversationparticipantreplace",
    "functionName": "postConversationParticipantReplace",
    "signature": "postConversationParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationParticipantReplaceRequest.postConversationParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationParticipantReplaceRequest.postConversationParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationparticipantsecureivrsessions": {
    "operationId": "postconversationparticipantsecureivrsessions",
    "functionName": "postConversationParticipantSecureivrsessions",
    "signature": "postConversationParticipantSecureivrsessions(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateSecureSession",
        "required": "false"
      }
    ],
    "return": "SecureSession",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\nlet body: CreateSecureSession = new CreateSecureSession(...) // \n\n// Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.\nPostConversationParticipantSecureivrsessionsRequest.postConversationParticipantSecureivrsessions(conversationId: conversationId, participantId: participantId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationParticipantSecureivrsessionsRequest.postConversationParticipantSecureivrsessions was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscall": {
    "operationId": "postconversationscall",
    "functionName": "postConversationsCall",
    "signature": "postConversationsCall(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CallCommand",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: CallCommand = new CallCommand(...) // Conversation\n\n// Place a new call as part of a callback conversation.\nPostConversationsCallRequest.postConversationsCall(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallRequest.postConversationsCall was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscallparticipantcoach": {
    "operationId": "postconversationscallparticipantcoach",
    "functionName": "postConversationsCallParticipantCoach",
    "signature": "postConversationsCallParticipantCoach(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Listen in on the conversation from the point of view of a given participant while speaking to just the given participant.\nPostConversationsCallParticipantCoachRequest.postConversationsCallParticipantCoach(conversationId: conversationId, participantId: participantId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCallParticipantCoachRequest.postConversationsCallParticipantCoach was successful\")\n    }\n}"
  },
  "postconversationscallparticipantconsult": {
    "operationId": "postconversationscallparticipantconsult",
    "functionName": "postConversationsCallParticipantConsult",
    "signature": "postConversationsCallParticipantConsult(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ConsultTransfer",
        "required": "true"
      }
    ],
    "return": "ConsultTransferResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: ConsultTransfer = new ConsultTransfer(...) // Destination address & initial speak to\n\n// Initiate and update consult transfer\nPostConversationsCallParticipantConsultRequest.postConversationsCallParticipantConsult(conversationId: conversationId, participantId: participantId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallParticipantConsultRequest.postConversationsCallParticipantConsult was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscallparticipantmonitor": {
    "operationId": "postconversationscallparticipantmonitor",
    "functionName": "postConversationsCallParticipantMonitor",
    "signature": "postConversationsCallParticipantMonitor(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\n\n// Listen in on the conversation from the point of view of a given participant.\nPostConversationsCallParticipantMonitorRequest.postConversationsCallParticipantMonitor(conversationId: conversationId, participantId: participantId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCallParticipantMonitorRequest.postConversationsCallParticipantMonitor was successful\")\n    }\n}"
  },
  "postconversationscallparticipantreplace": {
    "operationId": "postconversationscallparticipantreplace",
    "functionName": "postConversationsCallParticipantReplace",
    "signature": "postConversationsCallParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationsCallParticipantReplaceRequest.postConversationsCallParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCallParticipantReplaceRequest.postConversationsCallParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationscallparticipants": {
    "operationId": "postconversationscallparticipants",
    "functionName": "postConversationsCallParticipants",
    "signature": "postConversationsCallParticipants(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Conversation",
        "required": "true"
      }
    ],
    "return": "Conversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Conversation = new Conversation(...) // Conversation\n\n// Add participants to a conversation\nPostConversationsCallParticipantsRequest.postConversationsCallParticipants(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallParticipantsRequest.postConversationsCallParticipants was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscallbackparticipantreplace": {
    "operationId": "postconversationscallbackparticipantreplace",
    "functionName": "postConversationsCallbackParticipantReplace",
    "signature": "postConversationsCallbackParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationsCallbackParticipantReplaceRequest.postConversationsCallbackParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCallbackParticipantReplaceRequest.postConversationsCallbackParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationscallbacks": {
    "operationId": "postconversationscallbacks",
    "functionName": "postConversationsCallbacks",
    "signature": "postConversationsCallbacks(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateCallbackCommand",
        "required": "true"
      }
    ],
    "return": "CreateCallbackResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateCallbackCommand = new CreateCallbackCommand(...) // Callback\n\n// Create a Callback\nPostConversationsCallbacksRequest.postConversationsCallbacks(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallbacksRequest.postConversationsCallbacks was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscallbacksbulkdisconnect": {
    "operationId": "postconversationscallbacksbulkdisconnect",
    "functionName": "postConversationsCallbacksBulkDisconnect",
    "signature": "postConversationsCallbacksBulkDisconnect(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkCallbackDisconnectRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkCallbackDisconnectRequest = new BulkCallbackDisconnectRequest(...) // BulkCallbackDisconnectRequest\n\n// Disconnect multiple scheduled callbacks\nPostConversationsCallbacksBulkDisconnectRequest.postConversationsCallbacksBulkDisconnect(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCallbacksBulkDisconnectRequest.postConversationsCallbacksBulkDisconnect was successful\")\n    }\n}"
  },
  "postconversationscallbacksbulkupdate": {
    "operationId": "postconversationscallbacksbulkupdate",
    "functionName": "postConversationsCallbacksBulkUpdate",
    "signature": "postConversationsCallbacksBulkUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkCallbackPatchRequest",
        "required": "true"
      }
    ],
    "return": "BulkCallbackPatchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkCallbackPatchRequest = new BulkCallbackPatchRequest(...) // BulkCallbackPatchRequest\n\n// Update multiple scheduled callbacks\nPostConversationsCallbacksBulkUpdateRequest.postConversationsCallbacksBulkUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallbacksBulkUpdateRequest.postConversationsCallbacksBulkUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscalls": {
    "operationId": "postconversationscalls",
    "functionName": "postConversationsCalls",
    "signature": "postConversationsCalls(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateCallRequest",
        "required": "true"
      }
    ],
    "return": "CreateCallResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateCallRequest = new CreateCallRequest(...) // Call request\n\n// Create a call conversation\nPostConversationsCallsRequest.postConversationsCalls(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsCallsRequest.postConversationsCalls was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationschatcommunicationmessages": {
    "operationId": "postconversationschatcommunicationmessages",
    "functionName": "postConversationsChatCommunicationMessages",
    "signature": "postConversationsChatCommunicationMessages(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateWebChatMessageRequest",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet communicationId: String = \"\" // communicationId\nlet body: CreateWebChatMessageRequest = new CreateWebChatMessageRequest(...) // Message\n\n// Send a message on behalf of a communication in a chat conversation.\nPostConversationsChatCommunicationMessagesRequest.postConversationsChatCommunicationMessages(conversationId: conversationId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsChatCommunicationMessagesRequest.postConversationsChatCommunicationMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationschatcommunicationtyping": {
    "operationId": "postconversationschatcommunicationtyping",
    "functionName": "postConversationsChatCommunicationTyping",
    "signature": "postConversationsChatCommunicationTyping(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet communicationId: String = \"\" // communicationId\n\n// Send a typing-indicator on behalf of a communication in a chat conversation.\nPostConversationsChatCommunicationTypingRequest.postConversationsChatCommunicationTyping(conversationId: conversationId, communicationId: communicationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsChatCommunicationTypingRequest.postConversationsChatCommunicationTyping was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationschatparticipantreplace": {
    "operationId": "postconversationschatparticipantreplace",
    "functionName": "postConversationsChatParticipantReplace",
    "signature": "postConversationsChatParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationsChatParticipantReplaceRequest.postConversationsChatParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsChatParticipantReplaceRequest.postConversationsChatParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationschats": {
    "operationId": "postconversationschats",
    "functionName": "postConversationsChats",
    "signature": "postConversationsChats(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateWebChatRequest",
        "required": "true"
      }
    ],
    "return": "ChatConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateWebChatRequest = new CreateWebChatRequest(...) // Create web chat request\n\n// Create a web chat conversation\nPostConversationsChatsRequest.postConversationsChats(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsChatsRequest.postConversationsChats was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationscobrowsesessionparticipantreplace": {
    "operationId": "postconversationscobrowsesessionparticipantreplace",
    "functionName": "postConversationsCobrowsesessionParticipantReplace",
    "signature": "postConversationsCobrowsesessionParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // \n\n// Replace this participant with the specified user and/or address\nPostConversationsCobrowsesessionParticipantReplaceRequest.postConversationsCobrowsesessionParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsCobrowsesessionParticipantReplaceRequest.postConversationsCobrowsesessionParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationsemailinboundmessages": {
    "operationId": "postconversationsemailinboundmessages",
    "functionName": "postConversationsEmailInboundmessages",
    "signature": "postConversationsEmailInboundmessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InboundMessageRequest",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: InboundMessageRequest = new InboundMessageRequest(...) // Send external email reply\n\n// Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.\nPostConversationsEmailInboundmessagesRequest.postConversationsEmailInboundmessages(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsEmailInboundmessagesRequest.postConversationsEmailInboundmessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsemailmessages": {
    "operationId": "postconversationsemailmessages",
    "functionName": "postConversationsEmailMessages",
    "signature": "postConversationsEmailMessages(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EmailMessage",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: EmailMessage = new EmailMessage(...) // Reply\n\n// Send an email reply\nPostConversationsEmailMessagesRequest.postConversationsEmailMessages(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsEmailMessagesRequest.postConversationsEmailMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsemailmessagesdraftattachmentscopy": {
    "operationId": "postconversationsemailmessagesdraftattachmentscopy",
    "functionName": "postConversationsEmailMessagesDraftAttachmentsCopy",
    "signature": "postConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CopyAttachmentsRequest",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: CopyAttachmentsRequest = new CopyAttachmentsRequest(...) // Copy Attachment Request\n\n// Copy attachments from an email message to the current draft.\nPostConversationsEmailMessagesDraftAttachmentsCopyRequest.postConversationsEmailMessagesDraftAttachmentsCopy(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsEmailMessagesDraftAttachmentsCopyRequest.postConversationsEmailMessagesDraftAttachmentsCopy was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsemailparticipantreplace": {
    "operationId": "postconversationsemailparticipantreplace",
    "functionName": "postConversationsEmailParticipantReplace",
    "signature": "postConversationsEmailParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationsEmailParticipantReplaceRequest.postConversationsEmailParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsEmailParticipantReplaceRequest.postConversationsEmailParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationsemails": {
    "operationId": "postconversationsemails",
    "functionName": "postConversationsEmails",
    "signature": "postConversationsEmails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateEmailRequest",
        "required": "true"
      }
    ],
    "return": "EmailConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateEmailRequest = new CreateEmailRequest(...) // Create email request\n\n// Create an email conversation\nPostConversationsEmailsRequest.postConversationsEmails(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsEmailsRequest.postConversationsEmails was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsfaxes": {
    "operationId": "postconversationsfaxes",
    "functionName": "postConversationsFaxes",
    "signature": "postConversationsFaxes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FaxSendRequest",
        "required": "true"
      }
    ],
    "return": "FaxSendResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FaxSendRequest = new FaxSendRequest(...) // Fax\n\n// Create Fax Conversation\nPostConversationsFaxesRequest.postConversationsFaxes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsFaxesRequest.postConversationsFaxes was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagecommunicationmessages": {
    "operationId": "postconversationsmessagecommunicationmessages",
    "functionName": "postConversationsMessageCommunicationMessages",
    "signature": "postConversationsMessageCommunicationMessages(conversationId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AdditionalMessage",
        "required": "true"
      }
    ],
    "return": "MessageData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet communicationId: String = \"\" // communicationId\nlet body: AdditionalMessage = new AdditionalMessage(...) // Message\n\n// Send message\nPostConversationsMessageCommunicationMessagesRequest.postConversationsMessageCommunicationMessages(conversationId: conversationId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessageCommunicationMessagesRequest.postConversationsMessageCommunicationMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagecommunicationmessagesmedia": {
    "operationId": "postconversationsmessagecommunicationmessagesmedia",
    "functionName": "postConversationsMessageCommunicationMessagesMedia",
    "signature": "postConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessageMediaData",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet communicationId: String = \"\" // communicationId\n\n// Create media\nPostConversationsMessageCommunicationMessagesMediaRequest.postConversationsMessageCommunicationMessagesMedia(conversationId: conversationId, communicationId: communicationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessageCommunicationMessagesMediaRequest.postConversationsMessageCommunicationMessagesMedia was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagemessagesbulk": {
    "operationId": "postconversationsmessagemessagesbulk",
    "functionName": "postConversationsMessageMessagesBulk",
    "signature": "postConversationsMessageMessagesBulk(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "TextMessageListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // \nlet body: [String] = [\"\"] // messageIds\n\n// Get messages in batch\nPostConversationsMessageMessagesBulkRequest.postConversationsMessageMessagesBulk(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessageMessagesBulkRequest.postConversationsMessageMessagesBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessageparticipantreplace": {
    "operationId": "postconversationsmessageparticipantreplace",
    "functionName": "postConversationsMessageParticipantReplace",
    "signature": "postConversationsMessageParticipantReplace(conversationId, participantId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TransferRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet body: TransferRequest = new TransferRequest(...) // Transfer request\n\n// Replace this participant with the specified user and/or address\nPostConversationsMessageParticipantReplaceRequest.postConversationsMessageParticipantReplace(conversationId: conversationId, participantId: participantId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostConversationsMessageParticipantReplaceRequest.postConversationsMessageParticipantReplace was successful\")\n    }\n}"
  },
  "postconversationsmessages": {
    "operationId": "postconversationsmessages",
    "functionName": "postConversationsMessages",
    "signature": "postConversationsMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateOutboundMessagingConversationRequest",
        "required": "true"
      }
    ],
    "return": "MessageConversation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateOutboundMessagingConversationRequest = new CreateOutboundMessagingConversationRequest(...) // Create outbound messaging conversation\n\n// Create an outbound messaging conversation.\nPostConversationsMessagesRequest.postConversationsMessages(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagesRequest.postConversationsMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagesagentless": {
    "operationId": "postconversationsmessagesagentless",
    "functionName": "postConversationsMessagesAgentless",
    "signature": "postConversationsMessagesAgentless(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SendAgentlessOutboundMessageRequest",
        "required": "true"
      }
    ],
    "return": "SendAgentlessOutboundMessageResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SendAgentlessOutboundMessageRequest = new SendAgentlessOutboundMessageRequest(...) // Create agentless outbound messaging request\n\n// Send an agentless outbound message\nPostConversationsMessagesAgentlessRequest.postConversationsMessagesAgentless(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagesAgentlessRequest.postConversationsMessagesAgentless was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagesinboundopen": {
    "operationId": "postconversationsmessagesinboundopen",
    "functionName": "postConversationsMessagesInboundOpen",
    "signature": "postConversationsMessagesInboundOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OpenNormalizedMessage",
        "required": "true"
      }
    ],
    "return": "OpenNormalizedMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OpenNormalizedMessage = new OpenNormalizedMessage(...) // NormalizedMessage\n\n// Send an inbound Open Message\nPostConversationsMessagesInboundOpenRequest.postConversationsMessagesInboundOpen(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagesInboundOpenRequest.postConversationsMessagesInboundOpen was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingintegrationsfacebook": {
    "operationId": "postconversationsmessagingintegrationsfacebook",
    "functionName": "postConversationsMessagingIntegrationsFacebook",
    "signature": "postConversationsMessagingIntegrationsFacebook(body)",
    "parameters": [
      {
        "name": "body",
        "type": "FacebookIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "FacebookIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: FacebookIntegrationRequest = new FacebookIntegrationRequest(...) // FacebookIntegrationRequest\n\n// Create a Facebook Integration\nPostConversationsMessagingIntegrationsFacebookRequest.postConversationsMessagingIntegrationsFacebook(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingIntegrationsFacebookRequest.postConversationsMessagingIntegrationsFacebook was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingintegrationsline": {
    "operationId": "postconversationsmessagingintegrationsline",
    "functionName": "postConversationsMessagingIntegrationsLine",
    "signature": "postConversationsMessagingIntegrationsLine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LineIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LineIntegrationRequest = new LineIntegrationRequest(...) // LineIntegrationRequest\n\n// Create a LINE messenger Integration\nPostConversationsMessagingIntegrationsLineRequest.postConversationsMessagingIntegrationsLine(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingIntegrationsLineRequest.postConversationsMessagingIntegrationsLine was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingintegrationsopen": {
    "operationId": "postconversationsmessagingintegrationsopen",
    "functionName": "postConversationsMessagingIntegrationsOpen",
    "signature": "postConversationsMessagingIntegrationsOpen(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OpenIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "OpenIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OpenIntegrationRequest = new OpenIntegrationRequest(...) // OpenIntegrationRequest\n\n// Create an Open messaging integration\nPostConversationsMessagingIntegrationsOpenRequest.postConversationsMessagingIntegrationsOpen(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingIntegrationsOpenRequest.postConversationsMessagingIntegrationsOpen was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingintegrationstwitter": {
    "operationId": "postconversationsmessagingintegrationstwitter",
    "functionName": "postConversationsMessagingIntegrationsTwitter",
    "signature": "postConversationsMessagingIntegrationsTwitter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TwitterIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "TwitterIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TwitterIntegrationRequest = new TwitterIntegrationRequest(...) // TwitterIntegrationRequest\n\n// Create a Twitter Integration\nPostConversationsMessagingIntegrationsTwitterRequest.postConversationsMessagingIntegrationsTwitter(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingIntegrationsTwitterRequest.postConversationsMessagingIntegrationsTwitter was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingintegrationswhatsapp": {
    "operationId": "postconversationsmessagingintegrationswhatsapp",
    "functionName": "postConversationsMessagingIntegrationsWhatsapp",
    "signature": "postConversationsMessagingIntegrationsWhatsapp(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WhatsAppIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "WhatsAppIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WhatsAppIntegrationRequest = new WhatsAppIntegrationRequest(...) // WhatsAppIntegrationRequest\n\n// Create a WhatsApp Integration\nPostConversationsMessagingIntegrationsWhatsappRequest.postConversationsMessagingIntegrationsWhatsapp(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingIntegrationsWhatsappRequest.postConversationsMessagingIntegrationsWhatsapp was successful\")\n        dump(response)\n    }\n}"
  },
  "postconversationsmessagingsupportedcontent": {
    "operationId": "postconversationsmessagingsupportedcontent",
    "functionName": "postConversationsMessagingSupportedcontent",
    "signature": "postConversationsMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SupportedContent",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SupportedContent = new SupportedContent(...) // SupportedContent\n\n// Create a Supported Content profile\nPostConversationsMessagingSupportedcontentRequest.postConversationsMessagingSupportedcontent(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationsMessagingSupportedcontentRequest.postConversationsMessagingSupportedcontent was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationparticipantflaggedreason": {
    "operationId": "putconversationparticipantflaggedreason",
    "functionName": "putConversationParticipantFlaggedreason",
    "signature": "putConversationParticipantFlaggedreason(conversationId, participantId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet participantId: String = \"\" // participant ID\n\n// Set flagged reason on conversation participant to indicate bad conversation quality.\nPutConversationParticipantFlaggedreasonRequest.putConversationParticipantFlaggedreason(conversationId: conversationId, participantId: participantId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutConversationParticipantFlaggedreasonRequest.putConversationParticipantFlaggedreason was successful\")\n    }\n}"
  },
  "putconversationtags": {
    "operationId": "putconversationtags",
    "functionName": "putConversationTags",
    "signature": "putConversationTags(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ConversationTagsUpdate",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversation ID\nlet body: ConversationTagsUpdate = new ConversationTagsUpdate(...) // Conversation Tags\n\n// Update the tags on a conversation.\nPutConversationTagsRequest.putConversationTags(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationTagsRequest.putConversationTags was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationscallparticipantcommunicationuuidata": {
    "operationId": "putconversationscallparticipantcommunicationuuidata",
    "functionName": "putConversationsCallParticipantCommunicationUuidata",
    "signature": "putConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "participantId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SetUuiDataRequest",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet participantId: String = \"\" // participantId\nlet communicationId: String = \"\" // communicationId\nlet body: SetUuiDataRequest = new SetUuiDataRequest(...) // UUIData Request\n\n// Set uuiData to be sent on future commands.\nPutConversationsCallParticipantCommunicationUuidataRequest.putConversationsCallParticipantCommunicationUuidata(conversationId: conversationId, participantId: participantId, communicationId: communicationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationsCallParticipantCommunicationUuidataRequest.putConversationsCallParticipantCommunicationUuidata was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationsemailmessagesdraft": {
    "operationId": "putconversationsemailmessagesdraft",
    "functionName": "putConversationsEmailMessagesDraft",
    "signature": "putConversationsEmailMessagesDraft(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EmailMessage",
        "required": "true"
      }
    ],
    "return": "EmailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: EmailMessage = new EmailMessage(...) // Draft\n\n// Update conversation draft reply\nPutConversationsEmailMessagesDraftRequest.putConversationsEmailMessagesDraft(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationsEmailMessagesDraftRequest.putConversationsEmailMessagesDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationsmessagingintegrationslineintegrationid": {
    "operationId": "putconversationsmessagingintegrationslineintegrationid",
    "functionName": "putConversationsMessagingIntegrationsLineIntegrationId",
    "signature": "putConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LineIntegrationRequest",
        "required": "true"
      }
    ],
    "return": "LineIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration ID\nlet body: LineIntegrationRequest = new LineIntegrationRequest(...) // LineIntegrationRequest\n\n// Update a LINE messenger integration\nPutConversationsMessagingIntegrationsLineIntegrationIdRequest.putConversationsMessagingIntegrationsLineIntegrationId(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationsMessagingIntegrationsLineIntegrationIdRequest.putConversationsMessagingIntegrationsLineIntegrationId was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationsmessagingsupportedcontentdefault": {
    "operationId": "putconversationsmessagingsupportedcontentdefault",
    "functionName": "putConversationsMessagingSupportedcontentDefault",
    "signature": "putConversationsMessagingSupportedcontentDefault(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SupportedContentReference",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SupportedContentReference = new SupportedContentReference(...) // SupportedContent\n\n// Set the organization's default supported content profile that may be assigned to an integration when it is created.\nPutConversationsMessagingSupportedcontentDefaultRequest.putConversationsMessagingSupportedcontentDefault(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationsMessagingSupportedcontentDefaultRequest.putConversationsMessagingSupportedcontentDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationsmessagingthreadingtimeline": {
    "operationId": "putconversationsmessagingthreadingtimeline",
    "functionName": "putConversationsMessagingThreadingtimeline",
    "signature": "putConversationsMessagingThreadingtimeline(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ConversationThreadingWindow",
        "required": "true"
      }
    ],
    "return": "ConversationThreadingWindow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ConversationThreadingWindow = new ConversationThreadingWindow(...) // ConversationThreadingWindowRequest\n\n// Update conversation threading window timeline for each messaging type\nPutConversationsMessagingThreadingtimelineRequest.putConversationsMessagingThreadingtimeline(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationsMessagingThreadingtimelineRequest.putConversationsMessagingThreadingtimeline was successful\")\n        dump(response)\n    }\n}"
  },
  "getdataextensionscoretype": {
    "operationId": "getdataextensionscoretype",
    "functionName": "getDataextensionsCoretype",
    "signature": "getDataextensionsCoretype(coretypeName)",
    "parameters": [
      {
        "name": "coretypeName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Coretype",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet coretypeName: GetDataextensionsCoretypeRequest.CoretypeName_getDataextensionsCoretype = GetDataextensionsCoretypeRequest.CoretypeName_getDataextensionsCoretype.enummember // The core type's name\n\n// Get a specific named core type.\nGetDataextensionsCoretypeRequest.getDataextensionsCoretype(coretypeName: coretypeName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDataextensionsCoretypeRequest.getDataextensionsCoretype was successful\")\n        dump(response)\n    }\n}"
  },
  "getdataextensionscoretypes": {
    "operationId": "getdataextensionscoretypes",
    "functionName": "getDataextensionsCoretypes",
    "signature": "getDataextensionsCoretypes()",
    "return": "CoretypeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the core types from which all schemas are built.\nGetDataextensionsCoretypesRequest.getDataextensionsCoretypes() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDataextensionsCoretypesRequest.getDataextensionsCoretypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getdataextensionslimits": {
    "operationId": "getdataextensionslimits",
    "functionName": "getDataextensionsLimits",
    "signature": "getDataextensionsLimits()",
    "return": "SchemaQuantityLimits",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get quantitative limits on schemas\nGetDataextensionsLimitsRequest.getDataextensionsLimits() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDataextensionsLimitsRequest.getDataextensionsLimits was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteexternalcontactscontact": {
    "operationId": "deleteexternalcontactscontact",
    "functionName": "deleteExternalcontactsContact",
    "signature": "deleteExternalcontactsContact(contactId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact ID\n\n// Delete an external contact\nDeleteExternalcontactsContactRequest.deleteExternalcontactsContact(contactId: contactId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteExternalcontactsContactRequest.deleteExternalcontactsContact was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteexternalcontactscontactnote": {
    "operationId": "deleteexternalcontactscontactnote",
    "functionName": "deleteExternalcontactsContactNote",
    "signature": "deleteExternalcontactsContactNote(contactId, noteId)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact Id\nlet noteId: String = \"\" // Note Id\n\n// Delete a note for an external contact\nDeleteExternalcontactsContactNoteRequest.deleteExternalcontactsContactNote(contactId: contactId, noteId: noteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteExternalcontactsContactNoteRequest.deleteExternalcontactsContactNote was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteexternalcontactscontactsschema": {
    "operationId": "deleteexternalcontactscontactsschema",
    "functionName": "deleteExternalcontactsContactsSchema",
    "signature": "deleteExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\n\n// Delete a schema\nDeleteExternalcontactsContactsSchemaRequest.deleteExternalcontactsContactsSchema(schemaId: schemaId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteExternalcontactsContactsSchemaRequest.deleteExternalcontactsContactsSchema was successful\")\n    }\n}"
  },
  "deleteexternalcontactsorganization": {
    "operationId": "deleteexternalcontactsorganization",
    "functionName": "deleteExternalcontactsOrganization",
    "signature": "deleteExternalcontactsOrganization(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\n\n// Delete an external organization\nDeleteExternalcontactsOrganizationRequest.deleteExternalcontactsOrganization(externalOrganizationId: externalOrganizationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteExternalcontactsOrganizationRequest.deleteExternalcontactsOrganization was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteexternalcontactsorganizationnote": {
    "operationId": "deleteexternalcontactsorganizationnote",
    "functionName": "deleteExternalcontactsOrganizationNote",
    "signature": "deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization Id\nlet noteId: String = \"\" // Note Id\n\n// Delete a note for an external organization\nDeleteExternalcontactsOrganizationNoteRequest.deleteExternalcontactsOrganizationNote(externalOrganizationId: externalOrganizationId, noteId: noteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteExternalcontactsOrganizationNoteRequest.deleteExternalcontactsOrganizationNote was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteexternalcontactsorganizationtrustor": {
    "operationId": "deleteexternalcontactsorganizationtrustor",
    "functionName": "deleteExternalcontactsOrganizationTrustor",
    "signature": "deleteExternalcontactsOrganizationTrustor(externalOrganizationId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\n\n// Unlink the Trustor for this External Organization\nDeleteExternalcontactsOrganizationTrustorRequest.deleteExternalcontactsOrganizationTrustor(externalOrganizationId: externalOrganizationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteExternalcontactsOrganizationTrustorRequest.deleteExternalcontactsOrganizationTrustor was successful\")\n    }\n}"
  },
  "deleteexternalcontactsrelationship": {
    "operationId": "deleteexternalcontactsrelationship",
    "functionName": "deleteExternalcontactsRelationship",
    "signature": "deleteExternalcontactsRelationship(relationshipId)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet relationshipId: String = \"\" // Relationship Id\n\n// Delete a relationship\nDeleteExternalcontactsRelationshipRequest.deleteExternalcontactsRelationship(relationshipId: relationshipId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteExternalcontactsRelationshipRequest.deleteExternalcontactsRelationship was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontact": {
    "operationId": "getexternalcontactscontact",
    "functionName": "getExternalcontactsContact",
    "signature": "getExternalcontactsContact(contactId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ExternalContact",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact ID\nlet expand: [String] = [\"\"] // which fields, if any, to expand (externalOrganization,externalDataSources)\n\n// Fetch an external contact\nGetExternalcontactsContactRequest.getExternalcontactsContact(contactId: contactId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactRequest.getExternalcontactsContact was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactnote": {
    "operationId": "getexternalcontactscontactnote",
    "functionName": "getExternalcontactsContactNote",
    "signature": "getExternalcontactsContactNote(contactId, noteId, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact Id\nlet noteId: String = \"\" // Note Id\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// Fetch a note for an external contact\nGetExternalcontactsContactNoteRequest.getExternalcontactsContactNote(contactId: contactId, noteId: noteId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactNoteRequest.getExternalcontactsContactNote was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactnotes": {
    "operationId": "getexternalcontactscontactnotes",
    "functionName": "getExternalcontactsContactNotes",
    "signature": "getExternalcontactsContactNotes(contactId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact Id\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// List notes for an external contact\nGetExternalcontactsContactNotesRequest.getExternalcontactsContactNotes(contactId: contactId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactNotesRequest.getExternalcontactsContactNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontacts": {
    "operationId": "getexternalcontactscontacts",
    "functionName": "getExternalcontactsContacts",
    "signature": "getExternalcontactsContacts(pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet q: String = \"\" // User supplied search keywords (no special syntax is currently supported)\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// Search for external contacts\nGetExternalcontactsContactsRequest.getExternalcontactsContacts(pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactsRequest.getExternalcontactsContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactsschema": {
    "operationId": "getexternalcontactscontactsschema",
    "functionName": "getExternalcontactsContactsSchema",
    "signature": "getExternalcontactsContactsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\n\n// Get a schema\nGetExternalcontactsContactsSchemaRequest.getExternalcontactsContactsSchema(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactsSchemaRequest.getExternalcontactsContactsSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactsschemaversion": {
    "operationId": "getexternalcontactscontactsschemaversion",
    "functionName": "getExternalcontactsContactsSchemaVersion",
    "signature": "getExternalcontactsContactsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\nlet versionId: String = \"\" // Schema version\n\n// Get a specific version of a schema\nGetExternalcontactsContactsSchemaVersionRequest.getExternalcontactsContactsSchemaVersion(schemaId: schemaId, versionId: versionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactsSchemaVersionRequest.getExternalcontactsContactsSchemaVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactsschemaversions": {
    "operationId": "getexternalcontactscontactsschemaversions",
    "functionName": "getExternalcontactsContactsSchemaVersions",
    "signature": "getExternalcontactsContactsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\n\n// Get all versions of an external contact's schema\nGetExternalcontactsContactsSchemaVersionsRequest.getExternalcontactsContactsSchemaVersions(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactsSchemaVersionsRequest.getExternalcontactsContactsSchemaVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactscontactsschemas": {
    "operationId": "getexternalcontactscontactsschemas",
    "functionName": "getExternalcontactsContactsSchemas",
    "signature": "getExternalcontactsContactsSchemas()",
    "return": "DataSchemaListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of schemas.\nGetExternalcontactsContactsSchemasRequest.getExternalcontactsContactsSchemas() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsContactsSchemasRequest.getExternalcontactsContactsSchemas was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganization": {
    "operationId": "getexternalcontactsorganization",
    "functionName": "getExternalcontactsOrganization",
    "signature": "getExternalcontactsOrganization(externalOrganizationId, expand, includeTrustors)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ExternalOrganization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\nlet expand: GetExternalcontactsOrganizationRequest.Expand_getExternalcontactsOrganization = GetExternalcontactsOrganizationRequest.Expand_getExternalcontactsOrganization.enummember // which fields, if any, to expand (externalDataSources)\nlet includeTrustors: Bool = true // (true or false) whether or not to include trustor information embedded in the externalOrganization\n\n// Fetch an external organization\nGetExternalcontactsOrganizationRequest.getExternalcontactsOrganization(externalOrganizationId: externalOrganizationId, expand: expand, includeTrustors: includeTrustors) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationRequest.getExternalcontactsOrganization was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationcontacts": {
    "operationId": "getexternalcontactsorganizationcontacts",
    "functionName": "getExternalcontactsOrganizationContacts",
    "signature": "getExternalcontactsOrganizationContacts(externalOrganizationId, pageSize, pageNumber, q, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ContactListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet q: String = \"\" // User supplied search keywords (no special syntax is currently supported)\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// Search for external contacts in an external organization\nGetExternalcontactsOrganizationContactsRequest.getExternalcontactsOrganizationContacts(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationContactsRequest.getExternalcontactsOrganizationContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationnote": {
    "operationId": "getexternalcontactsorganizationnote",
    "functionName": "getExternalcontactsOrganizationNote",
    "signature": "getExternalcontactsOrganizationNote(externalOrganizationId, noteId, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization Id\nlet noteId: String = \"\" // Note Id\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// Fetch a note for an external organization\nGetExternalcontactsOrganizationNoteRequest.getExternalcontactsOrganizationNote(externalOrganizationId: externalOrganizationId, noteId: noteId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationNoteRequest.getExternalcontactsOrganizationNote was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationnotes": {
    "operationId": "getexternalcontactsorganizationnotes",
    "functionName": "getExternalcontactsOrganizationNotes",
    "signature": "getExternalcontactsOrganizationNotes(externalOrganizationId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NoteListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization Id\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // which fields, if any, to expand\n\n// List notes for an external organization\nGetExternalcontactsOrganizationNotesRequest.getExternalcontactsOrganizationNotes(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationNotesRequest.getExternalcontactsOrganizationNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationrelationships": {
    "operationId": "getexternalcontactsorganizationrelationships",
    "functionName": "getExternalcontactsOrganizationRelationships",
    "signature": "getExternalcontactsOrganizationRelationships(externalOrganizationId, pageSize, pageNumber, expand, sortOrder)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RelationshipListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet expand: GetExternalcontactsOrganizationRelationshipsRequest.Expand_getExternalcontactsOrganizationRelationships = GetExternalcontactsOrganizationRelationshipsRequest.Expand_getExternalcontactsOrganizationRelationships.enummember // which fields, if any, to expand\nlet sortOrder: String = \"\" // Sort order\n\n// Fetch a relationship for an external organization\nGetExternalcontactsOrganizationRelationshipsRequest.getExternalcontactsOrganizationRelationships(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, expand: expand, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationRelationshipsRequest.getExternalcontactsOrganizationRelationships was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizations": {
    "operationId": "getexternalcontactsorganizations",
    "functionName": "getExternalcontactsOrganizations",
    "signature": "getExternalcontactsOrganizations(pageSize, pageNumber, q, trustorId, sortOrder, expand, includeTrustors)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "q",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trustorId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includeTrustors",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ExternalOrganizationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet pageNumber: Int = 0 // Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)\nlet q: String = \"\" // Search query\nlet trustorId: [String] = [\"\"] // Search for external organizations by trustorIds (limit 25). If supplied, the 'q' parameters is ignored. Items are returned in the order requested\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // which fields, if any, to expand\nlet includeTrustors: Bool = true // (true or false) whether or not to include trustor information embedded in the externalOrganization\n\n// Search for external organizations\nGetExternalcontactsOrganizationsRequest.getExternalcontactsOrganizations(pageSize: pageSize, pageNumber: pageNumber, q: q, trustorId: trustorId, sortOrder: sortOrder, expand: expand, includeTrustors: includeTrustors) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationsRequest.getExternalcontactsOrganizations was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationsschema": {
    "operationId": "getexternalcontactsorganizationsschema",
    "functionName": "getExternalcontactsOrganizationsSchema",
    "signature": "getExternalcontactsOrganizationsSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\n\n// Get a schema\nGetExternalcontactsOrganizationsSchemaRequest.getExternalcontactsOrganizationsSchema(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationsSchemaRequest.getExternalcontactsOrganizationsSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationsschemaversion": {
    "operationId": "getexternalcontactsorganizationsschemaversion",
    "functionName": "getExternalcontactsOrganizationsSchemaVersion",
    "signature": "getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\nlet versionId: String = \"\" // Schema version\n\n// Get a specific version of a schema\nGetExternalcontactsOrganizationsSchemaVersionRequest.getExternalcontactsOrganizationsSchemaVersion(schemaId: schemaId, versionId: versionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationsSchemaVersionRequest.getExternalcontactsOrganizationsSchemaVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationsschemaversions": {
    "operationId": "getexternalcontactsorganizationsschemaversions",
    "functionName": "getExternalcontactsOrganizationsSchemaVersions",
    "signature": "getExternalcontactsOrganizationsSchemaVersions(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\n\n// Get all versions of an external organization's schema\nGetExternalcontactsOrganizationsSchemaVersionsRequest.getExternalcontactsOrganizationsSchemaVersions(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationsSchemaVersionsRequest.getExternalcontactsOrganizationsSchemaVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsorganizationsschemas": {
    "operationId": "getexternalcontactsorganizationsschemas",
    "functionName": "getExternalcontactsOrganizationsSchemas",
    "signature": "getExternalcontactsOrganizationsSchemas()",
    "return": "DataSchemaListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of schemas.\nGetExternalcontactsOrganizationsSchemasRequest.getExternalcontactsOrganizationsSchemas() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsOrganizationsSchemasRequest.getExternalcontactsOrganizationsSchemas was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsrelationship": {
    "operationId": "getexternalcontactsrelationship",
    "functionName": "getExternalcontactsRelationship",
    "signature": "getExternalcontactsRelationship(relationshipId, expand)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Relationship",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet relationshipId: String = \"\" // Relationship Id\nlet expand: GetExternalcontactsRelationshipRequest.Expand_getExternalcontactsRelationship = GetExternalcontactsRelationshipRequest.Expand_getExternalcontactsRelationship.enummember // which fields, if any, to expand\n\n// Fetch a relationship\nGetExternalcontactsRelationshipRequest.getExternalcontactsRelationship(relationshipId: relationshipId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsRelationshipRequest.getExternalcontactsRelationship was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsreversewhitepageslookup": {
    "operationId": "getexternalcontactsreversewhitepageslookup",
    "functionName": "getExternalcontactsReversewhitepageslookup",
    "signature": "getExternalcontactsReversewhitepageslookup(lookupVal, expand)",
    "parameters": [
      {
        "name": "lookupVal",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ReverseWhitepagesLookupResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet lookupVal: String = \"\" // User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names)\nlet expand: [String] = [\"\"] // which field, if any, to expand\n\n// Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.\nGetExternalcontactsReversewhitepageslookupRequest.getExternalcontactsReversewhitepageslookup(lookupVal: lookupVal, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsReversewhitepageslookupRequest.getExternalcontactsReversewhitepageslookup was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsscancontacts": {
    "operationId": "getexternalcontactsscancontacts",
    "functionName": "getExternalcontactsScanContacts",
    "signature": "getExternalcontactsScanContacts(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorContactListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet limit: Int = 0 // The number of contacts per page; must be between 10 and 200, default is 100)\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n\n// Scan for external contacts using paging\nGetExternalcontactsScanContactsRequest.getExternalcontactsScanContacts(limit: limit, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsScanContactsRequest.getExternalcontactsScanContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsscannotes": {
    "operationId": "getexternalcontactsscannotes",
    "functionName": "getExternalcontactsScanNotes",
    "signature": "getExternalcontactsScanNotes(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorNoteListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet limit: Int = 0 // The number of notes per page; must be between 10 and 200, default is 100)\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n\n// Scan for notes using paging\nGetExternalcontactsScanNotesRequest.getExternalcontactsScanNotes(limit: limit, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsScanNotesRequest.getExternalcontactsScanNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsscanorganizations": {
    "operationId": "getexternalcontactsscanorganizations",
    "functionName": "getExternalcontactsScanOrganizations",
    "signature": "getExternalcontactsScanOrganizations(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorOrganizationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet limit: Int = 0 // The number of organizations per page; must be between 10 and 200, default is 100)\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n\n// Scan for external organizations using paging\nGetExternalcontactsScanOrganizationsRequest.getExternalcontactsScanOrganizations(limit: limit, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsScanOrganizationsRequest.getExternalcontactsScanOrganizations was successful\")\n        dump(response)\n    }\n}"
  },
  "getexternalcontactsscanrelationships": {
    "operationId": "getexternalcontactsscanrelationships",
    "functionName": "getExternalcontactsScanRelationships",
    "signature": "getExternalcontactsScanRelationships(limit, cursor)",
    "parameters": [
      {
        "name": "limit",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CursorRelationshipListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet limit: Int = 0 // The number of relationships per page; must be between 10 and 200, default is 100)\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL\n\n// Scan for relationships\nGetExternalcontactsScanRelationshipsRequest.getExternalcontactsScanRelationships(limit: limit, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetExternalcontactsScanRelationshipsRequest.getExternalcontactsScanRelationships was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkcontacts": {
    "operationId": "postexternalcontactsbulkcontacts",
    "functionName": "postExternalcontactsBulkContacts",
    "signature": "postExternalcontactsBulkContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkFetchContactsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Contact ids\n\n// Bulk fetch contacts\nPostExternalcontactsBulkContactsRequest.postExternalcontactsBulkContacts(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkContactsRequest.postExternalcontactsBulkContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkcontactsadd": {
    "operationId": "postexternalcontactsbulkcontactsadd",
    "functionName": "postExternalcontactsBulkContactsAdd",
    "signature": "postExternalcontactsBulkContactsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkContactsRequest",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkContactsRequest = new BulkContactsRequest(...) // Contacts\n\n// Bulk add contacts\nPostExternalcontactsBulkContactsAddRequest.postExternalcontactsBulkContactsAdd(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkContactsAddRequest.postExternalcontactsBulkContactsAdd was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkcontactsremove": {
    "operationId": "postexternalcontactsbulkcontactsremove",
    "functionName": "postExternalcontactsBulkContactsRemove",
    "signature": "postExternalcontactsBulkContactsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Contact ids\n\n// Bulk remove contacts\nPostExternalcontactsBulkContactsRemoveRequest.postExternalcontactsBulkContactsRemove(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkContactsRemoveRequest.postExternalcontactsBulkContactsRemove was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkcontactsupdate": {
    "operationId": "postexternalcontactsbulkcontactsupdate",
    "functionName": "postExternalcontactsBulkContactsUpdate",
    "signature": "postExternalcontactsBulkContactsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkContactsRequest",
        "required": "true"
      }
    ],
    "return": "BulkContactsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkContactsRequest = new BulkContactsRequest(...) // Contacts\n\n// Bulk update contacts\nPostExternalcontactsBulkContactsUpdateRequest.postExternalcontactsBulkContactsUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkContactsUpdateRequest.postExternalcontactsBulkContactsUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulknotes": {
    "operationId": "postexternalcontactsbulknotes",
    "functionName": "postExternalcontactsBulkNotes",
    "signature": "postExternalcontactsBulkNotes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkFetchNotesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Note ids\n\n// Bulk fetch notes\nPostExternalcontactsBulkNotesRequest.postExternalcontactsBulkNotes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkNotesRequest.postExternalcontactsBulkNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulknotesadd": {
    "operationId": "postexternalcontactsbulknotesadd",
    "functionName": "postExternalcontactsBulkNotesAdd",
    "signature": "postExternalcontactsBulkNotesAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkNotesRequest",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkNotesRequest = new BulkNotesRequest(...) // Notes\n\n// Bulk add notes\nPostExternalcontactsBulkNotesAddRequest.postExternalcontactsBulkNotesAdd(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkNotesAddRequest.postExternalcontactsBulkNotesAdd was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulknotesremove": {
    "operationId": "postexternalcontactsbulknotesremove",
    "functionName": "postExternalcontactsBulkNotesRemove",
    "signature": "postExternalcontactsBulkNotesRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Note ids\n\n// Bulk remove notes\nPostExternalcontactsBulkNotesRemoveRequest.postExternalcontactsBulkNotesRemove(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkNotesRemoveRequest.postExternalcontactsBulkNotesRemove was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulknotesupdate": {
    "operationId": "postexternalcontactsbulknotesupdate",
    "functionName": "postExternalcontactsBulkNotesUpdate",
    "signature": "postExternalcontactsBulkNotesUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkNotesRequest",
        "required": "true"
      }
    ],
    "return": "BulkNotesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkNotesRequest = new BulkNotesRequest(...) // Notes\n\n// Bulk update notes\nPostExternalcontactsBulkNotesUpdateRequest.postExternalcontactsBulkNotesUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkNotesUpdateRequest.postExternalcontactsBulkNotesUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkorganizations": {
    "operationId": "postexternalcontactsbulkorganizations",
    "functionName": "postExternalcontactsBulkOrganizations",
    "signature": "postExternalcontactsBulkOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkFetchOrganizationsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Organizations ids\n\n// Bulk fetch organizations\nPostExternalcontactsBulkOrganizationsRequest.postExternalcontactsBulkOrganizations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkOrganizationsRequest.postExternalcontactsBulkOrganizations was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkorganizationsadd": {
    "operationId": "postexternalcontactsbulkorganizationsadd",
    "functionName": "postExternalcontactsBulkOrganizationsAdd",
    "signature": "postExternalcontactsBulkOrganizationsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkOrganizationsRequest",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkOrganizationsRequest = new BulkOrganizationsRequest(...) // Organizations\n\n// Bulk add organizations\nPostExternalcontactsBulkOrganizationsAddRequest.postExternalcontactsBulkOrganizationsAdd(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkOrganizationsAddRequest.postExternalcontactsBulkOrganizationsAdd was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkorganizationsremove": {
    "operationId": "postexternalcontactsbulkorganizationsremove",
    "functionName": "postExternalcontactsBulkOrganizationsRemove",
    "signature": "postExternalcontactsBulkOrganizationsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Organization ids\n\n// Bulk remove organizations\nPostExternalcontactsBulkOrganizationsRemoveRequest.postExternalcontactsBulkOrganizationsRemove(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkOrganizationsRemoveRequest.postExternalcontactsBulkOrganizationsRemove was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkorganizationsupdate": {
    "operationId": "postexternalcontactsbulkorganizationsupdate",
    "functionName": "postExternalcontactsBulkOrganizationsUpdate",
    "signature": "postExternalcontactsBulkOrganizationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkOrganizationsRequest",
        "required": "true"
      }
    ],
    "return": "BulkOrganizationsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkOrganizationsRequest = new BulkOrganizationsRequest(...) // Organizations\n\n// Bulk update organizations\nPostExternalcontactsBulkOrganizationsUpdateRequest.postExternalcontactsBulkOrganizationsUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkOrganizationsUpdateRequest.postExternalcontactsBulkOrganizationsUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkrelationships": {
    "operationId": "postexternalcontactsbulkrelationships",
    "functionName": "postExternalcontactsBulkRelationships",
    "signature": "postExternalcontactsBulkRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkFetchRelationshipsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Relationships ids\n\n// Bulk fetch relationships\nPostExternalcontactsBulkRelationshipsRequest.postExternalcontactsBulkRelationships(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkRelationshipsRequest.postExternalcontactsBulkRelationships was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkrelationshipsadd": {
    "operationId": "postexternalcontactsbulkrelationshipsadd",
    "functionName": "postExternalcontactsBulkRelationshipsAdd",
    "signature": "postExternalcontactsBulkRelationshipsAdd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkRelationshipsRequest",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkRelationshipsRequest = new BulkRelationshipsRequest(...) // Relationships\n\n// Bulk add relationships\nPostExternalcontactsBulkRelationshipsAddRequest.postExternalcontactsBulkRelationshipsAdd(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkRelationshipsAddRequest.postExternalcontactsBulkRelationshipsAdd was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkrelationshipsremove": {
    "operationId": "postexternalcontactsbulkrelationshipsremove",
    "functionName": "postExternalcontactsBulkRelationshipsRemove",
    "signature": "postExternalcontactsBulkRelationshipsRemove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkIdsRequest",
        "required": "true"
      }
    ],
    "return": "BulkDeleteResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkIdsRequest = new BulkIdsRequest(...) // Relationships ids\n\n// Bulk remove relationships\nPostExternalcontactsBulkRelationshipsRemoveRequest.postExternalcontactsBulkRelationshipsRemove(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkRelationshipsRemoveRequest.postExternalcontactsBulkRelationshipsRemove was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsbulkrelationshipsupdate": {
    "operationId": "postexternalcontactsbulkrelationshipsupdate",
    "functionName": "postExternalcontactsBulkRelationshipsUpdate",
    "signature": "postExternalcontactsBulkRelationshipsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BulkRelationshipsRequest",
        "required": "true"
      }
    ],
    "return": "BulkRelationshipsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BulkRelationshipsRequest = new BulkRelationshipsRequest(...) // Relationships\n\n// Bulk update relationships\nPostExternalcontactsBulkRelationshipsUpdateRequest.postExternalcontactsBulkRelationshipsUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsBulkRelationshipsUpdateRequest.postExternalcontactsBulkRelationshipsUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactscontactnotes": {
    "operationId": "postexternalcontactscontactnotes",
    "functionName": "postExternalcontactsContactNotes",
    "signature": "postExternalcontactsContactNotes(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Note",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact Id\nlet body: Note = new Note(...) // ExternalContact\n\n// Create a note for an external contact\nPostExternalcontactsContactNotesRequest.postExternalcontactsContactNotes(contactId: contactId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsContactNotesRequest.postExternalcontactsContactNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactscontacts": {
    "operationId": "postexternalcontactscontacts",
    "functionName": "postExternalcontactsContacts",
    "signature": "postExternalcontactsContacts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ExternalContact",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ExternalContact = new ExternalContact(...) // ExternalContact\n\n// Create an external contact\nPostExternalcontactsContactsRequest.postExternalcontactsContacts(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsContactsRequest.postExternalcontactsContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactscontactsschemas": {
    "operationId": "postexternalcontactscontactsschemas",
    "functionName": "postExternalcontactsContactsSchemas",
    "signature": "postExternalcontactsContactsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DataSchema",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DataSchema = new DataSchema(...) // Schema\n\n// Create a schema\nPostExternalcontactsContactsSchemasRequest.postExternalcontactsContactsSchemas(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsContactsSchemasRequest.postExternalcontactsContactsSchemas was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsorganizationnotes": {
    "operationId": "postexternalcontactsorganizationnotes",
    "functionName": "postExternalcontactsOrganizationNotes",
    "signature": "postExternalcontactsOrganizationNotes(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Note",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization Id\nlet body: Note = new Note(...) // ExternalContact\n\n// Create a note for an external organization\nPostExternalcontactsOrganizationNotesRequest.postExternalcontactsOrganizationNotes(externalOrganizationId: externalOrganizationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsOrganizationNotesRequest.postExternalcontactsOrganizationNotes was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsorganizations": {
    "operationId": "postexternalcontactsorganizations",
    "functionName": "postExternalcontactsOrganizations",
    "signature": "postExternalcontactsOrganizations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ExternalOrganization",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ExternalOrganization = new ExternalOrganization(...) // ExternalOrganization\n\n// Create an external organization\nPostExternalcontactsOrganizationsRequest.postExternalcontactsOrganizations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsOrganizationsRequest.postExternalcontactsOrganizations was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsorganizationsschemas": {
    "operationId": "postexternalcontactsorganizationsschemas",
    "functionName": "postExternalcontactsOrganizationsSchemas",
    "signature": "postExternalcontactsOrganizationsSchemas(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DataSchema",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DataSchema = new DataSchema(...) // Schema\n\n// Create a schema\nPostExternalcontactsOrganizationsSchemasRequest.postExternalcontactsOrganizationsSchemas(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsOrganizationsSchemasRequest.postExternalcontactsOrganizationsSchemas was successful\")\n        dump(response)\n    }\n}"
  },
  "postexternalcontactsrelationships": {
    "operationId": "postexternalcontactsrelationships",
    "functionName": "postExternalcontactsRelationships",
    "signature": "postExternalcontactsRelationships(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Relationship",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Relationship = new Relationship(...) // Relationship\n\n// Create a relationship\nPostExternalcontactsRelationshipsRequest.postExternalcontactsRelationships(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostExternalcontactsRelationshipsRequest.postExternalcontactsRelationships was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactscontact": {
    "operationId": "putexternalcontactscontact",
    "functionName": "putExternalcontactsContact",
    "signature": "putExternalcontactsContact(contactId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ExternalContact",
        "required": "true"
      }
    ],
    "return": "ExternalContact",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact ID\nlet body: ExternalContact = new ExternalContact(...) // ExternalContact\n\n// Update an external contact\nPutExternalcontactsContactRequest.putExternalcontactsContact(contactId: contactId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsContactRequest.putExternalcontactsContact was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactscontactnote": {
    "operationId": "putexternalcontactscontactnote",
    "functionName": "putExternalcontactsContactNote",
    "signature": "putExternalcontactsContactNote(contactId, noteId, body)",
    "parameters": [
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Note",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactId: String = \"\" // ExternalContact Id\nlet noteId: String = \"\" // Note Id\nlet body: Note = new Note(...) // Note\n\n// Update a note for an external contact\nPutExternalcontactsContactNoteRequest.putExternalcontactsContactNote(contactId: contactId, noteId: noteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsContactNoteRequest.putExternalcontactsContactNote was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactscontactsschema": {
    "operationId": "putexternalcontactscontactsschema",
    "functionName": "putExternalcontactsContactsSchema",
    "signature": "putExternalcontactsContactsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DataSchema",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\nlet body: DataSchema = new DataSchema(...) // Data Schema\n\n// Update a schema\nPutExternalcontactsContactsSchemaRequest.putExternalcontactsContactsSchema(schemaId: schemaId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsContactsSchemaRequest.putExternalcontactsContactsSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactsconversation": {
    "operationId": "putexternalcontactsconversation",
    "functionName": "putExternalcontactsConversation",
    "signature": "putExternalcontactsConversation(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ConversationAssociation",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet body: ConversationAssociation = new ConversationAssociation(...) // ConversationAssociation\n\n// Associate/disassociate an external contact with a conversation\nPutExternalcontactsConversationRequest.putExternalcontactsConversation(conversationId: conversationId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutExternalcontactsConversationRequest.putExternalcontactsConversation was successful\")\n    }\n}"
  },
  "putexternalcontactsorganization": {
    "operationId": "putexternalcontactsorganization",
    "functionName": "putExternalcontactsOrganization",
    "signature": "putExternalcontactsOrganization(externalOrganizationId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ExternalOrganization",
        "required": "true"
      }
    ],
    "return": "ExternalOrganization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\nlet body: ExternalOrganization = new ExternalOrganization(...) // ExternalOrganization\n\n// Update an external organization\nPutExternalcontactsOrganizationRequest.putExternalcontactsOrganization(externalOrganizationId: externalOrganizationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsOrganizationRequest.putExternalcontactsOrganization was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactsorganizationnote": {
    "operationId": "putexternalcontactsorganizationnote",
    "functionName": "putExternalcontactsOrganizationNote",
    "signature": "putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "noteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Note",
        "required": "true"
      }
    ],
    "return": "Note",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization Id\nlet noteId: String = \"\" // Note Id\nlet body: Note = new Note(...) // Note\n\n// Update a note for an external organization\nPutExternalcontactsOrganizationNoteRequest.putExternalcontactsOrganizationNote(externalOrganizationId: externalOrganizationId, noteId: noteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsOrganizationNoteRequest.putExternalcontactsOrganizationNote was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactsorganizationtrustortrustorid": {
    "operationId": "putexternalcontactsorganizationtrustortrustorid",
    "functionName": "putExternalcontactsOrganizationTrustorTrustorId",
    "signature": "putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)",
    "parameters": [
      {
        "name": "externalOrganizationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trustorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExternalOrganizationTrustorLink",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet externalOrganizationId: String = \"\" // External Organization ID\nlet trustorId: String = \"\" // Trustor ID\n\n// Links a Trustor with an External Organization\nPutExternalcontactsOrganizationTrustorTrustorIdRequest.putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId: externalOrganizationId, trustorId: trustorId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsOrganizationTrustorTrustorIdRequest.putExternalcontactsOrganizationTrustorTrustorId was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactsorganizationsschema": {
    "operationId": "putexternalcontactsorganizationsschema",
    "functionName": "putExternalcontactsOrganizationsSchema",
    "signature": "putExternalcontactsOrganizationsSchema(schemaId, body)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DataSchema",
        "required": "true"
      }
    ],
    "return": "DataSchema",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: String = \"\" // Schema ID\nlet body: DataSchema = new DataSchema(...) // Data Schema\n\n// Update a schema\nPutExternalcontactsOrganizationsSchemaRequest.putExternalcontactsOrganizationsSchema(schemaId: schemaId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsOrganizationsSchemaRequest.putExternalcontactsOrganizationsSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "putexternalcontactsrelationship": {
    "operationId": "putexternalcontactsrelationship",
    "functionName": "putExternalcontactsRelationship",
    "signature": "putExternalcontactsRelationship(relationshipId, body)",
    "parameters": [
      {
        "name": "relationshipId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Relationship",
        "required": "true"
      }
    ],
    "return": "Relationship",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet relationshipId: String = \"\" // Relationship Id\nlet body: Relationship = new Relationship(...) // Relationship\n\n// Update a relationship\nPutExternalcontactsRelationshipRequest.putExternalcontactsRelationship(relationshipId: relationshipId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutExternalcontactsRelationshipRequest.putExternalcontactsRelationship was successful\")\n        dump(response)\n    }\n}"
  },
  "deletefaxdocument": {
    "operationId": "deletefaxdocument",
    "functionName": "deleteFaxDocument",
    "signature": "deleteFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\n\n// Delete a fax document.\nDeleteFaxDocumentRequest.deleteFaxDocument(documentId: documentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteFaxDocumentRequest.deleteFaxDocument was successful\")\n    }\n}"
  },
  "getfaxdocument": {
    "operationId": "getfaxdocument",
    "functionName": "getFaxDocument",
    "signature": "getFaxDocument(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\n\n// Get a document.\nGetFaxDocumentRequest.getFaxDocument(documentId: documentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFaxDocumentRequest.getFaxDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "getfaxdocumentcontent": {
    "operationId": "getfaxdocumentcontent",
    "functionName": "getFaxDocumentContent",
    "signature": "getFaxDocumentContent(documentId)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DownloadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\n\n// Download a fax document.\nGetFaxDocumentContentRequest.getFaxDocumentContent(documentId: documentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFaxDocumentContentRequest.getFaxDocumentContent was successful\")\n        dump(response)\n    }\n}"
  },
  "getfaxdocuments": {
    "operationId": "getfaxdocuments",
    "functionName": "getFaxDocuments",
    "signature": "getFaxDocuments(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "FaxDocumentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of fax documents.\nGetFaxDocumentsRequest.getFaxDocuments(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFaxDocumentsRequest.getFaxDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "getfaxsummary": {
    "operationId": "getfaxsummary",
    "functionName": "getFaxSummary",
    "signature": "getFaxSummary()",
    "return": "FaxSummary",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get fax summary\nGetFaxSummaryRequest.getFaxSummary() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFaxSummaryRequest.getFaxSummary was successful\")\n        dump(response)\n    }\n}"
  },
  "putfaxdocument": {
    "operationId": "putfaxdocument",
    "functionName": "putFaxDocument",
    "signature": "putFaxDocument(documentId, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "FaxDocument",
        "required": "true"
      }
    ],
    "return": "FaxDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet body: FaxDocument = new FaxDocument(...) // Document\n\n// Update a fax document.\nPutFaxDocumentRequest.putFaxDocument(documentId: documentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutFaxDocumentRequest.putFaxDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationleaderboard": {
    "operationId": "getgamificationleaderboard",
    "functionName": "getGamificationLeaderboard",
    "signature": "getGamificationLeaderboard(startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startWorkday: Date = new Date(...) // Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet metricId: String = \"\" // Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n\n// Leaderboard of the requesting user's division or performance profile\nGetGamificationLeaderboardRequest.getGamificationLeaderboard(startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationLeaderboardRequest.getGamificationLeaderboard was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationleaderboardall": {
    "operationId": "getgamificationleaderboardall",
    "functionName": "getGamificationLeaderboardAll",
    "signature": "getGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, metricId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Leaderboard",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filterType: GetGamificationLeaderboardAllRequest.FilterType_getGamificationLeaderboardAll = GetGamificationLeaderboardAllRequest.FilterType_getGamificationLeaderboardAll.enummember // Filter type for the query request.\nlet filterId: String = \"\" // ID for the filter type. For example, division or performance profile Id\nlet startWorkday: Date = new Date(...) // Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet metricId: String = \"\" // Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given.\n\n// Leaderboard by filter type\nGetGamificationLeaderboardAllRequest.getGamificationLeaderboardAll(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationLeaderboardAllRequest.getGamificationLeaderboardAll was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationleaderboardallbestpoints": {
    "operationId": "getgamificationleaderboardallbestpoints",
    "functionName": "getGamificationLeaderboardAllBestpoints",
    "signature": "getGamificationLeaderboardAllBestpoints(filterType, filterId)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OverallBestPoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filterType: GetGamificationLeaderboardAllBestpointsRequest.FilterType_getGamificationLeaderboardAllBestpoints = GetGamificationLeaderboardAllBestpointsRequest.FilterType_getGamificationLeaderboardAllBestpoints.enummember // Filter type for the query request.\nlet filterId: String = \"\" // ID for the filter type. For example, division or performance profile Id\n\n// Best Points by division or performance profile\nGetGamificationLeaderboardAllBestpointsRequest.getGamificationLeaderboardAllBestpoints(filterType: filterType, filterId: filterId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationLeaderboardAllBestpointsRequest.getGamificationLeaderboardAllBestpoints was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationleaderboardbestpoints": {
    "operationId": "getgamificationleaderboardbestpoints",
    "functionName": "getGamificationLeaderboardBestpoints",
    "signature": "getGamificationLeaderboardBestpoints()",
    "return": "OverallBestPoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Best Points of the requesting user's current performance profile or division\nGetGamificationLeaderboardBestpointsRequest.getGamificationLeaderboardBestpoints() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationLeaderboardBestpointsRequest.getGamificationLeaderboardBestpoints was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationmetric": {
    "operationId": "getgamificationmetric",
    "functionName": "getGamificationMetric",
    "signature": "getGamificationMetric(metricId, workday, performanceProfileId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet metricId: String = \"\" // metric Id\nlet workday: Date = new Date(...) // The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet performanceProfileId: String = \"\" // The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\n\n// Gamified metric by id\nGetGamificationMetricRequest.getGamificationMetric(metricId: metricId, workday: workday, performanceProfileId: performanceProfileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationMetricRequest.getGamificationMetric was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationmetricdefinition": {
    "operationId": "getgamificationmetricdefinition",
    "functionName": "getGamificationMetricdefinition",
    "signature": "getGamificationMetricdefinition(metricDefinitionId)",
    "parameters": [
      {
        "name": "metricDefinitionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MetricDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet metricDefinitionId: String = \"\" // metric definition id\n\n// Metric definition by id\nGetGamificationMetricdefinitionRequest.getGamificationMetricdefinition(metricDefinitionId: metricDefinitionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationMetricdefinitionRequest.getGamificationMetricdefinition was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationmetricdefinitions": {
    "operationId": "getgamificationmetricdefinitions",
    "functionName": "getGamificationMetricdefinitions",
    "signature": "getGamificationMetricdefinitions()",
    "return": "GetMetricDefinitionsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// All metric definitions\nGetGamificationMetricdefinitionsRequest.getGamificationMetricdefinitions() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationMetricdefinitionsRequest.getGamificationMetricdefinitions was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationmetrics": {
    "operationId": "getgamificationmetrics",
    "functionName": "getGamificationMetrics",
    "signature": "getGamificationMetrics(performanceProfileId, workday)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "GetMetricsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet performanceProfileId: String = \"\" // The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\nlet workday: Date = new Date(...) // The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All gamified metrics for a given profile\nGetGamificationMetricsRequest.getGamificationMetrics(performanceProfileId: performanceProfileId, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationMetricsRequest.getGamificationMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofile": {
    "operationId": "getgamificationprofile",
    "functionName": "getGamificationProfile",
    "signature": "getGamificationProfile(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // performanceProfileId\n\n// Performance profile by id\nGetGamificationProfileRequest.getGamificationProfile(profileId: profileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfileRequest.getGamificationProfile was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilemembers": {
    "operationId": "getgamificationprofilemembers",
    "functionName": "getGamificationProfileMembers",
    "signature": "getGamificationProfileMembers(performanceProfileId)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MemberListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet performanceProfileId: String = \"\" // Performance Profile Id\n\n// Members of a given performance profile\nGetGamificationProfileMembersRequest.getGamificationProfileMembers(performanceProfileId: performanceProfileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfileMembersRequest.getGamificationProfileMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilemetric": {
    "operationId": "getgamificationprofilemetric",
    "functionName": "getGamificationProfileMetric",
    "signature": "getGamificationProfileMetric(profileId, metricId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // Performance Profile Id\nlet metricId: String = \"\" // Metric Id\nlet workday: Date = new Date(...) // The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Performance profile gamified metric by id\nGetGamificationProfileMetricRequest.getGamificationProfileMetric(profileId: profileId, metricId: metricId, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfileMetricRequest.getGamificationProfileMetric was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilemetrics": {
    "operationId": "getgamificationprofilemetrics",
    "functionName": "getGamificationProfileMetrics",
    "signature": "getGamificationProfileMetrics(profileId, expand, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "GetMetricResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // Performance Profile Id\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet workday: Date = new Date(...) // The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All gamified metrics for a given performance profile\nGetGamificationProfileMetricsRequest.getGamificationProfileMetrics(profileId: profileId, expand: expand, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfileMetricsRequest.getGamificationProfileMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilemetricsobjectivedetails": {
    "operationId": "getgamificationprofilemetricsobjectivedetails",
    "functionName": "getGamificationProfileMetricsObjectivedetails",
    "signature": "getGamificationProfileMetricsObjectivedetails(profileId, workday)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "GetMetricsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // Performance Profile Id\nlet workday: Date = new Date(...) // The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All metrics for a given performance profile with objective details such as order and maxPoints\nGetGamificationProfileMetricsObjectivedetailsRequest.getGamificationProfileMetricsObjectivedetails(profileId: profileId, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfileMetricsObjectivedetailsRequest.getGamificationProfileMetricsObjectivedetails was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofiles": {
    "operationId": "getgamificationprofiles",
    "functionName": "getGamificationProfiles",
    "signature": "getGamificationProfiles()",
    "return": "GetProfilesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// All performance profiles\nGetGamificationProfilesRequest.getGamificationProfiles() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfilesRequest.getGamificationProfiles was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilesuser": {
    "operationId": "getgamificationprofilesuser",
    "functionName": "getGamificationProfilesUser",
    "signature": "getGamificationProfilesUser(userId, workday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet workday: Date = new Date(...) // Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Performance profile of a user\nGetGamificationProfilesUserRequest.getGamificationProfilesUser(userId: userId, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfilesUserRequest.getGamificationProfilesUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationprofilesusersme": {
    "operationId": "getgamificationprofilesusersme",
    "functionName": "getGamificationProfilesUsersMe",
    "signature": "getGamificationProfilesUsersMe(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workday: Date = new Date(...) // Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Performance profile of the requesting user\nGetGamificationProfilesUsersMeRequest.getGamificationProfilesUsersMe(workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationProfilesUsersMeRequest.getGamificationProfilesUsersMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecards": {
    "operationId": "getgamificationscorecards",
    "functionName": "getGamificationScorecards",
    "signature": "getGamificationScorecards(workday, expand)",
    "parameters": [
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workday: Date = new Date(...) // Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Workday performance metrics of the requesting user\nGetGamificationScorecardsRequest.getGamificationScorecards(workday: workday, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsRequest.getGamificationScorecards was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsattendance": {
    "operationId": "getgamificationscorecardsattendance",
    "functionName": "getGamificationScorecardsAttendance",
    "signature": "getGamificationScorecardsAttendance(startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Attendance status metrics of the requesting user\nGetGamificationScorecardsAttendanceRequest.getGamificationScorecardsAttendance(startWorkday: startWorkday, endWorkday: endWorkday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsAttendanceRequest.getGamificationScorecardsAttendance was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsbestpoints": {
    "operationId": "getgamificationscorecardsbestpoints",
    "functionName": "getGamificationScorecardsBestpoints",
    "signature": "getGamificationScorecardsBestpoints()",
    "return": "UserBestPoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Best points of the requesting user\nGetGamificationScorecardsBestpointsRequest.getGamificationScorecardsBestpoints() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsBestpointsRequest.getGamificationScorecardsBestpoints was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardspointsalltime": {
    "operationId": "getgamificationscorecardspointsalltime",
    "functionName": "getGamificationScorecardsPointsAlltime",
    "signature": "getGamificationScorecardsPointsAlltime(endWorkday)",
    "parameters": [
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All-time points of the requesting user\nGetGamificationScorecardsPointsAlltimeRequest.getGamificationScorecardsPointsAlltime(endWorkday: endWorkday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsPointsAlltimeRequest.getGamificationScorecardsPointsAlltime was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardspointsaverage": {
    "operationId": "getgamificationscorecardspointsaverage",
    "functionName": "getGamificationScorecardsPointsAverage",
    "signature": "getGamificationScorecardsPointsAverage(workday)",
    "parameters": [
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workday: Date = new Date(...) // The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Average points of the requesting user's division or performance profile\nGetGamificationScorecardsPointsAverageRequest.getGamificationScorecardsPointsAverage(workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsPointsAverageRequest.getGamificationScorecardsPointsAverage was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardspointstrends": {
    "operationId": "getgamificationscorecardspointstrends",
    "functionName": "getGamificationScorecardsPointsTrends",
    "signature": "getGamificationScorecardsPointsTrends(startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet dayOfWeek: GetGamificationScorecardsPointsTrendsRequest.DayOfWeek_getGamificationScorecardsPointsTrends = GetGamificationScorecardsPointsTrendsRequest.DayOfWeek_getGamificationScorecardsPointsTrends.enummember // Optional filter to specify which day of weeks to be included in the response\n\n// Points trends of the requesting user\nGetGamificationScorecardsPointsTrendsRequest.getGamificationScorecardsPointsTrends(startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsPointsTrendsRequest.getGamificationScorecardsPointsTrends was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuser": {
    "operationId": "getgamificationscorecardsuser",
    "functionName": "getGamificationScorecardsUser",
    "signature": "getGamificationScorecardsUser(userId, workday, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkdayMetricListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet workday: Date = new Date(...) // Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Workday performance metrics for a user\nGetGamificationScorecardsUserRequest.getGamificationScorecardsUser(userId: userId, workday: workday, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserRequest.getGamificationScorecardsUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuserattendance": {
    "operationId": "getgamificationscorecardsuserattendance",
    "functionName": "getGamificationScorecardsUserAttendance",
    "signature": "getGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "AttendanceStatusListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Attendance status metrics for a user\nGetGamificationScorecardsUserAttendanceRequest.getGamificationScorecardsUserAttendance(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserAttendanceRequest.getGamificationScorecardsUserAttendance was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuserbestpoints": {
    "operationId": "getgamificationscorecardsuserbestpoints",
    "functionName": "getGamificationScorecardsUserBestpoints",
    "signature": "getGamificationScorecardsUserBestpoints(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserBestPoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \n\n// Best points of a user\nGetGamificationScorecardsUserBestpointsRequest.getGamificationScorecardsUserBestpoints(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserBestpointsRequest.getGamificationScorecardsUserBestpoints was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuserpointsalltime": {
    "operationId": "getgamificationscorecardsuserpointsalltime",
    "functionName": "getGamificationScorecardsUserPointsAlltime",
    "signature": "getGamificationScorecardsUserPointsAlltime(userId, endWorkday)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "AllTimePoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// All-time points for a user\nGetGamificationScorecardsUserPointsAlltimeRequest.getGamificationScorecardsUserPointsAlltime(userId: userId, endWorkday: endWorkday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserPointsAlltimeRequest.getGamificationScorecardsUserPointsAlltime was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuserpointstrends": {
    "operationId": "getgamificationscorecardsuserpointstrends",
    "functionName": "getGamificationScorecardsUserPointsTrends",
    "signature": "getGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, dayOfWeek)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "dayOfWeek",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayPointsTrend",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet dayOfWeek: GetGamificationScorecardsUserPointsTrendsRequest.DayOfWeek_getGamificationScorecardsUserPointsTrends = GetGamificationScorecardsUserPointsTrendsRequest.DayOfWeek_getGamificationScorecardsUserPointsTrends.enummember // Optional filter to specify which day of weeks to be included in the response\n\n// Points trend for a user\nGetGamificationScorecardsUserPointsTrendsRequest.getGamificationScorecardsUserPointsTrends(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserPointsTrendsRequest.getGamificationScorecardsUserPointsTrends was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuservaluestrends": {
    "operationId": "getgamificationscorecardsuservaluestrends",
    "functionName": "getGamificationScorecardsUserValuesTrends",
    "signature": "getGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // \nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet timeZone: String = \"\" // Timezone for the workday. Defaults to UTC\n\n// Values trends of a user\nGetGamificationScorecardsUserValuesTrendsRequest.getGamificationScorecardsUserValuesTrends(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUserValuesTrendsRequest.getGamificationScorecardsUserValuesTrends was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsuserspointsaverage": {
    "operationId": "getgamificationscorecardsuserspointsaverage",
    "functionName": "getGamificationScorecardsUsersPointsAverage",
    "signature": "getGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "SingleWorkdayAveragePoints",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filterType: GetGamificationScorecardsUsersPointsAverageRequest.FilterType_getGamificationScorecardsUsersPointsAverage = GetGamificationScorecardsUsersPointsAverageRequest.FilterType_getGamificationScorecardsUsersPointsAverage.enummember // Filter type for the query request.\nlet filterId: String = \"\" // ID for the filter type.\nlet workday: Date = new Date(...) // The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Workday average points by target group\nGetGamificationScorecardsUsersPointsAverageRequest.getGamificationScorecardsUsersPointsAverage(filterType: filterType, filterId: filterId, workday: workday) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUsersPointsAverageRequest.getGamificationScorecardsUsersPointsAverage was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsusersvaluesaverage": {
    "operationId": "getgamificationscorecardsusersvaluesaverage",
    "functionName": "getGamificationScorecardsUsersValuesAverage",
    "signature": "getGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filterType: GetGamificationScorecardsUsersValuesAverageRequest.FilterType_getGamificationScorecardsUsersValuesAverage = GetGamificationScorecardsUsersValuesAverageRequest.FilterType_getGamificationScorecardsUsersValuesAverage.enummember // Filter type for the query request.\nlet filterId: String = \"\" // ID for the filter type. For example, division Id\nlet workday: Date = new Date(...) // The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet timeZone: String = \"\" // Timezone for the workday. Defaults to UTC\n\n// Workday average values by target group\nGetGamificationScorecardsUsersValuesAverageRequest.getGamificationScorecardsUsersValuesAverage(filterType: filterType, filterId: filterId, workday: workday, timeZone: timeZone) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUsersValuesAverageRequest.getGamificationScorecardsUsersValuesAverage was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsusersvaluestrends": {
    "operationId": "getgamificationscorecardsusersvaluestrends",
    "functionName": "getGamificationScorecardsUsersValuesTrends",
    "signature": "getGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, timeZone)",
    "parameters": [
      {
        "name": "filterType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "filterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filterType: GetGamificationScorecardsUsersValuesTrendsRequest.FilterType_getGamificationScorecardsUsersValuesTrends = GetGamificationScorecardsUsersValuesTrendsRequest.FilterType_getGamificationScorecardsUsersValuesTrends.enummember // Filter type for the query request.\nlet filterId: String = \"\" // ID for the filter type.\nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet timeZone: String = \"\" // Timezone for the workday. Defaults to UTC\n\n// Values trend by target group\nGetGamificationScorecardsUsersValuesTrendsRequest.getGamificationScorecardsUsersValuesTrends(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsUsersValuesTrendsRequest.getGamificationScorecardsUsersValuesTrends was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsvaluesaverage": {
    "operationId": "getgamificationscorecardsvaluesaverage",
    "functionName": "getGamificationScorecardsValuesAverage",
    "signature": "getGamificationScorecardsValuesAverage(workday, timeZone)",
    "parameters": [
      {
        "name": "workday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SingleWorkdayAverageValues",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet workday: Date = new Date(...) // The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet timeZone: String = \"\" // Timezone for the workday. Defaults to UTC\n\n// Average values of the requesting user's division or performance profile\nGetGamificationScorecardsValuesAverageRequest.getGamificationScorecardsValuesAverage(workday: workday, timeZone: timeZone) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsValuesAverageRequest.getGamificationScorecardsValuesAverage was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationscorecardsvaluestrends": {
    "operationId": "getgamificationscorecardsvaluestrends",
    "functionName": "getGamificationScorecardsValuesTrends",
    "signature": "getGamificationScorecardsValuesTrends(startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
    "parameters": [
      {
        "name": "startWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "endWorkday",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "referenceWorkday",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "timeZone",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WorkdayValuesTrend",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startWorkday: Date = new Date(...) // Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet endWorkday: Date = new Date(...) // End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet filterType: GetGamificationScorecardsValuesTrendsRequest.FilterType_getGamificationScorecardsValuesTrends = GetGamificationScorecardsValuesTrendsRequest.FilterType_getGamificationScorecardsValuesTrends.enummember // Filter type for the query request. If not set, then the request is for the requesting user.\nlet referenceWorkday: Date = new Date(...) // Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user's current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet timeZone: String = \"\" // Timezone for the workday. Defaults to UTC\n\n// Values trends of the requesting user or group\nGetGamificationScorecardsValuesTrendsRequest.getGamificationScorecardsValuesTrends(startWorkday: startWorkday, endWorkday: endWorkday, filterType: filterType, referenceWorkday: referenceWorkday, timeZone: timeZone) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationScorecardsValuesTrendsRequest.getGamificationScorecardsValuesTrends was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationstatus": {
    "operationId": "getgamificationstatus",
    "functionName": "getGamificationStatus",
    "signature": "getGamificationStatus()",
    "return": "GamificationStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Gamification activation status\nGetGamificationStatusRequest.getGamificationStatus() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationStatusRequest.getGamificationStatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationtemplate": {
    "operationId": "getgamificationtemplate",
    "functionName": "getGamificationTemplate",
    "signature": "getGamificationTemplate(templateId)",
    "parameters": [
      {
        "name": "templateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ObjectiveTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet templateId: String = \"\" // template id\n\n// Objective template by id\nGetGamificationTemplateRequest.getGamificationTemplate(templateId: templateId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationTemplateRequest.getGamificationTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "getgamificationtemplates": {
    "operationId": "getgamificationtemplates",
    "functionName": "getGamificationTemplates",
    "signature": "getGamificationTemplates()",
    "return": "GetTemplatesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// All objective templates\nGetGamificationTemplatesRequest.getGamificationTemplates() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGamificationTemplatesRequest.getGamificationTemplates was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationmetrics": {
    "operationId": "postgamificationmetrics",
    "functionName": "postGamificationMetrics",
    "signature": "postGamificationMetrics(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateMetric",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateMetric = new CreateMetric(...) // Metric\n\n// Creates a gamified metric with a given metric definition and metric objective\nPostGamificationMetricsRequest.postGamificationMetrics(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationMetricsRequest.postGamificationMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofileactivate": {
    "operationId": "postgamificationprofileactivate",
    "functionName": "postGamificationProfileActivate",
    "signature": "postGamificationProfileActivate(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // performanceProfileId\n\n// Activate a performance profile\nPostGamificationProfileActivateRequest.postGamificationProfileActivate(profileId: profileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileActivateRequest.postGamificationProfileActivate was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofiledeactivate": {
    "operationId": "postgamificationprofiledeactivate",
    "functionName": "postGamificationProfileDeactivate",
    "signature": "postGamificationProfileDeactivate(profileId)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // performanceProfileId\n\n// Deactivate a performance profile\nPostGamificationProfileDeactivateRequest.postGamificationProfileDeactivate(profileId: profileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileDeactivateRequest.postGamificationProfileDeactivate was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofilemembers": {
    "operationId": "postgamificationprofilemembers",
    "functionName": "postGamificationProfileMembers",
    "signature": "postGamificationProfileMembers(performanceProfileId, body)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AssignUsers",
        "required": "true"
      }
    ],
    "return": "Assignment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet performanceProfileId: String = \"\" // Performance Profile Id\nlet body: AssignUsers = new AssignUsers(...) // assignUsers\n\n// Assign members to a given performance profile\nPostGamificationProfileMembersRequest.postGamificationProfileMembers(performanceProfileId: performanceProfileId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileMembersRequest.postGamificationProfileMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofilemembersvalidate": {
    "operationId": "postgamificationprofilemembersvalidate",
    "functionName": "postGamificationProfileMembersValidate",
    "signature": "postGamificationProfileMembersValidate(performanceProfileId, body)",
    "parameters": [
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ValidateAssignUsers",
        "required": "true"
      }
    ],
    "return": "AssignmentValidation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet performanceProfileId: String = \"\" // Performance Profile Id\nlet body: ValidateAssignUsers = new ValidateAssignUsers(...) // memberAssignments\n\n// Validate member assignment\nPostGamificationProfileMembersValidateRequest.postGamificationProfileMembersValidate(performanceProfileId: performanceProfileId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileMembersValidateRequest.postGamificationProfileMembersValidate was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofilemetriclink": {
    "operationId": "postgamificationprofilemetriclink",
    "functionName": "postGamificationProfileMetricLink",
    "signature": "postGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)",
    "parameters": [
      {
        "name": "sourceProfileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceMetricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TargetPerformanceProfile",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sourceProfileId: String = \"\" // Source Performance Profile Id\nlet sourceMetricId: String = \"\" // Source Metric Id\nlet body: TargetPerformanceProfile = new TargetPerformanceProfile(...) // linkedMetric\n\n// Creates a linked metric\nPostGamificationProfileMetricLinkRequest.postGamificationProfileMetricLink(sourceProfileId: sourceProfileId, sourceMetricId: sourceMetricId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileMetricLinkRequest.postGamificationProfileMetricLink was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofilemetrics": {
    "operationId": "postgamificationprofilemetrics",
    "functionName": "postGamificationProfileMetrics",
    "signature": "postGamificationProfileMetrics(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateMetric",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // Performance Profile Id\nlet body: CreateMetric = new CreateMetric(...) // Metric\n\n// Creates a gamified metric with a given metric definition and metric objective under in a performance profile\nPostGamificationProfileMetricsRequest.postGamificationProfileMetrics(profileId: profileId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfileMetricsRequest.postGamificationProfileMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "postgamificationprofiles": {
    "operationId": "postgamificationprofiles",
    "functionName": "postGamificationProfiles",
    "signature": "postGamificationProfiles(body, copyMetrics)",
    "parameters": [
      {
        "name": "body",
        "type": "CreatePerformanceProfile",
        "required": "true"
      },
      {
        "name": "copyMetrics",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreatePerformanceProfile = new CreatePerformanceProfile(...) // performanceProfile\nlet copyMetrics: Bool = true // Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile.\n\n// Create a new custom performance profile\nPostGamificationProfilesRequest.postGamificationProfiles(body: body, copyMetrics: copyMetrics) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGamificationProfilesRequest.postGamificationProfiles was successful\")\n        dump(response)\n    }\n}"
  },
  "putgamificationmetric": {
    "operationId": "putgamificationmetric",
    "functionName": "putGamificationMetric",
    "signature": "putGamificationMetric(metricId, body, performanceProfileId)",
    "parameters": [
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateMetric",
        "required": "true"
      },
      {
        "name": "performanceProfileId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet metricId: String = \"\" // metric Id\nlet body: CreateMetric = new CreateMetric(...) // Metric\nlet performanceProfileId: String = \"\" // The profile id of the metrics you are trying to retrieve. The DEFAULT profile is used if nothing is given.\n\n// Updates a metric\nPutGamificationMetricRequest.putGamificationMetric(metricId: metricId, body: body, performanceProfileId: performanceProfileId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGamificationMetricRequest.putGamificationMetric was successful\")\n        dump(response)\n    }\n}"
  },
  "putgamificationprofile": {
    "operationId": "putgamificationprofile",
    "functionName": "putGamificationProfile",
    "signature": "putGamificationProfile(profileId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PerformanceProfile",
        "required": "false"
      }
    ],
    "return": "PerformanceProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // performanceProfileId\nlet body: PerformanceProfile = new PerformanceProfile(...) // performanceProfile\n\n// Updates a performance profile\nPutGamificationProfileRequest.putGamificationProfile(profileId: profileId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGamificationProfileRequest.putGamificationProfile was successful\")\n        dump(response)\n    }\n}"
  },
  "putgamificationprofilemetric": {
    "operationId": "putgamificationprofilemetric",
    "functionName": "putGamificationProfileMetric",
    "signature": "putGamificationProfileMetric(profileId, metricId, body)",
    "parameters": [
      {
        "name": "profileId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metricId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateMetric",
        "required": "true"
      }
    ],
    "return": "Metric",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet profileId: String = \"\" // Performance Profile Id\nlet metricId: String = \"\" // Metric Id\nlet body: CreateMetric = new CreateMetric(...) // Metric\n\n// Updates a metric in performance profile\nPutGamificationProfileMetricRequest.putGamificationProfileMetric(profileId: profileId, metricId: metricId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGamificationProfileMetricRequest.putGamificationProfileMetric was successful\")\n        dump(response)\n    }\n}"
  },
  "putgamificationstatus": {
    "operationId": "putgamificationstatus",
    "functionName": "putGamificationStatus",
    "signature": "putGamificationStatus(status)",
    "parameters": [
      {
        "name": "status",
        "type": "GamificationStatus",
        "required": "true"
      }
    ],
    "return": "GamificationStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet status: GamificationStatus = new GamificationStatus(...) // Gamification status\n\n// Update gamification activation status\nPutGamificationStatusRequest.putGamificationStatus(status: status) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGamificationStatusRequest.putGamificationStatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getgdprrequest": {
    "operationId": "getgdprrequest",
    "functionName": "getGdprRequest",
    "signature": "getGdprRequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet requestId: String = \"\" // Request id\n\n// Get an existing GDPR request\nGetGdprRequestRequest.getGdprRequest(requestId: requestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGdprRequestRequest.getGdprRequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getgdprrequests": {
    "operationId": "getgdprrequests",
    "functionName": "getGdprRequests",
    "signature": "getGdprRequests(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "GDPRRequestEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get all GDPR requests\nGetGdprRequestsRequest.getGdprRequests(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGdprRequestsRequest.getGdprRequests was successful\")\n        dump(response)\n    }\n}"
  },
  "getgdprsubjects": {
    "operationId": "getgdprsubjects",
    "functionName": "getGdprSubjects",
    "signature": "getGdprSubjects(searchType, searchValue)",
    "parameters": [
      {
        "name": "searchType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "searchValue",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GDPRSubjectEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet searchType: GetGdprSubjectsRequest.SearchType_getGdprSubjects = GetGdprSubjectsRequest.SearchType_getGdprSubjects.enummember // Search Type\nlet searchValue: String = \"\" // Search Value\n\n// Get GDPR subjects\nGetGdprSubjectsRequest.getGdprSubjects(searchType: searchType, searchValue: searchValue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGdprSubjectsRequest.getGdprSubjects was successful\")\n        dump(response)\n    }\n}"
  },
  "postgdprrequests": {
    "operationId": "postgdprrequests",
    "functionName": "postGdprRequests",
    "signature": "postGdprRequests(body, deleteConfirmed)",
    "parameters": [
      {
        "name": "body",
        "type": "GDPRRequest",
        "required": "true"
      },
      {
        "name": "deleteConfirmed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "GDPRRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GDPRRequest = new GDPRRequest(...) // GDPR request\nlet deleteConfirmed: Bool = true // Confirm delete\n\n// Submit a new GDPR request\nPostGdprRequestsRequest.postGdprRequests(body: body, deleteConfirmed: deleteConfirmed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGdprRequestsRequest.postGdprRequests was successful\")\n        dump(response)\n    }\n}"
  },
  "getgeolocationssettings": {
    "operationId": "getgeolocationssettings",
    "functionName": "getGeolocationsSettings",
    "signature": "getGeolocationsSettings()",
    "return": "GeolocationSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a organization's GeolocationSettings\nGetGeolocationsSettingsRequest.getGeolocationsSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGeolocationsSettingsRequest.getGeolocationsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getusergeolocation": {
    "operationId": "getusergeolocation",
    "functionName": "getUserGeolocation",
    "signature": "getUserGeolocation(userId, clientId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\nlet clientId: String = \"\" // client Id\n\n// Get a user's Geolocation\nGetUserGeolocationRequest.getUserGeolocation(userId: userId, clientId: clientId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserGeolocationRequest.getUserGeolocation was successful\")\n        dump(response)\n    }\n}"
  },
  "patchgeolocationssettings": {
    "operationId": "patchgeolocationssettings",
    "functionName": "patchGeolocationsSettings",
    "signature": "patchGeolocationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GeolocationSettings",
        "required": "true"
      }
    ],
    "return": "GeolocationSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GeolocationSettings = new GeolocationSettings(...) // Geolocation settings\n\n// Patch a organization's GeolocationSettings\nPatchGeolocationsSettingsRequest.patchGeolocationsSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchGeolocationsSettingsRequest.patchGeolocationsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "patchusergeolocation": {
    "operationId": "patchusergeolocation",
    "functionName": "patchUserGeolocation",
    "signature": "patchUserGeolocation(userId, clientId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Geolocation",
        "required": "true"
      }
    ],
    "return": "Geolocation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\nlet clientId: String = \"\" // client Id\nlet body: Geolocation = new Geolocation(...) // Geolocation\n\n// Patch a user's Geolocation\nPatchUserGeolocationRequest.patchUserGeolocation(userId: userId, clientId: clientId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserGeolocationRequest.patchUserGeolocation was successful\")\n        dump(response)\n    }\n}"
  },
  "deletegreeting": {
    "operationId": "deletegreeting",
    "functionName": "deleteGreeting",
    "signature": "deleteGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet greetingId: String = \"\" // Greeting ID\n\n// Deletes a Greeting with the given GreetingId\nDeleteGreetingRequest.deleteGreeting(greetingId: greetingId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteGreetingRequest.deleteGreeting was successful\")\n    }\n}"
  },
  "getgreeting": {
    "operationId": "getgreeting",
    "functionName": "getGreeting",
    "signature": "getGreeting(greetingId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet greetingId: String = \"\" // Greeting ID\n\n// Get a Greeting with the given GreetingId\nGetGreetingRequest.getGreeting(greetingId: greetingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGreetingRequest.getGreeting was successful\")\n        dump(response)\n    }\n}"
  },
  "getgreetingmedia": {
    "operationId": "getgreetingmedia",
    "functionName": "getGreetingMedia",
    "signature": "getGreetingMedia(greetingId, formatId)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GreetingMediaInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet greetingId: String = \"\" // Greeting ID\nlet formatId: GetGreetingMediaRequest.FormatId_getGreetingMedia = GetGreetingMediaRequest.FormatId_getGreetingMedia.enummember // The desired media format.\n\n// Get media playback URI for this greeting\nGetGreetingMediaRequest.getGreetingMedia(greetingId: greetingId, formatId: formatId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGreetingMediaRequest.getGreetingMedia was successful\")\n        dump(response)\n    }\n}"
  },
  "getgreetings": {
    "operationId": "getgreetings",
    "functionName": "getGreetings",
    "signature": "getGreetings(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Gets an Organization's Greetings\nGetGreetingsRequest.getGreetings(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGreetingsRequest.getGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "getgreetingsdefaults": {
    "operationId": "getgreetingsdefaults",
    "functionName": "getGreetingsDefaults",
    "signature": "getGreetingsDefaults()",
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get an Organization's DefaultGreetingList\nGetGreetingsDefaultsRequest.getGreetingsDefaults() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGreetingsDefaultsRequest.getGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupgreetings": {
    "operationId": "getgroupgreetings",
    "functionName": "getGroupGreetings",
    "signature": "getGroupGreetings(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "GreetingListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of the Group's Greetings\nGetGroupGreetingsRequest.getGroupGreetings(groupId: groupId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupGreetingsRequest.getGroupGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupgreetingsdefaults": {
    "operationId": "getgroupgreetingsdefaults",
    "functionName": "getGroupGreetingsDefaults",
    "signature": "getGroupGreetingsDefaults(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\n\n// Grabs the list of Default Greetings given a Group's ID\nGetGroupGreetingsDefaultsRequest.getGroupGreetingsDefaults(groupId: groupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupGreetingsDefaultsRequest.getGroupGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "getusergreetings": {
    "operationId": "getusergreetings",
    "functionName": "getUserGreetings",
    "signature": "getUserGreetings(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "DomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of the User's Greetings\nGetUserGreetingsRequest.getUserGreetings(userId: userId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserGreetingsRequest.getUserGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "getusergreetingsdefaults": {
    "operationId": "getusergreetingsdefaults",
    "functionName": "getUserGreetingsDefaults",
    "signature": "getUserGreetingsDefaults(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Grabs the list of Default Greetings given a User's ID\nGetUserGreetingsDefaultsRequest.getUserGreetingsDefaults(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserGreetingsDefaultsRequest.getUserGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "postgreetings": {
    "operationId": "postgreetings",
    "functionName": "postGreetings",
    "signature": "postGreetings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Greeting",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Greeting = new Greeting(...) // The Greeting to create\n\n// Create a Greeting for an Organization\nPostGreetingsRequest.postGreetings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGreetingsRequest.postGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "postgroupgreetings": {
    "operationId": "postgroupgreetings",
    "functionName": "postGroupGreetings",
    "signature": "postGroupGreetings(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Greeting",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet body: Greeting = new Greeting(...) // The Greeting to create\n\n// Creates a Greeting for a Group\nPostGroupGreetingsRequest.postGroupGreetings(groupId: groupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGroupGreetingsRequest.postGroupGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "postusergreetings": {
    "operationId": "postusergreetings",
    "functionName": "postUserGreetings",
    "signature": "postUserGreetings(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Greeting",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: Greeting = new Greeting(...) // The Greeting to create\n\n// Creates a Greeting for a User\nPostUserGreetingsRequest.postUserGreetings(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUserGreetingsRequest.postUserGreetings was successful\")\n        dump(response)\n    }\n}"
  },
  "putgreeting": {
    "operationId": "putgreeting",
    "functionName": "putGreeting",
    "signature": "putGreeting(greetingId, body)",
    "parameters": [
      {
        "name": "greetingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Greeting",
        "required": "true"
      }
    ],
    "return": "Greeting",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet greetingId: String = \"\" // Greeting ID\nlet body: Greeting = new Greeting(...) // The updated Greeting\n\n// Updates the Greeting with the given GreetingId\nPutGreetingRequest.putGreeting(greetingId: greetingId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGreetingRequest.putGreeting was successful\")\n        dump(response)\n    }\n}"
  },
  "putgreetingsdefaults": {
    "operationId": "putgreetingsdefaults",
    "functionName": "putGreetingsDefaults",
    "signature": "putGreetingsDefaults(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DefaultGreetingList",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DefaultGreetingList = new DefaultGreetingList(...) // The updated defaultGreetingList\n\n// Update an Organization's DefaultGreetingList\nPutGreetingsDefaultsRequest.putGreetingsDefaults(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGreetingsDefaultsRequest.putGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "putgroupgreetingsdefaults": {
    "operationId": "putgroupgreetingsdefaults",
    "functionName": "putGroupGreetingsDefaults",
    "signature": "putGroupGreetingsDefaults(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DefaultGreetingList",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet body: DefaultGreetingList = new DefaultGreetingList(...) // The updated defaultGreetingList\n\n// Updates the DefaultGreetingList of the specified Group\nPutGroupGreetingsDefaultsRequest.putGroupGreetingsDefaults(groupId: groupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGroupGreetingsDefaultsRequest.putGroupGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "putusergreetingsdefaults": {
    "operationId": "putusergreetingsdefaults",
    "functionName": "putUserGreetingsDefaults",
    "signature": "putUserGreetingsDefaults(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DefaultGreetingList",
        "required": "true"
      }
    ],
    "return": "DefaultGreetingList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: DefaultGreetingList = new DefaultGreetingList(...) // The updated defaultGreetingList\n\n// Updates the DefaultGreetingList of the specified User\nPutUserGreetingsDefaultsRequest.putUserGreetingsDefaults(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserGreetingsDefaultsRequest.putUserGreetingsDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "deletegroup": {
    "operationId": "deletegroup",
    "functionName": "deleteGroup",
    "signature": "deleteGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\n\n// Delete group\nDeleteGroupRequest.deleteGroup(groupId: groupId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteGroupRequest.deleteGroup was successful\")\n    }\n}"
  },
  "deletegroupmembers": {
    "operationId": "deletegroupmembers",
    "functionName": "deleteGroupMembers",
    "signature": "deleteGroupMembers(groupId, ids)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet ids: String = \"\" // Comma separated list of userIds to remove\n\n// Remove members\nDeleteGroupMembersRequest.deleteGroupMembers(groupId: groupId, ids: ids) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteGroupMembersRequest.deleteGroupMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getfieldconfig": {
    "operationId": "getfieldconfig",
    "functionName": "getFieldconfig",
    "signature": "getFieldconfig(type)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "FieldConfig",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet type: GetFieldconfigRequest.ModelType_getFieldconfig = GetFieldconfigRequest.ModelType_getFieldconfig.enummember // Field type\n\n// Fetch field config for an entity type\nGetFieldconfigRequest.getFieldconfig(type: type) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetFieldconfigRequest.getFieldconfig was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroup": {
    "operationId": "getgroup",
    "functionName": "getGroup",
    "signature": "getGroup(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\n\n// Get group\nGetGroupRequest.getGroup(groupId: groupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupRequest.getGroup was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupindividuals": {
    "operationId": "getgroupindividuals",
    "functionName": "getGroupIndividuals",
    "signature": "getGroupIndividuals(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\n\n// Get all individuals associated with the group\nGetGroupIndividualsRequest.getGroupIndividuals(groupId: groupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupIndividualsRequest.getGroupIndividuals was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupmembers": {
    "operationId": "getgroupmembers",
    "functionName": "getGroupMembers",
    "signature": "getGroupMembers(groupId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetGroupMembersRequest.SortOrder_getGroupMembers = GetGroupMembersRequest.SortOrder_getGroupMembers.enummember // Ascending or descending sort order\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get group members, includes individuals, owners, and dynamically included people\nGetGroupMembersRequest.getGroupMembers(groupId: groupId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupMembersRequest.getGroupMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupprofile": {
    "operationId": "getgroupprofile",
    "functionName": "getGroupProfile",
    "signature": "getGroupProfile(groupId, fields)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // groupId\nlet fields: String = \"\" // Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type=group and using the key for the elements returned by the fieldList\n\n// Get group profile\nGetGroupProfileRequest.getGroupProfile(groupId: groupId, fields: fields) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupProfileRequest.getGroupProfile was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroups": {
    "operationId": "getgroups",
    "functionName": "getGroups",
    "signature": "getGroups(pageSize, pageNumber, _id, jabberId, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // id\nlet jabberId: [String] = [\"\"] // A list of jabberIds to fetch by bulk (cannot be used with the \\\"id\\\" parameter)\nlet sortOrder: GetGroupsRequest.SortOrder_getGroups = GetGroupsRequest.SortOrder_getGroups.enummember // Ascending or descending sort order\n\n// Get a group list\nGetGroupsRequest.getGroups(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupsRequest.getGroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getgroupssearch": {
    "operationId": "getgroupssearch",
    "functionName": "getGroupsSearch",
    "signature": "getGroupsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // expand\n\n// Search groups using the q64 value returned from a previous search\nGetGroupsSearchRequest.getGroupsSearch(q64: q64, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetGroupsSearchRequest.getGroupsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "getprofilesgroups": {
    "operationId": "getprofilesgroups",
    "functionName": "getProfilesGroups",
    "signature": "getProfilesGroups(pageSize, pageNumber, _id, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GroupProfileEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // id\nlet sortOrder: GetProfilesGroupsRequest.SortOrder_getProfilesGroups = GetProfilesGroupsRequest.SortOrder_getProfilesGroups.enummember // Ascending or descending sort order\n\n// Get group profile listing\nGetProfilesGroupsRequest.getProfilesGroups(pageSize: pageSize, pageNumber: pageNumber, _id: _id, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetProfilesGroupsRequest.getProfilesGroups was successful\")\n        dump(response)\n    }\n}"
  },
  "postgroupmembers": {
    "operationId": "postgroupmembers",
    "functionName": "postGroupMembers",
    "signature": "postGroupMembers(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "GroupMembersUpdate",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet body: GroupMembersUpdate = new GroupMembersUpdate(...) // Add members\n\n// Add members\nPostGroupMembersRequest.postGroupMembers(groupId: groupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGroupMembersRequest.postGroupMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "postgroups": {
    "operationId": "postgroups",
    "functionName": "postGroups",
    "signature": "postGroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GroupCreate",
        "required": "true"
      }
    ],
    "return": "Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GroupCreate = new GroupCreate(...) // Group\n\n// Create a group\nPostGroupsRequest.postGroups(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGroupsRequest.postGroups was successful\")\n        dump(response)\n    }\n}"
  },
  "postgroupssearch": {
    "operationId": "postgroupssearch",
    "functionName": "postGroupsSearch",
    "signature": "postGroupsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GroupSearchRequest",
        "required": "true"
      }
    ],
    "return": "GroupsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GroupSearchRequest = new GroupSearchRequest(...) // Search request options\n\n// Search groups\nPostGroupsSearchRequest.postGroupsSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostGroupsSearchRequest.postGroupsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "putgroup": {
    "operationId": "putgroup",
    "functionName": "putGroup",
    "signature": "putGroup(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "GroupUpdate",
        "required": "false"
      }
    ],
    "return": "Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet body: GroupUpdate = new GroupUpdate(...) // Group\n\n// Update group\nPutGroupRequest.putGroup(groupId: groupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutGroupRequest.putGroup was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersadfs": {
    "operationId": "deleteidentityprovidersadfs",
    "functionName": "deleteIdentityprovidersAdfs",
    "signature": "deleteIdentityprovidersAdfs()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete ADFS Identity Provider\nDeleteIdentityprovidersAdfsRequest.deleteIdentityprovidersAdfs() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersAdfsRequest.deleteIdentityprovidersAdfs was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityproviderscic": {
    "operationId": "deleteidentityproviderscic",
    "functionName": "deleteIdentityprovidersCic",
    "signature": "deleteIdentityprovidersCic()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete Customer Interaction Center (CIC) Identity Provider\nDeleteIdentityprovidersCicRequest.deleteIdentityprovidersCic() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersCicRequest.deleteIdentityprovidersCic was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersgeneric": {
    "operationId": "deleteidentityprovidersgeneric",
    "functionName": "deleteIdentityprovidersGeneric",
    "signature": "deleteIdentityprovidersGeneric()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete Generic SAML Identity Provider\nDeleteIdentityprovidersGenericRequest.deleteIdentityprovidersGeneric() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersGenericRequest.deleteIdentityprovidersGeneric was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersgsuite": {
    "operationId": "deleteidentityprovidersgsuite",
    "functionName": "deleteIdentityprovidersGsuite",
    "signature": "deleteIdentityprovidersGsuite()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete G Suite Identity Provider\nDeleteIdentityprovidersGsuiteRequest.deleteIdentityprovidersGsuite() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersGsuiteRequest.deleteIdentityprovidersGsuite was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersidentitynow": {
    "operationId": "deleteidentityprovidersidentitynow",
    "functionName": "deleteIdentityprovidersIdentitynow",
    "signature": "deleteIdentityprovidersIdentitynow()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete IdentityNow Provider\nDeleteIdentityprovidersIdentitynowRequest.deleteIdentityprovidersIdentitynow() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersIdentitynowRequest.deleteIdentityprovidersIdentitynow was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersokta": {
    "operationId": "deleteidentityprovidersokta",
    "functionName": "deleteIdentityprovidersOkta",
    "signature": "deleteIdentityprovidersOkta()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete Okta Identity Provider\nDeleteIdentityprovidersOktaRequest.deleteIdentityprovidersOkta() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersOktaRequest.deleteIdentityprovidersOkta was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersonelogin": {
    "operationId": "deleteidentityprovidersonelogin",
    "functionName": "deleteIdentityprovidersOnelogin",
    "signature": "deleteIdentityprovidersOnelogin()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete OneLogin Identity Provider\nDeleteIdentityprovidersOneloginRequest.deleteIdentityprovidersOnelogin() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersOneloginRequest.deleteIdentityprovidersOnelogin was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityprovidersping": {
    "operationId": "deleteidentityprovidersping",
    "functionName": "deleteIdentityprovidersPing",
    "signature": "deleteIdentityprovidersPing()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete Ping Identity Provider\nDeleteIdentityprovidersPingRequest.deleteIdentityprovidersPing() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersPingRequest.deleteIdentityprovidersPing was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityproviderspurecloud": {
    "operationId": "deleteidentityproviderspurecloud",
    "functionName": "deleteIdentityprovidersPurecloud",
    "signature": "deleteIdentityprovidersPurecloud()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete PureCloud Identity Provider\nDeleteIdentityprovidersPurecloudRequest.deleteIdentityprovidersPurecloud() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersPurecloudRequest.deleteIdentityprovidersPurecloud was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityproviderspureengage": {
    "operationId": "deleteidentityproviderspureengage",
    "functionName": "deleteIdentityprovidersPureengage",
    "signature": "deleteIdentityprovidersPureengage()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete PureEngage Identity Provider\nDeleteIdentityprovidersPureengageRequest.deleteIdentityprovidersPureengage() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersPureengageRequest.deleteIdentityprovidersPureengage was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteidentityproviderssalesforce": {
    "operationId": "deleteidentityproviderssalesforce",
    "functionName": "deleteIdentityprovidersSalesforce",
    "signature": "deleteIdentityprovidersSalesforce()",
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete Salesforce Identity Provider\nDeleteIdentityprovidersSalesforceRequest.deleteIdentityprovidersSalesforce() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIdentityprovidersSalesforceRequest.deleteIdentityprovidersSalesforce was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityproviders": {
    "operationId": "getidentityproviders",
    "functionName": "getIdentityproviders",
    "signature": "getIdentityproviders()",
    "return": "OAuthProviderEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// The list of identity providers\nGetIdentityprovidersRequest.getIdentityproviders() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersRequest.getIdentityproviders was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersadfs": {
    "operationId": "getidentityprovidersadfs",
    "functionName": "getIdentityprovidersAdfs",
    "signature": "getIdentityprovidersAdfs()",
    "return": "ADFS",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get ADFS Identity Provider\nGetIdentityprovidersAdfsRequest.getIdentityprovidersAdfs() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersAdfsRequest.getIdentityprovidersAdfs was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityproviderscic": {
    "operationId": "getidentityproviderscic",
    "functionName": "getIdentityprovidersCic",
    "signature": "getIdentityprovidersCic()",
    "return": "CustomerInteractionCenter",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Customer Interaction Center (CIC) Identity Provider\nGetIdentityprovidersCicRequest.getIdentityprovidersCic() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersCicRequest.getIdentityprovidersCic was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersgeneric": {
    "operationId": "getidentityprovidersgeneric",
    "functionName": "getIdentityprovidersGeneric",
    "signature": "getIdentityprovidersGeneric()",
    "return": "GenericSAML",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Generic SAML Identity Provider\nGetIdentityprovidersGenericRequest.getIdentityprovidersGeneric() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersGenericRequest.getIdentityprovidersGeneric was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersgsuite": {
    "operationId": "getidentityprovidersgsuite",
    "functionName": "getIdentityprovidersGsuite",
    "signature": "getIdentityprovidersGsuite()",
    "return": "GSuite",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get G Suite Identity Provider\nGetIdentityprovidersGsuiteRequest.getIdentityprovidersGsuite() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersGsuiteRequest.getIdentityprovidersGsuite was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersidentitynow": {
    "operationId": "getidentityprovidersidentitynow",
    "functionName": "getIdentityprovidersIdentitynow",
    "signature": "getIdentityprovidersIdentitynow()",
    "return": "IdentityNow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get IdentityNow Provider\nGetIdentityprovidersIdentitynowRequest.getIdentityprovidersIdentitynow() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersIdentitynowRequest.getIdentityprovidersIdentitynow was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersokta": {
    "operationId": "getidentityprovidersokta",
    "functionName": "getIdentityprovidersOkta",
    "signature": "getIdentityprovidersOkta()",
    "return": "Okta",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Okta Identity Provider\nGetIdentityprovidersOktaRequest.getIdentityprovidersOkta() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersOktaRequest.getIdentityprovidersOkta was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersonelogin": {
    "operationId": "getidentityprovidersonelogin",
    "functionName": "getIdentityprovidersOnelogin",
    "signature": "getIdentityprovidersOnelogin()",
    "return": "OneLogin",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get OneLogin Identity Provider\nGetIdentityprovidersOneloginRequest.getIdentityprovidersOnelogin() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersOneloginRequest.getIdentityprovidersOnelogin was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityprovidersping": {
    "operationId": "getidentityprovidersping",
    "functionName": "getIdentityprovidersPing",
    "signature": "getIdentityprovidersPing()",
    "return": "PingIdentity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Ping Identity Provider\nGetIdentityprovidersPingRequest.getIdentityprovidersPing() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersPingRequest.getIdentityprovidersPing was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityproviderspurecloud": {
    "operationId": "getidentityproviderspurecloud",
    "functionName": "getIdentityprovidersPurecloud",
    "signature": "getIdentityprovidersPurecloud()",
    "return": "PureCloud",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get PureCloud Identity Provider\nGetIdentityprovidersPurecloudRequest.getIdentityprovidersPurecloud() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersPurecloudRequest.getIdentityprovidersPurecloud was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityproviderspureengage": {
    "operationId": "getidentityproviderspureengage",
    "functionName": "getIdentityprovidersPureengage",
    "signature": "getIdentityprovidersPureengage()",
    "return": "PureEngage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get PureEngage Identity Provider\nGetIdentityprovidersPureengageRequest.getIdentityprovidersPureengage() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersPureengageRequest.getIdentityprovidersPureengage was successful\")\n        dump(response)\n    }\n}"
  },
  "getidentityproviderssalesforce": {
    "operationId": "getidentityproviderssalesforce",
    "functionName": "getIdentityprovidersSalesforce",
    "signature": "getIdentityprovidersSalesforce()",
    "return": "Salesforce",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Salesforce Identity Provider\nGetIdentityprovidersSalesforceRequest.getIdentityprovidersSalesforce() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIdentityprovidersSalesforceRequest.getIdentityprovidersSalesforce was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersadfs": {
    "operationId": "putidentityprovidersadfs",
    "functionName": "putIdentityprovidersAdfs",
    "signature": "putIdentityprovidersAdfs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ADFS",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ADFS = new ADFS(...) // Provider\n\n// Update/Create ADFS Identity Provider\nPutIdentityprovidersAdfsRequest.putIdentityprovidersAdfs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersAdfsRequest.putIdentityprovidersAdfs was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityproviderscic": {
    "operationId": "putidentityproviderscic",
    "functionName": "putIdentityprovidersCic",
    "signature": "putIdentityprovidersCic(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CustomerInteractionCenter",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CustomerInteractionCenter = new CustomerInteractionCenter(...) // Provider\n\n// Update/Create Customer Interaction Center (CIC) Identity Provider\nPutIdentityprovidersCicRequest.putIdentityprovidersCic(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersCicRequest.putIdentityprovidersCic was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersgeneric": {
    "operationId": "putidentityprovidersgeneric",
    "functionName": "putIdentityprovidersGeneric",
    "signature": "putIdentityprovidersGeneric(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GenericSAML",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GenericSAML = new GenericSAML(...) // Provider\n\n// Update/Create Generic SAML Identity Provider\nPutIdentityprovidersGenericRequest.putIdentityprovidersGeneric(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersGenericRequest.putIdentityprovidersGeneric was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersgsuite": {
    "operationId": "putidentityprovidersgsuite",
    "functionName": "putIdentityprovidersGsuite",
    "signature": "putIdentityprovidersGsuite(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GSuite",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GSuite = new GSuite(...) // Provider\n\n// Update/Create G Suite Identity Provider\nPutIdentityprovidersGsuiteRequest.putIdentityprovidersGsuite(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersGsuiteRequest.putIdentityprovidersGsuite was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersidentitynow": {
    "operationId": "putidentityprovidersidentitynow",
    "functionName": "putIdentityprovidersIdentitynow",
    "signature": "putIdentityprovidersIdentitynow(body)",
    "parameters": [
      {
        "name": "body",
        "type": "IdentityNow",
        "required": "true"
      }
    ],
    "return": "IdentityNow",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: IdentityNow = new IdentityNow(...) // Provider\n\n// Update/Create IdentityNow Provider\nPutIdentityprovidersIdentitynowRequest.putIdentityprovidersIdentitynow(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersIdentitynowRequest.putIdentityprovidersIdentitynow was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersokta": {
    "operationId": "putidentityprovidersokta",
    "functionName": "putIdentityprovidersOkta",
    "signature": "putIdentityprovidersOkta(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Okta",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Okta = new Okta(...) // Provider\n\n// Update/Create Okta Identity Provider\nPutIdentityprovidersOktaRequest.putIdentityprovidersOkta(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersOktaRequest.putIdentityprovidersOkta was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersonelogin": {
    "operationId": "putidentityprovidersonelogin",
    "functionName": "putIdentityprovidersOnelogin",
    "signature": "putIdentityprovidersOnelogin(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OneLogin",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OneLogin = new OneLogin(...) // Provider\n\n// Update/Create OneLogin Identity Provider\nPutIdentityprovidersOneloginRequest.putIdentityprovidersOnelogin(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersOneloginRequest.putIdentityprovidersOnelogin was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityprovidersping": {
    "operationId": "putidentityprovidersping",
    "functionName": "putIdentityprovidersPing",
    "signature": "putIdentityprovidersPing(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PingIdentity",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PingIdentity = new PingIdentity(...) // Provider\n\n// Update/Create Ping Identity Provider\nPutIdentityprovidersPingRequest.putIdentityprovidersPing(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersPingRequest.putIdentityprovidersPing was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityproviderspurecloud": {
    "operationId": "putidentityproviderspurecloud",
    "functionName": "putIdentityprovidersPurecloud",
    "signature": "putIdentityprovidersPurecloud(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PureCloud",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PureCloud = new PureCloud(...) // Provider\n\n// Update/Create PureCloud Identity Provider\nPutIdentityprovidersPurecloudRequest.putIdentityprovidersPurecloud(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersPurecloudRequest.putIdentityprovidersPurecloud was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityproviderspureengage": {
    "operationId": "putidentityproviderspureengage",
    "functionName": "putIdentityprovidersPureengage",
    "signature": "putIdentityprovidersPureengage(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PureEngage",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PureEngage = new PureEngage(...) // Provider\n\n// Update/Create PureEngage Identity Provider\nPutIdentityprovidersPureengageRequest.putIdentityprovidersPureengage(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersPureengageRequest.putIdentityprovidersPureengage was successful\")\n        dump(response)\n    }\n}"
  },
  "putidentityproviderssalesforce": {
    "operationId": "putidentityproviderssalesforce",
    "functionName": "putIdentityprovidersSalesforce",
    "signature": "putIdentityprovidersSalesforce(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Salesforce",
        "required": "true"
      }
    ],
    "return": "OAuthProvider",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Salesforce = new Salesforce(...) // Provider\n\n// Update/Create Salesforce Identity Provider\nPutIdentityprovidersSalesforceRequest.putIdentityprovidersSalesforce(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIdentityprovidersSalesforceRequest.putIdentityprovidersSalesforce was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteintegration": {
    "operationId": "deleteintegration",
    "functionName": "deleteIntegration",
    "signature": "deleteIntegration(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Integration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration Id\n\n// Delete integration.\nDeleteIntegrationRequest.deleteIntegration(integrationId: integrationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteIntegrationRequest.deleteIntegration was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteintegrationsaction": {
    "operationId": "deleteintegrationsaction",
    "functionName": "deleteIntegrationsAction",
    "signature": "deleteIntegrationsAction(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\n\n// Delete an Action\nDeleteIntegrationsActionRequest.deleteIntegrationsAction(actionId: actionId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteIntegrationsActionRequest.deleteIntegrationsAction was successful\")\n    }\n}"
  },
  "deleteintegrationsactiondraft": {
    "operationId": "deleteintegrationsactiondraft",
    "functionName": "deleteIntegrationsActionDraft",
    "signature": "deleteIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\n\n// Delete a Draft\nDeleteIntegrationsActionDraftRequest.deleteIntegrationsActionDraft(actionId: actionId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteIntegrationsActionDraftRequest.deleteIntegrationsActionDraft was successful\")\n    }\n}"
  },
  "deleteintegrationscredential": {
    "operationId": "deleteintegrationscredential",
    "functionName": "deleteIntegrationsCredential",
    "signature": "deleteIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet credentialId: String = \"\" // Credential ID\n\n// Delete a set of credentials\nDeleteIntegrationsCredentialRequest.deleteIntegrationsCredential(credentialId: credentialId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteIntegrationsCredentialRequest.deleteIntegrationsCredential was successful\")\n    }\n}"
  },
  "getintegration": {
    "operationId": "getintegration",
    "functionName": "getIntegration",
    "signature": "getIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration Id\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// Get integration.\nGetIntegrationRequest.getIntegration(integrationId: integrationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationRequest.getIntegration was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationconfigcurrent": {
    "operationId": "getintegrationconfigcurrent",
    "functionName": "getIntegrationConfigCurrent",
    "signature": "getIntegrationConfigCurrent(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration Id\n\n// Get integration configuration.\nGetIntegrationConfigCurrentRequest.getIntegrationConfigCurrent(integrationId: integrationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationConfigCurrentRequest.getIntegrationConfigCurrent was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrations": {
    "operationId": "getintegrations",
    "functionName": "getIntegrations",
    "signature": "getIntegrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// List integrations\nGetIntegrationsRequest.getIntegrations(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsRequest.getIntegrations was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsaction": {
    "operationId": "getintegrationsaction",
    "functionName": "getIntegrationsAction",
    "signature": "getIntegrationsAction(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet expand: GetIntegrationsActionRequest.Expand_getIntegrationsAction = GetIntegrationsActionRequest.Expand_getIntegrationsAction.enummember // Indicates a field in the response which should be expanded.\nlet includeConfig: Bool = true // Return config in response.\n\n// Retrieves a single Action matching id.\nGetIntegrationsActionRequest.getIntegrationsAction(actionId: actionId, expand: expand, includeConfig: includeConfig) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionRequest.getIntegrationsAction was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactiondraft": {
    "operationId": "getintegrationsactiondraft",
    "functionName": "getIntegrationsActionDraft",
    "signature": "getIntegrationsActionDraft(actionId, expand, includeConfig)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeConfig",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet expand: GetIntegrationsActionDraftRequest.Expand_getIntegrationsActionDraft = GetIntegrationsActionDraftRequest.Expand_getIntegrationsActionDraft.enummember // Indicates a field in the response which should be expanded.\nlet includeConfig: Bool = true // Return config in response.\n\n// Retrieve a Draft\nGetIntegrationsActionDraftRequest.getIntegrationsActionDraft(actionId: actionId, expand: expand, includeConfig: includeConfig) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionDraftRequest.getIntegrationsActionDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactiondraftschema": {
    "operationId": "getintegrationsactiondraftschema",
    "functionName": "getIntegrationsActionDraftSchema",
    "signature": "getIntegrationsActionDraftSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet fileName: String = \"\" // Name of schema file to be retrieved for this draft.\n\n// Retrieve schema for a Draft based on filename.\nGetIntegrationsActionDraftSchemaRequest.getIntegrationsActionDraftSchema(actionId: actionId, fileName: fileName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionDraftSchemaRequest.getIntegrationsActionDraftSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactiondrafttemplate": {
    "operationId": "getintegrationsactiondrafttemplate",
    "functionName": "getIntegrationsActionDraftTemplate",
    "signature": "getIntegrationsActionDraftTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet fileName: String = \"\" // Name of template file to be retrieved for this action draft.\n\n// Retrieve templates for a Draft based on filename.\nGetIntegrationsActionDraftTemplateRequest.getIntegrationsActionDraftTemplate(actionId: actionId, fileName: fileName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionDraftTemplateRequest.getIntegrationsActionDraftTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactiondraftvalidation": {
    "operationId": "getintegrationsactiondraftvalidation",
    "functionName": "getIntegrationsActionDraftValidation",
    "signature": "getIntegrationsActionDraftValidation(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftValidationResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\n\n// Validate current Draft configuration.\nGetIntegrationsActionDraftValidationRequest.getIntegrationsActionDraftValidation(actionId: actionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionDraftValidationRequest.getIntegrationsActionDraftValidation was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactionschema": {
    "operationId": "getintegrationsactionschema",
    "functionName": "getIntegrationsActionSchema",
    "signature": "getIntegrationsActionSchema(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet fileName: String = \"\" // Name of schema file to be retrieved for this action.\n\n// Retrieve schema for an action based on filename.\nGetIntegrationsActionSchemaRequest.getIntegrationsActionSchema(actionId: actionId, fileName: fileName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionSchemaRequest.getIntegrationsActionSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactiontemplate": {
    "operationId": "getintegrationsactiontemplate",
    "functionName": "getIntegrationsActionTemplate",
    "signature": "getIntegrationsActionTemplate(actionId, fileName)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet fileName: String = \"\" // Name of template file to be retrieved for this action.\n\n// Retrieve text of templates for an action based on filename.\nGetIntegrationsActionTemplateRequest.getIntegrationsActionTemplate(actionId: actionId, fileName: fileName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionTemplateRequest.getIntegrationsActionTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactions": {
    "operationId": "getintegrationsactions",
    "functionName": "getIntegrationsActions",
    "signature": "getIntegrationsActions(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet sortBy: String = \"\" // Root level field name to sort on.\nlet sortOrder: GetIntegrationsActionsRequest.SortOrder_getIntegrationsActions = GetIntegrationsActionsRequest.SortOrder_getIntegrationsActions.enummember // Direction to sort 'sortBy' field.\nlet category: String = \"\" // Filter by category name.\nlet name: String = \"\" // Filter by partial or complete action name.\nlet ids: String = \"\" // Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids.\nlet secure: GetIntegrationsActionsRequest.Secure_getIntegrationsActions = GetIntegrationsActionsRequest.Secure_getIntegrationsActions.enummember // Filter based on 'secure' configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions.\nlet includeAuthActions: GetIntegrationsActionsRequest.IncludeAuthActions_getIntegrationsActions = GetIntegrationsActionsRequest.IncludeAuthActions_getIntegrationsActions.enummember // Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n\n// Retrieves all actions associated with filters passed in via query param.\nGetIntegrationsActionsRequest.getIntegrationsActions(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, ids: ids, secure: secure, includeAuthActions: includeAuthActions) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionsRequest.getIntegrationsActions was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactionscategories": {
    "operationId": "getintegrationsactionscategories",
    "functionName": "getIntegrationsActionsCategories",
    "signature": "getIntegrationsActionsCategories(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet sortBy: String = \"\" // Root level field name to sort on.  Only 'name' is supported on this endpoint.\nlet sortOrder: GetIntegrationsActionsCategoriesRequest.SortOrder_getIntegrationsActionsCategories = GetIntegrationsActionsCategoriesRequest.SortOrder_getIntegrationsActionsCategories.enummember // Direction to sort 'sortBy' field.\nlet secure: GetIntegrationsActionsCategoriesRequest.Secure_getIntegrationsActionsCategories = GetIntegrationsActionsCategoriesRequest.Secure_getIntegrationsActionsCategories.enummember // Filter to only include secure actions. True will only include actions marked secured. False will include only unsecure actions. Do not use filter if you want all Actions.\n\n// Retrieves all categories of available Actions\nGetIntegrationsActionsCategoriesRequest.getIntegrationsActionsCategories(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, secure: secure) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionsCategoriesRequest.getIntegrationsActionsCategories was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsactionsdrafts": {
    "operationId": "getintegrationsactionsdrafts",
    "functionName": "getIntegrationsActionsDrafts",
    "signature": "getIntegrationsActionsDrafts(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, ids, secure, includeAuthActions)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secure",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeAuthActions",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet sortBy: String = \"\" // Root level field name to sort on.\nlet sortOrder: GetIntegrationsActionsDraftsRequest.SortOrder_getIntegrationsActionsDrafts = GetIntegrationsActionsDraftsRequest.SortOrder_getIntegrationsActionsDrafts.enummember // Direction to sort 'sortBy' field.\nlet category: String = \"\" // Filter by category name.\nlet name: String = \"\" // Filter by partial or complete action name.\nlet ids: String = \"\" // Filter by action Id. Can be a comma separated list to request multiple actions.  Limit of 50 Ids.\nlet secure: GetIntegrationsActionsDraftsRequest.Secure_getIntegrationsActionsDrafts = GetIntegrationsActionsDraftsRequest.Secure_getIntegrationsActionsDrafts.enummember // Filter based on 'secure' configuration option. True will only return actions marked as secure. False will return only non-secure actions. Do not use filter if you want all Actions.\nlet includeAuthActions: GetIntegrationsActionsDraftsRequest.IncludeAuthActions_getIntegrationsActionsDrafts = GetIntegrationsActionsDraftsRequest.IncludeAuthActions_getIntegrationsActionsDrafts.enummember // Whether or not to include authentication actions in the response. These actions are not directly executable. Some integrations create them and will run them as needed to refresh authentication information for other actions.\n\n// Retrieves all action drafts associated with the filters passed in via query param.\nGetIntegrationsActionsDraftsRequest.getIntegrationsActionsDrafts(pageSize: pageSize, pageNumber: pageNumber, nextPage: nextPage, previousPage: previousPage, sortBy: sortBy, sortOrder: sortOrder, category: category, name: name, ids: ids, secure: secure, includeAuthActions: includeAuthActions) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsActionsDraftsRequest.getIntegrationsActionsDrafts was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsbotconnectorintegrationidbot": {
    "operationId": "getintegrationsbotconnectorintegrationidbot",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBot",
    "signature": "getIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, version)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "version",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BotConnectorBot",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // The integration ID for this group of bots\nlet botId: String = \"\" // The botID for this bot\nlet version: String = \"\" // Specific Version\n\n// Get a specific botConnector bot, plus versions, for this integration\nGetIntegrationsBotconnectorIntegrationIdBotRequest.getIntegrationsBotconnectorIntegrationIdBot(integrationId: integrationId, botId: botId, version: version) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsBotconnectorIntegrationIdBotRequest.getIntegrationsBotconnectorIntegrationIdBot was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsbotconnectorintegrationidbotversions": {
    "operationId": "getintegrationsbotconnectorintegrationidbotversions",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotVersions",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotVersionSummaryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // The integration ID for this bot group\nlet botId: String = \"\" // The botID for this bot\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a list of bot versions for a bot\nGetIntegrationsBotconnectorIntegrationIdBotVersionsRequest.getIntegrationsBotconnectorIntegrationIdBotVersions(integrationId: integrationId, botId: botId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsBotconnectorIntegrationIdBotVersionsRequest.getIntegrationsBotconnectorIntegrationIdBotVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsbotconnectorintegrationidbots": {
    "operationId": "getintegrationsbotconnectorintegrationidbots",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBots",
    "signature": "getIntegrationsBotconnectorIntegrationIdBots(integrationId)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BotList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // The integration ID for this group of bots\n\n// Get a list of botConnector bots for this integration\nGetIntegrationsBotconnectorIntegrationIdBotsRequest.getIntegrationsBotconnectorIntegrationIdBots(integrationId: integrationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsBotconnectorIntegrationIdBotsRequest.getIntegrationsBotconnectorIntegrationIdBots was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsbotconnectorintegrationidbotssummaries": {
    "operationId": "getintegrationsbotconnectorintegrationidbotssummaries",
    "functionName": "getIntegrationsBotconnectorIntegrationIdBotsSummaries",
    "signature": "getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "BotConnectorBotSummaryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // The integration ID for this group of bots\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a summary list of botConnector bots for this integration\nGetIntegrationsBotconnectorIntegrationIdBotsSummariesRequest.getIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId: integrationId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsBotconnectorIntegrationIdBotsSummariesRequest.getIntegrationsBotconnectorIntegrationIdBotsSummaries was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsclientapps": {
    "operationId": "getintegrationsclientapps",
    "functionName": "getIntegrationsClientapps",
    "signature": "getIntegrationsClientapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ClientAppEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// List permitted client app integrations for the logged in user\nGetIntegrationsClientappsRequest.getIntegrationsClientapps(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsClientappsRequest.getIntegrationsClientapps was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsclientappsunifiedcommunications": {
    "operationId": "getintegrationsclientappsunifiedcommunications",
    "functionName": "getIntegrationsClientappsUnifiedcommunications",
    "signature": "getIntegrationsClientappsUnifiedcommunications(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UCIntegrationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// UC integration client application configuration.\nGetIntegrationsClientappsUnifiedcommunicationsRequest.getIntegrationsClientappsUnifiedcommunications(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsClientappsUnifiedcommunicationsRequest.getIntegrationsClientappsUnifiedcommunications was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationscredential": {
    "operationId": "getintegrationscredential",
    "functionName": "getIntegrationsCredential",
    "signature": "getIntegrationsCredential(credentialId)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Credential",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet credentialId: String = \"\" // Credential ID\n\n// Get a single credential with sensitive fields redacted\nGetIntegrationsCredentialRequest.getIntegrationsCredential(credentialId: credentialId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsCredentialRequest.getIntegrationsCredential was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationscredentials": {
    "operationId": "getintegrationscredentials",
    "functionName": "getIntegrationsCredentials",
    "signature": "getIntegrationsCredentials(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "CredentialInfoListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// List multiple sets of credentials\nGetIntegrationsCredentialsRequest.getIntegrationsCredentials(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsCredentialsRequest.getIntegrationsCredentials was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationscredentialstypes": {
    "operationId": "getintegrationscredentialstypes",
    "functionName": "getIntegrationsCredentialsTypes",
    "signature": "getIntegrationsCredentialsTypes()",
    "return": "CredentialTypeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// List all credential types\nGetIntegrationsCredentialsTypesRequest.getIntegrationsCredentialsTypes() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsCredentialsTypesRequest.getIntegrationsCredentialsTypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationseventlog": {
    "operationId": "getintegrationseventlog",
    "functionName": "getIntegrationsEventlog",
    "signature": "getIntegrationsEventlog(pageSize, pageNumber, sortBy, sortOrder, entityId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "entityId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationEventEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Order by\nlet entityId: String = \"\" // Include only events with this entity ID\n\n// List all events\nGetIntegrationsEventlogRequest.getIntegrationsEventlog(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, entityId: entityId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsEventlogRequest.getIntegrationsEventlog was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationseventlogeventid": {
    "operationId": "getintegrationseventlogeventid",
    "functionName": "getIntegrationsEventlogEventId",
    "signature": "getIntegrationsEventlogEventId(eventId)",
    "parameters": [
      {
        "name": "eventId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationEvent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet eventId: String = \"\" // Event Id\n\n// Get a single event\nGetIntegrationsEventlogEventIdRequest.getIntegrationsEventlogEventId(eventId: eventId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsEventlogEventIdRequest.getIntegrationsEventlogEventId was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechdialogflowagent": {
    "operationId": "getintegrationsspeechdialogflowagent",
    "functionName": "getIntegrationsSpeechDialogflowAgent",
    "signature": "getIntegrationsSpeechDialogflowAgent(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialogflowAgent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet agentId: String = \"\" // The agent ID\n\n// Get details about a Dialogflow agent\nGetIntegrationsSpeechDialogflowAgentRequest.getIntegrationsSpeechDialogflowAgent(agentId: agentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechDialogflowAgentRequest.getIntegrationsSpeechDialogflowAgent was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechdialogflowagents": {
    "operationId": "getintegrationsspeechdialogflowagents",
    "functionName": "getIntegrationsSpeechDialogflowAgents",
    "signature": "getIntegrationsSpeechDialogflowAgents(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialogflowAgentSummaryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet name: String = \"\" // Filter on agent name\n\n// Get a list of Dialogflow agents in the customers' Google accounts\nGetIntegrationsSpeechDialogflowAgentsRequest.getIntegrationsSpeechDialogflowAgents(pageNumber: pageNumber, pageSize: pageSize, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechDialogflowAgentsRequest.getIntegrationsSpeechDialogflowAgents was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechlexbotalias": {
    "operationId": "getintegrationsspeechlexbotalias",
    "functionName": "getIntegrationsSpeechLexBotAlias",
    "signature": "getIntegrationsSpeechLexBotAlias(aliasId)",
    "parameters": [
      {
        "name": "aliasId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LexBotAlias",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet aliasId: String = \"\" // The alias ID\n\n// Get details about a Lex bot alias\nGetIntegrationsSpeechLexBotAliasRequest.getIntegrationsSpeechLexBotAlias(aliasId: aliasId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechLexBotAliasRequest.getIntegrationsSpeechLexBotAlias was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechlexbotbotidaliases": {
    "operationId": "getintegrationsspeechlexbotbotidaliases",
    "functionName": "getIntegrationsSpeechLexBotBotIdAliases",
    "signature": "getIntegrationsSpeechLexBotBotIdAliases(botId, pageNumber, pageSize, status, name)",
    "parameters": [
      {
        "name": "botId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotAliasEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet botId: String = \"\" // The bot ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet status: GetIntegrationsSpeechLexBotBotIdAliasesRequest.Status_getIntegrationsSpeechLexBotBotIdAliases = GetIntegrationsSpeechLexBotBotIdAliasesRequest.Status_getIntegrationsSpeechLexBotBotIdAliases.enummember // Filter on alias status\nlet name: String = \"\" // Filter on alias name\n\n// Get a list of aliases for a bot in the customer's AWS accounts\nGetIntegrationsSpeechLexBotBotIdAliasesRequest.getIntegrationsSpeechLexBotBotIdAliases(botId: botId, pageNumber: pageNumber, pageSize: pageSize, status: status, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechLexBotBotIdAliasesRequest.getIntegrationsSpeechLexBotBotIdAliases was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechlexbots": {
    "operationId": "getintegrationsspeechlexbots",
    "functionName": "getIntegrationsSpeechLexBots",
    "signature": "getIntegrationsSpeechLexBots(pageNumber, pageSize, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LexBotEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet name: String = \"\" // Filter on bot name\n\n// Get a list of Lex bots in the customers' AWS accounts\nGetIntegrationsSpeechLexBotsRequest.getIntegrationsSpeechLexBots(pageNumber: pageNumber, pageSize: pageSize, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechLexBotsRequest.getIntegrationsSpeechLexBots was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechttsengine": {
    "operationId": "getintegrationsspeechttsengine",
    "functionName": "getIntegrationsSpeechTtsEngine",
    "signature": "getIntegrationsSpeechTtsEngine(engineId, includeVoices)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeVoices",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet engineId: String = \"\" // The engine ID\nlet includeVoices: Bool = true // Include voices for the engine\n\n// Get details about a TTS engine\nGetIntegrationsSpeechTtsEngineRequest.getIntegrationsSpeechTtsEngine(engineId: engineId, includeVoices: includeVoices) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechTtsEngineRequest.getIntegrationsSpeechTtsEngine was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechttsenginevoice": {
    "operationId": "getintegrationsspeechttsenginevoice",
    "functionName": "getIntegrationsSpeechTtsEngineVoice",
    "signature": "getIntegrationsSpeechTtsEngineVoice(engineId, voiceId)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "voiceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TtsVoiceEntity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet engineId: String = \"\" // The engine ID\nlet voiceId: String = \"\" // The voice ID\n\n// Get details about a specific voice for a TTS engine\nGetIntegrationsSpeechTtsEngineVoiceRequest.getIntegrationsSpeechTtsEngineVoice(engineId: engineId, voiceId: voiceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechTtsEngineVoiceRequest.getIntegrationsSpeechTtsEngineVoice was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechttsenginevoices": {
    "operationId": "getintegrationsspeechttsenginevoices",
    "functionName": "getIntegrationsSpeechTtsEngineVoices",
    "signature": "getIntegrationsSpeechTtsEngineVoices(engineId, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "engineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TtsVoiceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet engineId: String = \"\" // The engine ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get a list of voices for a TTS engine\nGetIntegrationsSpeechTtsEngineVoicesRequest.getIntegrationsSpeechTtsEngineVoices(engineId: engineId, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechTtsEngineVoicesRequest.getIntegrationsSpeechTtsEngineVoices was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechttsengines": {
    "operationId": "getintegrationsspeechttsengines",
    "functionName": "getIntegrationsSpeechTtsEngines",
    "signature": "getIntegrationsSpeechTtsEngines(pageNumber, pageSize, includeVoices, name, language)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "includeVoices",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TtsEngineEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet includeVoices: Bool = true // Include voices for the engine\nlet name: String = \"\" // Filter on engine name\nlet language: String = \"\" // Filter on supported language. If includeVoices=true then the voices are also filtered.\n\n// Get a list of TTS engines enabled for org\nGetIntegrationsSpeechTtsEnginesRequest.getIntegrationsSpeechTtsEngines(pageNumber: pageNumber, pageSize: pageSize, includeVoices: includeVoices, name: name, language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechTtsEnginesRequest.getIntegrationsSpeechTtsEngines was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsspeechttssettings": {
    "operationId": "getintegrationsspeechttssettings",
    "functionName": "getIntegrationsSpeechTtsSettings",
    "signature": "getIntegrationsSpeechTtsSettings()",
    "return": "TtsSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get TTS settings for an org\nGetIntegrationsSpeechTtsSettingsRequest.getIntegrationsSpeechTtsSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsSpeechTtsSettingsRequest.getIntegrationsSpeechTtsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationstype": {
    "operationId": "getintegrationstype",
    "functionName": "getIntegrationsType",
    "signature": "getIntegrationsType(typeId)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "IntegrationType",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet typeId: String = \"\" // Integration Type Id\n\n// Get integration type.\nGetIntegrationsTypeRequest.getIntegrationsType(typeId: typeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsTypeRequest.getIntegrationsType was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationstypeconfigschema": {
    "operationId": "getintegrationstypeconfigschema",
    "functionName": "getIntegrationsTypeConfigschema",
    "signature": "getIntegrationsTypeConfigschema(typeId, configType)",
    "parameters": [
      {
        "name": "typeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JsonSchemaDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet typeId: String = \"\" // Integration Type Id\nlet configType: GetIntegrationsTypeConfigschemaRequest.ConfigType_getIntegrationsTypeConfigschema = GetIntegrationsTypeConfigschemaRequest.ConfigType_getIntegrationsTypeConfigschema.enummember // Config schema type\n\n// Get properties config schema for an integration type.\nGetIntegrationsTypeConfigschemaRequest.getIntegrationsTypeConfigschema(typeId: typeId, configType: configType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsTypeConfigschemaRequest.getIntegrationsTypeConfigschema was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationstypes": {
    "operationId": "getintegrationstypes",
    "functionName": "getIntegrationsTypes",
    "signature": "getIntegrationsTypes(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "IntegrationTypeEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\n\n// List integration types\nGetIntegrationsTypesRequest.getIntegrationsTypes(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsTypesRequest.getIntegrationsTypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getintegrationsuserapps": {
    "operationId": "getintegrationsuserapps",
    "functionName": "getIntegrationsUserapps",
    "signature": "getIntegrationsUserapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "appHost",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserAppEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet appHost: String = \"\" // The type of UserApp to filter by\n\n// List permitted user app integrations for the logged in user\nGetIntegrationsUserappsRequest.getIntegrationsUserapps(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, appHost: appHost) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIntegrationsUserappsRequest.getIntegrationsUserapps was successful\")\n        dump(response)\n    }\n}"
  },
  "patchintegration": {
    "operationId": "patchintegration",
    "functionName": "patchIntegration",
    "signature": "patchIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "Integration",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration Id\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet body: Integration = new Integration(...) // Integration Update\n\n// Update an integration.\nPatchIntegrationRequest.patchIntegration(integrationId: integrationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchIntegrationRequest.patchIntegration was successful\")\n        dump(response)\n    }\n}"
  },
  "patchintegrationsaction": {
    "operationId": "patchintegrationsaction",
    "functionName": "patchIntegrationsAction",
    "signature": "patchIntegrationsAction(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateActionInput",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: UpdateActionInput = new UpdateActionInput(...) // Input used to patch the Action.\n\n// Patch an Action\nPatchIntegrationsActionRequest.patchIntegrationsAction(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchIntegrationsActionRequest.patchIntegrationsAction was successful\")\n        dump(response)\n    }\n}"
  },
  "patchintegrationsactiondraft": {
    "operationId": "patchintegrationsactiondraft",
    "functionName": "patchIntegrationsActionDraft",
    "signature": "patchIntegrationsActionDraft(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateDraftInput",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: UpdateDraftInput = new UpdateDraftInput(...) // Input used to patch the Action Draft.\n\n// Update an existing Draft\nPatchIntegrationsActionDraftRequest.patchIntegrationsActionDraft(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchIntegrationsActionDraftRequest.patchIntegrationsActionDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrations": {
    "operationId": "postintegrations",
    "functionName": "postIntegrations",
    "signature": "postIntegrations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateIntegrationRequest",
        "required": "false"
      }
    ],
    "return": "Integration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateIntegrationRequest = new CreateIntegrationRequest(...) // Integration\n\n// Create an integration.\nPostIntegrationsRequest.postIntegrations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsRequest.postIntegrations was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactiondraft": {
    "operationId": "postintegrationsactiondraft",
    "functionName": "postIntegrationsActionDraft",
    "signature": "postIntegrationsActionDraft(actionId)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\n\n// Create a new Draft from existing Action\nPostIntegrationsActionDraftRequest.postIntegrationsActionDraft(actionId: actionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionDraftRequest.postIntegrationsActionDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactiondraftpublish": {
    "operationId": "postintegrationsactiondraftpublish",
    "functionName": "postIntegrationsActionDraftPublish",
    "signature": "postIntegrationsActionDraftPublish(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PublishDraftInput",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: PublishDraftInput = new PublishDraftInput(...) // Input used to patch the Action.\n\n// Publish a Draft and make it the active Action configuration\nPostIntegrationsActionDraftPublishRequest.postIntegrationsActionDraftPublish(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionDraftPublishRequest.postIntegrationsActionDraftPublish was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactiondrafttest": {
    "operationId": "postintegrationsactiondrafttest",
    "functionName": "postIntegrationsActionDraftTest",
    "signature": "postIntegrationsActionDraftTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String:JSON]",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: [String:JSON] = new JSON(...) // Map of parameters used for variable substitution.\n\n// Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging.\nPostIntegrationsActionDraftTestRequest.postIntegrationsActionDraftTest(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionDraftTestRequest.postIntegrationsActionDraftTest was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactionexecute": {
    "operationId": "postintegrationsactionexecute",
    "functionName": "postIntegrationsActionExecute",
    "signature": "postIntegrationsActionExecute(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String:JSON]",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: [String:JSON] = new JSON(...) // Map of parameters used for variable substitution.\n\n// Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error.\nPostIntegrationsActionExecuteRequest.postIntegrationsActionExecute(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionExecuteRequest.postIntegrationsActionExecute was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactiontest": {
    "operationId": "postintegrationsactiontest",
    "functionName": "postIntegrationsActionTest",
    "signature": "postIntegrationsActionTest(actionId, body)",
    "parameters": [
      {
        "name": "actionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String:JSON]",
        "required": "true"
      }
    ],
    "return": "TestExecutionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionId: String = \"\" // actionId\nlet body: [String:JSON] = new JSON(...) // Map of parameters used for variable substitution.\n\n// Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging.\nPostIntegrationsActionTestRequest.postIntegrationsActionTest(actionId: actionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionTestRequest.postIntegrationsActionTest was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactions": {
    "operationId": "postintegrationsactions",
    "functionName": "postIntegrationsActions",
    "signature": "postIntegrationsActions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PostActionInput",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PostActionInput = new PostActionInput(...) // Input used to create Action.\n\n// Create a new Action\nPostIntegrationsActionsRequest.postIntegrationsActions(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionsRequest.postIntegrationsActions was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsactionsdrafts": {
    "operationId": "postintegrationsactionsdrafts",
    "functionName": "postIntegrationsActionsDrafts",
    "signature": "postIntegrationsActionsDrafts(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PostActionInput",
        "required": "true"
      }
    ],
    "return": "Action",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PostActionInput = new PostActionInput(...) // Input used to create Action Draft.\n\n// Create a new Draft\nPostIntegrationsActionsDraftsRequest.postIntegrationsActionsDrafts(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsActionsDraftsRequest.postIntegrationsActionsDrafts was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationscredentials": {
    "operationId": "postintegrationscredentials",
    "functionName": "postIntegrationsCredentials",
    "signature": "postIntegrationsCredentials(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Credential",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Credential = new Credential(...) // Credential\n\n// Create a set of credentials\nPostIntegrationsCredentialsRequest.postIntegrationsCredentials(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsCredentialsRequest.postIntegrationsCredentials was successful\")\n        dump(response)\n    }\n}"
  },
  "postintegrationsworkforcemanagementvendorconnection": {
    "operationId": "postintegrationsworkforcemanagementvendorconnection",
    "functionName": "postIntegrationsWorkforcemanagementVendorconnection",
    "signature": "postIntegrationsWorkforcemanagementVendorconnection(body)",
    "parameters": [
      {
        "name": "body",
        "type": "VendorConnectionRequest",
        "required": "false"
      }
    ],
    "return": "UserActionCategoryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: VendorConnectionRequest = new VendorConnectionRequest(...) // \n\n// Add a vendor connection\nPostIntegrationsWorkforcemanagementVendorconnectionRequest.postIntegrationsWorkforcemanagementVendorconnection(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostIntegrationsWorkforcemanagementVendorconnectionRequest.postIntegrationsWorkforcemanagementVendorconnection was successful\")\n        dump(response)\n    }\n}"
  },
  "putintegrationconfigcurrent": {
    "operationId": "putintegrationconfigcurrent",
    "functionName": "putIntegrationConfigCurrent",
    "signature": "putIntegrationConfigCurrent(integrationId, body)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "IntegrationConfiguration",
        "required": "false"
      }
    ],
    "return": "IntegrationConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // Integration Id\nlet body: IntegrationConfiguration = new IntegrationConfiguration(...) // Integration Configuration\n\n// Update integration configuration.\nPutIntegrationConfigCurrentRequest.putIntegrationConfigCurrent(integrationId: integrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIntegrationConfigCurrentRequest.putIntegrationConfigCurrent was successful\")\n        dump(response)\n    }\n}"
  },
  "putintegrationsbotconnectorintegrationidbots": {
    "operationId": "putintegrationsbotconnectorintegrationidbots",
    "functionName": "putIntegrationsBotconnectorIntegrationIdBots",
    "signature": "putIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)",
    "parameters": [
      {
        "name": "integrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "botList",
        "type": "BotList",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet integrationId: String = \"\" // The integration ID for this group of bots\nlet botList: BotList = new BotList(...) // \n\n// Set a list of botConnector bots plus versions for this integration\nPutIntegrationsBotconnectorIntegrationIdBotsRequest.putIntegrationsBotconnectorIntegrationIdBots(integrationId: integrationId, botList: botList) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutIntegrationsBotconnectorIntegrationIdBotsRequest.putIntegrationsBotconnectorIntegrationIdBots was successful\")\n    }\n}"
  },
  "putintegrationscredential": {
    "operationId": "putintegrationscredential",
    "functionName": "putIntegrationsCredential",
    "signature": "putIntegrationsCredential(credentialId, body)",
    "parameters": [
      {
        "name": "credentialId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Credential",
        "required": "false"
      }
    ],
    "return": "CredentialInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet credentialId: String = \"\" // Credential ID\nlet body: Credential = new Credential(...) // Credential\n\n// Update a set of credentials\nPutIntegrationsCredentialRequest.putIntegrationsCredential(credentialId: credentialId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIntegrationsCredentialRequest.putIntegrationsCredential was successful\")\n        dump(response)\n    }\n}"
  },
  "putintegrationsspeechttssettings": {
    "operationId": "putintegrationsspeechttssettings",
    "functionName": "putIntegrationsSpeechTtsSettings",
    "signature": "putIntegrationsSpeechTtsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TtsSettings",
        "required": "true"
      }
    ],
    "return": "TtsSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TtsSettings = new TtsSettings(...) // Updated TtsSettings\n\n// Update TTS settings for an org\nPutIntegrationsSpeechTtsSettingsRequest.putIntegrationsSpeechTtsSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutIntegrationsSpeechTtsSettingsRequest.putIntegrationsSpeechTtsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "deletejourneyactionmap": {
    "operationId": "deletejourneyactionmap",
    "functionName": "deleteJourneyActionmap",
    "signature": "deleteJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionMapId: String = \"\" // ID of the action map.\n\n// Delete single action map.\nDeleteJourneyActionmapRequest.deleteJourneyActionmap(actionMapId: actionMapId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteJourneyActionmapRequest.deleteJourneyActionmap was successful\")\n    }\n}"
  },
  "deletejourneyactiontemplate": {
    "operationId": "deletejourneyactiontemplate",
    "functionName": "deleteJourneyActiontemplate",
    "signature": "deleteJourneyActiontemplate(actionTemplateId, hardDelete)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "hardDelete",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionTemplateId: String = \"\" // ID of the action template.\nlet hardDelete: Bool = true // Determines whether Action Template should be soft-deleted (have it's state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default.\n\n// Delete a single action template.\nDeleteJourneyActiontemplateRequest.deleteJourneyActiontemplate(actionTemplateId: actionTemplateId, hardDelete: hardDelete) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteJourneyActiontemplateRequest.deleteJourneyActiontemplate was successful\")\n    }\n}"
  },
  "deletejourneyoutcome": {
    "operationId": "deletejourneyoutcome",
    "functionName": "deleteJourneyOutcome",
    "signature": "deleteJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outcomeId: String = \"\" // ID of the outcome.\n\n// Delete an outcome.\nDeleteJourneyOutcomeRequest.deleteJourneyOutcome(outcomeId: outcomeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteJourneyOutcomeRequest.deleteJourneyOutcome was successful\")\n    }\n}"
  },
  "deletejourneysegment": {
    "operationId": "deletejourneysegment",
    "functionName": "deleteJourneySegment",
    "signature": "deleteJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet segmentId: String = \"\" // ID of the segment.\n\n// Delete a segment.\nDeleteJourneySegmentRequest.deleteJourneySegment(segmentId: segmentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteJourneySegmentRequest.deleteJourneySegment was successful\")\n    }\n}"
  },
  "getjourneyactionmap": {
    "operationId": "getjourneyactionmap",
    "functionName": "getJourneyActionmap",
    "signature": "getJourneyActionmap(actionMapId)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionMap",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionMapId: String = \"\" // ID of the action map.\n\n// Retrieve a single action map.\nGetJourneyActionmapRequest.getJourneyActionmap(actionMapId: actionMapId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActionmapRequest.getJourneyActionmap was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyactionmaps": {
    "operationId": "getjourneyactionmaps",
    "functionName": "getJourneyActionmaps",
    "signature": "getJourneyActionmaps(pageNumber, pageSize, sortBy, filterField, filterValue, actionMapIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterField",
        "type": "String",
        "required": "false"
      },
      {
        "name": "filterValue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "actionMapIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionMapListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\nlet filterField: String = \"\" // Field to filter by (e.g. filterField=weight or filterField=action.actionTemplate.id). Requires 'filterField' to also be set.\nlet filterValue: String = \"\" // Value to filter by. Requires 'filterValue' to also be set.\nlet actionMapIds: [String] = [\"\"] // IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request.\nlet queryFields: [String] = [\"\"] // Action Map field(s) to query on. Requires 'queryValue' to also be set.\nlet queryValue: String = \"\" // Value to query on. Requires 'queryFields' to also be set.\n\n// Retrieve all action maps.\nGetJourneyActionmapsRequest.getJourneyActionmaps(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, filterField: filterField, filterValue: filterValue, actionMapIds: actionMapIds, queryFields: queryFields, queryValue: queryValue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActionmapsRequest.getJourneyActionmaps was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyactiontarget": {
    "operationId": "getjourneyactiontarget",
    "functionName": "getJourneyActiontarget",
    "signature": "getJourneyActiontarget(actionTargetId)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTarget",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionTargetId: String = \"\" // ID of the action target.\n\n// Retrieve a single action target.\nGetJourneyActiontargetRequest.getJourneyActiontarget(actionTargetId: actionTargetId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActiontargetRequest.getJourneyActiontarget was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyactiontargets": {
    "operationId": "getjourneyactiontargets",
    "functionName": "getJourneyActiontargets",
    "signature": "getJourneyActiontargets(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ActionTargetListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Retrieve all action targets.\nGetJourneyActiontargetsRequest.getJourneyActiontargets(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActiontargetsRequest.getJourneyActiontargets was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyactiontemplate": {
    "operationId": "getjourneyactiontemplate",
    "functionName": "getJourneyActiontemplate",
    "signature": "getJourneyActiontemplate(actionTemplateId)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActionTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionTemplateId: String = \"\" // ID of the action template.\n\n// Retrieve a single action template.\nGetJourneyActiontemplateRequest.getJourneyActiontemplate(actionTemplateId: actionTemplateId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActiontemplateRequest.getJourneyActiontemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyactiontemplates": {
    "operationId": "getjourneyactiontemplates",
    "functionName": "getJourneyActiontemplates",
    "signature": "getJourneyActiontemplates(pageNumber, pageSize, sortBy, mediaType, state, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ActionTemplateListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=name,-createdDate).\nlet mediaType: GetJourneyActiontemplatesRequest.MediaType_getJourneyActiontemplates = GetJourneyActiontemplatesRequest.MediaType_getJourneyActiontemplates.enummember // Media type\nlet state: GetJourneyActiontemplatesRequest.State_getJourneyActiontemplates = GetJourneyActiontemplatesRequest.State_getJourneyActiontemplates.enummember // Action template state.\nlet queryFields: [String] = [\"\"] // ActionTemplate field(s) to query on. Requires 'queryValue' to also be set.\nlet queryValue: String = \"\" // Value to query on. Requires 'queryFields' to also be set.\n\n// Retrieve all action templates.\nGetJourneyActiontemplatesRequest.getJourneyActiontemplates(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, mediaType: mediaType, state: state, queryFields: queryFields, queryValue: queryValue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyActiontemplatesRequest.getJourneyActiontemplates was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyoutcome": {
    "operationId": "getjourneyoutcome",
    "functionName": "getJourneyOutcome",
    "signature": "getJourneyOutcome(outcomeId)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Outcome",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outcomeId: String = \"\" // ID of the outcome.\n\n// Retrieve a single outcome.\nGetJourneyOutcomeRequest.getJourneyOutcome(outcomeId: outcomeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyOutcomeRequest.getJourneyOutcome was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneyoutcomes": {
    "operationId": "getjourneyoutcomes",
    "functionName": "getJourneyOutcomes",
    "signature": "getJourneyOutcomes(pageNumber, pageSize, sortBy, outcomeIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "outcomeIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutcomeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\nlet outcomeIds: [String] = [\"\"] // IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request.\nlet queryFields: [String] = [\"\"] // Outcome field(s) to query on. Requires 'queryValue' to also be set.\nlet queryValue: String = \"\" // Value to query on. Requires 'queryFields' to also be set.\n\n// Retrieve all outcomes.\nGetJourneyOutcomesRequest.getJourneyOutcomes(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, outcomeIds: outcomeIds, queryFields: queryFields, queryValue: queryValue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneyOutcomesRequest.getJourneyOutcomes was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneysegment": {
    "operationId": "getjourneysegment",
    "functionName": "getJourneySegment",
    "signature": "getJourneySegment(segmentId)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JourneySegment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet segmentId: String = \"\" // ID of the segment.\n\n// Retrieve a single segment.\nGetJourneySegmentRequest.getJourneySegment(segmentId: segmentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneySegmentRequest.getJourneySegment was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneysegments": {
    "operationId": "getjourneysegments",
    "functionName": "getJourneySegments",
    "signature": "getJourneySegments(sortBy, pageSize, pageNumber, isActive, segmentIds, queryFields, queryValue)",
    "parameters": [
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "isActive",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "segmentIds",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryFields",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "queryValue",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SegmentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sortBy: String = \"\" // Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet isActive: Bool = true // Determines whether or not to show only active segments.\nlet segmentIds: [String] = [\"\"] // IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request.\nlet queryFields: [String] = [\"\"] // Segment field(s) to query on. Requires 'queryValue' to also be set.\nlet queryValue: String = \"\" // Value to query on. Requires 'queryFields' to also be set.\n\n// Retrieve all segments.\nGetJourneySegmentsRequest.getJourneySegments(sortBy: sortBy, pageSize: pageSize, pageNumber: pageNumber, isActive: isActive, segmentIds: segmentIds, queryFields: queryFields, queryValue: queryValue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneySegmentsRequest.getJourneySegments was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneysession": {
    "operationId": "getjourneysession",
    "functionName": "getJourneySession",
    "signature": "getJourneySession(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Session",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sessionId: String = \"\" // ID of the session.\n\n// Retrieve a single session.\nGetJourneySessionRequest.getJourneySession(sessionId: sessionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneySessionRequest.getJourneySession was successful\")\n        dump(response)\n    }\n}"
  },
  "getjourneysessionoutcomescores": {
    "operationId": "getjourneysessionoutcomescores",
    "functionName": "getJourneySessionOutcomescores",
    "signature": "getJourneySessionOutcomescores(sessionId)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutcomeScoresResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sessionId: String = \"\" // ID of the session.\n\n// Retrieve latest outcome score associated with a session for all outcomes.\nGetJourneySessionOutcomescoresRequest.getJourneySessionOutcomescores(sessionId: sessionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetJourneySessionOutcomescoresRequest.getJourneySessionOutcomescores was successful\")\n        dump(response)\n    }\n}"
  },
  "patchjourneyactionmap": {
    "operationId": "patchjourneyactionmap",
    "functionName": "patchJourneyActionmap",
    "signature": "patchJourneyActionmap(actionMapId, body)",
    "parameters": [
      {
        "name": "actionMapId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchActionMap",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionMapId: String = \"\" // ID of the action map.\nlet body: PatchActionMap = new PatchActionMap(...) // \n\n// Update single action map.\nPatchJourneyActionmapRequest.patchJourneyActionmap(actionMapId: actionMapId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchJourneyActionmapRequest.patchJourneyActionmap was successful\")\n        dump(response)\n    }\n}"
  },
  "patchjourneyactiontarget": {
    "operationId": "patchjourneyactiontarget",
    "functionName": "patchJourneyActiontarget",
    "signature": "patchJourneyActiontarget(actionTargetId, body)",
    "parameters": [
      {
        "name": "actionTargetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchActionTarget",
        "required": "false"
      }
    ],
    "return": "ActionTarget",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionTargetId: String = \"\" // ID of the action target.\nlet body: PatchActionTarget = new PatchActionTarget(...) // \n\n// Update a single action target.\nPatchJourneyActiontargetRequest.patchJourneyActiontarget(actionTargetId: actionTargetId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchJourneyActiontargetRequest.patchJourneyActiontarget was successful\")\n        dump(response)\n    }\n}"
  },
  "patchjourneyactiontemplate": {
    "operationId": "patchjourneyactiontemplate",
    "functionName": "patchJourneyActiontemplate",
    "signature": "patchJourneyActiontemplate(actionTemplateId, body)",
    "parameters": [
      {
        "name": "actionTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchActionTemplate",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet actionTemplateId: String = \"\" // ID of the action template.\nlet body: PatchActionTemplate = new PatchActionTemplate(...) // \n\n// Update a single action template.\nPatchJourneyActiontemplateRequest.patchJourneyActiontemplate(actionTemplateId: actionTemplateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchJourneyActiontemplateRequest.patchJourneyActiontemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "patchjourneyoutcome": {
    "operationId": "patchjourneyoutcome",
    "functionName": "patchJourneyOutcome",
    "signature": "patchJourneyOutcome(outcomeId, body)",
    "parameters": [
      {
        "name": "outcomeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchOutcome",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outcomeId: String = \"\" // ID of the outcome.\nlet body: PatchOutcome = new PatchOutcome(...) // \n\n// Update an outcome.\nPatchJourneyOutcomeRequest.patchJourneyOutcome(outcomeId: outcomeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchJourneyOutcomeRequest.patchJourneyOutcome was successful\")\n        dump(response)\n    }\n}"
  },
  "patchjourneysegment": {
    "operationId": "patchjourneysegment",
    "functionName": "patchJourneySegment",
    "signature": "patchJourneySegment(segmentId, body)",
    "parameters": [
      {
        "name": "segmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchSegment",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet segmentId: String = \"\" // ID of the segment.\nlet body: PatchSegment = new PatchSegment(...) // \n\n// Update a segment.\nPatchJourneySegmentRequest.patchJourneySegment(segmentId: segmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchJourneySegmentRequest.patchJourneySegment was successful\")\n        dump(response)\n    }\n}"
  },
  "postjourneyactionmaps": {
    "operationId": "postjourneyactionmaps",
    "functionName": "postJourneyActionmaps",
    "signature": "postJourneyActionmaps(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ActionMap",
        "required": "false"
      }
    ],
    "return": "ActionMap",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ActionMap = new ActionMap(...) // \n\n// Create an action map.\nPostJourneyActionmapsRequest.postJourneyActionmaps(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostJourneyActionmapsRequest.postJourneyActionmaps was successful\")\n        dump(response)\n    }\n}"
  },
  "postjourneyactiontemplates": {
    "operationId": "postjourneyactiontemplates",
    "functionName": "postJourneyActiontemplates",
    "signature": "postJourneyActiontemplates(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ActionTemplate",
        "required": "false"
      }
    ],
    "return": "ActionTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ActionTemplate = new ActionTemplate(...) // \n\n// Create a single action template.\nPostJourneyActiontemplatesRequest.postJourneyActiontemplates(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostJourneyActiontemplatesRequest.postJourneyActiontemplates was successful\")\n        dump(response)\n    }\n}"
  },
  "postjourneyoutcomes": {
    "operationId": "postjourneyoutcomes",
    "functionName": "postJourneyOutcomes",
    "signature": "postJourneyOutcomes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Outcome",
        "required": "false"
      }
    ],
    "return": "Outcome",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Outcome = new Outcome(...) // \n\n// Create an outcome.\nPostJourneyOutcomesRequest.postJourneyOutcomes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostJourneyOutcomesRequest.postJourneyOutcomes was successful\")\n        dump(response)\n    }\n}"
  },
  "postjourneysegments": {
    "operationId": "postjourneysegments",
    "functionName": "postJourneySegments",
    "signature": "postJourneySegments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "JourneySegment",
        "required": "false"
      }
    ],
    "return": "JourneySegment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: JourneySegment = new JourneySegment(...) // \n\n// Create a segment.\nPostJourneySegmentsRequest.postJourneySegments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostJourneySegmentsRequest.postJourneySegments was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteknowledgeknowledgebase": {
    "operationId": "deleteknowledgeknowledgebase",
    "functionName": "deleteKnowledgeKnowledgebase",
    "signature": "deleteKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\n\n// Delete knowledge base\nDeleteKnowledgeKnowledgebaseRequest.deleteKnowledgeKnowledgebase(knowledgeBaseId: knowledgeBaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteKnowledgeKnowledgebaseRequest.deleteKnowledgeKnowledgebase was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteknowledgeknowledgebaselanguagecategory": {
    "operationId": "deleteknowledgeknowledgebaselanguagecategory",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageCategory",
    "signature": "deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeCategory",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet categoryId: String = \"\" // Category ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: DeleteKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageCategory = DeleteKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageCategory.enummember // Language code, format: iso2-LOCALE\n\n// Delete category\nDeleteKnowledgeKnowledgebaseLanguageCategoryRequest.deleteKnowledgeKnowledgebaseLanguageCategory(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteKnowledgeKnowledgebaseLanguageCategoryRequest.deleteKnowledgeKnowledgebaseLanguageCategory was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteknowledgeknowledgebaselanguagedocument": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocument",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocument",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: DeleteKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocument = DeleteKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocument.enummember // Language code, format: iso2-LOCALE\n\n// Delete document\nDeleteKnowledgeKnowledgebaseLanguageDocumentRequest.deleteKnowledgeKnowledgebaseLanguageDocument(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteKnowledgeKnowledgebaseLanguageDocumentRequest.deleteKnowledgeKnowledgebaseLanguageDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "deleteknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: DeleteKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocumentsImport = DeleteKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_deleteKnowledgeKnowledgebaseLanguageDocumentsImport.enummember // Language code, format: iso2-LOCALE\nlet importId: String = \"\" // Import ID\n\n// Delete import operation\nDeleteKnowledgeKnowledgebaseLanguageDocumentsImportRequest.deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, importId: importId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteKnowledgeKnowledgebaseLanguageDocumentsImportRequest.deleteKnowledgeKnowledgebaseLanguageDocumentsImport was successful\")\n    }\n}"
  },
  "getknowledgeknowledgebase": {
    "operationId": "getknowledgeknowledgebase",
    "functionName": "getKnowledgeKnowledgebase",
    "signature": "getKnowledgeKnowledgebase(knowledgeBaseId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\n\n// Get knowledge base\nGetKnowledgeKnowledgebaseRequest.getKnowledgeKnowledgebase(knowledgeBaseId: knowledgeBaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseRequest.getKnowledgeKnowledgebase was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagecategories": {
    "operationId": "getknowledgeknowledgebaselanguagecategories",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategories",
    "signature": "getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, before, after, limit, pageSize, name)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CategoryListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageCategoriesRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageCategories = GetKnowledgeKnowledgebaseLanguageCategoriesRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageCategories.enummember // Language code, format: iso2-LOCALE\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet name: String = \"\" // Filter to return the categories that starts with the given category name.\n\n// Get categories\nGetKnowledgeKnowledgebaseLanguageCategoriesRequest.getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageCategoriesRequest.getKnowledgeKnowledgebaseLanguageCategories was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagecategory": {
    "operationId": "getknowledgeknowledgebaselanguagecategory",
    "functionName": "getKnowledgeKnowledgebaseLanguageCategory",
    "signature": "getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet categoryId: String = \"\" // Category ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageCategory = GetKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageCategory.enummember // Language code, format: iso2-LOCALE\n\n// Get category\nGetKnowledgeKnowledgebaseLanguageCategoryRequest.getKnowledgeKnowledgebaseLanguageCategory(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageCategoryRequest.getKnowledgeKnowledgebaseLanguageCategory was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagedocument": {
    "operationId": "getknowledgeknowledgebaselanguagedocument",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocument",
    "signature": "getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocument = GetKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocument.enummember // Language code, format: iso2-LOCALE\n\n// Get document\nGetKnowledgeKnowledgebaseLanguageDocumentRequest.getKnowledgeKnowledgebaseLanguageDocument(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageDocumentRequest.getKnowledgeKnowledgebaseLanguageDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagedocuments": {
    "operationId": "getknowledgeknowledgebaselanguagedocuments",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "categories",
        "type": "String",
        "required": "false"
      },
      {
        "name": "title",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "documentIds",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DocumentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocuments = GetKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocuments.enummember // Language code, format: iso2-LOCALE\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet categories: String = \"\" // Filter by categories ids, comma separated values expected.\nlet title: String = \"\" // Filter by document title.\nlet sortBy: GetKnowledgeKnowledgebaseLanguageDocumentsRequest.SortBy_getKnowledgeKnowledgebaseLanguageDocuments = GetKnowledgeKnowledgebaseLanguageDocumentsRequest.SortBy_getKnowledgeKnowledgebaseLanguageDocuments.enummember // Sort by.\nlet sortOrder: GetKnowledgeKnowledgebaseLanguageDocumentsRequest.SortOrder_getKnowledgeKnowledgebaseLanguageDocuments = GetKnowledgeKnowledgebaseLanguageDocumentsRequest.SortOrder_getKnowledgeKnowledgebaseLanguageDocuments.enummember // Sort Order.\nlet documentIds: [String] = [\"\"] // Comma-separated list of document identifiers to fetch by.\n\n// Get documents\nGetKnowledgeKnowledgebaseLanguageDocumentsRequest.getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, categories: categories, title: title, sortBy: sortBy, sortOrder: sortOrder, documentIds: documentIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageDocumentsRequest.getKnowledgeKnowledgebaseLanguageDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "getknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "getKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocumentsImport = GetKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageDocumentsImport.enummember // Language code, format: iso2-LOCALE\nlet importId: String = \"\" // Import ID\n\n// Get import operation report\nGetKnowledgeKnowledgebaseLanguageDocumentsImportRequest.getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, importId: importId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageDocumentsImportRequest.getKnowledgeKnowledgebaseLanguageDocumentsImport was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagetraining": {
    "operationId": "getknowledgeknowledgebaselanguagetraining",
    "functionName": "getKnowledgeKnowledgebaseLanguageTraining",
    "signature": "getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageTrainingRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageTraining = GetKnowledgeKnowledgebaseLanguageTrainingRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageTraining.enummember // Language code, format: iso2-LOCALE\nlet trainingId: String = \"\" // Training ID\n\n// Get training detail\nGetKnowledgeKnowledgebaseLanguageTrainingRequest.getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, trainingId: trainingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageTrainingRequest.getKnowledgeKnowledgebaseLanguageTraining was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebaselanguagetrainings": {
    "operationId": "getknowledgeknowledgebaselanguagetrainings",
    "functionName": "getKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "knowledgeDocumentsState",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrainingListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: GetKnowledgeKnowledgebaseLanguageTrainingsRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageTrainings = GetKnowledgeKnowledgebaseLanguageTrainingsRequest.LanguageCode_getKnowledgeKnowledgebaseLanguageTrainings.enummember // Language code, format: iso2-LOCALE\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet knowledgeDocumentsState: GetKnowledgeKnowledgebaseLanguageTrainingsRequest.KnowledgeDocumentsState_getKnowledgeKnowledgebaseLanguageTrainings = GetKnowledgeKnowledgebaseLanguageTrainingsRequest.KnowledgeDocumentsState_getKnowledgeKnowledgebaseLanguageTrainings.enummember // Return the training with the specified state of the trained documents.\n\n// Get all trainings information for a knowledgebase\nGetKnowledgeKnowledgebaseLanguageTrainingsRequest.getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, before: before, after: after, limit: limit, pageSize: pageSize, knowledgeDocumentsState: knowledgeDocumentsState) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebaseLanguageTrainingsRequest.getKnowledgeKnowledgebaseLanguageTrainings was successful\")\n        dump(response)\n    }\n}"
  },
  "getknowledgeknowledgebases": {
    "operationId": "getknowledgeknowledgebases",
    "functionName": "getKnowledgeKnowledgebases",
    "signature": "getKnowledgeKnowledgebases(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "coreLanguage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "published",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "KnowledgeBaseListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet name: String = \"\" // Filter by Name.\nlet coreLanguage: GetKnowledgeKnowledgebasesRequest.CoreLanguage_getKnowledgeKnowledgebases = GetKnowledgeKnowledgebasesRequest.CoreLanguage_getKnowledgeKnowledgebases.enummember // Filter by core language.\nlet published: Bool = true // Filter by published status.\nlet sortBy: GetKnowledgeKnowledgebasesRequest.SortBy_getKnowledgeKnowledgebases = GetKnowledgeKnowledgebasesRequest.SortBy_getKnowledgeKnowledgebases.enummember // Sort by.\nlet sortOrder: GetKnowledgeKnowledgebasesRequest.SortOrder_getKnowledgeKnowledgebases = GetKnowledgeKnowledgebasesRequest.SortOrder_getKnowledgeKnowledgebases.enummember // Sort Order.\n\n// Get knowledge bases\nGetKnowledgeKnowledgebasesRequest.getKnowledgeKnowledgebases(before: before, after: after, limit: limit, pageSize: pageSize, name: name, coreLanguage: coreLanguage, published: published, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetKnowledgeKnowledgebasesRequest.getKnowledgeKnowledgebases was successful\")\n        dump(response)\n    }\n}"
  },
  "patchknowledgeknowledgebase": {
    "operationId": "patchknowledgeknowledgebase",
    "functionName": "patchKnowledgeKnowledgebase",
    "signature": "patchKnowledgeKnowledgebase(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeBase",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet body: KnowledgeBase = new KnowledgeBase(...) // \n\n// Update knowledge base\nPatchKnowledgeKnowledgebaseRequest.patchKnowledgeKnowledgebase(knowledgeBaseId: knowledgeBaseId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchKnowledgeKnowledgebaseRequest.patchKnowledgeKnowledgebase was successful\")\n        dump(response)\n    }\n}"
  },
  "patchknowledgeknowledgebaselanguagecategory": {
    "operationId": "patchknowledgeknowledgebaselanguagecategory",
    "functionName": "patchKnowledgeKnowledgebaseLanguageCategory",
    "signature": "patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "categoryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeCategoryRequest",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet categoryId: String = \"\" // Category ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PatchKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageCategory = PatchKnowledgeKnowledgebaseLanguageCategoryRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageCategory.enummember // Language code, format: iso2-LOCALE\nlet body: KnowledgeCategoryRequest = new KnowledgeCategoryRequest(...) // \n\n// Update category\nPatchKnowledgeKnowledgebaseLanguageCategoryRequest.patchKnowledgeKnowledgebaseLanguageCategory(categoryId: categoryId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchKnowledgeKnowledgebaseLanguageCategoryRequest.patchKnowledgeKnowledgebaseLanguageCategory was successful\")\n        dump(response)\n    }\n}"
  },
  "patchknowledgeknowledgebaselanguagedocument": {
    "operationId": "patchknowledgeknowledgebaselanguagedocument",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocument",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "documentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeDocumentRequest",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet documentId: String = \"\" // Document ID\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PatchKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocument = PatchKnowledgeKnowledgebaseLanguageDocumentRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocument.enummember // Language code, format: iso2-LOCALE\nlet body: KnowledgeDocumentRequest = new KnowledgeDocumentRequest(...) // \n\n// Update document\nPatchKnowledgeKnowledgebaseLanguageDocumentRequest.patchKnowledgeKnowledgebaseLanguageDocument(documentId: documentId, knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchKnowledgeKnowledgebaseLanguageDocumentRequest.patchKnowledgeKnowledgebaseLanguageDocument was successful\")\n        dump(response)\n    }\n}"
  },
  "patchknowledgeknowledgebaselanguagedocuments": {
    "operationId": "patchknowledgeknowledgebaselanguagedocuments",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[KnowledgeDocumentBulkRequest]",
        "required": "true"
      }
    ],
    "return": "DocumentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PatchKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocuments = PatchKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocuments.enummember // Language code, format: iso2-LOCALE\nlet body: [KnowledgeDocumentBulkRequest] = [new KnowledgeDocumentBulkRequest(...)] // \n\n// Update documents collection\nPatchKnowledgeKnowledgebaseLanguageDocumentsRequest.patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchKnowledgeKnowledgebaseLanguageDocumentsRequest.patchKnowledgeKnowledgebaseLanguageDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "patchknowledgeknowledgebaselanguagedocumentsimport": {
    "operationId": "patchknowledgeknowledgebaselanguagedocumentsimport",
    "functionName": "patchKnowledgeKnowledgebaseLanguageDocumentsImport",
    "signature": "patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "importId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ImportStatusRequest",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PatchKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocumentsImport = PatchKnowledgeKnowledgebaseLanguageDocumentsImportRequest.LanguageCode_patchKnowledgeKnowledgebaseLanguageDocumentsImport.enummember // Language code, format: iso2-LOCALE\nlet importId: String = \"\" // Import ID\nlet body: ImportStatusRequest = new ImportStatusRequest(...) // \n\n// Start import operation\nPatchKnowledgeKnowledgebaseLanguageDocumentsImportRequest.patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, importId: importId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchKnowledgeKnowledgebaseLanguageDocumentsImportRequest.patchKnowledgeKnowledgebaseLanguageDocumentsImport was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgedocumentuploads": {
    "operationId": "postknowledgedocumentuploads",
    "functionName": "postKnowledgeDocumentuploads",
    "signature": "postKnowledgeDocumentuploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UploadUrlRequest",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UploadUrlRequest = new UploadUrlRequest(...) // query\n\n// Creates a presigned URL for uploading a knowledge import file with a set of documents\nPostKnowledgeDocumentuploadsRequest.postKnowledgeDocumentuploads(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeDocumentuploadsRequest.postKnowledgeDocumentuploads was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebaselanguagecategories": {
    "operationId": "postknowledgeknowledgebaselanguagecategories",
    "functionName": "postKnowledgeKnowledgebaseLanguageCategories",
    "signature": "postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeCategoryRequest",
        "required": "true"
      }
    ],
    "return": "KnowledgeExtendedCategory",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PostKnowledgeKnowledgebaseLanguageCategoriesRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageCategories = PostKnowledgeKnowledgebaseLanguageCategoriesRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageCategories.enummember // Language code, format: iso2-LOCALE\nlet body: KnowledgeCategoryRequest = new KnowledgeCategoryRequest(...) // \n\n// Create new category\nPostKnowledgeKnowledgebaseLanguageCategoriesRequest.postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseLanguageCategoriesRequest.postKnowledgeKnowledgebaseLanguageCategories was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebaselanguagedocuments": {
    "operationId": "postknowledgeknowledgebaselanguagedocuments",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocuments",
    "signature": "postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeDocumentRequest",
        "required": "true"
      }
    ],
    "return": "KnowledgeDocument",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PostKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageDocuments = PostKnowledgeKnowledgebaseLanguageDocumentsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageDocuments.enummember // Language code, format: iso2-LOCALE\nlet body: KnowledgeDocumentRequest = new KnowledgeDocumentRequest(...) // \n\n// Create document\nPostKnowledgeKnowledgebaseLanguageDocumentsRequest.postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseLanguageDocumentsRequest.postKnowledgeKnowledgebaseLanguageDocuments was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebaselanguagedocumentsimports": {
    "operationId": "postknowledgeknowledgebaselanguagedocumentsimports",
    "functionName": "postKnowledgeKnowledgebaseLanguageDocumentsImports",
    "signature": "postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeImport",
        "required": "true"
      }
    ],
    "return": "KnowledgeImport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PostKnowledgeKnowledgebaseLanguageDocumentsImportsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageDocumentsImports = PostKnowledgeKnowledgebaseLanguageDocumentsImportsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageDocumentsImports.enummember // Language code, format: iso2-LOCALE\nlet body: KnowledgeImport = new KnowledgeImport(...) // \n\n// Create import operation\nPostKnowledgeKnowledgebaseLanguageDocumentsImportsRequest.postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseLanguageDocumentsImportsRequest.postKnowledgeKnowledgebaseLanguageDocumentsImports was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebaselanguagetrainingpromote": {
    "operationId": "postknowledgeknowledgebaselanguagetrainingpromote",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainingPromote",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trainingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PostKnowledgeKnowledgebaseLanguageTrainingPromoteRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageTrainingPromote = PostKnowledgeKnowledgebaseLanguageTrainingPromoteRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageTrainingPromote.enummember // Language code, format: iso2-LOCALE\nlet trainingId: String = \"\" // Training ID\n\n// Promote trained documents from draft state to active.\nPostKnowledgeKnowledgebaseLanguageTrainingPromoteRequest.postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode, trainingId: trainingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseLanguageTrainingPromoteRequest.postKnowledgeKnowledgebaseLanguageTrainingPromote was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebaselanguagetrainings": {
    "operationId": "postknowledgeknowledgebaselanguagetrainings",
    "functionName": "postKnowledgeKnowledgebaseLanguageTrainings",
    "signature": "postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageCode",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "KnowledgeTraining",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet languageCode: PostKnowledgeKnowledgebaseLanguageTrainingsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageTrainings = PostKnowledgeKnowledgebaseLanguageTrainingsRequest.LanguageCode_postKnowledgeKnowledgebaseLanguageTrainings.enummember // Language code, format: iso2-LOCALE\n\n// Trigger training\nPostKnowledgeKnowledgebaseLanguageTrainingsRequest.postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId: knowledgeBaseId, languageCode: languageCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseLanguageTrainingsRequest.postKnowledgeKnowledgebaseLanguageTrainings was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebasesearch": {
    "operationId": "postknowledgeknowledgebasesearch",
    "functionName": "postKnowledgeKnowledgebaseSearch",
    "signature": "postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
    "parameters": [
      {
        "name": "knowledgeBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "KnowledgeSearchRequest",
        "required": "false"
      }
    ],
    "return": "KnowledgeSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet knowledgeBaseId: String = \"\" // Knowledge base ID\nlet body: KnowledgeSearchRequest = new KnowledgeSearchRequest(...) // \n\n// Search Documents\nPostKnowledgeKnowledgebaseSearchRequest.postKnowledgeKnowledgebaseSearch(knowledgeBaseId: knowledgeBaseId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebaseSearchRequest.postKnowledgeKnowledgebaseSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postknowledgeknowledgebases": {
    "operationId": "postknowledgeknowledgebases",
    "functionName": "postKnowledgeKnowledgebases",
    "signature": "postKnowledgeKnowledgebases(body)",
    "parameters": [
      {
        "name": "body",
        "type": "KnowledgeBase",
        "required": "true"
      }
    ],
    "return": "KnowledgeBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: KnowledgeBase = new KnowledgeBase(...) // \n\n// Create new knowledge base\nPostKnowledgeKnowledgebasesRequest.postKnowledgeKnowledgebases(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostKnowledgeKnowledgebasesRequest.postKnowledgeKnowledgebases was successful\")\n        dump(response)\n    }\n}"
  },
  "deletelanguageunderstandingdomain": {
    "operationId": "deletelanguageunderstandingdomain",
    "functionName": "deleteLanguageunderstandingDomain",
    "signature": "deleteLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\n\n// Delete an NLU Domain.\nDeleteLanguageunderstandingDomainRequest.deleteLanguageunderstandingDomain(domainId: domainId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageunderstandingDomainRequest.deleteLanguageunderstandingDomain was successful\")\n    }\n}"
  },
  "deletelanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "deletelanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "deleteLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet feedbackId: String = \"\" // ID of the Feedback\n\n// Delete the feedback on the NLU Domain Version.\nDeleteLanguageunderstandingDomainFeedbackFeedbackIdRequest.deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId: domainId, feedbackId: feedbackId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageunderstandingDomainFeedbackFeedbackIdRequest.deleteLanguageunderstandingDomainFeedbackFeedbackId was successful\")\n    }\n}"
  },
  "deletelanguageunderstandingdomainversion": {
    "operationId": "deletelanguageunderstandingdomainversion",
    "functionName": "deleteLanguageunderstandingDomainVersion",
    "signature": "deleteLanguageunderstandingDomainVersion(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\n\n// Delete an NLU Domain Version\nDeleteLanguageunderstandingDomainVersionRequest.deleteLanguageunderstandingDomainVersion(domainId: domainId, domainVersionId: domainVersionId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageunderstandingDomainVersionRequest.deleteLanguageunderstandingDomainVersion was successful\")\n    }\n}"
  },
  "deletelanguageunderstandingminer": {
    "operationId": "deletelanguageunderstandingminer",
    "functionName": "deleteLanguageunderstandingMiner",
    "signature": "deleteLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\n\n// Delete a miner.\nDeleteLanguageunderstandingMinerRequest.deleteLanguageunderstandingMiner(minerId: minerId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageunderstandingMinerRequest.deleteLanguageunderstandingMiner was successful\")\n    }\n}"
  },
  "deletelanguageunderstandingminerdraft": {
    "operationId": "deletelanguageunderstandingminerdraft",
    "functionName": "deleteLanguageunderstandingMinerDraft",
    "signature": "deleteLanguageunderstandingMinerDraft(minerId, draftId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet draftId: String = \"\" // Draft ID\n\n// Delete a draft\nDeleteLanguageunderstandingMinerDraftRequest.deleteLanguageunderstandingMinerDraft(minerId: minerId, draftId: draftId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageunderstandingMinerDraftRequest.deleteLanguageunderstandingMinerDraft was successful\")\n    }\n}"
  },
  "getlanguageunderstandingdomain": {
    "operationId": "getlanguageunderstandingdomain",
    "functionName": "getLanguageunderstandingDomain",
    "signature": "getLanguageunderstandingDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\n\n// Find an NLU Domain.\nGetLanguageunderstandingDomainRequest.getLanguageunderstandingDomain(domainId: domainId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainRequest.getLanguageunderstandingDomain was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomainfeedback": {
    "operationId": "getlanguageunderstandingdomainfeedback",
    "functionName": "getLanguageunderstandingDomainFeedback",
    "signature": "getLanguageunderstandingDomainFeedback(domainId, intentName, assessment, dateStart, dateEnd, includeDeleted, pageNumber, pageSize, enableCursorPagination, after, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "assessment",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dateStart",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "dateEnd",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "includeDeleted",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "enableCursorPagination",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet intentName: String = \"\" // The top intent name to retrieve feedback for.\nlet assessment: GetLanguageunderstandingDomainFeedbackRequest.Assessment_getLanguageunderstandingDomainFeedback = GetLanguageunderstandingDomainFeedbackRequest.Assessment_getLanguageunderstandingDomainFeedback.enummember // The top assessment to retrieve feedback for.\nlet dateStart: Date = new Date(...) // Begin of time window as ISO-8601 date.\nlet dateEnd: Date = new Date(...) // End of time window as ISO-8601 date.\nlet includeDeleted: Bool = true // Whether to include soft-deleted items in the result.\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet enableCursorPagination: Bool = true // Enable Cursor Pagination\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned. This is considered only when enableCursorPagination=true\nlet fields: [String] = [\"\"] // Fields and properties to get, comma-separated\n\n// Get all feedback in the given NLU Domain Version.\nGetLanguageunderstandingDomainFeedbackRequest.getLanguageunderstandingDomainFeedback(domainId: domainId, intentName: intentName, assessment: assessment, dateStart: dateStart, dateEnd: dateEnd, includeDeleted: includeDeleted, pageNumber: pageNumber, pageSize: pageSize, enableCursorPagination: enableCursorPagination, after: after, fields: fields) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainFeedbackRequest.getLanguageunderstandingDomainFeedback was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomainfeedbackfeedbackid": {
    "operationId": "getlanguageunderstandingdomainfeedbackfeedbackid",
    "functionName": "getLanguageunderstandingDomainFeedbackFeedbackId",
    "signature": "getLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, fields)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feedbackId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet feedbackId: String = \"\" // ID of the Feedback\nlet fields: [String] = [\"\"] // Fields and properties to get, comma-separated\n\n// Find a Feedback\nGetLanguageunderstandingDomainFeedbackFeedbackIdRequest.getLanguageunderstandingDomainFeedbackFeedbackId(domainId: domainId, feedbackId: feedbackId, fields: fields) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainFeedbackFeedbackIdRequest.getLanguageunderstandingDomainFeedbackFeedbackId was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomainversion": {
    "operationId": "getlanguageunderstandingdomainversion",
    "functionName": "getLanguageunderstandingDomainVersion",
    "signature": "getLanguageunderstandingDomainVersion(domainId, domainVersionId, includeUtterances)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "NluDomainVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\nlet includeUtterances: Bool = true // Whether utterances for intent definition should be included when marshalling response.\n\n// Find an NLU Domain Version.\nGetLanguageunderstandingDomainVersionRequest.getLanguageunderstandingDomainVersion(domainId: domainId, domainVersionId: domainVersionId, includeUtterances: includeUtterances) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainVersionRequest.getLanguageunderstandingDomainVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomainversionreport": {
    "operationId": "getlanguageunderstandingdomainversionreport",
    "functionName": "getLanguageunderstandingDomainVersionReport",
    "signature": "getLanguageunderstandingDomainVersionReport(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionQualityReport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\n\n// Retrieved quality report for the specified NLU Domain Version\nGetLanguageunderstandingDomainVersionReportRequest.getLanguageunderstandingDomainVersionReport(domainId: domainId, domainVersionId: domainVersionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainVersionReportRequest.getLanguageunderstandingDomainVersionReport was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomainversions": {
    "operationId": "getlanguageunderstandingdomainversions",
    "functionName": "getLanguageunderstandingDomainVersions",
    "signature": "getLanguageunderstandingDomainVersions(domainId, includeUtterances, pageNumber, pageSize)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeUtterances",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "NluDomainVersionListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet includeUtterances: Bool = true // Whether utterances for intent definition should be included when marshalling response.\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get all NLU Domain Versions for a given Domain.\nGetLanguageunderstandingDomainVersionsRequest.getLanguageunderstandingDomainVersions(domainId: domainId, includeUtterances: includeUtterances, pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainVersionsRequest.getLanguageunderstandingDomainVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingdomains": {
    "operationId": "getlanguageunderstandingdomains",
    "functionName": "getLanguageunderstandingDomains",
    "signature": "getLanguageunderstandingDomains(pageNumber, pageSize)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "NluDomainListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\n\n// Get all NLU Domains.\nGetLanguageunderstandingDomainsRequest.getLanguageunderstandingDomains(pageNumber: pageNumber, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingDomainsRequest.getLanguageunderstandingDomains was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminer": {
    "operationId": "getlanguageunderstandingminer",
    "functionName": "getLanguageunderstandingMiner",
    "signature": "getLanguageunderstandingMiner(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\n\n// Get information about a miner.\nGetLanguageunderstandingMinerRequest.getLanguageunderstandingMiner(minerId: minerId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinerRequest.getLanguageunderstandingMiner was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminerdraft": {
    "operationId": "getlanguageunderstandingminerdraft",
    "functionName": "getLanguageunderstandingMinerDraft",
    "signature": "getLanguageunderstandingMinerDraft(minerId, draftId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Draft",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet draftId: String = \"\" // Draft ID\n\n// Get information about a draft.\nGetLanguageunderstandingMinerDraftRequest.getLanguageunderstandingMinerDraft(minerId: minerId, draftId: draftId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinerDraftRequest.getLanguageunderstandingMinerDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminerdrafts": {
    "operationId": "getlanguageunderstandingminerdrafts",
    "functionName": "getLanguageunderstandingMinerDrafts",
    "signature": "getLanguageunderstandingMinerDrafts(minerId)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DraftListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\n\n// Retrieve the list of drafts created.\nGetLanguageunderstandingMinerDraftsRequest.getLanguageunderstandingMinerDrafts(minerId: minerId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinerDraftsRequest.getLanguageunderstandingMinerDrafts was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminerintent": {
    "operationId": "getlanguageunderstandingminerintent",
    "functionName": "getLanguageunderstandingMinerIntent",
    "signature": "getLanguageunderstandingMinerIntent(minerId, intentId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "intentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinerIntent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet intentId: String = \"\" // The ID of the intent to be retrieved.\nlet expand: GetLanguageunderstandingMinerIntentRequest.Expand_getLanguageunderstandingMinerIntent = GetLanguageunderstandingMinerIntentRequest.Expand_getLanguageunderstandingMinerIntent.enummember // Option to fetch utterances\n\n// Get information about a mined intent\nGetLanguageunderstandingMinerIntentRequest.getLanguageunderstandingMinerIntent(minerId: minerId, intentId: intentId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinerIntentRequest.getLanguageunderstandingMinerIntent was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminerintents": {
    "operationId": "getlanguageunderstandingminerintents",
    "functionName": "getLanguageunderstandingMinerIntents",
    "signature": "getLanguageunderstandingMinerIntents(minerId, expand)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MinedIntentsListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet expand: GetLanguageunderstandingMinerIntentsRequest.Expand_getLanguageunderstandingMinerIntents = GetLanguageunderstandingMinerIntentsRequest.Expand_getLanguageunderstandingMinerIntents.enummember // Option to fetch utterances.\n\n// Retrieve a list of mined intents.\nGetLanguageunderstandingMinerIntentsRequest.getLanguageunderstandingMinerIntents(minerId: minerId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinerIntentsRequest.getLanguageunderstandingMinerIntents was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguageunderstandingminers": {
    "operationId": "getlanguageunderstandingminers",
    "functionName": "getLanguageunderstandingMiners",
    "signature": "getLanguageunderstandingMiners()",
    "return": "MinerListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Retrieve the list of miners created.\nGetLanguageunderstandingMinersRequest.getLanguageunderstandingMiners() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageunderstandingMinersRequest.getLanguageunderstandingMiners was successful\")\n        dump(response)\n    }\n}"
  },
  "patchlanguageunderstandingdomain": {
    "operationId": "patchlanguageunderstandingdomain",
    "functionName": "patchLanguageunderstandingDomain",
    "signature": "patchLanguageunderstandingDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "NluDomain",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet body: NluDomain = new NluDomain(...) // The updated NLU Domain.\n\n// Update an NLU Domain.\nPatchLanguageunderstandingDomainRequest.patchLanguageunderstandingDomain(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchLanguageunderstandingDomainRequest.patchLanguageunderstandingDomain was successful\")\n        dump(response)\n    }\n}"
  },
  "patchlanguageunderstandingminerdraft": {
    "operationId": "patchlanguageunderstandingminerdraft",
    "functionName": "patchLanguageunderstandingMinerDraft",
    "signature": "patchLanguageunderstandingMinerDraft(minerId, draftId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "draftId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DraftRequest",
        "required": "false"
      }
    ],
    "return": "Draft",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet draftId: String = \"\" // Draft ID\nlet body: DraftRequest = new DraftRequest(...) // \n\n// Save information for the draft. Either topic draft or intent draft should be sent.\nPatchLanguageunderstandingMinerDraftRequest.patchLanguageunderstandingMinerDraft(minerId: minerId, draftId: draftId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchLanguageunderstandingMinerDraftRequest.patchLanguageunderstandingMinerDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomainfeedback": {
    "operationId": "postlanguageunderstandingdomainfeedback",
    "functionName": "postLanguageunderstandingDomainFeedback",
    "signature": "postLanguageunderstandingDomainFeedback(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "NluFeedbackRequest",
        "required": "true"
      }
    ],
    "return": "NluFeedbackResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet body: NluFeedbackRequest = new NluFeedbackRequest(...) // The Feedback to create.\n\n// Create feedback for the NLU Domain Version.\nPostLanguageunderstandingDomainFeedbackRequest.postLanguageunderstandingDomainFeedback(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainFeedbackRequest.postLanguageunderstandingDomainFeedback was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomainversiondetect": {
    "operationId": "postlanguageunderstandingdomainversiondetect",
    "functionName": "postLanguageunderstandingDomainVersionDetect",
    "signature": "postLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "NluDetectionRequest",
        "required": "true"
      }
    ],
    "return": "NluDetectionResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\nlet body: NluDetectionRequest = new NluDetectionRequest(...) // The input data to perform detection on.\n\n// Detect intent, entities, etc. in the submitted text using the specified NLU domain version.\nPostLanguageunderstandingDomainVersionDetectRequest.postLanguageunderstandingDomainVersionDetect(domainId: domainId, domainVersionId: domainVersionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainVersionDetectRequest.postLanguageunderstandingDomainVersionDetect was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomainversionpublish": {
    "operationId": "postlanguageunderstandingdomainversionpublish",
    "functionName": "postLanguageunderstandingDomainVersionPublish",
    "signature": "postLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\n\n// Publish the draft NLU Domain Version.\nPostLanguageunderstandingDomainVersionPublishRequest.postLanguageunderstandingDomainVersionPublish(domainId: domainId, domainVersionId: domainVersionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainVersionPublishRequest.postLanguageunderstandingDomainVersionPublish was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomainversiontrain": {
    "operationId": "postlanguageunderstandingdomainversiontrain",
    "functionName": "postLanguageunderstandingDomainVersionTrain",
    "signature": "postLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NluDomainVersionTrainingResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\n\n// Train the draft NLU Domain Version.\nPostLanguageunderstandingDomainVersionTrainRequest.postLanguageunderstandingDomainVersionTrain(domainId: domainId, domainVersionId: domainVersionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainVersionTrainRequest.postLanguageunderstandingDomainVersionTrain was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomainversions": {
    "operationId": "postlanguageunderstandingdomainversions",
    "functionName": "postLanguageunderstandingDomainVersions",
    "signature": "postLanguageunderstandingDomainVersions(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "NluDomainVersion",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet body: NluDomainVersion = new NluDomainVersion(...) // The NLU Domain Version to create.\n\n// Create an NLU Domain Version.\nPostLanguageunderstandingDomainVersionsRequest.postLanguageunderstandingDomainVersions(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainVersionsRequest.postLanguageunderstandingDomainVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingdomains": {
    "operationId": "postlanguageunderstandingdomains",
    "functionName": "postLanguageunderstandingDomains",
    "signature": "postLanguageunderstandingDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "NluDomain",
        "required": "true"
      }
    ],
    "return": "NluDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: NluDomain = new NluDomain(...) // The NLU Domain to create.\n\n// Create an NLU Domain.\nPostLanguageunderstandingDomainsRequest.postLanguageunderstandingDomains(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingDomainsRequest.postLanguageunderstandingDomains was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingminerdrafts": {
    "operationId": "postlanguageunderstandingminerdrafts",
    "functionName": "postLanguageunderstandingMinerDrafts",
    "signature": "postLanguageunderstandingMinerDrafts(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Draft",
        "required": "true"
      }
    ],
    "return": "Draft",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet body: Draft = new Draft(...) // Details for creating draft resource\n\n// Create a new draft resource.\nPostLanguageunderstandingMinerDraftsRequest.postLanguageunderstandingMinerDrafts(minerId: minerId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingMinerDraftsRequest.postLanguageunderstandingMinerDrafts was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingminerexecute": {
    "operationId": "postlanguageunderstandingminerexecute",
    "functionName": "postLanguageunderstandingMinerExecute",
    "signature": "postLanguageunderstandingMinerExecute(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MinerExecuteRequest",
        "required": "false"
      }
    ],
    "return": "Miner",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet body: MinerExecuteRequest = new MinerExecuteRequest(...) // \n\n// Start the mining process. Specify date range pair with mediaType, queueIds, participantType for mining data from Genesys Cloud. Specify only uploadKey for mining through an external file.\nPostLanguageunderstandingMinerExecuteRequest.postLanguageunderstandingMinerExecute(minerId: minerId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingMinerExecuteRequest.postLanguageunderstandingMinerExecute was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguageunderstandingminers": {
    "operationId": "postlanguageunderstandingminers",
    "functionName": "postLanguageunderstandingMiners",
    "signature": "postLanguageunderstandingMiners(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Miner",
        "required": "true"
      }
    ],
    "return": "Miner",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Miner = new Miner(...) // Details for creating a new miner resource.\n\n// Create a unique miner.\nPostLanguageunderstandingMinersRequest.postLanguageunderstandingMiners(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingMinersRequest.postLanguageunderstandingMiners was successful\")\n        dump(response)\n    }\n}"
  },
  "putlanguageunderstandingdomainversion": {
    "operationId": "putlanguageunderstandingdomainversion",
    "functionName": "putLanguageunderstandingDomainVersion",
    "signature": "putLanguageunderstandingDomainVersion(domainId, domainVersionId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "domainVersionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "NluDomainVersion",
        "required": "true"
      }
    ],
    "return": "NluDomainVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // ID of the NLU domain.\nlet domainVersionId: String = \"\" // ID of the NLU domain version.\nlet body: NluDomainVersion = new NluDomainVersion(...) // The updated NLU Domain Version.\n\n// Update an NLU Domain Version.\nPutLanguageunderstandingDomainVersionRequest.putLanguageunderstandingDomainVersion(domainId: domainId, domainVersionId: domainVersionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutLanguageunderstandingDomainVersionRequest.putLanguageunderstandingDomainVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "deletelanguage": {
    "operationId": "deletelanguage",
    "functionName": "deleteLanguage",
    "signature": "deleteLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet languageId: String = \"\" // Language ID\n\n// Delete Language (Deprecated)\nDeleteLanguageRequest.deleteLanguage(languageId: languageId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLanguageRequest.deleteLanguage was successful\")\n    }\n}"
  },
  "deleteroutinglanguage": {
    "operationId": "deleteroutinglanguage",
    "functionName": "deleteRoutingLanguage",
    "signature": "deleteRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet languageId: String = \"\" // Language ID\n\n// Delete Language\nDeleteRoutingLanguageRequest.deleteRoutingLanguage(languageId: languageId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingLanguageRequest.deleteRoutingLanguage was successful\")\n    }\n}"
  },
  "getlanguage": {
    "operationId": "getlanguage",
    "functionName": "getLanguage",
    "signature": "getLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet languageId: String = \"\" // Language ID\n\n// Get language (Deprecated)\nGetLanguageRequest.getLanguage(languageId: languageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguageRequest.getLanguage was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguages": {
    "operationId": "getlanguages",
    "functionName": "getLanguages",
    "signature": "getLanguages(pageSize, pageNumber, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetLanguagesRequest.SortOrder_getLanguages = GetLanguagesRequest.SortOrder_getLanguages.enummember // Ascending or descending sort order\nlet name: String = \"\" // Name\n\n// Get the list of supported languages. (Deprecated)\nGetLanguagesRequest.getLanguages(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguagesRequest.getLanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguagestranslations": {
    "operationId": "getlanguagestranslations",
    "functionName": "getLanguagesTranslations",
    "signature": "getLanguagesTranslations()",
    "return": "AvailableTranslations",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get all available languages for translation\nGetLanguagesTranslationsRequest.getLanguagesTranslations() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguagesTranslationsRequest.getLanguagesTranslations was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguagestranslationsbuiltin": {
    "operationId": "getlanguagestranslationsbuiltin",
    "functionName": "getLanguagesTranslationsBuiltin",
    "signature": "getLanguagesTranslationsBuiltin(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet language: String = \"\" // The language of the builtin translation to retrieve\n\n// Get the builtin translation for a language\nGetLanguagesTranslationsBuiltinRequest.getLanguagesTranslationsBuiltin(language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguagesTranslationsBuiltinRequest.getLanguagesTranslationsBuiltin was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguagestranslationsorganization": {
    "operationId": "getlanguagestranslationsorganization",
    "functionName": "getLanguagesTranslationsOrganization",
    "signature": "getLanguagesTranslationsOrganization(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet language: String = \"\" // The language of the translation to retrieve for the organization\n\n// Get effective translation for an organization by language\nGetLanguagesTranslationsOrganizationRequest.getLanguagesTranslationsOrganization(language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguagesTranslationsOrganizationRequest.getLanguagesTranslationsOrganization was successful\")\n        dump(response)\n    }\n}"
  },
  "getlanguagestranslationsuser": {
    "operationId": "getlanguagestranslationsuser",
    "functionName": "getLanguagesTranslationsUser",
    "signature": "getLanguagesTranslationsUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The user id\n\n// Get effective language translation for a user\nGetLanguagesTranslationsUserRequest.getLanguagesTranslationsUser(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLanguagesTranslationsUserRequest.getLanguagesTranslationsUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutinglanguage": {
    "operationId": "getroutinglanguage",
    "functionName": "getRoutingLanguage",
    "signature": "getRoutingLanguage(languageId)",
    "parameters": [
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet languageId: String = \"\" // Language ID\n\n// Get language\nGetRoutingLanguageRequest.getRoutingLanguage(languageId: languageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingLanguageRequest.getRoutingLanguage was successful\")\n        dump(response)\n    }\n}"
  },
  "postlanguages": {
    "operationId": "postlanguages",
    "functionName": "postLanguages",
    "signature": "postLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Language",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Language = new Language(...) // Language\n\n// Create Language (Deprecated)\nPostLanguagesRequest.postLanguages(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguagesRequest.postLanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "deletelearningassignment": {
    "operationId": "deletelearningassignment",
    "functionName": "deleteLearningAssignment",
    "signature": "deleteLearningAssignment(assignmentId)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assignmentId: String = \"\" // The Learning Assignment ID\n\n// Delete a learning assignment\nDeleteLearningAssignmentRequest.deleteLearningAssignment(assignmentId: assignmentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLearningAssignmentRequest.deleteLearningAssignment was successful\")\n    }\n}"
  },
  "deletelearningmodule": {
    "operationId": "deletelearningmodule",
    "functionName": "deleteLearningModule",
    "signature": "deleteLearningModule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\n\n// Delete a learning module\nDeleteLearningModuleRequest.deleteLearningModule(moduleId: moduleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLearningModuleRequest.deleteLearningModule was successful\")\n    }\n}"
  },
  "getlearningassignment": {
    "operationId": "getlearningassignment",
    "functionName": "getLearningAssignment",
    "signature": "getLearningAssignment(assignmentId, expand)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assignmentId: String = \"\" // The ID of Learning Assignment\nlet expand: [String] = [\"\"] // Fields to expand in response\n\n// Get Learning Assignment\nGetLearningAssignmentRequest.getLearningAssignment(assignmentId: assignmentId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningAssignmentRequest.getLearningAssignment was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningassignments": {
    "operationId": "getlearningassignments",
    "functionName": "getLearningAssignments",
    "signature": "getLearningAssignments(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, userId, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Float",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Float",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // Specifies the ID of the learning module. Fetch assignments for learning module ID\nlet interval: String = \"\" // Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet completionInterval: String = \"\" // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetLearningAssignmentsRequest.Overdue_getLearningAssignments = GetLearningAssignmentsRequest.Overdue_getLearningAssignments.enummember // Specifies if only the non-overdue (overdue is \\\"False\\\") or overdue (overdue is \\\"True\\\") assignments are returned. If overdue is \\\"Any\\\" or if the overdue parameter is not supplied, all assignments are returned\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet pass: GetLearningAssignmentsRequest.Pass_getLearningAssignments = GetLearningAssignmentsRequest.Pass_getLearningAssignments.enummember // Specifies if only the failed (pass is \\\"False\\\") or passed (pass is \\\"True\\\") assignments (completed with assessment)are returned. If pass is \\\"Any\\\" or if the pass parameter is not supplied, all assignments are returned\nlet minPercentageScore: Float = 0 // The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\nlet maxPercentageScore: Float = 0 // The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\nlet sortOrder: GetLearningAssignmentsRequest.SortOrder_getLearningAssignments = GetLearningAssignmentsRequest.SortOrder_getLearningAssignments.enummember // Specifies result set sort order; if not specified, default sort order is descending (Desc)\nlet sortBy: GetLearningAssignmentsRequest.SortBy_getLearningAssignments = GetLearningAssignmentsRequest.SortBy_getLearningAssignments.enummember // Specifies which field to sort the results by, default sort is by recommendedCompletionDate\nlet userId: [String] = [\"\"] // Specifies the list of user IDs to be queried, up to 100 user IDs.\nlet types: [String] = [\"\"] // Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned\nlet states: [String] = [\"\"] // Specifies the assignment states to filter by\nlet expand: [String] = [\"\"] // Specifies the expand option for returning additional information\n\n// List of Learning module Assignments\nGetLearningAssignmentsRequest.getLearningAssignments(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, userId: userId, types: types, states: states, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningAssignmentsRequest.getLearningAssignments was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningassignmentsme": {
    "operationId": "getlearningassignmentsme",
    "functionName": "getLearningAssignmentsMe",
    "signature": "getLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pass",
        "type": "String",
        "required": "false"
      },
      {
        "name": "minPercentageScore",
        "type": "Float",
        "required": "false"
      },
      {
        "name": "maxPercentageScore",
        "type": "Float",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "states",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentsDomainEntity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // Specifies the ID of the learning module. Fetch assignments for learning module ID\nlet interval: String = \"\" // Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet completionInterval: String = \"\" // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetLearningAssignmentsMeRequest.Overdue_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.Overdue_getLearningAssignmentsMe.enummember // Specifies if only the non-overdue (overdue is \\\"False\\\") or overdue (overdue is \\\"True\\\") assignments are returned. If overdue is \\\"Any\\\" or if the overdue parameter is not supplied, all assignments are returned\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet pass: GetLearningAssignmentsMeRequest.Pass_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.Pass_getLearningAssignmentsMe.enummember // Specifies if only the failed (pass is \\\"False\\\") or passed (pass is \\\"True\\\") assignments (completed with assessment)are returned. If pass is \\\"Any\\\" or if the pass parameter is not supplied, all assignments are returned\nlet minPercentageScore: Float = 0 // The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\nlet maxPercentageScore: Float = 0 // The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)\nlet sortOrder: GetLearningAssignmentsMeRequest.SortOrder_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.SortOrder_getLearningAssignmentsMe.enummember // Specifies result set sort order; if not specified, default sort order is descending (Desc)\nlet sortBy: GetLearningAssignmentsMeRequest.SortBy_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.SortBy_getLearningAssignmentsMe.enummember // Specifies which field to sort the results by, default sort is by recommendedCompletionDate\nlet types: [String] = [\"\"] // Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned\nlet states: [String] = [\"\"] // Specifies the assignment states to filter by\nlet expand: [String] = [\"\"] // Specifies the expand option for returning additional information\n\n// List of Learning Assignments assigned to current user\nGetLearningAssignmentsMeRequest.getLearningAssignmentsMe(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, types: types, states: states, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningAssignmentsMeRequest.getLearningAssignmentsMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningmodule": {
    "operationId": "getlearningmodule",
    "functionName": "getLearningModule",
    "signature": "getLearningModule(moduleId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\nlet expand: [String] = [\"\"] // Fields to expand in response(case insensitive)\n\n// Get a learning module\nGetLearningModuleRequest.getLearningModule(moduleId: moduleId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningModuleRequest.getLearningModule was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningmodulerule": {
    "operationId": "getlearningmodulerule",
    "functionName": "getLearningModuleRule",
    "signature": "getLearningModuleRule(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\n\n// Get a learning module rule\nGetLearningModuleRuleRequest.getLearningModuleRule(moduleId: moduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningModuleRuleRequest.getLearningModuleRule was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningmoduleversion": {
    "operationId": "getlearningmoduleversion",
    "functionName": "getLearningModuleVersion",
    "signature": "getLearningModuleVersion(moduleId, versionId, expand)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningModule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\nlet versionId: String = \"\" // The version of learning module\nlet expand: [String] = [\"\"] // Fields to expand in response(case insensitive)\n\n// Get specific version of a published module\nGetLearningModuleVersionRequest.getLearningModuleVersion(moduleId: moduleId, versionId: versionId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningModuleVersionRequest.getLearningModuleVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getlearningmodules": {
    "operationId": "getlearningmodules",
    "functionName": "getLearningModules",
    "signature": "getLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished)",
    "parameters": [
      {
        "name": "isArchived",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "searchTerm",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isPublished",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LearningModulesDomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet isArchived: Bool = true // Archive status\nlet types: [String] = [\"\"] // Specifies the module types.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetLearningModulesRequest.SortOrder_getLearningModules = GetLearningModulesRequest.SortOrder_getLearningModules.enummember // Sort order\nlet sortBy: GetLearningModulesRequest.SortBy_getLearningModules = GetLearningModulesRequest.SortBy_getLearningModules.enummember // Sort by\nlet searchTerm: String = \"\" // Search Term (searchable by name)\nlet expand: [String] = [\"\"] // Fields to expand in response(case insensitive)\nlet isPublished: GetLearningModulesRequest.IsPublished_getLearningModules = GetLearningModulesRequest.IsPublished_getLearningModules.enummember // Specifies if only the Unpublished (isPublished is \\\"False\\\") or Published (isPublished is \\\"True\\\") modules are returned. If isPublished is \\\"Any\\\" or omitted, both types are returned\n\n// Get all learning modules of an organization\nGetLearningModulesRequest.getLearningModules(isArchived: isArchived, types: types, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, sortBy: sortBy, searchTerm: searchTerm, expand: expand, isPublished: isPublished) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLearningModulesRequest.getLearningModules was successful\")\n        dump(response)\n    }\n}"
  },
  "patchlearningassignment": {
    "operationId": "patchlearningassignment",
    "functionName": "patchLearningAssignment",
    "signature": "patchLearningAssignment(assignmentId, body)",
    "parameters": [
      {
        "name": "assignmentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LearningAssignmentUpdate",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assignmentId: String = \"\" // The ID of Learning Assignment\nlet body: LearningAssignmentUpdate = new LearningAssignmentUpdate(...) // The Learning Assignment to be updated\n\n// Update Learning Assignment\nPatchLearningAssignmentRequest.patchLearningAssignment(assignmentId: assignmentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchLearningAssignmentRequest.patchLearningAssignment was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningassessmentsscoring": {
    "operationId": "postlearningassessmentsscoring",
    "functionName": "postLearningAssessmentsScoring",
    "signature": "postLearningAssessmentsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LearningAssessmentScoringRequest",
        "required": "true"
      }
    ],
    "return": "AssessmentScoringSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LearningAssessmentScoringRequest = new LearningAssessmentScoringRequest(...) // Assessment form and answers to score\n\n// Score learning assessment for preview\nPostLearningAssessmentsScoringRequest.postLearningAssessmentsScoring(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningAssessmentsScoringRequest.postLearningAssessmentsScoring was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningassignments": {
    "operationId": "postlearningassignments",
    "functionName": "postLearningAssignments",
    "signature": "postLearningAssignments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LearningAssignmentCreate",
        "required": "false"
      }
    ],
    "return": "LearningAssignment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LearningAssignmentCreate = new LearningAssignmentCreate(...) // The Learning Assignment to be created\n\n// Create Learning Assignment\nPostLearningAssignmentsRequest.postLearningAssignments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningAssignmentsRequest.postLearningAssignments was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningassignmentsaggregatesquery": {
    "operationId": "postlearningassignmentsaggregatesquery",
    "functionName": "postLearningAssignmentsAggregatesQuery",
    "signature": "postLearningAssignmentsAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LearningAssignmentAggregateParam",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentAggregateResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LearningAssignmentAggregateParam = new LearningAssignmentAggregateParam(...) // Aggregate Request\n\n// Retrieve aggregated assignment data\nPostLearningAssignmentsAggregatesQueryRequest.postLearningAssignmentsAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningAssignmentsAggregatesQueryRequest.postLearningAssignmentsAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningassignmentsbulkadd": {
    "operationId": "postlearningassignmentsbulkadd",
    "functionName": "postLearningAssignmentsBulkadd",
    "signature": "postLearningAssignmentsBulkadd(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[LearningAssignmentItem]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkAddResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [LearningAssignmentItem] = [new LearningAssignmentItem(...)] // The learning assignments to be created\n\n// Add multiple learning assignments\nPostLearningAssignmentsBulkaddRequest.postLearningAssignmentsBulkadd(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningAssignmentsBulkaddRequest.postLearningAssignmentsBulkadd was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningassignmentsbulkremove": {
    "operationId": "postlearningassignmentsbulkremove",
    "functionName": "postLearningAssignmentsBulkremove",
    "signature": "postLearningAssignmentsBulkremove(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LearningAssignmentBulkRemoveResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [String] = [\"\"] // The IDs of the learning assignments to be removed\n\n// Remove multiple Learning Assignments\nPostLearningAssignmentsBulkremoveRequest.postLearningAssignmentsBulkremove(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningAssignmentsBulkremoveRequest.postLearningAssignmentsBulkremove was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningmodulepublish": {
    "operationId": "postlearningmodulepublish",
    "functionName": "postLearningModulePublish",
    "signature": "postLearningModulePublish(moduleId)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LearningModulePublishResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\n\n// Publish a Learning module\nPostLearningModulePublishRequest.postLearningModulePublish(moduleId: moduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningModulePublishRequest.postLearningModulePublish was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningmodules": {
    "operationId": "postlearningmodules",
    "functionName": "postLearningModules",
    "signature": "postLearningModules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LearningModuleRequest",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LearningModuleRequest = new LearningModuleRequest(...) // The learning module to be created\n\n// Create a new learning module\nPostLearningModulesRequest.postLearningModules(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningModulesRequest.postLearningModules was successful\")\n        dump(response)\n    }\n}"
  },
  "postlearningrulesquery": {
    "operationId": "postlearningrulesquery",
    "functionName": "postLearningRulesQuery",
    "signature": "postLearningRulesQuery(pageSize, pageNumber, body)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LearningAssignmentUserQuery",
        "required": "true"
      }
    ],
    "return": "LearningAssignmentUserListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet body: LearningAssignmentUserQuery = new LearningAssignmentUserQuery(...) // The learning module rule to fetch users\n\n// Get users for learning module rule\nPostLearningRulesQueryRequest.postLearningRulesQuery(pageSize: pageSize, pageNumber: pageNumber, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLearningRulesQueryRequest.postLearningRulesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "putlearningmodule": {
    "operationId": "putlearningmodule",
    "functionName": "putLearningModule",
    "signature": "putLearningModule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LearningModuleRequest",
        "required": "true"
      }
    ],
    "return": "LearningModule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\nlet body: LearningModuleRequest = new LearningModuleRequest(...) // The learning module to be updated\n\n// Update a learning module\nPutLearningModuleRequest.putLearningModule(moduleId: moduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutLearningModuleRequest.putLearningModule was successful\")\n        dump(response)\n    }\n}"
  },
  "putlearningmodulerule": {
    "operationId": "putlearningmodulerule",
    "functionName": "putLearningModuleRule",
    "signature": "putLearningModuleRule(moduleId, body)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LearningModuleRule",
        "required": "true"
      }
    ],
    "return": "LearningModuleRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // The ID of the learning module\nlet body: LearningModuleRule = new LearningModuleRule(...) // The learning module rule to be updated\n\n// Update a learning module rule\nPutLearningModuleRuleRequest.putLearningModuleRule(moduleId: moduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutLearningModuleRuleRequest.putLearningModuleRule was successful\")\n        dump(response)\n    }\n}"
  },
  "getlicensedefinition": {
    "operationId": "getlicensedefinition",
    "functionName": "getLicenseDefinition",
    "signature": "getLicenseDefinition(licenseId)",
    "parameters": [
      {
        "name": "licenseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet licenseId: String = \"\" // ID\n\n// Get PureCloud license definition.\nGetLicenseDefinitionRequest.getLicenseDefinition(licenseId: licenseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLicenseDefinitionRequest.getLicenseDefinition was successful\")\n        dump(response)\n    }\n}"
  },
  "getlicensedefinitions": {
    "operationId": "getlicensedefinitions",
    "functionName": "getLicenseDefinitions",
    "signature": "getLicenseDefinitions()",
    "return": "[LicenseDefinition]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get all PureCloud license definitions available for the organization.\nGetLicenseDefinitionsRequest.getLicenseDefinitions() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLicenseDefinitionsRequest.getLicenseDefinitions was successful\")\n        dump(response)\n    }\n}"
  },
  "getlicensetoggle": {
    "operationId": "getlicensetoggle",
    "functionName": "getLicenseToggle",
    "signature": "getLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet featureName: String = \"\" // featureName\n\n// Get PureCloud license feature toggle value.\nGetLicenseToggleRequest.getLicenseToggle(featureName: featureName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLicenseToggleRequest.getLicenseToggle was successful\")\n        dump(response)\n    }\n}"
  },
  "getlicenseuser": {
    "operationId": "getlicenseuser",
    "functionName": "getLicenseUser",
    "signature": "getLicenseUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // ID\n\n// Get licenses for specified user.\nGetLicenseUserRequest.getLicenseUser(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLicenseUserRequest.getLicenseUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getlicenseusers": {
    "operationId": "getlicenseusers",
    "functionName": "getLicenseUsers",
    "signature": "getLicenseUsers(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "UserLicensesEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a page of users and their licenses\nGetLicenseUsersRequest.getLicenseUsers(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLicenseUsersRequest.getLicenseUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "postlicenseinfer": {
    "operationId": "postlicenseinfer",
    "functionName": "postLicenseInfer",
    "signature": "postLicenseInfer(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [String] = [\"\"] // The roleIds to use while inferring licenses\n\n// Get a list of licenses inferred based on a list of roleIds\nPostLicenseInferRequest.postLicenseInfer(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLicenseInferRequest.postLicenseInfer was successful\")\n        dump(response)\n    }\n}"
  },
  "postlicenseorganization": {
    "operationId": "postlicenseorganization",
    "functionName": "postLicenseOrganization",
    "signature": "postLicenseOrganization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LicenseBatchAssignmentRequest",
        "required": "false"
      }
    ],
    "return": "[LicenseUpdateStatus]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LicenseBatchAssignmentRequest = new LicenseBatchAssignmentRequest(...) // The license assignments to update.\n\n// Update the organization's license assignments in a batch.\nPostLicenseOrganizationRequest.postLicenseOrganization(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLicenseOrganizationRequest.postLicenseOrganization was successful\")\n        dump(response)\n    }\n}"
  },
  "postlicensetoggle": {
    "operationId": "postlicensetoggle",
    "functionName": "postLicenseToggle",
    "signature": "postLicenseToggle(featureName)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LicenseOrgToggle",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet featureName: String = \"\" // featureName\n\n// Switch PureCloud license feature toggle value.\nPostLicenseToggleRequest.postLicenseToggle(featureName: featureName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLicenseToggleRequest.postLicenseToggle was successful\")\n        dump(response)\n    }\n}"
  },
  "postlicenseusers": {
    "operationId": "postlicenseusers",
    "functionName": "postLicenseUsers",
    "signature": "postLicenseUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[String:JSON]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [String] = [\"\"] // The user IDs to fetch.\n\n// Fetch user licenses in a batch.\nPostLicenseUsersRequest.postLicenseUsers(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLicenseUsersRequest.postLicenseUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "deletelocation": {
    "operationId": "deletelocation",
    "functionName": "deleteLocation",
    "signature": "deleteLocation(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet locationId: String = \"\" // Location ID\n\n// Delete a location\nDeleteLocationRequest.deleteLocation(locationId: locationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteLocationRequest.deleteLocation was successful\")\n    }\n}"
  },
  "getlocation": {
    "operationId": "getlocation",
    "functionName": "getLocation",
    "signature": "getLocation(locationId, expand)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet locationId: String = \"\" // Location ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get Location by ID.\nGetLocationRequest.getLocation(locationId: locationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLocationRequest.getLocation was successful\")\n        dump(response)\n    }\n}"
  },
  "getlocationsublocations": {
    "operationId": "getlocationsublocations",
    "functionName": "getLocationSublocations",
    "signature": "getLocationSublocations(locationId)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LocationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet locationId: String = \"\" // Location ID\n\n// Get sublocations for location ID.\nGetLocationSublocationsRequest.getLocationSublocations(locationId: locationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLocationSublocationsRequest.getLocationSublocations was successful\")\n        dump(response)\n    }\n}"
  },
  "getlocations": {
    "operationId": "getlocations",
    "functionName": "getLocations",
    "signature": "getLocations(pageSize, pageNumber, _id, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LocationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // id\nlet sortOrder: GetLocationsRequest.SortOrder_getLocations = GetLocationsRequest.SortOrder_getLocations.enummember // Sort order\n\n// Get a list of all locations.\nGetLocationsRequest.getLocations(pageSize: pageSize, pageNumber: pageNumber, _id: _id, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLocationsRequest.getLocations was successful\")\n        dump(response)\n    }\n}"
  },
  "getlocationssearch": {
    "operationId": "getlocationssearch",
    "functionName": "getLocationsSearch",
    "signature": "getLocationsSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // Provides more details about a specified resource\n\n// Search locations using the q64 value returned from a previous search\nGetLocationsSearchRequest.getLocationsSearch(q64: q64, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetLocationsSearchRequest.getLocationsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "patchlocation": {
    "operationId": "patchlocation",
    "functionName": "patchLocation",
    "signature": "patchLocation(locationId, body)",
    "parameters": [
      {
        "name": "locationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LocationUpdateDefinition",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet locationId: String = \"\" // Location ID\nlet body: LocationUpdateDefinition = new LocationUpdateDefinition(...) // Location\n\n// Update a location\nPatchLocationRequest.patchLocation(locationId: locationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchLocationRequest.patchLocation was successful\")\n        dump(response)\n    }\n}"
  },
  "postlocations": {
    "operationId": "postlocations",
    "functionName": "postLocations",
    "signature": "postLocations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LocationCreateDefinition",
        "required": "true"
      }
    ],
    "return": "LocationDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LocationCreateDefinition = new LocationCreateDefinition(...) // Location\n\n// Create a location\nPostLocationsRequest.postLocations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLocationsRequest.postLocations was successful\")\n        dump(response)\n    }\n}"
  },
  "postlocationssearch": {
    "operationId": "postlocationssearch",
    "functionName": "postLocationsSearch",
    "signature": "postLocationsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LocationSearchRequest",
        "required": "true"
      }
    ],
    "return": "LocationsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LocationSearchRequest = new LocationSearchRequest(...) // Search request options\n\n// Search locations\nPostLocationsSearchRequest.postLocationsSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLocationsSearchRequest.postLocationsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "deletemessagingsupportedcontentsupportedcontentid": {
    "operationId": "deletemessagingsupportedcontentsupportedcontentid",
    "functionName": "deleteMessagingSupportedcontentSupportedContentId",
    "signature": "deleteMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\n\n// Delete a supported content profile\nDeleteMessagingSupportedcontentSupportedContentIdRequest.deleteMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteMessagingSupportedcontentSupportedContentIdRequest.deleteMessagingSupportedcontentSupportedContentId was successful\")\n    }\n}"
  },
  "getmessagingsupportedcontent": {
    "operationId": "getmessagingsupportedcontent",
    "functionName": "getMessagingSupportedcontent",
    "signature": "getMessagingSupportedcontent(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SupportedContentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of Supported Content profiles\nGetMessagingSupportedcontentRequest.getMessagingSupportedcontent(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetMessagingSupportedcontentRequest.getMessagingSupportedcontent was successful\")\n        dump(response)\n    }\n}"
  },
  "getmessagingsupportedcontentsupportedcontentid": {
    "operationId": "getmessagingsupportedcontentsupportedcontentid",
    "functionName": "getMessagingSupportedcontentSupportedContentId",
    "signature": "getMessagingSupportedcontentSupportedContentId(supportedContentId)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\n\n// Get a supported content profile\nGetMessagingSupportedcontentSupportedContentIdRequest.getMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetMessagingSupportedcontentSupportedContentIdRequest.getMessagingSupportedcontentSupportedContentId was successful\")\n        dump(response)\n    }\n}"
  },
  "patchmessagingsupportedcontentsupportedcontentid": {
    "operationId": "patchmessagingsupportedcontentsupportedcontentid",
    "functionName": "patchMessagingSupportedcontentSupportedContentId",
    "signature": "patchMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
    "parameters": [
      {
        "name": "supportedContentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SupportedContent",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet supportedContentId: String = \"\" // Supported Content ID\nlet body: SupportedContent = new SupportedContent(...) // SupportedContent\n\n// Update a supported content profile\nPatchMessagingSupportedcontentSupportedContentIdRequest.patchMessagingSupportedcontentSupportedContentId(supportedContentId: supportedContentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchMessagingSupportedcontentSupportedContentIdRequest.patchMessagingSupportedcontentSupportedContentId was successful\")\n        dump(response)\n    }\n}"
  },
  "postmessagingsupportedcontent": {
    "operationId": "postmessagingsupportedcontent",
    "functionName": "postMessagingSupportedcontent",
    "signature": "postMessagingSupportedcontent(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SupportedContent",
        "required": "true"
      }
    ],
    "return": "SupportedContent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SupportedContent = new SupportedContent(...) // SupportedContent\n\n// Create a Supported Content profile\nPostMessagingSupportedcontentRequest.postMessagingSupportedcontent(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostMessagingSupportedcontentRequest.postMessagingSupportedcontent was successful\")\n        dump(response)\n    }\n}"
  },
  "deletemobiledevice": {
    "operationId": "deletemobiledevice",
    "functionName": "deleteMobiledevice",
    "signature": "deleteMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deviceId: String = \"\" // Device ID\n\n// Delete device\nDeleteMobiledeviceRequest.deleteMobiledevice(deviceId: deviceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteMobiledeviceRequest.deleteMobiledevice was successful\")\n    }\n}"
  },
  "getmobiledevice": {
    "operationId": "getmobiledevice",
    "functionName": "getMobiledevice",
    "signature": "getMobiledevice(deviceId)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deviceId: String = \"\" // Device ID\n\n// Get device\nGetMobiledeviceRequest.getMobiledevice(deviceId: deviceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetMobiledeviceRequest.getMobiledevice was successful\")\n        dump(response)\n    }\n}"
  },
  "getmobiledevices": {
    "operationId": "getmobiledevices",
    "functionName": "getMobiledevices",
    "signature": "getMobiledevices(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DirectoryUserDevicesListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetMobiledevicesRequest.SortOrder_getMobiledevices = GetMobiledevicesRequest.SortOrder_getMobiledevices.enummember // Ascending or descending sort order\n\n// Get a list of all devices.\nGetMobiledevicesRequest.getMobiledevices(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetMobiledevicesRequest.getMobiledevices was successful\")\n        dump(response)\n    }\n}"
  },
  "postmobiledevices": {
    "operationId": "postmobiledevices",
    "functionName": "postMobiledevices",
    "signature": "postMobiledevices(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UserDevice",
        "required": "true"
      }
    ],
    "return": "UserDevice",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UserDevice = new UserDevice(...) // Device\n\n// Create User device\nPostMobiledevicesRequest.postMobiledevices(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostMobiledevicesRequest.postMobiledevices was successful\")\n        dump(response)\n    }\n}"
  },
  "putmobiledevice": {
    "operationId": "putmobiledevice",
    "functionName": "putMobiledevice",
    "signature": "putMobiledevice(deviceId, body)",
    "parameters": [
      {
        "name": "deviceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserDevice",
        "required": "false"
      }
    ],
    "return": "UserDevice",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deviceId: String = \"\" // Device ID\nlet body: UserDevice = new UserDevice(...) // Device\n\n// Update device\nPutMobiledeviceRequest.putMobiledevice(deviceId: deviceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutMobiledeviceRequest.putMobiledevice was successful\")\n        dump(response)\n    }\n}"
  },
  "deletenotificationschannelsubscriptions": {
    "operationId": "deletenotificationschannelsubscriptions",
    "functionName": "deleteNotificationsChannelSubscriptions",
    "signature": "deleteNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet channelId: String = \"\" // Channel ID\n\n// Remove all subscriptions\nDeleteNotificationsChannelSubscriptionsRequest.deleteNotificationsChannelSubscriptions(channelId: channelId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteNotificationsChannelSubscriptionsRequest.deleteNotificationsChannelSubscriptions was successful\")\n    }\n}"
  },
  "getnotificationsavailabletopics": {
    "operationId": "getnotificationsavailabletopics",
    "functionName": "getNotificationsAvailabletopics",
    "signature": "getNotificationsAvailabletopics(expand, includePreview)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "includePreview",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AvailableTopicEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet includePreview: Bool = true // Whether or not to include Preview topics\n\n// Get available notification topics.\nGetNotificationsAvailabletopicsRequest.getNotificationsAvailabletopics(expand: expand, includePreview: includePreview) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetNotificationsAvailabletopicsRequest.getNotificationsAvailabletopics was successful\")\n        dump(response)\n    }\n}"
  },
  "getnotificationschannelsubscriptions": {
    "operationId": "getnotificationschannelsubscriptions",
    "functionName": "getNotificationsChannelSubscriptions",
    "signature": "getNotificationsChannelSubscriptions(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet channelId: String = \"\" // Channel ID\n\n// The list of all subscriptions for this channel\nGetNotificationsChannelSubscriptionsRequest.getNotificationsChannelSubscriptions(channelId: channelId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetNotificationsChannelSubscriptionsRequest.getNotificationsChannelSubscriptions was successful\")\n        dump(response)\n    }\n}"
  },
  "getnotificationschannels": {
    "operationId": "getnotificationschannels",
    "functionName": "getNotificationsChannels",
    "signature": "getNotificationsChannels(includechannels)",
    "parameters": [
      {
        "name": "includechannels",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ChannelEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet includechannels: GetNotificationsChannelsRequest.Includechannels_getNotificationsChannels = GetNotificationsChannelsRequest.Includechannels_getNotificationsChannels.enummember // Show user's channels for this specific token or across all tokens for this user and app.  Channel Ids for other access tokens will not be shown, but will be presented to show their existence.\n\n// The list of existing channels\nGetNotificationsChannelsRequest.getNotificationsChannels(includechannels: includechannels) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetNotificationsChannelsRequest.getNotificationsChannels was successful\")\n        dump(response)\n    }\n}"
  },
  "headnotificationschannel": {
    "operationId": "headnotificationschannel",
    "functionName": "headNotificationsChannel",
    "signature": "headNotificationsChannel(channelId)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet channelId: String = \"\" // Channel ID\n\n// Verify a channel still exists and is valid\nHeadNotificationsChannelRequest.headNotificationsChannel(channelId: channelId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"HeadNotificationsChannelRequest.headNotificationsChannel was successful\")\n    }\n}"
  },
  "postnotificationschannelsubscriptions": {
    "operationId": "postnotificationschannelsubscriptions",
    "functionName": "postNotificationsChannelSubscriptions",
    "signature": "postNotificationsChannelSubscriptions(channelId, body)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[ChannelTopic]",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet channelId: String = \"\" // Channel ID\nlet body: [ChannelTopic] = [new ChannelTopic(...)] // Body\n\n// Add a list of subscriptions to the existing list of subscriptions\nPostNotificationsChannelSubscriptionsRequest.postNotificationsChannelSubscriptions(channelId: channelId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostNotificationsChannelSubscriptionsRequest.postNotificationsChannelSubscriptions was successful\")\n        dump(response)\n    }\n}"
  },
  "postnotificationschannels": {
    "operationId": "postnotificationschannels",
    "functionName": "postNotificationsChannels",
    "signature": "postNotificationsChannels()",
    "return": "Channel",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Create a new channel\nPostNotificationsChannelsRequest.postNotificationsChannels() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostNotificationsChannelsRequest.postNotificationsChannels was successful\")\n        dump(response)\n    }\n}"
  },
  "putnotificationschannelsubscriptions": {
    "operationId": "putnotificationschannelsubscriptions",
    "functionName": "putNotificationsChannelSubscriptions",
    "signature": "putNotificationsChannelSubscriptions(channelId, body)",
    "parameters": [
      {
        "name": "channelId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[ChannelTopic]",
        "required": "true"
      }
    ],
    "return": "ChannelTopicEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet channelId: String = \"\" // Channel ID\nlet body: [ChannelTopic] = [new ChannelTopic(...)] // Body\n\n// Replace the current list of subscriptions with a new list.\nPutNotificationsChannelSubscriptionsRequest.putNotificationsChannelSubscriptions(channelId: channelId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutNotificationsChannelSubscriptionsRequest.putNotificationsChannelSubscriptions was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteoauthclient": {
    "operationId": "deleteoauthclient",
    "functionName": "deleteOauthClient",
    "signature": "deleteOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\n\n// Delete OAuth Client\nDeleteOauthClientRequest.deleteOauthClient(clientId: clientId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOauthClientRequest.deleteOauthClient was successful\")\n    }\n}"
  },
  "getoauthauthorization": {
    "operationId": "getoauthauthorization",
    "functionName": "getOauthAuthorization",
    "signature": "getOauthAuthorization(clientId, acceptLanguage)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // The ID of client\nlet acceptLanguage: String = \"\" // The language in which to display the client descriptions.\n\n// Get a client that is authorized by the resource owner\nGetOauthAuthorizationRequest.getOauthAuthorization(clientId: clientId, acceptLanguage: acceptLanguage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthAuthorizationRequest.getOauthAuthorization was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthauthorizations": {
    "operationId": "getoauthauthorizations",
    "functionName": "getOauthAuthorizations",
    "signature": "getOauthAuthorizations(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthAuthorizationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet acceptLanguage: String = \"\" // The language in which to display the client descriptions.\n\n// List clients that have been authorized, requested, or revoked by the resource owner\nGetOauthAuthorizationsRequest.getOauthAuthorizations(acceptLanguage: acceptLanguage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthAuthorizationsRequest.getOauthAuthorizations was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthclient": {
    "operationId": "getoauthclient",
    "functionName": "getOauthClient",
    "signature": "getOauthClient(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\n\n// Get OAuth Client\nGetOauthClientRequest.getOauthClient(clientId: clientId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthClientRequest.getOauthClient was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthclientusagequeryresult": {
    "operationId": "getoauthclientusagequeryresult",
    "functionName": "getOauthClientUsageQueryResult",
    "signature": "getOauthClientUsageQueryResult(executionId, clientId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet executionId: String = \"\" // ID of the query execution\nlet clientId: String = \"\" // Client ID\n\n// Get the results of a usage query\nGetOauthClientUsageQueryResultRequest.getOauthClientUsageQueryResult(executionId: executionId, clientId: clientId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthClientUsageQueryResultRequest.getOauthClientUsageQueryResult was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthclientusagesummary": {
    "operationId": "getoauthclientusagesummary",
    "functionName": "getOauthClientUsageSummary",
    "signature": "getOauthClientUsageSummary(clientId, days)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "days",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\nlet days: String = \"\" // Previous number of days to query\n\n// Get a summary of OAuth client API usage\nGetOauthClientUsageSummaryRequest.getOauthClientUsageSummary(clientId: clientId, days: days) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthClientUsageSummaryRequest.getOauthClientUsageSummary was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthclients": {
    "operationId": "getoauthclients",
    "functionName": "getOauthClients",
    "signature": "getOauthClients()",
    "return": "OAuthClientEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// The list of OAuth clients\nGetOauthClientsRequest.getOauthClients() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthClientsRequest.getOauthClients was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthscope": {
    "operationId": "getoauthscope",
    "functionName": "getOauthScope",
    "signature": "getOauthScope(scopeId, acceptLanguage)",
    "parameters": [
      {
        "name": "scopeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScope",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scopeId: String = \"\" // Scope ID\nlet acceptLanguage: String = \"\" // The language with which to display the scope description.\n\n// An OAuth scope\nGetOauthScopeRequest.getOauthScope(scopeId: scopeId, acceptLanguage: acceptLanguage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthScopeRequest.getOauthScope was successful\")\n        dump(response)\n    }\n}"
  },
  "getoauthscopes": {
    "operationId": "getoauthscopes",
    "functionName": "getOauthScopes",
    "signature": "getOauthScopes(acceptLanguage)",
    "parameters": [
      {
        "name": "acceptLanguage",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OAuthScopeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet acceptLanguage: String = \"\" // The language with which to display the scope descriptions.\n\n// The list of OAuth scopes\nGetOauthScopesRequest.getOauthScopes(acceptLanguage: acceptLanguage) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOauthScopesRequest.getOauthScopes was successful\")\n        dump(response)\n    }\n}"
  },
  "postoauthclientsecret": {
    "operationId": "postoauthclientsecret",
    "functionName": "postOauthClientSecret",
    "signature": "postOauthClientSecret(clientId)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\n\n// Regenerate Client Secret\nPostOauthClientSecretRequest.postOauthClientSecret(clientId: clientId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOauthClientSecretRequest.postOauthClientSecret was successful\")\n        dump(response)\n    }\n}"
  },
  "postoauthclientusagequery": {
    "operationId": "postoauthclientusagequery",
    "functionName": "postOauthClientUsageQuery",
    "signature": "postOauthClientUsageQuery(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ApiUsageQuery",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\nlet body: ApiUsageQuery = new ApiUsageQuery(...) // Query\n\n// Query for OAuth client API usage\nPostOauthClientUsageQueryRequest.postOauthClientUsageQuery(clientId: clientId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOauthClientUsageQueryRequest.postOauthClientUsageQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postoauthclients": {
    "operationId": "postoauthclients",
    "functionName": "postOauthClients",
    "signature": "postOauthClients(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OAuthClientRequest",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OAuthClientRequest = new OAuthClientRequest(...) // Client\n\n// Create OAuth client\nPostOauthClientsRequest.postOauthClients(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOauthClientsRequest.postOauthClients was successful\")\n        dump(response)\n    }\n}"
  },
  "putoauthclient": {
    "operationId": "putoauthclient",
    "functionName": "putOauthClient",
    "signature": "putOauthClient(clientId, body)",
    "parameters": [
      {
        "name": "clientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OAuthClientRequest",
        "required": "true"
      }
    ],
    "return": "OAuthClient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet clientId: String = \"\" // Client ID\nlet body: OAuthClientRequest = new OAuthClientRequest(...) // Client\n\n// Update OAuth Client\nPutOauthClientRequest.putOauthClient(clientId: clientId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOauthClientRequest.putOauthClient was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationsembeddedintegration": {
    "operationId": "getorganizationsembeddedintegration",
    "functionName": "getOrganizationsEmbeddedintegration",
    "signature": "getOrganizationsEmbeddedintegration()",
    "return": "EmbeddedIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of domains that will be allowed to embed PureCloud applications\nGetOrganizationsEmbeddedintegrationRequest.getOrganizationsEmbeddedintegration() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsEmbeddedintegrationRequest.getOrganizationsEmbeddedintegration was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationsipaddressauthentication": {
    "operationId": "getorganizationsipaddressauthentication",
    "functionName": "getOrganizationsIpaddressauthentication",
    "signature": "getOrganizationsIpaddressauthentication()",
    "return": "IpAddressAuthentication",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get organization IP address whitelist settings\nGetOrganizationsIpaddressauthenticationRequest.getOrganizationsIpaddressauthentication() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsIpaddressauthenticationRequest.getOrganizationsIpaddressauthentication was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitschangerequest": {
    "operationId": "getorganizationslimitschangerequest",
    "functionName": "getOrganizationsLimitsChangerequest",
    "signature": "getOrganizationsLimitsChangerequest(requestId)",
    "parameters": [
      {
        "name": "requestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitChangeRequestDetails",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet requestId: String = \"\" // Unique id for the limit change request\n\n// Get a limit change request\nGetOrganizationsLimitsChangerequestRequest.getOrganizationsLimitsChangerequest(requestId: requestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsChangerequestRequest.getOrganizationsLimitsChangerequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitschangerequests": {
    "operationId": "getorganizationslimitschangerequests",
    "functionName": "getOrganizationsLimitsChangerequests",
    "signature": "getOrganizationsLimitsChangerequests(after, before, status, pageSize, expand)",
    "parameters": [
      {
        "name": "after",
        "type": "Int64",
        "required": "false"
      },
      {
        "name": "before",
        "type": "Int64",
        "required": "false"
      },
      {
        "name": "status",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LimitChangeRequestsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet after: Int64 = 0 // Timestamp indicating the date to begin after when searching for requests.\nlet before: Int64 = 0 // Timestamp indicating the date to end before when searching for requests.\nlet status: GetOrganizationsLimitsChangerequestsRequest.Status_getOrganizationsLimitsChangerequests = GetOrganizationsLimitsChangerequestsRequest.Status_getOrganizationsLimitsChangerequests.enummember // Status of the request to be filtered by\nlet pageSize: Int = 0 // Page Size\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get the available limit change requests\nGetOrganizationsLimitsChangerequestsRequest.getOrganizationsLimitsChangerequests(after: after, before: before, status: status, pageSize: pageSize, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsChangerequestsRequest.getOrganizationsLimitsChangerequests was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitsdocs": {
    "operationId": "getorganizationslimitsdocs",
    "functionName": "getOrganizationsLimitsDocs",
    "signature": "getOrganizationsLimitsDocs()",
    "return": "UrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a link to the limit documentation\nGetOrganizationsLimitsDocsRequest.getOrganizationsLimitsDocs() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsDocsRequest.getOrganizationsLimitsDocs was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitsnamespace": {
    "operationId": "getorganizationslimitsnamespace",
    "functionName": "getOrganizationsLimitsNamespace",
    "signature": "getOrganizationsLimitsNamespace(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet namespaceName: String = \"\" // The namespace to fetch limits for\n\n// Get the effective limits in a namespace for an organization\nGetOrganizationsLimitsNamespaceRequest.getOrganizationsLimitsNamespace(namespaceName: namespaceName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsNamespaceRequest.getOrganizationsLimitsNamespace was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitsnamespacedefaults": {
    "operationId": "getorganizationslimitsnamespacedefaults",
    "functionName": "getOrganizationsLimitsNamespaceDefaults",
    "signature": "getOrganizationsLimitsNamespaceDefaults(namespaceName)",
    "parameters": [
      {
        "name": "namespaceName",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LimitsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet namespaceName: String = \"\" // The namespace to fetch defaults limits for\n\n// Get the default limits in a namespace for an organization\nGetOrganizationsLimitsNamespaceDefaultsRequest.getOrganizationsLimitsNamespaceDefaults(namespaceName: namespaceName) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsNamespaceDefaultsRequest.getOrganizationsLimitsNamespaceDefaults was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationslimitsnamespaces": {
    "operationId": "getorganizationslimitsnamespaces",
    "functionName": "getOrganizationsLimitsNamespaces",
    "signature": "getOrganizationsLimitsNamespaces(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get the available limit namespaces\nGetOrganizationsLimitsNamespacesRequest.getOrganizationsLimitsNamespaces(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsLimitsNamespacesRequest.getOrganizationsLimitsNamespaces was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationsme": {
    "operationId": "getorganizationsme",
    "functionName": "getOrganizationsMe",
    "signature": "getOrganizationsMe()",
    "return": "Organization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get organization.\nGetOrganizationsMeRequest.getOrganizationsMe() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsMeRequest.getOrganizationsMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getorganizationswhitelist": {
    "operationId": "getorganizationswhitelist",
    "functionName": "getOrganizationsWhitelist",
    "signature": "getOrganizationsWhitelist()",
    "return": "OrgWhitelistSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Use PUT /api/v2/organizations/embeddedintegration instead\nGetOrganizationsWhitelistRequest.getOrganizationsWhitelist() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrganizationsWhitelistRequest.getOrganizationsWhitelist was successful\")\n        dump(response)\n    }\n}"
  },
  "patchorganizationsfeature": {
    "operationId": "patchorganizationsfeature",
    "functionName": "patchOrganizationsFeature",
    "signature": "patchOrganizationsFeature(featureName, enabled)",
    "parameters": [
      {
        "name": "featureName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "enabled",
        "type": "FeatureState",
        "required": "true"
      }
    ],
    "return": "OrganizationFeatures",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet featureName: PatchOrganizationsFeatureRequest.FeatureName_patchOrganizationsFeature = PatchOrganizationsFeatureRequest.FeatureName_patchOrganizationsFeature.enummember // Organization feature\nlet enabled: FeatureState = new FeatureState(...) // New state of feature\n\n// Update organization\nPatchOrganizationsFeatureRequest.patchOrganizationsFeature(featureName: featureName, enabled: enabled) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchOrganizationsFeatureRequest.patchOrganizationsFeature was successful\")\n        dump(response)\n    }\n}"
  },
  "putorganizationsembeddedintegration": {
    "operationId": "putorganizationsembeddedintegration",
    "functionName": "putOrganizationsEmbeddedintegration",
    "signature": "putOrganizationsEmbeddedintegration(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EmbeddedIntegration",
        "required": "true"
      }
    ],
    "return": "EmbeddedIntegration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EmbeddedIntegration = new EmbeddedIntegration(...) // Whitelist settings\n\n// Update the list of domains that will be allowed to embed PureCloud applications\nPutOrganizationsEmbeddedintegrationRequest.putOrganizationsEmbeddedintegration(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrganizationsEmbeddedintegrationRequest.putOrganizationsEmbeddedintegration was successful\")\n        dump(response)\n    }\n}"
  },
  "putorganizationsipaddressauthentication": {
    "operationId": "putorganizationsipaddressauthentication",
    "functionName": "putOrganizationsIpaddressauthentication",
    "signature": "putOrganizationsIpaddressauthentication(body)",
    "parameters": [
      {
        "name": "body",
        "type": "IpAddressAuthentication",
        "required": "true"
      }
    ],
    "return": "IpAddressAuthentication",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: IpAddressAuthentication = new IpAddressAuthentication(...) // IP address Whitelist settings\n\n// Update organization IP address whitelist settings\nPutOrganizationsIpaddressauthenticationRequest.putOrganizationsIpaddressauthentication(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrganizationsIpaddressauthenticationRequest.putOrganizationsIpaddressauthentication was successful\")\n        dump(response)\n    }\n}"
  },
  "putorganizationsme": {
    "operationId": "putorganizationsme",
    "functionName": "putOrganizationsMe",
    "signature": "putOrganizationsMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Organization",
        "required": "false"
      }
    ],
    "return": "Organization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Organization = new Organization(...) // Organization\n\n// Update organization.\nPutOrganizationsMeRequest.putOrganizationsMe(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrganizationsMeRequest.putOrganizationsMe was successful\")\n        dump(response)\n    }\n}"
  },
  "putorganizationswhitelist": {
    "operationId": "putorganizationswhitelist",
    "functionName": "putOrganizationsWhitelist",
    "signature": "putOrganizationsWhitelist(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OrgWhitelistSettings",
        "required": "true"
      }
    ],
    "return": "OrgWhitelistSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OrgWhitelistSettings = new OrgWhitelistSettings(...) // Whitelist settings\n\n// Use PUT /api/v2/organizations/embeddedintegration instead\nPutOrganizationsWhitelistRequest.putOrganizationsWhitelist(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrganizationsWhitelistRequest.putOrganizationsWhitelist was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteorgauthorizationtrustee": {
    "operationId": "deleteorgauthorizationtrustee",
    "functionName": "deleteOrgauthorizationTrustee",
    "signature": "deleteOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\n\n// Delete Org Trust\nDeleteOrgauthorizationTrusteeRequest.deleteOrgauthorizationTrustee(trusteeOrgId: trusteeOrgId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrusteeRequest.deleteOrgauthorizationTrustee was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrusteecloneduser": {
    "operationId": "deleteorgauthorizationtrusteecloneduser",
    "functionName": "deleteOrgauthorizationTrusteeCloneduser",
    "signature": "deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Id of the cloned user to delete\n\n// Deletes cloned user\nDeleteOrgauthorizationTrusteeCloneduserRequest.deleteOrgauthorizationTrusteeCloneduser(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrusteeCloneduserRequest.deleteOrgauthorizationTrusteeCloneduser was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrusteeuser": {
    "operationId": "deleteorgauthorizationtrusteeuser",
    "functionName": "deleteOrgauthorizationTrusteeUser",
    "signature": "deleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Delete Trustee User\nDeleteOrgauthorizationTrusteeUserRequest.deleteOrgauthorizationTrusteeUser(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrusteeUserRequest.deleteOrgauthorizationTrusteeUser was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrusteeuserroles": {
    "operationId": "deleteorgauthorizationtrusteeuserroles",
    "functionName": "deleteOrgauthorizationTrusteeUserRoles",
    "signature": "deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Delete Trustee User Roles\nDeleteOrgauthorizationTrusteeUserRolesRequest.deleteOrgauthorizationTrusteeUserRoles(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrusteeUserRolesRequest.deleteOrgauthorizationTrusteeUserRoles was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrustor": {
    "operationId": "deleteorgauthorizationtrustor",
    "functionName": "deleteOrgauthorizationTrustor",
    "signature": "deleteOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\n\n// Delete Org Trust\nDeleteOrgauthorizationTrustorRequest.deleteOrgauthorizationTrustor(trustorOrgId: trustorOrgId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrustorRequest.deleteOrgauthorizationTrustor was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrustorcloneduser": {
    "operationId": "deleteorgauthorizationtrustorcloneduser",
    "functionName": "deleteOrgauthorizationTrustorCloneduser",
    "signature": "deleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Delete Cloned User\nDeleteOrgauthorizationTrustorCloneduserRequest.deleteOrgauthorizationTrustorCloneduser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrustorCloneduserRequest.deleteOrgauthorizationTrustorCloneduser was successful\")\n    }\n}"
  },
  "deleteorgauthorizationtrustoruser": {
    "operationId": "deleteorgauthorizationtrustoruser",
    "functionName": "deleteOrgauthorizationTrustorUser",
    "signature": "deleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Delete Trustee User\nDeleteOrgauthorizationTrustorUserRequest.deleteOrgauthorizationTrustorUser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOrgauthorizationTrustorUserRequest.deleteOrgauthorizationTrustorUser was successful\")\n    }\n}"
  },
  "getorgauthorizationpairing": {
    "operationId": "getorgauthorizationpairing",
    "functionName": "getOrgauthorizationPairing",
    "signature": "getOrgauthorizationPairing(pairingId)",
    "parameters": [
      {
        "name": "pairingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pairingId: String = \"\" // Pairing Id\n\n// Get Pairing Info\nGetOrgauthorizationPairingRequest.getOrgauthorizationPairing(pairingId: pairingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationPairingRequest.getOrgauthorizationPairing was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustee": {
    "operationId": "getorgauthorizationtrustee",
    "functionName": "getOrgauthorizationTrustee",
    "signature": "getOrgauthorizationTrustee(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\n\n// Get Org Trust\nGetOrgauthorizationTrusteeRequest.getOrgauthorizationTrustee(trusteeOrgId: trusteeOrgId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteeRequest.getOrgauthorizationTrustee was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrusteeclonedusers": {
    "operationId": "getorgauthorizationtrusteeclonedusers",
    "functionName": "getOrgauthorizationTrusteeClonedusers",
    "signature": "getOrgauthorizationTrusteeClonedusers(trusteeOrgId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\n\n// The list of cloned users from the trustee organization (i.e. users with a native user record).\nGetOrgauthorizationTrusteeClonedusersRequest.getOrgauthorizationTrusteeClonedusers(trusteeOrgId: trusteeOrgId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteeClonedusersRequest.getOrgauthorizationTrusteeClonedusers was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrusteeuser": {
    "operationId": "getorgauthorizationtrusteeuser",
    "functionName": "getOrgauthorizationTrusteeUser",
    "signature": "getOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Get Trustee User\nGetOrgauthorizationTrusteeUserRequest.getOrgauthorizationTrusteeUser(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteeUserRequest.getOrgauthorizationTrusteeUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrusteeuserroles": {
    "operationId": "getorgauthorizationtrusteeuserroles",
    "functionName": "getOrgauthorizationTrusteeUserRoles",
    "signature": "getOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Get Trustee User Roles\nGetOrgauthorizationTrusteeUserRolesRequest.getOrgauthorizationTrusteeUserRoles(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteeUserRolesRequest.getOrgauthorizationTrusteeUserRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrusteeusers": {
    "operationId": "getorgauthorizationtrusteeusers",
    "functionName": "getOrgauthorizationTrusteeUsers",
    "signature": "getOrgauthorizationTrusteeUsers(trusteeOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// The list of trustee users for this organization (i.e. users granted access to this organization).\nGetOrgauthorizationTrusteeUsersRequest.getOrgauthorizationTrusteeUsers(trusteeOrgId: trusteeOrgId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteeUsersRequest.getOrgauthorizationTrusteeUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustees": {
    "operationId": "getorgauthorizationtrustees",
    "functionName": "getOrgauthorizationTrustees",
    "signature": "getOrgauthorizationTrustees(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrustEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// The list of trustees for this organization (i.e. organizations granted access to this organization).\nGetOrgauthorizationTrusteesRequest.getOrgauthorizationTrustees(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteesRequest.getOrgauthorizationTrustees was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrusteesdefault": {
    "operationId": "getorgauthorizationtrusteesdefault",
    "functionName": "getOrgauthorizationTrusteesDefault",
    "signature": "getOrgauthorizationTrusteesDefault()",
    "return": "Trustee",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get organization authorization trust with Customer Care, if one exists.\nGetOrgauthorizationTrusteesDefaultRequest.getOrgauthorizationTrusteesDefault() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrusteesDefaultRequest.getOrgauthorizationTrusteesDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustor": {
    "operationId": "getorgauthorizationtrustor",
    "functionName": "getOrgauthorizationTrustor",
    "signature": "getOrgauthorizationTrustor(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trustor",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\n\n// Get Org Trust\nGetOrgauthorizationTrustorRequest.getOrgauthorizationTrustor(trustorOrgId: trustorOrgId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorRequest.getOrgauthorizationTrustor was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustorcloneduser": {
    "operationId": "getorgauthorizationtrustorcloneduser",
    "functionName": "getOrgauthorizationTrustorCloneduser",
    "signature": "getOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Get Cloned User\nGetOrgauthorizationTrustorCloneduserRequest.getOrgauthorizationTrustorCloneduser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorCloneduserRequest.getOrgauthorizationTrustorCloneduser was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustorclonedusers": {
    "operationId": "getorgauthorizationtrustorclonedusers",
    "functionName": "getOrgauthorizationTrustorClonedusers",
    "signature": "getOrgauthorizationTrustorClonedusers(trustorOrgId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\n\n// The list of cloned users in the trustor organization (i.e. users with a native user record).\nGetOrgauthorizationTrustorClonedusersRequest.getOrgauthorizationTrustorClonedusers(trustorOrgId: trustorOrgId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorClonedusersRequest.getOrgauthorizationTrustorClonedusers was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustoruser": {
    "operationId": "getorgauthorizationtrustoruser",
    "functionName": "getOrgauthorizationTrustorUser",
    "signature": "getOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Get Trustee User\nGetOrgauthorizationTrustorUserRequest.getOrgauthorizationTrustorUser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorUserRequest.getOrgauthorizationTrustorUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustorusers": {
    "operationId": "getorgauthorizationtrustorusers",
    "functionName": "getOrgauthorizationTrustorUsers",
    "signature": "getOrgauthorizationTrustorUsers(trustorOrgId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrustUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustee Organization Id\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// The list of users in the trustor organization (i.e. users granted access).\nGetOrgauthorizationTrustorUsersRequest.getOrgauthorizationTrustorUsers(trustorOrgId: trustorOrgId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorUsersRequest.getOrgauthorizationTrustorUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getorgauthorizationtrustors": {
    "operationId": "getorgauthorizationtrustors",
    "functionName": "getOrgauthorizationTrustors",
    "signature": "getOrgauthorizationTrustors(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// The list of organizations that have authorized/trusted your organization.\nGetOrgauthorizationTrustorsRequest.getOrgauthorizationTrustors(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrgauthorizationTrustorsRequest.getOrgauthorizationTrustors was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationpairings": {
    "operationId": "postorgauthorizationpairings",
    "functionName": "postOrgauthorizationPairings",
    "signature": "postOrgauthorizationPairings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TrustRequestCreate",
        "required": "true"
      }
    ],
    "return": "TrustRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TrustRequestCreate = new TrustRequestCreate(...) // Pairing Info\n\n// A pairing id is created by the trustee and given to the trustor to create a trust.\nPostOrgauthorizationPairingsRequest.postOrgauthorizationPairings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationPairingsRequest.postOrgauthorizationPairings was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationtrusteeusers": {
    "operationId": "postorgauthorizationtrusteeusers",
    "functionName": "postOrgauthorizationTrusteeUsers",
    "signature": "postOrgauthorizationTrusteeUsers(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TrustMemberCreate",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet body: TrustMemberCreate = new TrustMemberCreate(...) // Trust\n\n// Add a user to the trust.\nPostOrgauthorizationTrusteeUsersRequest.postOrgauthorizationTrusteeUsers(trusteeOrgId: trusteeOrgId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationTrusteeUsersRequest.postOrgauthorizationTrusteeUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationtrustees": {
    "operationId": "postorgauthorizationtrustees",
    "functionName": "postOrgauthorizationTrustees",
    "signature": "postOrgauthorizationTrustees(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TrustCreate",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TrustCreate = new TrustCreate(...) // Trust\n\n// Create a new organization authorization trust. This is required to grant other organizations access to your organization.\nPostOrgauthorizationTrusteesRequest.postOrgauthorizationTrustees(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationTrusteesRequest.postOrgauthorizationTrustees was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationtrusteesaudits": {
    "operationId": "postorgauthorizationtrusteesaudits",
    "functionName": "postOrgauthorizationTrusteesAudits",
    "signature": "postOrgauthorizationTrusteesAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "TrusteeAuditQueryRequest",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TrusteeAuditQueryRequest = new TrusteeAuditQueryRequest(...) // Values to scope the request.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\n\n// Get Org Trustee Audits\nPostOrgauthorizationTrusteesAuditsRequest.postOrgauthorizationTrusteesAudits(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationTrusteesAuditsRequest.postOrgauthorizationTrusteesAudits was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationtrusteesdefault": {
    "operationId": "postorgauthorizationtrusteesdefault",
    "functionName": "postOrgauthorizationTrusteesDefault",
    "signature": "postOrgauthorizationTrusteesDefault(assignDefaultRole, autoExpire)",
    "parameters": [
      {
        "name": "assignDefaultRole",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "autoExpire",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "Trustee",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assignDefaultRole: Bool = true // Assign Admin role to default pairing with Customer Care\nlet autoExpire: Bool = true // Automatically expire pairing after 30 days\n\n// Create a new organization authorization trust with Customer Care. This is required to grant your regional Customer Care organization access to your organization.\nPostOrgauthorizationTrusteesDefaultRequest.postOrgauthorizationTrusteesDefault(assignDefaultRole: assignDefaultRole, autoExpire: autoExpire) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationTrusteesDefaultRequest.postOrgauthorizationTrusteesDefault was successful\")\n        dump(response)\n    }\n}"
  },
  "postorgauthorizationtrustoraudits": {
    "operationId": "postorgauthorizationtrustoraudits",
    "functionName": "postOrgauthorizationTrustorAudits",
    "signature": "postOrgauthorizationTrustorAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "body",
        "type": "TrustorAuditQueryRequest",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TrustorAuditQueryRequest = new TrustorAuditQueryRequest(...) // Values to scope the request.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\n\n// Get Org Trustor Audits\nPostOrgauthorizationTrustorAuditsRequest.postOrgauthorizationTrustorAudits(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOrgauthorizationTrustorAuditsRequest.postOrgauthorizationTrustorAudits was successful\")\n        dump(response)\n    }\n}"
  },
  "putorgauthorizationtrustee": {
    "operationId": "putorgauthorizationtrustee",
    "functionName": "putOrgauthorizationTrustee",
    "signature": "putOrgauthorizationTrustee(trusteeOrgId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TrustUpdate",
        "required": "true"
      }
    ],
    "return": "Trustee",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet body: TrustUpdate = new TrustUpdate(...) // Client\n\n// Update Org Trust\nPutOrgauthorizationTrusteeRequest.putOrgauthorizationTrustee(trusteeOrgId: trusteeOrgId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrgauthorizationTrusteeRequest.putOrgauthorizationTrustee was successful\")\n        dump(response)\n    }\n}"
  },
  "putorgauthorizationtrusteeuserroledivisions": {
    "operationId": "putorgauthorizationtrusteeuserroledivisions",
    "functionName": "putOrgauthorizationTrusteeUserRoledivisions",
    "signature": "putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoleDivisionGrants",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\nlet body: RoleDivisionGrants = new RoleDivisionGrants(...) // Set of roles with corresponding divisions to apply\n\n// Update Trustee User Roles\nPutOrgauthorizationTrusteeUserRoledivisionsRequest.putOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrgauthorizationTrusteeUserRoledivisionsRequest.putOrgauthorizationTrusteeUserRoledivisions was successful\")\n        dump(response)\n    }\n}"
  },
  "putorgauthorizationtrusteeuserroles": {
    "operationId": "putorgauthorizationtrusteeuserroles",
    "functionName": "putOrgauthorizationTrusteeUserRoles",
    "signature": "putOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)",
    "parameters": [
      {
        "name": "trusteeOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "UserAuthorization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trusteeOrgId: String = \"\" // Trustee Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\nlet body: [String] = [\"\"] // List of roles\n\n// Update Trustee User Roles\nPutOrgauthorizationTrusteeUserRolesRequest.putOrgauthorizationTrusteeUserRoles(trusteeOrgId: trusteeOrgId, trusteeUserId: trusteeUserId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrgauthorizationTrusteeUserRolesRequest.putOrgauthorizationTrusteeUserRoles was successful\")\n        dump(response)\n    }\n}"
  },
  "putorgauthorizationtrustorcloneduser": {
    "operationId": "putorgauthorizationtrustorcloneduser",
    "functionName": "putOrgauthorizationTrustorCloneduser",
    "signature": "putOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ClonedUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Creates a clone of the trustee user in the trustor org.\nPutOrgauthorizationTrustorCloneduserRequest.putOrgauthorizationTrustorCloneduser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrgauthorizationTrustorCloneduserRequest.putOrgauthorizationTrustorCloneduser was successful\")\n        dump(response)\n    }\n}"
  },
  "putorgauthorizationtrustoruser": {
    "operationId": "putorgauthorizationtrustoruser",
    "functionName": "putOrgauthorizationTrustorUser",
    "signature": "putOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
    "parameters": [
      {
        "name": "trustorOrgId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "trusteeUserId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrustUser",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trustorOrgId: String = \"\" // Trustor Organization Id\nlet trusteeUserId: String = \"\" // Trustee User Id\n\n// Add a Trustee user to the trust.\nPutOrgauthorizationTrustorUserRequest.putOrgauthorizationTrustorUser(trustorOrgId: trustorOrgId, trusteeUserId: trusteeUserId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrgauthorizationTrustorUserRequest.putOrgauthorizationTrustorUser was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteoutboundattemptlimit": {
    "operationId": "deleteoutboundattemptlimit",
    "functionName": "deleteOutboundAttemptlimit",
    "signature": "deleteOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet attemptLimitsId: String = \"\" // Attempt limits ID\n\n// Delete attempt limits\nDeleteOutboundAttemptlimitRequest.deleteOutboundAttemptlimit(attemptLimitsId: attemptLimitsId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundAttemptlimitRequest.deleteOutboundAttemptlimit was successful\")\n    }\n}"
  },
  "deleteoutboundcallabletimeset": {
    "operationId": "deleteoutboundcallabletimeset",
    "functionName": "deleteOutboundCallabletimeset",
    "signature": "deleteOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callableTimeSetId: String = \"\" // Callable Time Set ID\n\n// Delete callable time set\nDeleteOutboundCallabletimesetRequest.deleteOutboundCallabletimeset(callableTimeSetId: callableTimeSetId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundCallabletimesetRequest.deleteOutboundCallabletimeset was successful\")\n    }\n}"
  },
  "deleteoutboundcallanalysisresponseset": {
    "operationId": "deleteoutboundcallanalysisresponseset",
    "functionName": "deleteOutboundCallanalysisresponseset",
    "signature": "deleteOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callAnalysisSetId: String = \"\" // Call Analysis Response Set ID\n\n// Delete a dialer call analysis response set.\nDeleteOutboundCallanalysisresponsesetRequest.deleteOutboundCallanalysisresponseset(callAnalysisSetId: callAnalysisSetId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundCallanalysisresponsesetRequest.deleteOutboundCallanalysisresponseset was successful\")\n    }\n}"
  },
  "deleteoutboundcampaign": {
    "operationId": "deleteoutboundcampaign",
    "functionName": "deleteOutboundCampaign",
    "signature": "deleteOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Delete a campaign.\nDeleteOutboundCampaignRequest.deleteOutboundCampaign(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteOutboundCampaignRequest.deleteOutboundCampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteoutboundcampaignprogress": {
    "operationId": "deleteoutboundcampaignprogress",
    "functionName": "deleteOutboundCampaignProgress",
    "signature": "deleteOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Reset campaign progress and recycle the campaign\nDeleteOutboundCampaignProgressRequest.deleteOutboundCampaignProgress(campaignId: campaignId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundCampaignProgressRequest.deleteOutboundCampaignProgress was successful\")\n    }\n}"
  },
  "deleteoutboundcampaignrule": {
    "operationId": "deleteoutboundcampaignrule",
    "functionName": "deleteOutboundCampaignrule",
    "signature": "deleteOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignRuleId: String = \"\" // Campaign Rule ID\n\n// Delete Campaign Rule\nDeleteOutboundCampaignruleRequest.deleteOutboundCampaignrule(campaignRuleId: campaignRuleId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundCampaignruleRequest.deleteOutboundCampaignrule was successful\")\n    }\n}"
  },
  "deleteoutboundcontactlist": {
    "operationId": "deleteoutboundcontactlist",
    "functionName": "deleteOutboundContactlist",
    "signature": "deleteOutboundContactlist(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\n\n// Delete a contact list.\nDeleteOutboundContactlistRequest.deleteOutboundContactlist(contactListId: contactListId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundContactlistRequest.deleteOutboundContactlist was successful\")\n    }\n}"
  },
  "deleteoutboundcontactlistcontact": {
    "operationId": "deleteoutboundcontactlistcontact",
    "functionName": "deleteOutboundContactlistContact",
    "signature": "deleteOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet contactId: String = \"\" // Contact ID\n\n// Delete a contact.\nDeleteOutboundContactlistContactRequest.deleteOutboundContactlistContact(contactListId: contactListId, contactId: contactId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundContactlistContactRequest.deleteOutboundContactlistContact was successful\")\n    }\n}"
  },
  "deleteoutboundcontactlistcontacts": {
    "operationId": "deleteoutboundcontactlistcontacts",
    "functionName": "deleteOutboundContactlistContacts",
    "signature": "deleteOutboundContactlistContacts(contactListId, contactIds)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactIds",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet contactIds: [String] = [\"\"] // ContactIds to delete.\n\n// Delete contacts from a contact list.\nDeleteOutboundContactlistContactsRequest.deleteOutboundContactlistContacts(contactListId: contactListId, contactIds: contactIds) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundContactlistContactsRequest.deleteOutboundContactlistContacts was successful\")\n    }\n}"
  },
  "deleteoutboundcontactlistfilter": {
    "operationId": "deleteoutboundcontactlistfilter",
    "functionName": "deleteOutboundContactlistfilter",
    "signature": "deleteOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListFilterId: String = \"\" // Contact List Filter ID\n\n// Delete Contact List Filter\nDeleteOutboundContactlistfilterRequest.deleteOutboundContactlistfilter(contactListFilterId: contactListFilterId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundContactlistfilterRequest.deleteOutboundContactlistfilter was successful\")\n    }\n}"
  },
  "deleteoutboundcontactlists": {
    "operationId": "deleteoutboundcontactlists",
    "functionName": "deleteOutboundContactlists",
    "signature": "deleteOutboundContactlists(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // contact list id(s) to delete\n\n// Delete multiple contact lists.\nDeleteOutboundContactlistsRequest.deleteOutboundContactlists(_id: _id) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundContactlistsRequest.deleteOutboundContactlists was successful\")\n    }\n}"
  },
  "deleteoutbounddnclist": {
    "operationId": "deleteoutbounddnclist",
    "functionName": "deleteOutboundDnclist",
    "signature": "deleteOutboundDnclist(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\n\n// Delete dialer DNC list\nDeleteOutboundDnclistRequest.deleteOutboundDnclist(dncListId: dncListId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundDnclistRequest.deleteOutboundDnclist was successful\")\n    }\n}"
  },
  "deleteoutboundmessagingcampaign": {
    "operationId": "deleteoutboundmessagingcampaign",
    "functionName": "deleteOutboundMessagingcampaign",
    "signature": "deleteOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\n\n// Delete an Outbound Messaging Campaign\nDeleteOutboundMessagingcampaignRequest.deleteOutboundMessagingcampaign(messagingCampaignId: messagingCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteOutboundMessagingcampaignRequest.deleteOutboundMessagingcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteoutboundmessagingcampaignprogress": {
    "operationId": "deleteoutboundmessagingcampaignprogress",
    "functionName": "deleteOutboundMessagingcampaignProgress",
    "signature": "deleteOutboundMessagingcampaignProgress(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\n\n// Reset messaging campaign progress and recycle the messaging campaign\nDeleteOutboundMessagingcampaignProgressRequest.deleteOutboundMessagingcampaignProgress(messagingCampaignId: messagingCampaignId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundMessagingcampaignProgressRequest.deleteOutboundMessagingcampaignProgress was successful\")\n    }\n}"
  },
  "deleteoutboundruleset": {
    "operationId": "deleteoutboundruleset",
    "functionName": "deleteOutboundRuleset",
    "signature": "deleteOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleSetId: String = \"\" // Rule Set ID\n\n// Delete a Rule Set.\nDeleteOutboundRulesetRequest.deleteOutboundRuleset(ruleSetId: ruleSetId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundRulesetRequest.deleteOutboundRuleset was successful\")\n    }\n}"
  },
  "deleteoutboundschedulescampaign": {
    "operationId": "deleteoutboundschedulescampaign",
    "functionName": "deleteOutboundSchedulesCampaign",
    "signature": "deleteOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Delete a dialer campaign schedule.\nDeleteOutboundSchedulesCampaignRequest.deleteOutboundSchedulesCampaign(campaignId: campaignId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundSchedulesCampaignRequest.deleteOutboundSchedulesCampaign was successful\")\n    }\n}"
  },
  "deleteoutboundschedulesemailcampaign": {
    "operationId": "deleteoutboundschedulesemailcampaign",
    "functionName": "deleteOutboundSchedulesEmailcampaign",
    "signature": "deleteOutboundSchedulesEmailcampaign(emailCampaignId)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emailCampaignId: String = \"\" // Email Campaign ID\n\n// Delete an email campaign schedule.\nDeleteOutboundSchedulesEmailcampaignRequest.deleteOutboundSchedulesEmailcampaign(emailCampaignId: emailCampaignId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundSchedulesEmailcampaignRequest.deleteOutboundSchedulesEmailcampaign was successful\")\n    }\n}"
  },
  "deleteoutboundschedulesmessagingcampaign": {
    "operationId": "deleteoutboundschedulesmessagingcampaign",
    "functionName": "deleteOutboundSchedulesMessagingcampaign",
    "signature": "deleteOutboundSchedulesMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // Messaging Campaign ID\n\n// Delete a messaging campaign schedule.\nDeleteOutboundSchedulesMessagingcampaignRequest.deleteOutboundSchedulesMessagingcampaign(messagingCampaignId: messagingCampaignId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundSchedulesMessagingcampaignRequest.deleteOutboundSchedulesMessagingcampaign was successful\")\n    }\n}"
  },
  "deleteoutboundschedulessequence": {
    "operationId": "deleteoutboundschedulessequence",
    "functionName": "deleteOutboundSchedulesSequence",
    "signature": "deleteOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Sequence ID\n\n// Delete a dialer sequence schedule.\nDeleteOutboundSchedulesSequenceRequest.deleteOutboundSchedulesSequence(sequenceId: sequenceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundSchedulesSequenceRequest.deleteOutboundSchedulesSequence was successful\")\n    }\n}"
  },
  "deleteoutboundsequence": {
    "operationId": "deleteoutboundsequence",
    "functionName": "deleteOutboundSequence",
    "signature": "deleteOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Campaign Sequence ID\n\n// Delete a dialer campaign sequence.\nDeleteOutboundSequenceRequest.deleteOutboundSequence(sequenceId: sequenceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteOutboundSequenceRequest.deleteOutboundSequence was successful\")\n    }\n}"
  },
  "getoutboundattemptlimit": {
    "operationId": "getoutboundattemptlimit",
    "functionName": "getOutboundAttemptlimit",
    "signature": "getOutboundAttemptlimit(attemptLimitsId)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet attemptLimitsId: String = \"\" // Attempt limits ID\n\n// Get attempt limits\nGetOutboundAttemptlimitRequest.getOutboundAttemptlimit(attemptLimitsId: attemptLimitsId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundAttemptlimitRequest.getOutboundAttemptlimit was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundattemptlimits": {
    "operationId": "getoutboundattemptlimits",
    "functionName": "getOutboundAttemptlimits",
    "signature": "getOutboundAttemptlimits(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AttemptLimitsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundAttemptlimitsRequest.FilterType_getOutboundAttemptlimits = GetOutboundAttemptlimitsRequest.FilterType_getOutboundAttemptlimits.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundAttemptlimitsRequest.SortOrder_getOutboundAttemptlimits = GetOutboundAttemptlimitsRequest.SortOrder_getOutboundAttemptlimits.enummember // Sort order\n\n// Query attempt limits list\nGetOutboundAttemptlimitsRequest.getOutboundAttemptlimits(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundAttemptlimitsRequest.getOutboundAttemptlimits was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcallabletimeset": {
    "operationId": "getoutboundcallabletimeset",
    "functionName": "getOutboundCallabletimeset",
    "signature": "getOutboundCallabletimeset(callableTimeSetId)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callableTimeSetId: String = \"\" // Callable Time Set ID\n\n// Get callable time set\nGetOutboundCallabletimesetRequest.getOutboundCallabletimeset(callableTimeSetId: callableTimeSetId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCallabletimesetRequest.getOutboundCallabletimeset was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcallabletimesets": {
    "operationId": "getoutboundcallabletimesets",
    "functionName": "getOutboundCallabletimesets",
    "signature": "getOutboundCallabletimesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CallableTimeSetEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundCallabletimesetsRequest.FilterType_getOutboundCallabletimesets = GetOutboundCallabletimesetsRequest.FilterType_getOutboundCallabletimesets.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundCallabletimesetsRequest.SortOrder_getOutboundCallabletimesets = GetOutboundCallabletimesetsRequest.SortOrder_getOutboundCallabletimesets.enummember // Sort order\n\n// Query callable time set list\nGetOutboundCallabletimesetsRequest.getOutboundCallabletimesets(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCallabletimesetsRequest.getOutboundCallabletimesets was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcallanalysisresponseset": {
    "operationId": "getoutboundcallanalysisresponseset",
    "functionName": "getOutboundCallanalysisresponseset",
    "signature": "getOutboundCallanalysisresponseset(callAnalysisSetId)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callAnalysisSetId: String = \"\" // Call Analysis Response Set ID\n\n// Get a dialer call analysis response set.\nGetOutboundCallanalysisresponsesetRequest.getOutboundCallanalysisresponseset(callAnalysisSetId: callAnalysisSetId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCallanalysisresponsesetRequest.getOutboundCallanalysisresponseset was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcallanalysisresponsesets": {
    "operationId": "getoutboundcallanalysisresponsesets",
    "functionName": "getOutboundCallanalysisresponsesets",
    "signature": "getOutboundCallanalysisresponsesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseSetEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundCallanalysisresponsesetsRequest.FilterType_getOutboundCallanalysisresponsesets = GetOutboundCallanalysisresponsesetsRequest.FilterType_getOutboundCallanalysisresponsesets.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundCallanalysisresponsesetsRequest.SortOrder_getOutboundCallanalysisresponsesets = GetOutboundCallanalysisresponsesetsRequest.SortOrder_getOutboundCallanalysisresponsesets.enummember // Sort order\n\n// Query a list of dialer call analysis response sets.\nGetOutboundCallanalysisresponsesetsRequest.getOutboundCallanalysisresponsesets(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCallanalysisresponsesetsRequest.getOutboundCallanalysisresponsesets was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaign": {
    "operationId": "getoutboundcampaign",
    "functionName": "getOutboundCampaign",
    "signature": "getOutboundCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get dialer campaign.\nGetOutboundCampaignRequest.getOutboundCampaign(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignRequest.getOutboundCampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignagentownedmappingpreviewresults": {
    "operationId": "getoutboundcampaignagentownedmappingpreviewresults",
    "functionName": "getOutboundCampaignAgentownedmappingpreviewResults",
    "signature": "getOutboundCampaignAgentownedmappingpreviewResults(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentOwnedMappingPreviewListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get a preview of how agents will be mapped to this campaign's contact list.\nGetOutboundCampaignAgentownedmappingpreviewResultsRequest.getOutboundCampaignAgentownedmappingpreviewResults(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignAgentownedmappingpreviewResultsRequest.getOutboundCampaignAgentownedmappingpreviewResults was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaigndiagnostics": {
    "operationId": "getoutboundcampaigndiagnostics",
    "functionName": "getOutboundCampaignDiagnostics",
    "signature": "getOutboundCampaignDiagnostics(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDiagnostics",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get campaign diagnostics\nGetOutboundCampaignDiagnosticsRequest.getOutboundCampaignDiagnostics(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignDiagnosticsRequest.getOutboundCampaignDiagnostics was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaigninteractions": {
    "operationId": "getoutboundcampaigninteractions",
    "functionName": "getOutboundCampaignInteractions",
    "signature": "getOutboundCampaignInteractions(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignInteractions",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get dialer campaign interactions.\nGetOutboundCampaignInteractionsRequest.getOutboundCampaignInteractions(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignInteractionsRequest.getOutboundCampaignInteractions was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignprogress": {
    "operationId": "getoutboundcampaignprogress",
    "functionName": "getOutboundCampaignProgress",
    "signature": "getOutboundCampaignProgress(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get campaign progress\nGetOutboundCampaignProgressRequest.getOutboundCampaignProgress(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignProgressRequest.getOutboundCampaignProgress was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignstats": {
    "operationId": "getoutboundcampaignstats",
    "functionName": "getOutboundCampaignStats",
    "signature": "getOutboundCampaignStats(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignStats",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get statistics about a Dialer Campaign\nGetOutboundCampaignStatsRequest.getOutboundCampaignStats(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignStatsRequest.getOutboundCampaignStats was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignrule": {
    "operationId": "getoutboundcampaignrule",
    "functionName": "getOutboundCampaignrule",
    "signature": "getOutboundCampaignrule(campaignRuleId)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignRuleId: String = \"\" // Campaign Rule ID\n\n// Get Campaign Rule\nGetOutboundCampaignruleRequest.getOutboundCampaignrule(campaignRuleId: campaignRuleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignruleRequest.getOutboundCampaignrule was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignrules": {
    "operationId": "getoutboundcampaignrules",
    "functionName": "getOutboundCampaignrules",
    "signature": "getOutboundCampaignrules(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignRuleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundCampaignrulesRequest.FilterType_getOutboundCampaignrules = GetOutboundCampaignrulesRequest.FilterType_getOutboundCampaignrules.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundCampaignrulesRequest.SortOrder_getOutboundCampaignrules = GetOutboundCampaignrulesRequest.SortOrder_getOutboundCampaignrules.enummember // Sort order\n\n// Query Campaign Rule list\nGetOutboundCampaignrulesRequest.getOutboundCampaignrules(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignrulesRequest.getOutboundCampaignrules was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaigns": {
    "operationId": "getoutboundcampaigns",
    "functionName": "getOutboundCampaigns",
    "signature": "getOutboundCampaigns(pageSize, pageNumber, filterType, name, _id, contactListId, dncListIds, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncListIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "distributionQueueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "callAnalysisResponseSetId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet filterType: GetOutboundCampaignsRequest.FilterType_getOutboundCampaigns = GetOutboundCampaignsRequest.FilterType_getOutboundCampaigns.enummember // Filter type\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // id\nlet contactListId: String = \"\" // Contact List ID\nlet dncListIds: String = \"\" // DNC list ID\nlet distributionQueueId: String = \"\" // Distribution queue ID\nlet edgeGroupId: String = \"\" // Edge group ID\nlet callAnalysisResponseSetId: String = \"\" // Call analysis response set ID\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundCampaignsRequest.SortOrder_getOutboundCampaigns = GetOutboundCampaignsRequest.SortOrder_getOutboundCampaigns.enummember // Sort order\n\n// Query a list of dialer campaigns.\nGetOutboundCampaignsRequest.getOutboundCampaigns(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, contactListId: contactListId, dncListIds: dncListIds, distributionQueueId: distributionQueueId, edgeGroupId: edgeGroupId, callAnalysisResponseSetId: callAnalysisResponseSetId, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignsRequest.getOutboundCampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignsall": {
    "operationId": "getoutboundcampaignsall",
    "functionName": "getOutboundCampaignsAll",
    "signature": "getOutboundCampaignsAll(pageSize, pageNumber, _id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // Campaign ID(s)\nlet name: String = \"\" // Campaign name(s)\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet mediaType: [String] = [\"\"] // Media type(s)\nlet sortOrder: GetOutboundCampaignsAllRequest.SortOrder_getOutboundCampaignsAll = GetOutboundCampaignsAllRequest.SortOrder_getOutboundCampaignsAll.enummember // Sort order\n\n// Query across all types of campaigns by division\nGetOutboundCampaignsAllRequest.getOutboundCampaignsAll(pageSize: pageSize, pageNumber: pageNumber, _id: _id, name: name, divisionId: divisionId, mediaType: mediaType, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignsAllRequest.getOutboundCampaignsAll was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignsalldivisionviews": {
    "operationId": "getoutboundcampaignsalldivisionviews",
    "functionName": "getOutboundCampaignsAllDivisionviews",
    "signature": "getOutboundCampaignsAllDivisionviews(pageSize, pageNumber, _id, name, divisionId, mediaType, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "mediaType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CommonCampaignDivisionViewEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // Campaign ID(s)\nlet name: String = \"\" // Campaign name(s)\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet mediaType: [String] = [\"\"] // Media type(s)\nlet sortOrder: GetOutboundCampaignsAllDivisionviewsRequest.SortOrder_getOutboundCampaignsAllDivisionviews = GetOutboundCampaignsAllDivisionviewsRequest.SortOrder_getOutboundCampaignsAllDivisionviews.enummember // Sort order\n\n// Query across all types of campaigns\nGetOutboundCampaignsAllDivisionviewsRequest.getOutboundCampaignsAllDivisionviews(pageSize: pageSize, pageNumber: pageNumber, _id: _id, name: name, divisionId: divisionId, mediaType: mediaType, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignsAllDivisionviewsRequest.getOutboundCampaignsAllDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignsdivisionview": {
    "operationId": "getoutboundcampaignsdivisionview",
    "functionName": "getOutboundCampaignsDivisionview",
    "signature": "getOutboundCampaignsDivisionview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignDivisionView",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get a basic Campaign information object\nGetOutboundCampaignsDivisionviewRequest.getOutboundCampaignsDivisionview(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignsDivisionviewRequest.getOutboundCampaignsDivisionview was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcampaignsdivisionviews": {
    "operationId": "getoutboundcampaignsdivisionviews",
    "functionName": "getOutboundCampaignsDivisionviews",
    "signature": "getOutboundCampaignsDivisionviews(pageSize, pageNumber, filterType, name, _id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignDivisionViewListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet filterType: GetOutboundCampaignsDivisionviewsRequest.FilterType_getOutboundCampaignsDivisionviews = GetOutboundCampaignsDivisionviewsRequest.FilterType_getOutboundCampaignsDivisionviews.enummember // Filter type\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // id\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundCampaignsDivisionviewsRequest.SortOrder_getOutboundCampaignsDivisionviews = GetOutboundCampaignsDivisionviewsRequest.SortOrder_getOutboundCampaignsDivisionviews.enummember // Sort order\n\n// Query a list of basic Campaign information objects\nGetOutboundCampaignsDivisionviewsRequest.getOutboundCampaignsDivisionviews(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundCampaignsDivisionviewsRequest.getOutboundCampaignsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlist": {
    "operationId": "getoutboundcontactlist",
    "functionName": "getOutboundContactlist",
    "signature": "getOutboundContactlist(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ContactList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\nlet includeImportStatus: Bool = true // Import status\nlet includeSize: Bool = true // Include size\n\n// Get a dialer contact list.\nGetOutboundContactlistRequest.getOutboundContactlist(contactListId: contactListId, includeImportStatus: includeImportStatus, includeSize: includeSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistRequest.getOutboundContactlist was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistcontact": {
    "operationId": "getoutboundcontactlistcontact",
    "functionName": "getOutboundContactlistContact",
    "signature": "getOutboundContactlistContact(contactListId, contactId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet contactId: String = \"\" // Contact ID\n\n// Get a contact.\nGetOutboundContactlistContactRequest.getOutboundContactlistContact(contactListId: contactListId, contactId: contactId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistContactRequest.getOutboundContactlistContact was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistexport": {
    "operationId": "getoutboundcontactlistexport",
    "functionName": "getOutboundContactlistExport",
    "signature": "getOutboundContactlistExport(contactListId, download)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\nlet download: String = \"\" // Redirect to download uri\n\n// Get the URI of a contact list export.\nGetOutboundContactlistExportRequest.getOutboundContactlistExport(contactListId: contactListId, download: download) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistExportRequest.getOutboundContactlistExport was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistimportstatus": {
    "operationId": "getoutboundcontactlistimportstatus",
    "functionName": "getOutboundContactlistImportstatus",
    "signature": "getOutboundContactlistImportstatus(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\n\n// Get dialer contactList import status.\nGetOutboundContactlistImportstatusRequest.getOutboundContactlistImportstatus(contactListId: contactListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistImportstatusRequest.getOutboundContactlistImportstatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlisttimezonemappingpreview": {
    "operationId": "getoutboundcontactlisttimezonemappingpreview",
    "functionName": "getOutboundContactlistTimezonemappingpreview",
    "signature": "getOutboundContactlistTimezonemappingpreview(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeZoneMappingPreview",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\n\n// Preview the result of applying Automatic Time Zone Mapping to a contact list\nGetOutboundContactlistTimezonemappingpreviewRequest.getOutboundContactlistTimezonemappingpreview(contactListId: contactListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistTimezonemappingpreviewRequest.getOutboundContactlistTimezonemappingpreview was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistfilter": {
    "operationId": "getoutboundcontactlistfilter",
    "functionName": "getOutboundContactlistfilter",
    "signature": "getOutboundContactlistfilter(contactListFilterId)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListFilterId: String = \"\" // Contact List Filter ID\n\n// Get Contact list filter\nGetOutboundContactlistfilterRequest.getOutboundContactlistfilter(contactListFilterId: contactListFilterId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistfilterRequest.getOutboundContactlistfilter was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistfilters": {
    "operationId": "getoutboundcontactlistfilters",
    "functionName": "getOutboundContactlistfilters",
    "signature": "getOutboundContactlistfilters(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder, contactListId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListFilterEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundContactlistfiltersRequest.FilterType_getOutboundContactlistfilters = GetOutboundContactlistfiltersRequest.FilterType_getOutboundContactlistfilters.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundContactlistfiltersRequest.SortOrder_getOutboundContactlistfilters = GetOutboundContactlistfiltersRequest.SortOrder_getOutboundContactlistfilters.enummember // Sort order\nlet contactListId: String = \"\" // Contact List ID\n\n// Query Contact list filters\nGetOutboundContactlistfiltersRequest.getOutboundContactlistfilters(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder, contactListId: contactListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistfiltersRequest.getOutboundContactlistfilters was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlists": {
    "operationId": "getoutboundcontactlists",
    "functionName": "getOutboundContactlists",
    "signature": "getOutboundContactlists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, _id, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet includeImportStatus: Bool = true // Include import status\nlet includeSize: Bool = true // Include size\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundContactlistsRequest.FilterType_getOutboundContactlists = GetOutboundContactlistsRequest.FilterType_getOutboundContactlists.enummember // Filter type\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // id\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundContactlistsRequest.SortOrder_getOutboundContactlists = GetOutboundContactlistsRequest.SortOrder_getOutboundContactlists.enummember // Sort order\n\n// Query a list of contact lists.\nGetOutboundContactlistsRequest.getOutboundContactlists(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, _id: _id, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistsRequest.getOutboundContactlists was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistsdivisionview": {
    "operationId": "getoutboundcontactlistsdivisionview",
    "functionName": "getOutboundContactlistsDivisionview",
    "signature": "getOutboundContactlistsDivisionview(contactListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionView",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contactlist ID\nlet includeImportStatus: Bool = true // Include import status\nlet includeSize: Bool = true // Include size\n\n// Get a basic ContactList information object\nGetOutboundContactlistsDivisionviewRequest.getOutboundContactlistsDivisionview(contactListId: contactListId, includeImportStatus: includeImportStatus, includeSize: includeSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistsDivisionviewRequest.getOutboundContactlistsDivisionview was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundcontactlistsdivisionviews": {
    "operationId": "getoutboundcontactlistsdivisionviews",
    "functionName": "getOutboundContactlistsDivisionviews",
    "signature": "getOutboundContactlistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, _id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ContactListDivisionViewListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet includeImportStatus: Bool = true // Include import status\nlet includeSize: Bool = true // Include size\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet filterType: GetOutboundContactlistsDivisionviewsRequest.FilterType_getOutboundContactlistsDivisionviews = GetOutboundContactlistsDivisionviewsRequest.FilterType_getOutboundContactlistsDivisionviews.enummember // Filter type\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // id\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundContactlistsDivisionviewsRequest.SortOrder_getOutboundContactlistsDivisionviews = GetOutboundContactlistsDivisionviewsRequest.SortOrder_getOutboundContactlistsDivisionviews.enummember // Sort order\n\n// Query a list of simplified contact list objects.\nGetOutboundContactlistsDivisionviewsRequest.getOutboundContactlistsDivisionviews(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, _id: _id, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundContactlistsDivisionviewsRequest.getOutboundContactlistsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclist": {
    "operationId": "getoutbounddnclist",
    "functionName": "getOutboundDnclist",
    "signature": "getOutboundDnclist(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "DncList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\nlet includeImportStatus: Bool = true // Import status\nlet includeSize: Bool = true // Include size\n\n// Get dialer DNC list\nGetOutboundDnclistRequest.getOutboundDnclist(dncListId: dncListId, includeImportStatus: includeImportStatus, includeSize: includeSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistRequest.getOutboundDnclist was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclistexport": {
    "operationId": "getoutbounddnclistexport",
    "functionName": "getOutboundDnclistExport",
    "signature": "getOutboundDnclistExport(dncListId, download)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "download",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExportUri",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\nlet download: String = \"\" // Redirect to download uri\n\n// Get the URI of a DNC list export.\nGetOutboundDnclistExportRequest.getOutboundDnclistExport(dncListId: dncListId, download: download) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistExportRequest.getOutboundDnclistExport was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclistimportstatus": {
    "operationId": "getoutbounddnclistimportstatus",
    "functionName": "getOutboundDnclistImportstatus",
    "signature": "getOutboundDnclistImportstatus(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ImportStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\n\n// Get dialer dncList import status.\nGetOutboundDnclistImportstatusRequest.getOutboundDnclistImportstatus(dncListId: dncListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistImportstatusRequest.getOutboundDnclistImportstatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclists": {
    "operationId": "getoutbounddnclists",
    "functionName": "getOutboundDnclists",
    "signature": "getOutboundDnclists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, dncSourceType, divisionId, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet includeImportStatus: Bool = true // Import status\nlet includeSize: Bool = true // Include size\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundDnclistsRequest.FilterType_getOutboundDnclists = GetOutboundDnclistsRequest.FilterType_getOutboundDnclists.enummember // Filter type\nlet name: String = \"\" // Name\nlet dncSourceType: GetOutboundDnclistsRequest.DncSourceType_getOutboundDnclists = GetOutboundDnclistsRequest.DncSourceType_getOutboundDnclists.enummember // DncSourceType\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundDnclistsRequest.SortOrder_getOutboundDnclists = GetOutboundDnclistsRequest.SortOrder_getOutboundDnclists.enummember // Sort order\n\n// Query dialer DNC lists\nGetOutboundDnclistsRequest.getOutboundDnclists(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, dncSourceType: dncSourceType, divisionId: divisionId, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistsRequest.getOutboundDnclists was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclistsdivisionview": {
    "operationId": "getoutbounddnclistsdivisionview",
    "functionName": "getOutboundDnclistsDivisionview",
    "signature": "getOutboundDnclistsDivisionview(dncListId, includeImportStatus, includeSize)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "DncListDivisionView",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // Dnclist ID\nlet includeImportStatus: Bool = true // Include import status\nlet includeSize: Bool = true // Include size\n\n// Get a basic DncList information object\nGetOutboundDnclistsDivisionviewRequest.getOutboundDnclistsDivisionview(dncListId: dncListId, includeImportStatus: includeImportStatus, includeSize: includeSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistsDivisionviewRequest.getOutboundDnclistsDivisionview was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutbounddnclistsdivisionviews": {
    "operationId": "getoutbounddnclistsdivisionviews",
    "functionName": "getOutboundDnclistsDivisionviews",
    "signature": "getOutboundDnclistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, dncSourceType, _id, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "includeImportStatus",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "includeSize",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "dncSourceType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DncListDivisionViewListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet includeImportStatus: Bool = true // Include import status\nlet includeSize: Bool = true // Include size\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet filterType: GetOutboundDnclistsDivisionviewsRequest.FilterType_getOutboundDnclistsDivisionviews = GetOutboundDnclistsDivisionviewsRequest.FilterType_getOutboundDnclistsDivisionviews.enummember // Filter type\nlet name: String = \"\" // Name\nlet dncSourceType: GetOutboundDnclistsDivisionviewsRequest.DncSourceType_getOutboundDnclistsDivisionviews = GetOutboundDnclistsDivisionviewsRequest.DncSourceType_getOutboundDnclistsDivisionviews.enummember // DncSourceType\nlet _id: [String] = [\"\"] // id\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundDnclistsDivisionviewsRequest.SortOrder_getOutboundDnclistsDivisionviews = GetOutboundDnclistsDivisionviewsRequest.SortOrder_getOutboundDnclistsDivisionviews.enummember // Sort order\n\n// Query a list of simplified dnc list objects.\nGetOutboundDnclistsDivisionviewsRequest.getOutboundDnclistsDivisionviews(includeImportStatus: includeImportStatus, includeSize: includeSize, pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, name: name, dncSourceType: dncSourceType, _id: _id, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundDnclistsDivisionviewsRequest.getOutboundDnclistsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundevent": {
    "operationId": "getoutboundevent",
    "functionName": "getOutboundEvent",
    "signature": "getOutboundEvent(eventId)",
    "parameters": [
      {
        "name": "eventId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EventLog",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet eventId: String = \"\" // Event Log ID\n\n// Get Dialer Event\nGetOutboundEventRequest.getOutboundEvent(eventId: eventId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundEventRequest.getOutboundEvent was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundevents": {
    "operationId": "getoutboundevents",
    "functionName": "getOutboundEvents",
    "signature": "getOutboundEvents(pageSize, pageNumber, filterType, category, level, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "category",
        "type": "String",
        "required": "false"
      },
      {
        "name": "level",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DialerEventEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet filterType: GetOutboundEventsRequest.FilterType_getOutboundEvents = GetOutboundEventsRequest.FilterType_getOutboundEvents.enummember // Filter type\nlet category: String = \"\" // Category\nlet level: String = \"\" // Level\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundEventsRequest.SortOrder_getOutboundEvents = GetOutboundEventsRequest.SortOrder_getOutboundEvents.enummember // Sort order\n\n// Query Event Logs\nGetOutboundEventsRequest.getOutboundEvents(pageSize: pageSize, pageNumber: pageNumber, filterType: filterType, category: category, level: level, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundEventsRequest.getOutboundEvents was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundmessagingcampaign": {
    "operationId": "getoutboundmessagingcampaign",
    "functionName": "getOutboundMessagingcampaign",
    "signature": "getOutboundMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\n\n// Get an Outbound Messaging Campaign\nGetOutboundMessagingcampaignRequest.getOutboundMessagingcampaign(messagingCampaignId: messagingCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundMessagingcampaignRequest.getOutboundMessagingcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundmessagingcampaignprogress": {
    "operationId": "getoutboundmessagingcampaignprogress",
    "functionName": "getOutboundMessagingcampaignProgress",
    "signature": "getOutboundMessagingcampaignProgress(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignProgress",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\n\n// Get messaging campaign's progress\nGetOutboundMessagingcampaignProgressRequest.getOutboundMessagingcampaignProgress(messagingCampaignId: messagingCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundMessagingcampaignProgressRequest.getOutboundMessagingcampaignProgress was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundmessagingcampaigns": {
    "operationId": "getoutboundmessagingcampaigns",
    "functionName": "getOutboundMessagingcampaigns",
    "signature": "getOutboundMessagingcampaigns(pageSize, pageNumber, sortBy, sortOrder, name, contactListId, divisionId, type, senderSmsPhoneNumber, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "contactListId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet sortBy: GetOutboundMessagingcampaignsRequest.SortBy_getOutboundMessagingcampaigns = GetOutboundMessagingcampaignsRequest.SortBy_getOutboundMessagingcampaigns.enummember // The field to sort by\nlet sortOrder: GetOutboundMessagingcampaignsRequest.SortOrder_getOutboundMessagingcampaigns = GetOutboundMessagingcampaignsRequest.SortOrder_getOutboundMessagingcampaigns.enummember // The direction to sort\nlet name: String = \"\" // Name\nlet contactListId: String = \"\" // Contact List ID\nlet divisionId: [String] = [\"\"] // Division ID(s)\nlet type: GetOutboundMessagingcampaignsRequest.ModelType_getOutboundMessagingcampaigns = GetOutboundMessagingcampaignsRequest.ModelType_getOutboundMessagingcampaigns.enummember // Campaign Type\nlet senderSmsPhoneNumber: String = \"\" // Sender SMS Phone Number\nlet _id: [String] = [\"\"] // A list of messaging campaign ids to bulk fetch\n\n// Query a list of Messaging Campaigns\nGetOutboundMessagingcampaignsRequest.getOutboundMessagingcampaigns(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, contactListId: contactListId, divisionId: divisionId, type: type, senderSmsPhoneNumber: senderSmsPhoneNumber, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundMessagingcampaignsRequest.getOutboundMessagingcampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundmessagingcampaignsdivisionview": {
    "operationId": "getoutboundmessagingcampaignsdivisionview",
    "functionName": "getOutboundMessagingcampaignsDivisionview",
    "signature": "getOutboundMessagingcampaignsDivisionview(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignDivisionView",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\n\n// Get a basic Messaging Campaign information object\nGetOutboundMessagingcampaignsDivisionviewRequest.getOutboundMessagingcampaignsDivisionview(messagingCampaignId: messagingCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundMessagingcampaignsDivisionviewRequest.getOutboundMessagingcampaignsDivisionview was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundmessagingcampaignsdivisionviews": {
    "operationId": "getoutboundmessagingcampaignsdivisionviews",
    "functionName": "getOutboundMessagingcampaignsDivisionviews",
    "signature": "getOutboundMessagingcampaignsDivisionviews(pageSize, pageNumber, sortOrder, name, type, _id, senderSmsPhoneNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "senderSmsPhoneNumber",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "MessagingCampaignDivisionViewEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetOutboundMessagingcampaignsDivisionviewsRequest.SortOrder_getOutboundMessagingcampaignsDivisionviews = GetOutboundMessagingcampaignsDivisionviewsRequest.SortOrder_getOutboundMessagingcampaignsDivisionviews.enummember // The direction to sort\nlet name: String = \"\" // Name\nlet type: GetOutboundMessagingcampaignsDivisionviewsRequest.ModelType_getOutboundMessagingcampaignsDivisionviews = GetOutboundMessagingcampaignsDivisionviewsRequest.ModelType_getOutboundMessagingcampaignsDivisionviews.enummember // Campaign Type\nlet _id: [String] = [\"\"] // id\nlet senderSmsPhoneNumber: String = \"\" // Sender SMS Phone Number\n\n// Query a list of basic Messaging Campaign information objects\nGetOutboundMessagingcampaignsDivisionviewsRequest.getOutboundMessagingcampaignsDivisionviews(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name, type: type, _id: _id, senderSmsPhoneNumber: senderSmsPhoneNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundMessagingcampaignsDivisionviewsRequest.getOutboundMessagingcampaignsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundruleset": {
    "operationId": "getoutboundruleset",
    "functionName": "getOutboundRuleset",
    "signature": "getOutboundRuleset(ruleSetId)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleSetId: String = \"\" // Rule Set ID\n\n// Get a Rule Set by ID.\nGetOutboundRulesetRequest.getOutboundRuleset(ruleSetId: ruleSetId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundRulesetRequest.getOutboundRuleset was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundrulesets": {
    "operationId": "getoutboundrulesets",
    "functionName": "getOutboundRulesets",
    "signature": "getOutboundRulesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RuleSetEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundRulesetsRequest.FilterType_getOutboundRulesets = GetOutboundRulesetsRequest.FilterType_getOutboundRulesets.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundRulesetsRequest.SortOrder_getOutboundRulesets = GetOutboundRulesetsRequest.SortOrder_getOutboundRulesets.enummember // Sort order\n\n// Query a list of Rule Sets.\nGetOutboundRulesetsRequest.getOutboundRulesets(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundRulesetsRequest.getOutboundRulesets was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulescampaign": {
    "operationId": "getoutboundschedulescampaign",
    "functionName": "getOutboundSchedulesCampaign",
    "signature": "getOutboundSchedulesCampaign(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Get a dialer campaign schedule.\nGetOutboundSchedulesCampaignRequest.getOutboundSchedulesCampaign(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesCampaignRequest.getOutboundSchedulesCampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulescampaigns": {
    "operationId": "getoutboundschedulescampaigns",
    "functionName": "getOutboundSchedulesCampaigns",
    "signature": "getOutboundSchedulesCampaigns()",
    "return": "[CampaignSchedule]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Query for a list of dialer campaign schedules.\nGetOutboundSchedulesCampaignsRequest.getOutboundSchedulesCampaigns() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesCampaignsRequest.getOutboundSchedulesCampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulesemailcampaign": {
    "operationId": "getoutboundschedulesemailcampaign",
    "functionName": "getOutboundSchedulesEmailcampaign",
    "signature": "getOutboundSchedulesEmailcampaign(emailCampaignId)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EmailCampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emailCampaignId: String = \"\" // Email Campaign ID\n\n// Get an email campaign schedule.\nGetOutboundSchedulesEmailcampaignRequest.getOutboundSchedulesEmailcampaign(emailCampaignId: emailCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesEmailcampaignRequest.getOutboundSchedulesEmailcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulesemailcampaigns": {
    "operationId": "getoutboundschedulesemailcampaigns",
    "functionName": "getOutboundSchedulesEmailcampaigns",
    "signature": "getOutboundSchedulesEmailcampaigns()",
    "return": "MessagingCampaignScheduleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Query for a list of email campaign schedules.\nGetOutboundSchedulesEmailcampaignsRequest.getOutboundSchedulesEmailcampaigns() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesEmailcampaignsRequest.getOutboundSchedulesEmailcampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulesmessagingcampaign": {
    "operationId": "getoutboundschedulesmessagingcampaign",
    "functionName": "getOutboundSchedulesMessagingcampaign",
    "signature": "getOutboundSchedulesMessagingcampaign(messagingCampaignId)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // Messaging Campaign ID\n\n// Get a messaging campaign schedule.\nGetOutboundSchedulesMessagingcampaignRequest.getOutboundSchedulesMessagingcampaign(messagingCampaignId: messagingCampaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesMessagingcampaignRequest.getOutboundSchedulesMessagingcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulesmessagingcampaigns": {
    "operationId": "getoutboundschedulesmessagingcampaigns",
    "functionName": "getOutboundSchedulesMessagingcampaigns",
    "signature": "getOutboundSchedulesMessagingcampaigns()",
    "return": "MessagingCampaignScheduleEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Query for a list of messaging campaign schedules.\nGetOutboundSchedulesMessagingcampaignsRequest.getOutboundSchedulesMessagingcampaigns() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesMessagingcampaignsRequest.getOutboundSchedulesMessagingcampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulessequence": {
    "operationId": "getoutboundschedulessequence",
    "functionName": "getOutboundSchedulesSequence",
    "signature": "getOutboundSchedulesSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Sequence ID\n\n// Get a dialer sequence schedule.\nGetOutboundSchedulesSequenceRequest.getOutboundSchedulesSequence(sequenceId: sequenceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesSequenceRequest.getOutboundSchedulesSequence was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundschedulessequences": {
    "operationId": "getoutboundschedulessequences",
    "functionName": "getOutboundSchedulesSequences",
    "signature": "getOutboundSchedulesSequences()",
    "return": "[SequenceSchedule]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Query for a list of dialer sequence schedules.\nGetOutboundSchedulesSequencesRequest.getOutboundSchedulesSequences() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSchedulesSequencesRequest.getOutboundSchedulesSequences was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundsequence": {
    "operationId": "getoutboundsequence",
    "functionName": "getOutboundSequence",
    "signature": "getOutboundSequence(sequenceId)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Campaign Sequence ID\n\n// Get a dialer campaign sequence.\nGetOutboundSequenceRequest.getOutboundSequence(sequenceId: sequenceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSequenceRequest.getOutboundSequence was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundsequences": {
    "operationId": "getoutboundsequences",
    "functionName": "getOutboundSequences",
    "signature": "getOutboundSequences(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "allowEmptyResult",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "filterType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CampaignSequenceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size. The max that will be returned is 100.\nlet pageNumber: Int = 0 // Page number\nlet allowEmptyResult: Bool = true // Whether to return an empty page when there are no results for that page\nlet filterType: GetOutboundSequencesRequest.FilterType_getOutboundSequences = GetOutboundSequencesRequest.FilterType_getOutboundSequences.enummember // Filter type\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: GetOutboundSequencesRequest.SortOrder_getOutboundSequences = GetOutboundSequencesRequest.SortOrder_getOutboundSequences.enummember // Sort order\n\n// Query a list of dialer campaign sequences.\nGetOutboundSequencesRequest.getOutboundSequences(pageSize: pageSize, pageNumber: pageNumber, allowEmptyResult: allowEmptyResult, filterType: filterType, name: name, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSequencesRequest.getOutboundSequences was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundsettings": {
    "operationId": "getoutboundsettings",
    "functionName": "getOutboundSettings",
    "signature": "getOutboundSettings()",
    "return": "OutboundSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the outbound settings for this organization\nGetOutboundSettingsRequest.getOutboundSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundSettingsRequest.getOutboundSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getoutboundwrapupcodemappings": {
    "operationId": "getoutboundwrapupcodemappings",
    "functionName": "getOutboundWrapupcodemappings",
    "signature": "getOutboundWrapupcodemappings()",
    "return": "WrapUpCodeMapping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the Dialer wrap up code mapping.\nGetOutboundWrapupcodemappingsRequest.getOutboundWrapupcodemappings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOutboundWrapupcodemappingsRequest.getOutboundWrapupcodemappings was successful\")\n        dump(response)\n    }\n}"
  },
  "patchoutboundsettings": {
    "operationId": "patchoutboundsettings",
    "functionName": "patchOutboundSettings",
    "signature": "patchOutboundSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OutboundSettings",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OutboundSettings = new OutboundSettings(...) // outboundSettings\n\n// Update the outbound settings for this organization\nPatchOutboundSettingsRequest.patchOutboundSettings(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchOutboundSettingsRequest.patchOutboundSettings was successful\")\n    }\n}"
  },
  "postoutboundattemptlimits": {
    "operationId": "postoutboundattemptlimits",
    "functionName": "postOutboundAttemptlimits",
    "signature": "postOutboundAttemptlimits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AttemptLimits",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AttemptLimits = new AttemptLimits(...) // AttemptLimits\n\n// Create attempt limits\nPostOutboundAttemptlimitsRequest.postOutboundAttemptlimits(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundAttemptlimitsRequest.postOutboundAttemptlimits was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundaudits": {
    "operationId": "postoutboundaudits",
    "functionName": "postOutboundAudits",
    "signature": "postOutboundAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly)",
    "parameters": [
      {
        "name": "body",
        "type": "DialerAuditRequest",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "facetsOnly",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AuditSearchResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DialerAuditRequest = new DialerAuditRequest(...) // AuditSearch\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet facetsOnly: Bool = true // Facets only\n\n// Retrieves audits for dialer.\nPostOutboundAuditsRequest.postOutboundAudits(body: body, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, facetsOnly: facetsOnly) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundAuditsRequest.postOutboundAudits was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcallabletimesets": {
    "operationId": "postoutboundcallabletimesets",
    "functionName": "postOutboundCallabletimesets",
    "signature": "postOutboundCallabletimesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CallableTimeSet",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CallableTimeSet = new CallableTimeSet(...) // DialerCallableTimeSet\n\n// Create callable time set\nPostOutboundCallabletimesetsRequest.postOutboundCallabletimesets(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCallabletimesetsRequest.postOutboundCallabletimesets was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcallanalysisresponsesets": {
    "operationId": "postoutboundcallanalysisresponsesets",
    "functionName": "postOutboundCallanalysisresponsesets",
    "signature": "postOutboundCallanalysisresponsesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ResponseSet",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ResponseSet = new ResponseSet(...) // ResponseSet\n\n// Create a dialer call analysis response set.\nPostOutboundCallanalysisresponsesetsRequest.postOutboundCallanalysisresponsesets(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCallanalysisresponsesetsRequest.postOutboundCallanalysisresponsesets was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcampaignagentownedmappingpreview": {
    "operationId": "postoutboundcampaignagentownedmappingpreview",
    "functionName": "postOutboundCampaignAgentownedmappingpreview",
    "signature": "postOutboundCampaignAgentownedmappingpreview(campaignId)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\n\n// Initiate request for a preview of how agents will be mapped to this campaign's contact list.\nPostOutboundCampaignAgentownedmappingpreviewRequest.postOutboundCampaignAgentownedmappingpreview(campaignId: campaignId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCampaignAgentownedmappingpreviewRequest.postOutboundCampaignAgentownedmappingpreview was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcampaigncallbackschedule": {
    "operationId": "postoutboundcampaigncallbackschedule",
    "functionName": "postOutboundCampaignCallbackSchedule",
    "signature": "postOutboundCampaignCallbackSchedule(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ContactCallbackRequest",
        "required": "true"
      }
    ],
    "return": "ContactCallbackRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\nlet body: ContactCallbackRequest = new ContactCallbackRequest(...) // ContactCallbackRequest\n\n// Schedule a Callback for a Dialer Campaign (Deprecated)\nPostOutboundCampaignCallbackScheduleRequest.postOutboundCampaignCallbackSchedule(campaignId: campaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCampaignCallbackScheduleRequest.postOutboundCampaignCallbackSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcampaignrules": {
    "operationId": "postoutboundcampaignrules",
    "functionName": "postOutboundCampaignrules",
    "signature": "postOutboundCampaignrules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CampaignRule",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CampaignRule = new CampaignRule(...) // CampaignRule\n\n// Create Campaign Rule\nPostOutboundCampaignrulesRequest.postOutboundCampaignrules(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCampaignrulesRequest.postOutboundCampaignrules was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcampaigns": {
    "operationId": "postoutboundcampaigns",
    "functionName": "postOutboundCampaigns",
    "signature": "postOutboundCampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Campaign",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Campaign = new Campaign(...) // Campaign\n\n// Create a campaign.\nPostOutboundCampaignsRequest.postOutboundCampaigns(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCampaignsRequest.postOutboundCampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcampaignsprogress": {
    "operationId": "postoutboundcampaignsprogress",
    "functionName": "postOutboundCampaignsProgress",
    "signature": "postOutboundCampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [String] = [\"\"] // Campaign IDs\n\n// Get progress for a list of campaigns\nPostOutboundCampaignsProgressRequest.postOutboundCampaignsProgress(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundCampaignsProgressRequest.postOutboundCampaignsProgress was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlistclear": {
    "operationId": "postoutboundcontactlistclear",
    "functionName": "postOutboundContactlistClear",
    "signature": "postOutboundContactlistClear(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\n\n// Deletes all contacts out of a list. All outstanding recalls or rule-scheduled callbacks for non-preview campaigns configured with the contactlist will be cancelled.\nPostOutboundContactlistClearRequest.postOutboundContactlistClear(contactListId: contactListId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostOutboundContactlistClearRequest.postOutboundContactlistClear was successful\")\n    }\n}"
  },
  "postoutboundcontactlistcontacts": {
    "operationId": "postoutboundcontactlistcontacts",
    "functionName": "postOutboundContactlistContacts",
    "signature": "postOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[WritableDialerContact]",
        "required": "true"
      },
      {
        "name": "priority",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "clearSystemData",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "doNotQueue",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "[DialerContact]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet body: [WritableDialerContact] = [new WritableDialerContact(...)] // Contact\nlet priority: Bool = true // Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.\nlet clearSystemData: Bool = true // Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.\nlet doNotQueue: Bool = true // Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.\n\n// Add contacts to a contact list.\nPostOutboundContactlistContactsRequest.postOutboundContactlistContacts(contactListId: contactListId, body: body, priority: priority, clearSystemData: clearSystemData, doNotQueue: doNotQueue) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistContactsRequest.postOutboundContactlistContacts was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlistcontactsbulk": {
    "operationId": "postoutboundcontactlistcontactsbulk",
    "functionName": "postOutboundContactlistContactsBulk",
    "signature": "postOutboundContactlistContactsBulk(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[DialerContact]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet body: [String] = [\"\"] // ContactIds to get.\n\n// Get contacts from a contact list.\nPostOutboundContactlistContactsBulkRequest.postOutboundContactlistContactsBulk(contactListId: contactListId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistContactsBulkRequest.postOutboundContactlistContactsBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlistexport": {
    "operationId": "postoutboundcontactlistexport",
    "functionName": "postOutboundContactlistExport",
    "signature": "postOutboundContactlistExport(contactListId)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\n\n// Initiate the export of a contact list.\nPostOutboundContactlistExportRequest.postOutboundContactlistExport(contactListId: contactListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistExportRequest.postOutboundContactlistExport was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlistfilters": {
    "operationId": "postoutboundcontactlistfilters",
    "functionName": "postOutboundContactlistfilters",
    "signature": "postOutboundContactlistfilters(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ContactListFilter",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ContactListFilter = new ContactListFilter(...) // ContactListFilter\n\n// Create Contact List Filter\nPostOutboundContactlistfiltersRequest.postOutboundContactlistfilters(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistfiltersRequest.postOutboundContactlistfilters was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlistfilterspreview": {
    "operationId": "postoutboundcontactlistfilterspreview",
    "functionName": "postOutboundContactlistfiltersPreview",
    "signature": "postOutboundContactlistfiltersPreview(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ContactListFilter",
        "required": "true"
      }
    ],
    "return": "FilterPreviewResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ContactListFilter = new ContactListFilter(...) // ContactListFilter\n\n// Get a preview of the output of a contact list filter\nPostOutboundContactlistfiltersPreviewRequest.postOutboundContactlistfiltersPreview(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistfiltersPreviewRequest.postOutboundContactlistfiltersPreview was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundcontactlists": {
    "operationId": "postoutboundcontactlists",
    "functionName": "postOutboundContactlists",
    "signature": "postOutboundContactlists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ContactList",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ContactList = new ContactList(...) // ContactList\n\n// Create a contact List.\nPostOutboundContactlistsRequest.postOutboundContactlists(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundContactlistsRequest.postOutboundContactlists was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundconversationdnc": {
    "operationId": "postoutboundconversationdnc",
    "functionName": "postOutboundConversationDnc",
    "signature": "postOutboundConversationDnc(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\n\n// Add phone numbers to a Dialer DNC list.\nPostOutboundConversationDncRequest.postOutboundConversationDnc(conversationId: conversationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostOutboundConversationDncRequest.postOutboundConversationDnc was successful\")\n    }\n}"
  },
  "postoutbounddnclistexport": {
    "operationId": "postoutbounddnclistexport",
    "functionName": "postOutboundDnclistExport",
    "signature": "postOutboundDnclistExport(dncListId)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEntityRef",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\n\n// Initiate the export of a dnc list.\nPostOutboundDnclistExportRequest.postOutboundDnclistExport(dncListId: dncListId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundDnclistExportRequest.postOutboundDnclistExport was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutbounddnclistphonenumbers": {
    "operationId": "postoutbounddnclistphonenumbers",
    "functionName": "postOutboundDnclistPhonenumbers",
    "signature": "postOutboundDnclistPhonenumbers(dncListId, body, expirationDateTime)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "expirationDateTime",
        "type": "String",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\nlet body: [String] = [\"\"] // DNC Phone Numbers\nlet expirationDateTime: String = \"\" // Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format\n\n// Add phone numbers to a DNC list.\nPostOutboundDnclistPhonenumbersRequest.postOutboundDnclistPhonenumbers(dncListId: dncListId, body: body, expirationDateTime: expirationDateTime) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostOutboundDnclistPhonenumbersRequest.postOutboundDnclistPhonenumbers was successful\")\n    }\n}"
  },
  "postoutbounddnclists": {
    "operationId": "postoutbounddnclists",
    "functionName": "postOutboundDnclists",
    "signature": "postOutboundDnclists(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DncListCreate",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DncListCreate = new DncListCreate(...) // DncList\n\n// Create dialer DNC list\nPostOutboundDnclistsRequest.postOutboundDnclists(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundDnclistsRequest.postOutboundDnclists was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundmessagingcampaigns": {
    "operationId": "postoutboundmessagingcampaigns",
    "functionName": "postOutboundMessagingcampaigns",
    "signature": "postOutboundMessagingcampaigns(body)",
    "parameters": [
      {
        "name": "body",
        "type": "MessagingCampaign",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: MessagingCampaign = new MessagingCampaign(...) // Messaging Campaign\n\n// Create a Messaging Campaign\nPostOutboundMessagingcampaignsRequest.postOutboundMessagingcampaigns(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundMessagingcampaignsRequest.postOutboundMessagingcampaigns was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundmessagingcampaignsprogress": {
    "operationId": "postoutboundmessagingcampaignsprogress",
    "functionName": "postOutboundMessagingcampaignsProgress",
    "signature": "postOutboundMessagingcampaignsProgress(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[CampaignProgress]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [String] = [\"\"] // Messaging Campaign IDs\n\n// Get progress for a list of messaging campaigns\nPostOutboundMessagingcampaignsProgressRequest.postOutboundMessagingcampaignsProgress(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundMessagingcampaignsProgressRequest.postOutboundMessagingcampaignsProgress was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundrulesets": {
    "operationId": "postoutboundrulesets",
    "functionName": "postOutboundRulesets",
    "signature": "postOutboundRulesets(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RuleSet",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RuleSet = new RuleSet(...) // RuleSet\n\n// Create a Rule Set.\nPostOutboundRulesetsRequest.postOutboundRulesets(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundRulesetsRequest.postOutboundRulesets was successful\")\n        dump(response)\n    }\n}"
  },
  "postoutboundsequences": {
    "operationId": "postoutboundsequences",
    "functionName": "postOutboundSequences",
    "signature": "postOutboundSequences(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CampaignSequence",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CampaignSequence = new CampaignSequence(...) // Organization\n\n// Create a new campaign sequence.\nPostOutboundSequencesRequest.postOutboundSequences(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostOutboundSequencesRequest.postOutboundSequences was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundattemptlimit": {
    "operationId": "putoutboundattemptlimit",
    "functionName": "putOutboundAttemptlimit",
    "signature": "putOutboundAttemptlimit(attemptLimitsId, body)",
    "parameters": [
      {
        "name": "attemptLimitsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AttemptLimits",
        "required": "true"
      }
    ],
    "return": "AttemptLimits",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet attemptLimitsId: String = \"\" // Attempt limits ID\nlet body: AttemptLimits = new AttemptLimits(...) // AttemptLimits\n\n// Update attempt limits\nPutOutboundAttemptlimitRequest.putOutboundAttemptlimit(attemptLimitsId: attemptLimitsId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundAttemptlimitRequest.putOutboundAttemptlimit was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcallabletimeset": {
    "operationId": "putoutboundcallabletimeset",
    "functionName": "putOutboundCallabletimeset",
    "signature": "putOutboundCallabletimeset(callableTimeSetId, body)",
    "parameters": [
      {
        "name": "callableTimeSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CallableTimeSet",
        "required": "true"
      }
    ],
    "return": "CallableTimeSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callableTimeSetId: String = \"\" // Callable Time Set ID\nlet body: CallableTimeSet = new CallableTimeSet(...) // DialerCallableTimeSet\n\n// Update callable time set\nPutOutboundCallabletimesetRequest.putOutboundCallabletimeset(callableTimeSetId: callableTimeSetId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundCallabletimesetRequest.putOutboundCallabletimeset was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcallanalysisresponseset": {
    "operationId": "putoutboundcallanalysisresponseset",
    "functionName": "putOutboundCallanalysisresponseset",
    "signature": "putOutboundCallanalysisresponseset(callAnalysisSetId, body)",
    "parameters": [
      {
        "name": "callAnalysisSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ResponseSet",
        "required": "true"
      }
    ],
    "return": "ResponseSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet callAnalysisSetId: String = \"\" // Call Analysis Response Set ID\nlet body: ResponseSet = new ResponseSet(...) // ResponseSet\n\n// Update a dialer call analysis response set.\nPutOutboundCallanalysisresponsesetRequest.putOutboundCallanalysisresponseset(callAnalysisSetId: callAnalysisSetId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundCallanalysisresponsesetRequest.putOutboundCallanalysisresponseset was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcampaign": {
    "operationId": "putoutboundcampaign",
    "functionName": "putOutboundCampaign",
    "signature": "putOutboundCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Campaign",
        "required": "true"
      }
    ],
    "return": "Campaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\nlet body: Campaign = new Campaign(...) // Campaign\n\n// Update a campaign.\nPutOutboundCampaignRequest.putOutboundCampaign(campaignId: campaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundCampaignRequest.putOutboundCampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcampaignagent": {
    "operationId": "putoutboundcampaignagent",
    "functionName": "putOutboundCampaignAgent",
    "signature": "putOutboundCampaignAgent(campaignId, userId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Agent",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\nlet userId: String = \"\" // Agent's user ID\nlet body: Agent = new Agent(...) // agent\n\n// Send notification that an agent's state changed \nPutOutboundCampaignAgentRequest.putOutboundCampaignAgent(campaignId: campaignId, userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundCampaignAgentRequest.putOutboundCampaignAgent was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcampaignrule": {
    "operationId": "putoutboundcampaignrule",
    "functionName": "putOutboundCampaignrule",
    "signature": "putOutboundCampaignrule(campaignRuleId, body)",
    "parameters": [
      {
        "name": "campaignRuleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CampaignRule",
        "required": "true"
      }
    ],
    "return": "CampaignRule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignRuleId: String = \"\" // Campaign Rule ID\nlet body: CampaignRule = new CampaignRule(...) // CampaignRule\n\n// Update Campaign Rule\nPutOutboundCampaignruleRequest.putOutboundCampaignrule(campaignRuleId: campaignRuleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundCampaignruleRequest.putOutboundCampaignrule was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcontactlist": {
    "operationId": "putoutboundcontactlist",
    "functionName": "putOutboundContactlist",
    "signature": "putOutboundContactlist(contactListId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ContactList",
        "required": "true"
      }
    ],
    "return": "ContactList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // ContactList ID\nlet body: ContactList = new ContactList(...) // ContactList\n\n// Update a contact list.\nPutOutboundContactlistRequest.putOutboundContactlist(contactListId: contactListId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundContactlistRequest.putOutboundContactlist was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcontactlistcontact": {
    "operationId": "putoutboundcontactlistcontact",
    "functionName": "putOutboundContactlistContact",
    "signature": "putOutboundContactlistContact(contactListId, contactId, body)",
    "parameters": [
      {
        "name": "contactListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "contactId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DialerContact",
        "required": "true"
      }
    ],
    "return": "DialerContact",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListId: String = \"\" // Contact List ID\nlet contactId: String = \"\" // Contact ID\nlet body: DialerContact = new DialerContact(...) // Contact\n\n// Update a contact.\nPutOutboundContactlistContactRequest.putOutboundContactlistContact(contactListId: contactListId, contactId: contactId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundContactlistContactRequest.putOutboundContactlistContact was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundcontactlistfilter": {
    "operationId": "putoutboundcontactlistfilter",
    "functionName": "putOutboundContactlistfilter",
    "signature": "putOutboundContactlistfilter(contactListFilterId, body)",
    "parameters": [
      {
        "name": "contactListFilterId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ContactListFilter",
        "required": "true"
      }
    ],
    "return": "ContactListFilter",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contactListFilterId: String = \"\" // Contact List Filter ID\nlet body: ContactListFilter = new ContactListFilter(...) // ContactListFilter\n\n// Update Contact List Filter\nPutOutboundContactlistfilterRequest.putOutboundContactlistfilter(contactListFilterId: contactListFilterId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundContactlistfilterRequest.putOutboundContactlistfilter was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutbounddnclist": {
    "operationId": "putoutbounddnclist",
    "functionName": "putOutboundDnclist",
    "signature": "putOutboundDnclist(dncListId, body)",
    "parameters": [
      {
        "name": "dncListId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DncList",
        "required": "true"
      }
    ],
    "return": "DncList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dncListId: String = \"\" // DncList ID\nlet body: DncList = new DncList(...) // DncList\n\n// Update dialer DNC list\nPutOutboundDnclistRequest.putOutboundDnclist(dncListId: dncListId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundDnclistRequest.putOutboundDnclist was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundmessagingcampaign": {
    "operationId": "putoutboundmessagingcampaign",
    "functionName": "putOutboundMessagingcampaign",
    "signature": "putOutboundMessagingcampaign(messagingCampaignId, body)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MessagingCampaign",
        "required": "true"
      }
    ],
    "return": "MessagingCampaign",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // The Messaging Campaign ID\nlet body: MessagingCampaign = new MessagingCampaign(...) // MessagingCampaign\n\n// Update an Outbound Messaging Campaign\nPutOutboundMessagingcampaignRequest.putOutboundMessagingcampaign(messagingCampaignId: messagingCampaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundMessagingcampaignRequest.putOutboundMessagingcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundruleset": {
    "operationId": "putoutboundruleset",
    "functionName": "putOutboundRuleset",
    "signature": "putOutboundRuleset(ruleSetId, body)",
    "parameters": [
      {
        "name": "ruleSetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RuleSet",
        "required": "true"
      }
    ],
    "return": "RuleSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ruleSetId: String = \"\" // Rule Set ID\nlet body: RuleSet = new RuleSet(...) // RuleSet\n\n// Update a Rule Set.\nPutOutboundRulesetRequest.putOutboundRuleset(ruleSetId: ruleSetId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundRulesetRequest.putOutboundRuleset was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundschedulescampaign": {
    "operationId": "putoutboundschedulescampaign",
    "functionName": "putOutboundSchedulesCampaign",
    "signature": "putOutboundSchedulesCampaign(campaignId, body)",
    "parameters": [
      {
        "name": "campaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CampaignSchedule",
        "required": "true"
      }
    ],
    "return": "CampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet campaignId: String = \"\" // Campaign ID\nlet body: CampaignSchedule = new CampaignSchedule(...) // CampaignSchedule\n\n// Update a new campaign schedule.\nPutOutboundSchedulesCampaignRequest.putOutboundSchedulesCampaign(campaignId: campaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundSchedulesCampaignRequest.putOutboundSchedulesCampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundschedulesemailcampaign": {
    "operationId": "putoutboundschedulesemailcampaign",
    "functionName": "putOutboundSchedulesEmailcampaign",
    "signature": "putOutboundSchedulesEmailcampaign(emailCampaignId, body)",
    "parameters": [
      {
        "name": "emailCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EmailCampaignSchedule",
        "required": "true"
      }
    ],
    "return": "EmailCampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet emailCampaignId: String = \"\" // Email Campaign ID\nlet body: EmailCampaignSchedule = new EmailCampaignSchedule(...) // EmailCampaignSchedule\n\n// Update an email campaign schedule.\nPutOutboundSchedulesEmailcampaignRequest.putOutboundSchedulesEmailcampaign(emailCampaignId: emailCampaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundSchedulesEmailcampaignRequest.putOutboundSchedulesEmailcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundschedulesmessagingcampaign": {
    "operationId": "putoutboundschedulesmessagingcampaign",
    "functionName": "putOutboundSchedulesMessagingcampaign",
    "signature": "putOutboundSchedulesMessagingcampaign(messagingCampaignId, body)",
    "parameters": [
      {
        "name": "messagingCampaignId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MessagingCampaignSchedule",
        "required": "true"
      }
    ],
    "return": "MessagingCampaignSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messagingCampaignId: String = \"\" // Messaging Campaign ID\nlet body: MessagingCampaignSchedule = new MessagingCampaignSchedule(...) // MessagingCampaignSchedule\n\n// Update a new messaging campaign schedule.\nPutOutboundSchedulesMessagingcampaignRequest.putOutboundSchedulesMessagingcampaign(messagingCampaignId: messagingCampaignId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundSchedulesMessagingcampaignRequest.putOutboundSchedulesMessagingcampaign was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundschedulessequence": {
    "operationId": "putoutboundschedulessequence",
    "functionName": "putOutboundSchedulesSequence",
    "signature": "putOutboundSchedulesSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SequenceSchedule",
        "required": "true"
      }
    ],
    "return": "SequenceSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Sequence ID\nlet body: SequenceSchedule = new SequenceSchedule(...) // SequenceSchedule\n\n// Update a new sequence schedule.\nPutOutboundSchedulesSequenceRequest.putOutboundSchedulesSequence(sequenceId: sequenceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundSchedulesSequenceRequest.putOutboundSchedulesSequence was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundsequence": {
    "operationId": "putoutboundsequence",
    "functionName": "putOutboundSequence",
    "signature": "putOutboundSequence(sequenceId, body)",
    "parameters": [
      {
        "name": "sequenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CampaignSequence",
        "required": "true"
      }
    ],
    "return": "CampaignSequence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sequenceId: String = \"\" // Campaign Sequence ID\nlet body: CampaignSequence = new CampaignSequence(...) // Organization\n\n// Update a new campaign sequence.\nPutOutboundSequenceRequest.putOutboundSequence(sequenceId: sequenceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundSequenceRequest.putOutboundSequence was successful\")\n        dump(response)\n    }\n}"
  },
  "putoutboundwrapupcodemappings": {
    "operationId": "putoutboundwrapupcodemappings",
    "functionName": "putOutboundWrapupcodemappings",
    "signature": "putOutboundWrapupcodemappings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WrapUpCodeMapping",
        "required": "true"
      }
    ],
    "return": "WrapUpCodeMapping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WrapUpCodeMapping = new WrapUpCodeMapping(...) // wrapUpCodeMapping\n\n// Update the Dialer wrap up code mapping.\nPutOutboundWrapupcodemappingsRequest.putOutboundWrapupcodemappings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOutboundWrapupcodemappingsRequest.putOutboundWrapupcodemappings was successful\")\n        dump(response)\n    }\n}"
  },
  "deletepresencedefinition": {
    "operationId": "deletepresencedefinition",
    "functionName": "deletePresencedefinition",
    "signature": "deletePresencedefinition(presenceId)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet presenceId: String = \"\" // Organization Presence ID\n\n// Delete a Presence Definition\nDeletePresencedefinitionRequest.deletePresencedefinition(presenceId: presenceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeletePresencedefinitionRequest.deletePresencedefinition was successful\")\n    }\n}"
  },
  "getpresencedefinition": {
    "operationId": "getpresencedefinition",
    "functionName": "getPresencedefinition",
    "signature": "getPresencedefinition(presenceId, localeCode)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet presenceId: String = \"\" // Organization Presence ID\nlet localeCode: String = \"\" // The locale code to fetch for the presence definition. Use ALL to fetch everything.\n\n// Get a Presence Definition\nGetPresencedefinitionRequest.getPresencedefinition(presenceId: presenceId, localeCode: localeCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetPresencedefinitionRequest.getPresencedefinition was successful\")\n        dump(response)\n    }\n}"
  },
  "getpresencedefinitions": {
    "operationId": "getpresencedefinitions",
    "functionName": "getPresencedefinitions",
    "signature": "getPresencedefinitions(pageNumber, pageSize, deleted, localeCode)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "deleted",
        "type": "String",
        "required": "false"
      },
      {
        "name": "localeCode",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrganizationPresenceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet deleted: String = \"\" // Deleted query can be TRUE, FALSE or ALL\nlet localeCode: String = \"\" // The locale code to fetch for each presence definition. Use ALL to fetch everything.\n\n// Get an Organization's list of Presence Definitions\nGetPresencedefinitionsRequest.getPresencedefinitions(pageNumber: pageNumber, pageSize: pageSize, deleted: deleted, localeCode: localeCode) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetPresencedefinitionsRequest.getPresencedefinitions was successful\")\n        dump(response)\n    }\n}"
  },
  "getsystempresences": {
    "operationId": "getsystempresences",
    "functionName": "getSystempresences",
    "signature": "getSystempresences()",
    "return": "[SystemPresence]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of SystemPresences\nGetSystempresencesRequest.getSystempresences() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSystempresencesRequest.getSystempresences was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserpresence": {
    "operationId": "getuserpresence",
    "functionName": "getUserPresence",
    "signature": "getUserPresence(userId, sourceId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\nlet sourceId: String = \"\" // Presence source ID\n\n// Get a user's Presence\nGetUserPresenceRequest.getUserPresence(userId: userId, sourceId: sourceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserPresenceRequest.getUserPresence was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserpresencespurecloud": {
    "operationId": "getuserpresencespurecloud",
    "functionName": "getUserPresencesPurecloud",
    "signature": "getUserPresencesPurecloud(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\n\n// Get a user's Genesys Cloud presence.\nGetUserPresencesPurecloudRequest.getUserPresencesPurecloud(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserPresencesPurecloudRequest.getUserPresencesPurecloud was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserpresence": {
    "operationId": "patchuserpresence",
    "functionName": "patchUserPresence",
    "signature": "patchUserPresence(userId, sourceId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "sourceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserPresence",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\nlet sourceId: String = \"\" // Presence source ID\nlet body: UserPresence = new UserPresence(...) // User presence\n\n// Patch a user's Presence\nPatchUserPresenceRequest.patchUserPresence(userId: userId, sourceId: sourceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserPresenceRequest.patchUserPresence was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserpresencespurecloud": {
    "operationId": "patchuserpresencespurecloud",
    "functionName": "patchUserPresencesPurecloud",
    "signature": "patchUserPresencesPurecloud(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserPresence",
        "required": "true"
      }
    ],
    "return": "UserPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // user Id\nlet body: UserPresence = new UserPresence(...) // User presence\n\n// Patch a Genesys Cloud user's presence\nPatchUserPresencesPurecloudRequest.patchUserPresencesPurecloud(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserPresencesPurecloudRequest.patchUserPresencesPurecloud was successful\")\n        dump(response)\n    }\n}"
  },
  "postpresencedefinitions": {
    "operationId": "postpresencedefinitions",
    "functionName": "postPresencedefinitions",
    "signature": "postPresencedefinitions(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OrganizationPresence",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OrganizationPresence = new OrganizationPresence(...) // The Presence Definition to create\n\n// Create a Presence Definition\nPostPresencedefinitionsRequest.postPresencedefinitions(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostPresencedefinitionsRequest.postPresencedefinitions was successful\")\n        dump(response)\n    }\n}"
  },
  "putpresencedefinition": {
    "operationId": "putpresencedefinition",
    "functionName": "putPresencedefinition",
    "signature": "putPresencedefinition(presenceId, body)",
    "parameters": [
      {
        "name": "presenceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OrganizationPresence",
        "required": "true"
      }
    ],
    "return": "OrganizationPresence",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet presenceId: String = \"\" // Organization Presence ID\nlet body: OrganizationPresence = new OrganizationPresence(...) // The OrganizationPresence to update\n\n// Update a Presence Definition\nPutPresencedefinitionRequest.putPresencedefinition(presenceId: presenceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutPresencedefinitionRequest.putPresencedefinition was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserspresencesbulk": {
    "operationId": "putuserspresencesbulk",
    "functionName": "putUsersPresencesBulk",
    "signature": "putUsersPresencesBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[UserPresence]",
        "required": "true"
      }
    ],
    "return": "[UserPresence]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [UserPresence] = [new UserPresence(...)] // List of User presences\n\n// Update bulk user Presences\nPutUsersPresencesBulkRequest.putUsersPresencesBulk(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUsersPresencesBulkRequest.putUsersPresencesBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "deletequalitycalibration": {
    "operationId": "deletequalitycalibration",
    "functionName": "deleteQualityCalibration",
    "signature": "deleteQualityCalibration(calibrationId, calibratorId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet calibrationId: String = \"\" // Calibration ID\nlet calibratorId: String = \"\" // calibratorId\n\n// Delete a calibration by id.\nDeleteQualityCalibrationRequest.deleteQualityCalibration(calibrationId: calibrationId, calibratorId: calibratorId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteQualityCalibrationRequest.deleteQualityCalibration was successful\")\n        dump(response)\n    }\n}"
  },
  "deletequalityconversationevaluation": {
    "operationId": "deletequalityconversationevaluation",
    "functionName": "deleteQualityConversationEvaluation",
    "signature": "deleteQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet evaluationId: String = \"\" // evaluationId\nlet expand: String = \"\" // evaluatorId, evaluationForm\n\n// Delete an evaluation\nDeleteQualityConversationEvaluationRequest.deleteQualityConversationEvaluation(conversationId: conversationId, evaluationId: evaluationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteQualityConversationEvaluationRequest.deleteQualityConversationEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "deletequalityform": {
    "operationId": "deletequalityform",
    "functionName": "deleteQualityForm",
    "signature": "deleteQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Delete an evaluation form.\nDeleteQualityFormRequest.deleteQualityForm(formId: formId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteQualityFormRequest.deleteQualityForm was successful\")\n    }\n}"
  },
  "deletequalityformsevaluation": {
    "operationId": "deletequalityformsevaluation",
    "functionName": "deleteQualityFormsEvaluation",
    "signature": "deleteQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Delete an evaluation form.\nDeleteQualityFormsEvaluationRequest.deleteQualityFormsEvaluation(formId: formId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteQualityFormsEvaluationRequest.deleteQualityFormsEvaluation was successful\")\n    }\n}"
  },
  "deletequalityformssurvey": {
    "operationId": "deletequalityformssurvey",
    "functionName": "deleteQualityFormsSurvey",
    "signature": "deleteQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Delete a survey form.\nDeleteQualityFormsSurveyRequest.deleteQualityFormsSurvey(formId: formId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteQualityFormsSurveyRequest.deleteQualityFormsSurvey was successful\")\n    }\n}"
  },
  "getqualityagentsactivity": {
    "operationId": "getqualityagentsactivity",
    "functionName": "getQualityAgentsActivity",
    "signature": "getQualityAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "AgentActivityEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet startTime: Date = new Date(...) // Start time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endTime: Date = new Date(...) // End time of agent activity based on assigned date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet agentUserId: [String] = [\"\"] // user id of agent requested\nlet evaluatorUserId: String = \"\" // user id of the evaluator\nlet name: String = \"\" // name\nlet group: String = \"\" // group id\n\n// Gets a list of Agent Activities\nGetQualityAgentsActivityRequest.getQualityAgentsActivity(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, name: name, group: group) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityAgentsActivityRequest.getQualityAgentsActivity was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitycalibration": {
    "operationId": "getqualitycalibration",
    "functionName": "getQualityCalibration",
    "signature": "getQualityCalibration(calibrationId, calibratorId, conversationId)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "calibratorId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet calibrationId: String = \"\" // Calibration ID\nlet calibratorId: String = \"\" // calibratorId\nlet conversationId: String = \"\" // conversationId\n\n// Get a calibration by id.  Requires either calibrator id or conversation id\nGetQualityCalibrationRequest.getQualityCalibration(calibrationId: calibrationId, calibratorId: calibratorId, conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityCalibrationRequest.getQualityCalibration was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitycalibrations": {
    "operationId": "getqualitycalibrations",
    "functionName": "getQualityCalibrations",
    "signature": "getQualityCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime)",
    "parameters": [
      {
        "name": "calibratorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      }
    ],
    "return": "CalibrationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet calibratorId: String = \"\" // user id of calibrator\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet conversationId: String = \"\" // conversation id\nlet startTime: Date = new Date(...) // Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endTime: Date = new Date(...) // end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\n\n// Get the list of calibrations\nGetQualityCalibrationsRequest.getQualityCalibrations(calibratorId: calibratorId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, startTime: startTime, endTime: endTime) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityCalibrationsRequest.getQualityCalibrations was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityconversationevaluation": {
    "operationId": "getqualityconversationevaluation",
    "functionName": "getQualityConversationEvaluation",
    "signature": "getQualityConversationEvaluation(conversationId, evaluationId, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet evaluationId: String = \"\" // evaluationId\nlet expand: String = \"\" // agent, evaluator, evaluationForm\n\n// Get an evaluation\nGetQualityConversationEvaluationRequest.getQualityConversationEvaluation(conversationId: conversationId, evaluationId: evaluationId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityConversationEvaluationRequest.getQualityConversationEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityconversationsurveys": {
    "operationId": "getqualityconversationsurveys",
    "functionName": "getQualityConversationSurveys",
    "signature": "getQualityConversationSurveys(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Survey]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get the surveys for a conversation\nGetQualityConversationSurveysRequest.getQualityConversationSurveys(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityConversationSurveysRequest.getQualityConversationSurveys was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityconversationsauditsquerytransactionid": {
    "operationId": "getqualityconversationsauditsquerytransactionid",
    "functionName": "getQualityConversationsAuditsQueryTransactionId",
    "signature": "getQualityConversationsAuditsQueryTransactionId(transactionId)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet transactionId: String = \"\" // Transaction ID\n\n// Get status of audit query execution\nGetQualityConversationsAuditsQueryTransactionIdRequest.getQualityConversationsAuditsQueryTransactionId(transactionId: transactionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityConversationsAuditsQueryTransactionIdRequest.getQualityConversationsAuditsQueryTransactionId was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityconversationsauditsquerytransactionidresults": {
    "operationId": "getqualityconversationsauditsquerytransactionidresults",
    "functionName": "getQualityConversationsAuditsQueryTransactionIdResults",
    "signature": "getQualityConversationsAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
    "parameters": [
      {
        "name": "transactionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QualityAuditQueryExecutionResultsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet transactionId: String = \"\" // Transaction ID\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\nlet pageSize: Int = 0 // Page size\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get results of audit query\nGetQualityConversationsAuditsQueryTransactionIdResultsRequest.getQualityConversationsAuditsQueryTransactionIdResults(transactionId: transactionId, cursor: cursor, pageSize: pageSize, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityConversationsAuditsQueryTransactionIdResultsRequest.getQualityConversationsAuditsQueryTransactionIdResults was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityevaluationsquery": {
    "operationId": "getqualityevaluationsquery",
    "functionName": "getQualityEvaluationsQuery",
    "signature": "getQualityEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "agentUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluatorUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "String",
        "required": "false"
      },
      {
        "name": "evaluationState",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "isReleased",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "agentHasRead",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "expandAnswerTotalScores",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "maximum",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet conversationId: String = \"\" // conversationId specified\nlet agentUserId: String = \"\" // user id of the agent\nlet evaluatorUserId: String = \"\" // evaluator user id\nlet queueId: String = \"\" // queue id\nlet startTime: String = \"\" // start time of the evaluation query\nlet endTime: String = \"\" // end time of the evaluation query\nlet evaluationState: [String] = [\"\"] // \nlet isReleased: Bool = true // the evaluation has been released\nlet agentHasRead: Bool = true // agent has the evaluation\nlet expandAnswerTotalScores: Bool = true // get the total scores for evaluations\nlet maximum: Int = 0 // maximum\nlet sortOrder: String = \"\" // sort order options for agentUserId or evaluatorUserId query. Valid options are 'a', 'asc', 'ascending', 'd', 'desc', 'descending'\n\n// Queries Evaluations and returns a paged list\nGetQualityEvaluationsQueryRequest.getQualityEvaluationsQuery(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, queueId: queueId, startTime: startTime, endTime: endTime, evaluationState: evaluationState, isReleased: isReleased, agentHasRead: agentHasRead, expandAnswerTotalScores: expandAnswerTotalScores, maximum: maximum, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityEvaluationsQueryRequest.getQualityEvaluationsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityevaluatorsactivity": {
    "operationId": "getqualityevaluatorsactivity",
    "functionName": "getQualityEvaluatorsActivity",
    "signature": "getQualityEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "startTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "endTime",
        "type": "Date",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "permission",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "group",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluatorActivityEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet startTime: Date = new Date(...) // The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet endTime: Date = new Date(...) // The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet name: String = \"\" // Evaluator name\nlet permission: [String] = [\"\"] // permission strings\nlet group: String = \"\" // group id\n\n// Get an evaluator activity\nGetQualityEvaluatorsActivityRequest.getQualityEvaluatorsActivity(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, name: name, permission: permission, group: group) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityEvaluatorsActivityRequest.getQualityEvaluatorsActivity was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityform": {
    "operationId": "getqualityform",
    "functionName": "getQualityForm",
    "signature": "getQualityForm(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get an evaluation form\nGetQualityFormRequest.getQualityForm(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormRequest.getQualityForm was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformversions": {
    "operationId": "getqualityformversions",
    "functionName": "getQualityFormVersions",
    "signature": "getQualityFormVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Gets all the revisions for a specific evaluation.\nGetQualityFormVersionsRequest.getQualityFormVersions(formId: formId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormVersionsRequest.getQualityFormVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityforms": {
    "operationId": "getqualityforms",
    "functionName": "getQualityForms",
    "signature": "getQualityForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name\nlet sortOrder: String = \"\" // Order to sort results, either asc or desc\n\n// Get the list of evaluation forms\nGetQualityFormsRequest.getQualityForms(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsRequest.getQualityForms was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformsevaluation": {
    "operationId": "getqualityformsevaluation",
    "functionName": "getQualityFormsEvaluation",
    "signature": "getQualityFormsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get an evaluation form\nGetQualityFormsEvaluationRequest.getQualityFormsEvaluation(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsEvaluationRequest.getQualityFormsEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformsevaluationversions": {
    "operationId": "getqualityformsevaluationversions",
    "functionName": "getQualityFormsEvaluationVersions",
    "signature": "getQualityFormsEvaluationVersions(formId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: String = \"\" // Sort order\n\n// Gets all the revisions for a specific evaluation.\nGetQualityFormsEvaluationVersionsRequest.getQualityFormsEvaluationVersions(formId: formId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsEvaluationVersionsRequest.getQualityFormsEvaluationVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformsevaluations": {
    "operationId": "getqualityformsevaluations",
    "functionName": "getQualityFormsEvaluations",
    "signature": "getQualityFormsEvaluations(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name\nlet sortOrder: String = \"\" // Order to sort results, either asc or desc\n\n// Get the list of evaluation forms\nGetQualityFormsEvaluationsRequest.getQualityFormsEvaluations(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsEvaluationsRequest.getQualityFormsEvaluations was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformsevaluationsbulkcontexts": {
    "operationId": "getqualityformsevaluationsbulkcontexts",
    "functionName": "getQualityFormsEvaluationsBulkContexts",
    "signature": "getQualityFormsEvaluationsBulkContexts(contextId)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[EvaluationForm]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contextId: [String] = [\"\"] // A comma-delimited list of valid evaluation form context ids\n\n// Retrieve a list of the latest published evaluation form versions by context ids\nGetQualityFormsEvaluationsBulkContextsRequest.getQualityFormsEvaluationsBulkContexts(contextId: contextId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsEvaluationsBulkContextsRequest.getQualityFormsEvaluationsBulkContexts was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformssurvey": {
    "operationId": "getqualityformssurvey",
    "functionName": "getQualityFormsSurvey",
    "signature": "getQualityFormsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get a survey form\nGetQualityFormsSurveyRequest.getQualityFormsSurvey(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsSurveyRequest.getQualityFormsSurvey was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformssurveyversions": {
    "operationId": "getqualityformssurveyversions",
    "functionName": "getQualityFormsSurveyVersions",
    "signature": "getQualityFormsSurveyVersions(formId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Gets all the revisions for a specific survey.\nGetQualityFormsSurveyVersionsRequest.getQualityFormsSurveyVersions(formId: formId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsSurveyVersionsRequest.getQualityFormsSurveyVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformssurveys": {
    "operationId": "getqualityformssurveys",
    "functionName": "getQualityFormsSurveys",
    "signature": "getQualityFormsSurveys(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name\nlet sortOrder: String = \"\" // Order to sort results, either asc or desc\n\n// Get the list of survey forms\nGetQualityFormsSurveysRequest.getQualityFormsSurveys(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsSurveysRequest.getQualityFormsSurveys was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformssurveysbulk": {
    "operationId": "getqualityformssurveysbulk",
    "functionName": "getQualityFormsSurveysBulk",
    "signature": "getQualityFormsSurveysBulk(_id)",
    "parameters": [
      {
        "name": "_id",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet _id: [String] = [\"\"] // A comma-delimited list of valid survey form ids\n\n// Retrieve a list of survey forms by their ids\nGetQualityFormsSurveysBulkRequest.getQualityFormsSurveysBulk(_id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsSurveysBulkRequest.getQualityFormsSurveysBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualityformssurveysbulkcontexts": {
    "operationId": "getqualityformssurveysbulkcontexts",
    "functionName": "getQualityFormsSurveysBulkContexts",
    "signature": "getQualityFormsSurveysBulkContexts(contextId, published)",
    "parameters": [
      {
        "name": "contextId",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "published",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "[SurveyForm]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet contextId: [String] = [\"\"] // A comma-delimited list of valid survey form context ids\nlet published: Bool = true // If true, the latest published version will be included. If false, only the unpublished version will be included.\n\n// Retrieve a list of the latest form versions by context ids\nGetQualityFormsSurveysBulkContextsRequest.getQualityFormsSurveysBulkContexts(contextId: contextId, published: published) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityFormsSurveysBulkContextsRequest.getQualityFormsSurveysBulkContexts was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedform": {
    "operationId": "getqualitypublishedform",
    "functionName": "getQualityPublishedform",
    "signature": "getQualityPublishedform(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get the published evaluation forms.\nGetQualityPublishedformRequest.getQualityPublishedform(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformRequest.getQualityPublishedform was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedforms": {
    "operationId": "getqualitypublishedforms",
    "functionName": "getQualityPublishedforms",
    "signature": "getQualityPublishedforms(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet onlyLatestPerContext: Bool = true // onlyLatestPerContext\n\n// Get the published evaluation forms.\nGetQualityPublishedformsRequest.getQualityPublishedforms(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestPerContext: onlyLatestPerContext) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformsRequest.getQualityPublishedforms was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedformsevaluation": {
    "operationId": "getqualitypublishedformsevaluation",
    "functionName": "getQualityPublishedformsEvaluation",
    "signature": "getQualityPublishedformsEvaluation(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get the most recent published version of an evaluation form.\nGetQualityPublishedformsEvaluationRequest.getQualityPublishedformsEvaluation(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformsEvaluationRequest.getQualityPublishedformsEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedformsevaluations": {
    "operationId": "getqualitypublishedformsevaluations",
    "functionName": "getQualityPublishedformsEvaluations",
    "signature": "getQualityPublishedformsEvaluations(pageSize, pageNumber, name, onlyLatestPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestPerContext",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "EvaluationFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet onlyLatestPerContext: Bool = true // onlyLatestPerContext\n\n// Get the published evaluation forms.\nGetQualityPublishedformsEvaluationsRequest.getQualityPublishedformsEvaluations(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestPerContext: onlyLatestPerContext) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformsEvaluationsRequest.getQualityPublishedformsEvaluations was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedformssurvey": {
    "operationId": "getqualitypublishedformssurvey",
    "functionName": "getQualityPublishedformsSurvey",
    "signature": "getQualityPublishedformsSurvey(formId)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\n\n// Get the most recent published version of a survey form.\nGetQualityPublishedformsSurveyRequest.getQualityPublishedformsSurvey(formId: formId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformsSurveyRequest.getQualityPublishedformsSurvey was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitypublishedformssurveys": {
    "operationId": "getqualitypublishedformssurveys",
    "functionName": "getQualityPublishedformsSurveys",
    "signature": "getQualityPublishedformsSurveys(pageSize, pageNumber, name, onlyLatestEnabledPerContext)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "onlyLatestEnabledPerContext",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "SurveyFormEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet onlyLatestEnabledPerContext: Bool = true // onlyLatestEnabledPerContext\n\n// Get the published survey forms.\nGetQualityPublishedformsSurveysRequest.getQualityPublishedformsSurveys(pageSize: pageSize, pageNumber: pageNumber, name: name, onlyLatestEnabledPerContext: onlyLatestEnabledPerContext) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualityPublishedformsSurveysRequest.getQualityPublishedformsSurveys was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitysurvey": {
    "operationId": "getqualitysurvey",
    "functionName": "getQualitySurvey",
    "signature": "getQualitySurvey(surveyId)",
    "parameters": [
      {
        "name": "surveyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Survey",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet surveyId: String = \"\" // surveyId\n\n// Get a survey for a conversation\nGetQualitySurveyRequest.getQualitySurvey(surveyId: surveyId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualitySurveyRequest.getQualitySurvey was successful\")\n        dump(response)\n    }\n}"
  },
  "getqualitysurveysscorable": {
    "operationId": "getqualitysurveysscorable",
    "functionName": "getQualitySurveysScorable",
    "signature": "getQualitySurveysScorable(customerSurveyUrl)",
    "parameters": [
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet customerSurveyUrl: String = \"\" // customerSurveyUrl\n\n// Get a survey as an end-customer, for the purposes of scoring it.\nGetQualitySurveysScorableRequest.getQualitySurveysScorable(customerSurveyUrl: customerSurveyUrl) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetQualitySurveysScorableRequest.getQualitySurveysScorable was successful\")\n        dump(response)\n    }\n}"
  },
  "patchqualityformssurvey": {
    "operationId": "patchqualityformssurvey",
    "functionName": "patchQualityFormsSurvey",
    "signature": "patchQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SurveyForm",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet body: SurveyForm = new SurveyForm(...) // Survey form\n\n// Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.\nPatchQualityFormsSurveyRequest.patchQualityFormsSurvey(formId: formId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchQualityFormsSurveyRequest.patchQualityFormsSurvey was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualitycalibrations": {
    "operationId": "postqualitycalibrations",
    "functionName": "postQualityCalibrations",
    "signature": "postQualityCalibrations(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "CalibrationCreate",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Calibration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CalibrationCreate = new CalibrationCreate(...) // calibration\nlet expand: String = \"\" // calibratorId\n\n// Create a calibration\nPostQualityCalibrationsRequest.postQualityCalibrations(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityCalibrationsRequest.postQualityCalibrations was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityconversationevaluations": {
    "operationId": "postqualityconversationevaluations",
    "functionName": "postQualityConversationEvaluations",
    "signature": "postQualityConversationEvaluations(conversationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Evaluation",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet body: Evaluation = new Evaluation(...) // evaluation\nlet expand: String = \"\" // evaluatorId\n\n// Create an evaluation\nPostQualityConversationEvaluationsRequest.postQualityConversationEvaluations(conversationId: conversationId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityConversationEvaluationsRequest.postQualityConversationEvaluations was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityconversationsauditsquery": {
    "operationId": "postqualityconversationsauditsquery",
    "functionName": "postQualityConversationsAuditsQuery",
    "signature": "postQualityConversationsAuditsQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "QMAuditQueryRequest",
        "required": "true"
      }
    ],
    "return": "QualityAuditQueryExecutionStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: QMAuditQueryRequest = new QMAuditQueryRequest(...) // query\n\n// Create audit query execution\nPostQualityConversationsAuditsQueryRequest.postQualityConversationsAuditsQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityConversationsAuditsQueryRequest.postQualityConversationsAuditsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityevaluationsaggregatesqueryme": {
    "operationId": "postqualityevaluationsaggregatesqueryme",
    "functionName": "postQualityEvaluationsAggregatesQueryMe",
    "signature": "postQualityEvaluationsAggregatesQueryMe(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EvaluationAggregationQueryMe",
        "required": "true"
      }
    ],
    "return": "EvaluationAggregateQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EvaluationAggregationQueryMe = new EvaluationAggregationQueryMe(...) // query\n\n// Query for evaluation aggregates for the current user\nPostQualityEvaluationsAggregatesQueryMeRequest.postQualityEvaluationsAggregatesQueryMe(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityEvaluationsAggregatesQueryMeRequest.postQualityEvaluationsAggregatesQueryMe was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityevaluationsscoring": {
    "operationId": "postqualityevaluationsscoring",
    "functionName": "postQualityEvaluationsScoring",
    "signature": "postQualityEvaluationsScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EvaluationFormAndScoringSet",
        "required": "true"
      }
    ],
    "return": "EvaluationScoringSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EvaluationFormAndScoringSet = new EvaluationFormAndScoringSet(...) // evaluationAndScoringSet\n\n// Score evaluation\nPostQualityEvaluationsScoringRequest.postQualityEvaluationsScoring(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityEvaluationsScoringRequest.postQualityEvaluationsScoring was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityforms": {
    "operationId": "postqualityforms",
    "functionName": "postQualityForms",
    "signature": "postQualityForms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EvaluationForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EvaluationForm = new EvaluationForm(...) // Evaluation form\n\n// Create an evaluation form.\nPostQualityFormsRequest.postQualityForms(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityFormsRequest.postQualityForms was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityformsevaluations": {
    "operationId": "postqualityformsevaluations",
    "functionName": "postQualityFormsEvaluations",
    "signature": "postQualityFormsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EvaluationForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EvaluationForm = new EvaluationForm(...) // Evaluation form\n\n// Create an evaluation form.\nPostQualityFormsEvaluationsRequest.postQualityFormsEvaluations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityFormsEvaluationsRequest.postQualityFormsEvaluations was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualityformssurveys": {
    "operationId": "postqualityformssurveys",
    "functionName": "postQualityFormsSurveys",
    "signature": "postQualityFormsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SurveyForm",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SurveyForm = new SurveyForm(...) // Survey form\n\n// Create a survey form.\nPostQualityFormsSurveysRequest.postQualityFormsSurveys(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityFormsSurveysRequest.postQualityFormsSurveys was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualitypublishedforms": {
    "operationId": "postqualitypublishedforms",
    "functionName": "postQualityPublishedforms",
    "signature": "postQualityPublishedforms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PublishForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PublishForm = new PublishForm(...) // Publish request containing id of form to publish\n\n// Publish an evaluation form.\nPostQualityPublishedformsRequest.postQualityPublishedforms(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityPublishedformsRequest.postQualityPublishedforms was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualitypublishedformsevaluations": {
    "operationId": "postqualitypublishedformsevaluations",
    "functionName": "postQualityPublishedformsEvaluations",
    "signature": "postQualityPublishedformsEvaluations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PublishForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PublishForm = new PublishForm(...) // Publish request containing id of form to publish\n\n// Publish an evaluation form.\nPostQualityPublishedformsEvaluationsRequest.postQualityPublishedformsEvaluations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityPublishedformsEvaluationsRequest.postQualityPublishedformsEvaluations was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualitypublishedformssurveys": {
    "operationId": "postqualitypublishedformssurveys",
    "functionName": "postQualityPublishedformsSurveys",
    "signature": "postQualityPublishedformsSurveys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PublishForm",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PublishForm = new PublishForm(...) // Survey form\n\n// Publish a survey form.\nPostQualityPublishedformsSurveysRequest.postQualityPublishedformsSurveys(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualityPublishedformsSurveysRequest.postQualityPublishedformsSurveys was successful\")\n        dump(response)\n    }\n}"
  },
  "postqualitysurveysscoring": {
    "operationId": "postqualitysurveysscoring",
    "functionName": "postQualitySurveysScoring",
    "signature": "postQualitySurveysScoring(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SurveyFormAndScoringSet",
        "required": "true"
      }
    ],
    "return": "SurveyScoringSet",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SurveyFormAndScoringSet = new SurveyFormAndScoringSet(...) // surveyAndScoringSet\n\n// Score survey\nPostQualitySurveysScoringRequest.postQualitySurveysScoring(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostQualitySurveysScoringRequest.postQualitySurveysScoring was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualitycalibration": {
    "operationId": "putqualitycalibration",
    "functionName": "putQualityCalibration",
    "signature": "putQualityCalibration(calibrationId, body)",
    "parameters": [
      {
        "name": "calibrationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Calibration",
        "required": "true"
      }
    ],
    "return": "Calibration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet calibrationId: String = \"\" // Calibration ID\nlet body: Calibration = new Calibration(...) // Calibration\n\n// Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex\nPutQualityCalibrationRequest.putQualityCalibration(calibrationId: calibrationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualityCalibrationRequest.putQualityCalibration was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualityconversationevaluation": {
    "operationId": "putqualityconversationevaluation",
    "functionName": "putQualityConversationEvaluation",
    "signature": "putQualityConversationEvaluation(conversationId, evaluationId, body, expand)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "evaluationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Evaluation",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Evaluation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet evaluationId: String = \"\" // evaluationId\nlet body: Evaluation = new Evaluation(...) // evaluation\nlet expand: String = \"\" // evaluatorId, evaluationForm\n\n// Update an evaluation\nPutQualityConversationEvaluationRequest.putQualityConversationEvaluation(conversationId: conversationId, evaluationId: evaluationId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualityConversationEvaluationRequest.putQualityConversationEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualityform": {
    "operationId": "putqualityform",
    "functionName": "putQualityForm",
    "signature": "putQualityForm(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EvaluationForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet body: EvaluationForm = new EvaluationForm(...) // Evaluation form\n\n// Update an evaluation form.\nPutQualityFormRequest.putQualityForm(formId: formId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualityFormRequest.putQualityForm was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualityformsevaluation": {
    "operationId": "putqualityformsevaluation",
    "functionName": "putQualityFormsEvaluation",
    "signature": "putQualityFormsEvaluation(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EvaluationForm",
        "required": "true"
      }
    ],
    "return": "EvaluationForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet body: EvaluationForm = new EvaluationForm(...) // Evaluation form\n\n// Update an evaluation form.\nPutQualityFormsEvaluationRequest.putQualityFormsEvaluation(formId: formId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualityFormsEvaluationRequest.putQualityFormsEvaluation was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualityformssurvey": {
    "operationId": "putqualityformssurvey",
    "functionName": "putQualityFormsSurvey",
    "signature": "putQualityFormsSurvey(formId, body)",
    "parameters": [
      {
        "name": "formId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SurveyForm",
        "required": "true"
      }
    ],
    "return": "SurveyForm",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet formId: String = \"\" // Form ID\nlet body: SurveyForm = new SurveyForm(...) // Survey form\n\n// Update a survey form.\nPutQualityFormsSurveyRequest.putQualityFormsSurvey(formId: formId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualityFormsSurveyRequest.putQualityFormsSurvey was successful\")\n        dump(response)\n    }\n}"
  },
  "putqualitysurveysscorable": {
    "operationId": "putqualitysurveysscorable",
    "functionName": "putQualitySurveysScorable",
    "signature": "putQualitySurveysScorable(customerSurveyUrl, body)",
    "parameters": [
      {
        "name": "customerSurveyUrl",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScorableSurvey",
        "required": "true"
      }
    ],
    "return": "ScorableSurvey",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet customerSurveyUrl: String = \"\" // customerSurveyUrl\nlet body: ScorableSurvey = new ScorableSurvey(...) // survey\n\n// Update a survey as an end-customer, for the purposes of scoring it.\nPutQualitySurveysScorableRequest.putQualitySurveysScorable(customerSurveyUrl: customerSurveyUrl, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutQualitySurveysScorableRequest.putQualitySurveysScorable was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteconversationrecordingannotation": {
    "operationId": "deleteconversationrecordingannotation",
    "functionName": "deleteConversationRecordingAnnotation",
    "signature": "deleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet annotationId: String = \"\" // Annotation ID\n\n// Delete annotation\nDeleteConversationRecordingAnnotationRequest.deleteConversationRecordingAnnotation(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteConversationRecordingAnnotationRequest.deleteConversationRecordingAnnotation was successful\")\n    }\n}"
  },
  "deleteorphanrecording": {
    "operationId": "deleteorphanrecording",
    "functionName": "deleteOrphanrecording",
    "signature": "deleteOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet orphanId: String = \"\" // Orphan ID\n\n// Deletes a single orphan recording\nDeleteOrphanrecordingRequest.deleteOrphanrecording(orphanId: orphanId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteOrphanrecordingRequest.deleteOrphanrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "deleterecordingcrossplatformmediaretentionpolicies": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicies",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ids: String = \"\" // \n\n// Delete media retention policies\nDeleteRecordingCrossplatformMediaretentionpoliciesRequest.deleteRecordingCrossplatformMediaretentionpolicies(ids: ids) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRecordingCrossplatformMediaretentionpoliciesRequest.deleteRecordingCrossplatformMediaretentionpolicies was successful\")\n    }\n}"
  },
  "deleterecordingcrossplatformmediaretentionpolicy": {
    "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
    "functionName": "deleteRecordingCrossplatformMediaretentionpolicy",
    "signature": "deleteRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\n\n// Delete a media retention policy\nDeleteRecordingCrossplatformMediaretentionpolicyRequest.deleteRecordingCrossplatformMediaretentionpolicy(policyId: policyId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRecordingCrossplatformMediaretentionpolicyRequest.deleteRecordingCrossplatformMediaretentionpolicy was successful\")\n    }\n}"
  },
  "deleterecordingjob": {
    "operationId": "deleterecordingjob",
    "functionName": "deleteRecordingJob",
    "signature": "deleteRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Delete the recording bulk job\nDeleteRecordingJobRequest.deleteRecordingJob(jobId: jobId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRecordingJobRequest.deleteRecordingJob was successful\")\n    }\n}"
  },
  "deleterecordingmediaretentionpolicies": {
    "operationId": "deleterecordingmediaretentionpolicies",
    "functionName": "deleteRecordingMediaretentionpolicies",
    "signature": "deleteRecordingMediaretentionpolicies(ids)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ids: String = \"\" // \n\n// Delete media retention policies\nDeleteRecordingMediaretentionpoliciesRequest.deleteRecordingMediaretentionpolicies(ids: ids) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRecordingMediaretentionpoliciesRequest.deleteRecordingMediaretentionpolicies was successful\")\n    }\n}"
  },
  "deleterecordingmediaretentionpolicy": {
    "operationId": "deleterecordingmediaretentionpolicy",
    "functionName": "deleteRecordingMediaretentionpolicy",
    "signature": "deleteRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\n\n// Delete a media retention policy\nDeleteRecordingMediaretentionpolicyRequest.deleteRecordingMediaretentionpolicy(policyId: policyId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRecordingMediaretentionpolicyRequest.deleteRecordingMediaretentionpolicy was successful\")\n    }\n}"
  },
  "getconversationrecording": {
    "operationId": "getconversationrecording",
    "functionName": "getConversationRecording",
    "signature": "getConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet formatId: GetConversationRecordingRequest.FormatId_getConversationRecording = GetConversationRecordingRequest.FormatId_getConversationRecording.enummember // The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE\nlet emailFormatId: GetConversationRecordingRequest.EmailFormatId_getConversationRecording = GetConversationRecordingRequest.EmailFormatId_getConversationRecording.enummember // The desired media format when downloading an email recording. Valid values:EML,NONE\nlet chatFormatId: GetConversationRecordingRequest.ChatFormatId_getConversationRecording = GetConversationRecordingRequest.ChatFormatId_getConversationRecording.enummember // The desired media format when downloading a chat recording. Valid values:ZIP,NONE \nlet messageFormatId: GetConversationRecordingRequest.MessageFormatId_getConversationRecording = GetConversationRecordingRequest.MessageFormatId_getConversationRecording.enummember // The desired media format when downloading a message recording. Valid values:ZIP,NONE\nlet download: Bool = true // requesting a download format of the recording. Valid values:true,false\nlet fileName: String = \"\" // the name of the downloaded fileName\nlet locale: String = \"\" // The locale for the requested file when downloading, as an ISO 639-1 code\nlet mediaFormats: [String] = [\"\"] // All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n\n// Gets a specific recording.\nGetConversationRecordingRequest.getConversationRecording(conversationId: conversationId, recordingId: recordingId, formatId: formatId, emailFormatId: emailFormatId, chatFormatId: chatFormatId, messageFormatId: messageFormatId, download: download, fileName: fileName, locale: locale, mediaFormats: mediaFormats) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingRequest.getConversationRecording was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationrecordingannotation": {
    "operationId": "getconversationrecordingannotation",
    "functionName": "getConversationRecordingAnnotation",
    "signature": "getConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet annotationId: String = \"\" // Annotation ID\n\n// Get annotation\nGetConversationRecordingAnnotationRequest.getConversationRecordingAnnotation(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingAnnotationRequest.getConversationRecordingAnnotation was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationrecordingannotations": {
    "operationId": "getconversationrecordingannotations",
    "functionName": "getConversationRecordingAnnotations",
    "signature": "getConversationRecordingAnnotations(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[Annotation]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\n\n// Get annotations for recording\nGetConversationRecordingAnnotationsRequest.getConversationRecordingAnnotations(conversationId: conversationId, recordingId: recordingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingAnnotationsRequest.getConversationRecordingAnnotations was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationrecordingmetadata": {
    "operationId": "getconversationrecordingmetadata",
    "functionName": "getConversationRecordingmetadata",
    "signature": "getConversationRecordingmetadata(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[RecordingMetadata]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\n\n// Get recording metadata for a conversation. Does not return playable media. Annotations won't be included in the response if recording:recording:view permission is missing.\nGetConversationRecordingmetadataRequest.getConversationRecordingmetadata(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingmetadataRequest.getConversationRecordingmetadata was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationrecordingmetadatarecordingid": {
    "operationId": "getconversationrecordingmetadatarecordingid",
    "functionName": "getConversationRecordingmetadataRecordingId",
    "signature": "getConversationRecordingmetadataRecordingId(conversationId, recordingId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingMetadata",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\n\n// Get metadata for a specific recording. Does not return playable media.\nGetConversationRecordingmetadataRecordingIdRequest.getConversationRecordingmetadataRecordingId(conversationId: conversationId, recordingId: recordingId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingmetadataRecordingIdRequest.getConversationRecordingmetadataRecordingId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconversationrecordings": {
    "operationId": "getconversationrecordings",
    "functionName": "getConversationRecordings",
    "signature": "getConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "maxWaitMs",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[Recording]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet maxWaitMs: Int = 0 // The maximum number of milliseconds to wait for the recording to be ready. Must be a positive value.\nlet formatId: GetConversationRecordingsRequest.FormatId_getConversationRecordings = GetConversationRecordingsRequest.FormatId_getConversationRecordings.enummember // The desired media format. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3,NONE.\nlet mediaFormats: [String] = [\"\"] // All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3.\n\n// Get all of a Conversation's Recordings.\nGetConversationRecordingsRequest.getConversationRecordings(conversationId: conversationId, maxWaitMs: maxWaitMs, formatId: formatId, mediaFormats: mediaFormats) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConversationRecordingsRequest.getConversationRecordings was successful\")\n        dump(response)\n    }\n}"
  },
  "getorphanrecording": {
    "operationId": "getorphanrecording",
    "functionName": "getOrphanrecording",
    "signature": "getOrphanrecording(orphanId)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OrphanRecording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet orphanId: String = \"\" // Orphan ID\n\n// Gets a single orphan recording\nGetOrphanrecordingRequest.getOrphanrecording(orphanId: orphanId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrphanrecordingRequest.getOrphanrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "getorphanrecordingmedia": {
    "operationId": "getorphanrecordingmedia",
    "functionName": "getOrphanrecordingMedia",
    "signature": "getOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "emailFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "chatFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "messageFormatId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "download",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "fileName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locale",
        "type": "String",
        "required": "false"
      },
      {
        "name": "mediaFormats",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet orphanId: String = \"\" // Orphan ID\nlet formatId: GetOrphanrecordingMediaRequest.FormatId_getOrphanrecordingMedia = GetOrphanrecordingMediaRequest.FormatId_getOrphanrecordingMedia.enummember // The desired media format.\nlet emailFormatId: GetOrphanrecordingMediaRequest.EmailFormatId_getOrphanrecordingMedia = GetOrphanrecordingMediaRequest.EmailFormatId_getOrphanrecordingMedia.enummember // The desired media format when downloading an email recording.\nlet chatFormatId: GetOrphanrecordingMediaRequest.ChatFormatId_getOrphanrecordingMedia = GetOrphanrecordingMediaRequest.ChatFormatId_getOrphanrecordingMedia.enummember // The desired media format when downloading a chat recording.\nlet messageFormatId: GetOrphanrecordingMediaRequest.MessageFormatId_getOrphanrecordingMedia = GetOrphanrecordingMediaRequest.MessageFormatId_getOrphanrecordingMedia.enummember // The desired media format when downloading a message recording.\nlet download: Bool = true // requesting a download format of the recording\nlet fileName: String = \"\" // the name of the downloaded fileName\nlet locale: String = \"\" // The locale for the requested file when downloading, as an ISO 639-1 code\nlet mediaFormats: [String] = [\"\"] // All acceptable media formats. Overrides formatId. Valid values:WAV,WEBM,WAV_ULAW,OGG_VORBIS,OGG_OPUS,MP3\n\n// Gets the media of a single orphan recording\nGetOrphanrecordingMediaRequest.getOrphanrecordingMedia(orphanId: orphanId, formatId: formatId, emailFormatId: emailFormatId, chatFormatId: chatFormatId, messageFormatId: messageFormatId, download: download, fileName: fileName, locale: locale, mediaFormats: mediaFormats) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrphanrecordingMediaRequest.getOrphanrecordingMedia was successful\")\n        dump(response)\n    }\n}"
  },
  "getorphanrecordings": {
    "operationId": "getorphanrecordings",
    "functionName": "getOrphanrecordings",
    "signature": "getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "hasConversation",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "media",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OrphanRecordingListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet hasConversation: Bool = true // Filter resulting orphans by whether the conversation is known. False returns all orphans for the organization.\nlet media: GetOrphanrecordingsRequest.Media_getOrphanrecordings = GetOrphanrecordingsRequest.Media_getOrphanrecordings.enummember // Filter resulting orphans based on their media type\n\n// Gets all orphan recordings\nGetOrphanrecordingsRequest.getOrphanrecordings(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, hasConversation: hasConversation, media: media) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetOrphanrecordingsRequest.getOrphanrecordings was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingbatchrequest": {
    "operationId": "getrecordingbatchrequest",
    "functionName": "getRecordingBatchrequest",
    "signature": "getRecordingBatchrequest(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobStatusResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Get the status and results for a batch request job, only the user that submitted the job may retrieve results\nGetRecordingBatchrequestRequest.getRecordingBatchrequest(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingBatchrequestRequest.getRecordingBatchrequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicies",
    "functionName": "getRecordingCrossplatformMediaretentionpolicies",
    "signature": "getRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "deleteDaysThreshold",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet name: String = \"\" // the policy name - used for filtering results in searches.\nlet enabled: Bool = true // checks to see if policy is enabled - use enabled = true or enabled = false\nlet summary: Bool = true // provides a less verbose response of policy lists.\nlet hasErrors: Bool = true // provides a way to fetch all policies with errors or policies that do not have errors\nlet deleteDaysThreshold: Int = 0 // provides a way to fetch all policies with any actions having deleteDays exceeding the provided value\n\n// Gets media retention policy list with query options to filter on name and enabled.\nGetRecordingCrossplatformMediaretentionpoliciesRequest.getRecordingCrossplatformMediaretentionpolicies(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, enabled: enabled, summary: summary, hasErrors: hasErrors, deleteDaysThreshold: deleteDaysThreshold) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingCrossplatformMediaretentionpoliciesRequest.getRecordingCrossplatformMediaretentionpolicies was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "getrecordingcrossplatformmediaretentionpolicy",
    "functionName": "getRecordingCrossplatformMediaretentionpolicy",
    "signature": "getRecordingCrossplatformMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\n\n// Get a media retention policy\nGetRecordingCrossplatformMediaretentionpolicyRequest.getRecordingCrossplatformMediaretentionpolicy(policyId: policyId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingCrossplatformMediaretentionpolicyRequest.getRecordingCrossplatformMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingjob": {
    "operationId": "getrecordingjob",
    "functionName": "getRecordingJob",
    "signature": "getRecordingJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\n\n// Get the status of the job associated with the job id.\nGetRecordingJobRequest.getRecordingJob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingJobRequest.getRecordingJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingjobfailedrecordings": {
    "operationId": "getrecordingjobfailedrecordings",
    "functionName": "getRecordingJobFailedrecordings",
    "signature": "getRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "FailedRecordingEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\nlet pageSize: Int = 0 // Page size. Maximum is 100.\nlet pageNumber: Int = 0 // Page number\nlet includeTotal: Bool = true // If false, cursor will be used to locate the page instead of pageNumber.\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\n\n// Get IDs of recordings that the bulk job failed for\nGetRecordingJobFailedrecordingsRequest.getRecordingJobFailedrecordings(jobId: jobId, pageSize: pageSize, pageNumber: pageNumber, includeTotal: includeTotal, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingJobFailedrecordingsRequest.getRecordingJobFailedrecordings was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingjobs": {
    "operationId": "getrecordingjobs",
    "functionName": "getRecordingJobs",
    "signature": "getRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "showOnlyMyJobs",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "jobType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "includeTotal",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "cursor",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "RecordingJobEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: GetRecordingJobsRequest.SortBy_getRecordingJobs = GetRecordingJobsRequest.SortBy_getRecordingJobs.enummember // Sort by\nlet state: GetRecordingJobsRequest.State_getRecordingJobs = GetRecordingJobsRequest.State_getRecordingJobs.enummember // Filter by state\nlet showOnlyMyJobs: Bool = true // Show only my jobs\nlet jobType: GetRecordingJobsRequest.JobType_getRecordingJobs = GetRecordingJobsRequest.JobType_getRecordingJobs.enummember // Job Type (Can be left empty for both)\nlet includeTotal: Bool = true // If false, cursor will be used to locate the page instead of pageNumber.\nlet cursor: String = \"\" // Indicates where to resume query results (not required for first page)\n\n// Get the status of all jobs within the user's organization\nGetRecordingJobsRequest.getRecordingJobs(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, state: state, showOnlyMyJobs: showOnlyMyJobs, jobType: jobType, includeTotal: includeTotal, cursor: cursor) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingJobsRequest.getRecordingJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingkeyconfiguration": {
    "operationId": "getrecordingkeyconfiguration",
    "functionName": "getRecordingKeyconfiguration",
    "signature": "getRecordingKeyconfiguration(keyConfigurationId)",
    "parameters": [
      {
        "name": "keyConfigurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet keyConfigurationId: String = \"\" // Key Configurations Id\n\n// Get the encryption key configurations\nGetRecordingKeyconfigurationRequest.getRecordingKeyconfiguration(keyConfigurationId: keyConfigurationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingKeyconfigurationRequest.getRecordingKeyconfiguration was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingkeyconfigurations": {
    "operationId": "getrecordingkeyconfigurations",
    "functionName": "getRecordingKeyconfigurations",
    "signature": "getRecordingKeyconfigurations()",
    "return": "RecordingEncryptionConfigurationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of key configurations data\nGetRecordingKeyconfigurationsRequest.getRecordingKeyconfigurations() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingKeyconfigurationsRequest.getRecordingKeyconfigurations was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordinglocalkeyssetting": {
    "operationId": "getrecordinglocalkeyssetting",
    "functionName": "getRecordingLocalkeysSetting",
    "signature": "getRecordingLocalkeysSetting(settingsId)",
    "parameters": [
      {
        "name": "settingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet settingsId: String = \"\" // Settings Id\n\n// Get the local encryption settings\nGetRecordingLocalkeysSettingRequest.getRecordingLocalkeysSetting(settingsId: settingsId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingLocalkeysSettingRequest.getRecordingLocalkeysSetting was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordinglocalkeyssettings": {
    "operationId": "getrecordinglocalkeyssettings",
    "functionName": "getRecordingLocalkeysSettings",
    "signature": "getRecordingLocalkeysSettings()",
    "return": "LocalEncryptionConfigurationListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// gets a list local key settings data\nGetRecordingLocalkeysSettingsRequest.getRecordingLocalkeysSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingLocalkeysSettingsRequest.getRecordingLocalkeysSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingmediaretentionpolicies": {
    "operationId": "getrecordingmediaretentionpolicies",
    "functionName": "getRecordingMediaretentionpolicies",
    "signature": "getRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "previousPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "enabled",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "summary",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "hasErrors",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "deleteDaysThreshold",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "PolicyEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // The total page size requested\nlet pageNumber: Int = 0 // The page number requested\nlet sortBy: String = \"\" // variable name requested to sort by\nlet expand: [String] = [\"\"] // variable name requested by expand list\nlet nextPage: String = \"\" // next page token\nlet previousPage: String = \"\" // Previous page token\nlet name: String = \"\" // the policy name - used for filtering results in searches.\nlet enabled: Bool = true // checks to see if policy is enabled - use enabled = true or enabled = false\nlet summary: Bool = true // provides a less verbose response of policy lists.\nlet hasErrors: Bool = true // provides a way to fetch all policies with errors or policies that do not have errors\nlet deleteDaysThreshold: Int = 0 // provides a way to fetch all policies with any actions having deleteDays exceeding the provided value\n\n// Gets media retention policy list with query options to filter on name and enabled.\nGetRecordingMediaretentionpoliciesRequest.getRecordingMediaretentionpolicies(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, enabled: enabled, summary: summary, hasErrors: hasErrors, deleteDaysThreshold: deleteDaysThreshold) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingMediaretentionpoliciesRequest.getRecordingMediaretentionpolicies was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingmediaretentionpolicy": {
    "operationId": "getrecordingmediaretentionpolicy",
    "functionName": "getRecordingMediaretentionpolicy",
    "signature": "getRecordingMediaretentionpolicy(policyId)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\n\n// Get a media retention policy\nGetRecordingMediaretentionpolicyRequest.getRecordingMediaretentionpolicy(policyId: policyId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingMediaretentionpolicyRequest.getRecordingMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingrecordingkeys": {
    "operationId": "getrecordingrecordingkeys",
    "functionName": "getRecordingRecordingkeys",
    "signature": "getRecordingRecordingkeys(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "EncryptionKeyEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get encryption key list\nGetRecordingRecordingkeysRequest.getRecordingRecordingkeys(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingRecordingkeysRequest.getRecordingRecordingkeys was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingrecordingkeysrotationschedule": {
    "operationId": "getrecordingrecordingkeysrotationschedule",
    "functionName": "getRecordingRecordingkeysRotationschedule",
    "signature": "getRecordingRecordingkeysRotationschedule()",
    "return": "KeyRotationSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get key rotation schedule\nGetRecordingRecordingkeysRotationscheduleRequest.getRecordingRecordingkeysRotationschedule() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingRecordingkeysRotationscheduleRequest.getRecordingRecordingkeysRotationschedule was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingsettings": {
    "operationId": "getrecordingsettings",
    "functionName": "getRecordingSettings",
    "signature": "getRecordingSettings(createDefault)",
    "parameters": [
      {
        "name": "createDefault",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "RecordingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet createDefault: Bool = true // If no settings are found, a new one is created with default values\n\n// Get the Recording Settings for the Organization\nGetRecordingSettingsRequest.getRecordingSettings(createDefault: createDefault) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingSettingsRequest.getRecordingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getrecordingsscreensessions": {
    "operationId": "getrecordingsscreensessions",
    "functionName": "getRecordingsScreensessions",
    "signature": "getRecordingsScreensessions(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ScreenRecordingSessionListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Retrieves a paged listing of screen recording sessions\nGetRecordingsScreensessionsRequest.getRecordingsScreensessions(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRecordingsScreensessionsRequest.getRecordingsScreensessions was successful\")\n        dump(response)\n    }\n}"
  },
  "patchrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
    "functionName": "patchRecordingCrossplatformMediaretentionpolicy",
    "signature": "patchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CrossPlatformPolicyUpdate",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\nlet body: CrossPlatformPolicyUpdate = new CrossPlatformPolicyUpdate(...) // Policy\n\n// Patch a media retention policy\nPatchRecordingCrossplatformMediaretentionpolicyRequest.patchRecordingCrossplatformMediaretentionpolicy(policyId: policyId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRecordingCrossplatformMediaretentionpolicyRequest.patchRecordingCrossplatformMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "patchrecordingmediaretentionpolicy": {
    "operationId": "patchrecordingmediaretentionpolicy",
    "functionName": "patchRecordingMediaretentionpolicy",
    "signature": "patchRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PolicyUpdate",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\nlet body: PolicyUpdate = new PolicyUpdate(...) // Policy\n\n// Patch a media retention policy\nPatchRecordingMediaretentionpolicyRequest.patchRecordingMediaretentionpolicy(policyId: policyId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRecordingMediaretentionpolicyRequest.patchRecordingMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "patchrecordingsscreensession": {
    "operationId": "patchrecordingsscreensession",
    "functionName": "patchRecordingsScreensession",
    "signature": "patchRecordingsScreensession(recordingSessionId, body)",
    "parameters": [
      {
        "name": "recordingSessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScreenRecordingSessionRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recordingSessionId: String = \"\" // Screen recording session ID\nlet body: ScreenRecordingSessionRequest = new ScreenRecordingSessionRequest(...) // \n\n// Update a screen recording session\nPatchRecordingsScreensessionRequest.patchRecordingsScreensession(recordingSessionId: recordingSessionId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchRecordingsScreensessionRequest.patchRecordingsScreensession was successful\")\n    }\n}"
  },
  "postconversationrecordingannotations": {
    "operationId": "postconversationrecordingannotations",
    "functionName": "postConversationRecordingAnnotations",
    "signature": "postConversationRecordingAnnotations(conversationId, recordingId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Annotation",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet body: Annotation = new Annotation(...) // annotation\n\n// Create annotation\nPostConversationRecordingAnnotationsRequest.postConversationRecordingAnnotations(conversationId: conversationId, recordingId: recordingId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostConversationRecordingAnnotationsRequest.postConversationRecordingAnnotations was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingbatchrequests": {
    "operationId": "postrecordingbatchrequests",
    "functionName": "postRecordingBatchrequests",
    "signature": "postRecordingBatchrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BatchDownloadJobSubmission",
        "required": "true"
      }
    ],
    "return": "BatchDownloadJobSubmissionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BatchDownloadJobSubmission = new BatchDownloadJobSubmission(...) // Job submission criteria\n\n// Submit a batch download request for recordings. Recordings in response will be in their original format/codec - configured in the Trunk configuration.\nPostRecordingBatchrequestsRequest.postRecordingBatchrequests(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingBatchrequestsRequest.postRecordingBatchrequests was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingcrossplatformmediaretentionpolicies": {
    "operationId": "postrecordingcrossplatformmediaretentionpolicies",
    "functionName": "postRecordingCrossplatformMediaretentionpolicies",
    "signature": "postRecordingCrossplatformMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CrossPlatformPolicyCreate",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CrossPlatformPolicyCreate = new CrossPlatformPolicyCreate(...) // Policy\n\n// Create media retention policy\nPostRecordingCrossplatformMediaretentionpoliciesRequest.postRecordingCrossplatformMediaretentionpolicies(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingCrossplatformMediaretentionpoliciesRequest.postRecordingCrossplatformMediaretentionpolicies was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingjobs": {
    "operationId": "postrecordingjobs",
    "functionName": "postRecordingJobs",
    "signature": "postRecordingJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RecordingJobsQuery",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RecordingJobsQuery = new RecordingJobsQuery(...) // query\n\n// Create a recording bulk job.\nPostRecordingJobsRequest.postRecordingJobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingJobsRequest.postRecordingJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingkeyconfigurations": {
    "operationId": "postrecordingkeyconfigurations",
    "functionName": "postRecordingKeyconfigurations",
    "signature": "postRecordingKeyconfigurations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RecordingEncryptionConfiguration",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RecordingEncryptionConfiguration = new RecordingEncryptionConfiguration(...) // Encryption Configuration\n\n// Setup configurations for encryption key creation\nPostRecordingKeyconfigurationsRequest.postRecordingKeyconfigurations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingKeyconfigurationsRequest.postRecordingKeyconfigurations was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingkeyconfigurationsvalidate": {
    "operationId": "postrecordingkeyconfigurationsvalidate",
    "functionName": "postRecordingKeyconfigurationsValidate",
    "signature": "postRecordingKeyconfigurationsValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RecordingEncryptionConfiguration",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RecordingEncryptionConfiguration = new RecordingEncryptionConfiguration(...) // Encryption Configuration\n\n// Validate encryption key configurations without saving it\nPostRecordingKeyconfigurationsValidateRequest.postRecordingKeyconfigurationsValidate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingKeyconfigurationsValidateRequest.postRecordingKeyconfigurationsValidate was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordinglocalkeys": {
    "operationId": "postrecordinglocalkeys",
    "functionName": "postRecordingLocalkeys",
    "signature": "postRecordingLocalkeys(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LocalEncryptionKeyRequest",
        "required": "true"
      }
    ],
    "return": "EncryptionKey",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LocalEncryptionKeyRequest = new LocalEncryptionKeyRequest(...) // Local Encryption body\n\n// create a local recording key\nPostRecordingLocalkeysRequest.postRecordingLocalkeys(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingLocalkeysRequest.postRecordingLocalkeys was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordinglocalkeyssettings": {
    "operationId": "postrecordinglocalkeyssettings",
    "functionName": "postRecordingLocalkeysSettings",
    "signature": "postRecordingLocalkeysSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "LocalEncryptionConfiguration",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: LocalEncryptionConfiguration = new LocalEncryptionConfiguration(...) // Local Encryption Configuration\n\n// create settings for local key creation\nPostRecordingLocalkeysSettingsRequest.postRecordingLocalkeysSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingLocalkeysSettingsRequest.postRecordingLocalkeysSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingmediaretentionpolicies": {
    "operationId": "postrecordingmediaretentionpolicies",
    "functionName": "postRecordingMediaretentionpolicies",
    "signature": "postRecordingMediaretentionpolicies(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PolicyCreate",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PolicyCreate = new PolicyCreate(...) // Policy\n\n// Create media retention policy\nPostRecordingMediaretentionpoliciesRequest.postRecordingMediaretentionpolicies(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingMediaretentionpoliciesRequest.postRecordingMediaretentionpolicies was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingrecordingkeys": {
    "operationId": "postrecordingrecordingkeys",
    "functionName": "postRecordingRecordingkeys",
    "signature": "postRecordingRecordingkeys()",
    "return": "EncryptionKey",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Create encryption key\nPostRecordingRecordingkeysRequest.postRecordingRecordingkeys() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingRecordingkeysRequest.postRecordingRecordingkeys was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingsdeletionprotection": {
    "operationId": "postrecordingsdeletionprotection",
    "functionName": "postRecordingsDeletionprotection",
    "signature": "postRecordingsDeletionprotection(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ConversationDeletionProtectionQuery",
        "required": "true"
      }
    ],
    "return": "[AddressableEntityRef]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ConversationDeletionProtectionQuery = new ConversationDeletionProtectionQuery(...) // conversationIds\n\n// Get a list of conversations with protected recordings\nPostRecordingsDeletionprotectionRequest.postRecordingsDeletionprotection(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRecordingsDeletionprotectionRequest.postRecordingsDeletionprotection was successful\")\n        dump(response)\n    }\n}"
  },
  "postrecordingsscreensessionsacknowledge": {
    "operationId": "postrecordingsscreensessionsacknowledge",
    "functionName": "postRecordingsScreensessionsAcknowledge",
    "signature": "postRecordingsScreensessionsAcknowledge(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AcknowledgeScreenRecordingRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AcknowledgeScreenRecordingRequest = new AcknowledgeScreenRecordingRequest(...) // AcknowledgeScreenRecordingRequest\n\n// Acknowledge a screen recording.\nPostRecordingsScreensessionsAcknowledgeRequest.postRecordingsScreensessionsAcknowledge(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostRecordingsScreensessionsAcknowledgeRequest.postRecordingsScreensessionsAcknowledge was successful\")\n    }\n}"
  },
  "postrecordingsscreensessionsmetadata": {
    "operationId": "postrecordingsscreensessionsmetadata",
    "functionName": "postRecordingsScreensessionsMetadata",
    "signature": "postRecordingsScreensessionsMetadata(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ScreenRecordingMetaDataRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ScreenRecordingMetaDataRequest = new ScreenRecordingMetaDataRequest(...) // ScreenRecordingMetaDataRequest\n\n// Provide meta-data a screen recording.\nPostRecordingsScreensessionsMetadataRequest.postRecordingsScreensessionsMetadata(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostRecordingsScreensessionsMetadataRequest.postRecordingsScreensessionsMetadata was successful\")\n    }\n}"
  },
  "putconversationrecording": {
    "operationId": "putconversationrecording",
    "functionName": "putConversationRecording",
    "signature": "putConversationRecording(conversationId, recordingId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Recording",
        "required": "true"
      }
    ],
    "return": "Recording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet body: Recording = new Recording(...) // recording\n\n// Updates the retention records on a recording.\nPutConversationRecordingRequest.putConversationRecording(conversationId: conversationId, recordingId: recordingId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationRecordingRequest.putConversationRecording was successful\")\n        dump(response)\n    }\n}"
  },
  "putconversationrecordingannotation": {
    "operationId": "putconversationrecordingannotation",
    "functionName": "putConversationRecordingAnnotation",
    "signature": "putConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "annotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Annotation",
        "required": "true"
      }
    ],
    "return": "Annotation",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet recordingId: String = \"\" // Recording ID\nlet annotationId: String = \"\" // Annotation ID\nlet body: Annotation = new Annotation(...) // annotation\n\n// Update annotation\nPutConversationRecordingAnnotationRequest.putConversationRecordingAnnotation(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutConversationRecordingAnnotationRequest.putConversationRecordingAnnotation was successful\")\n        dump(response)\n    }\n}"
  },
  "putorphanrecording": {
    "operationId": "putorphanrecording",
    "functionName": "putOrphanrecording",
    "signature": "putOrphanrecording(orphanId, body)",
    "parameters": [
      {
        "name": "orphanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OrphanUpdateRequest",
        "required": "false"
      }
    ],
    "return": "Recording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet orphanId: String = \"\" // Orphan ID\nlet body: OrphanUpdateRequest = new OrphanUpdateRequest(...) // \n\n// Updates an orphan recording to a regular recording with retention values\nPutOrphanrecordingRequest.putOrphanrecording(orphanId: orphanId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutOrphanrecordingRequest.putOrphanrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingcrossplatformmediaretentionpolicy": {
    "operationId": "putrecordingcrossplatformmediaretentionpolicy",
    "functionName": "putRecordingCrossplatformMediaretentionpolicy",
    "signature": "putRecordingCrossplatformMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CrossPlatformPolicy",
        "required": "true"
      }
    ],
    "return": "CrossPlatformPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\nlet body: CrossPlatformPolicy = new CrossPlatformPolicy(...) // Policy\n\n// Update a media retention policy\nPutRecordingCrossplatformMediaretentionpolicyRequest.putRecordingCrossplatformMediaretentionpolicy(policyId: policyId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingCrossplatformMediaretentionpolicyRequest.putRecordingCrossplatformMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingjob": {
    "operationId": "putrecordingjob",
    "functionName": "putRecordingJob",
    "signature": "putRecordingJob(jobId, body)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ExecuteRecordingJobsQuery",
        "required": "true"
      }
    ],
    "return": "RecordingJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // jobId\nlet body: ExecuteRecordingJobsQuery = new ExecuteRecordingJobsQuery(...) // query\n\n// Execute the recording bulk job.\nPutRecordingJobRequest.putRecordingJob(jobId: jobId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingJobRequest.putRecordingJob was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingkeyconfiguration": {
    "operationId": "putrecordingkeyconfiguration",
    "functionName": "putRecordingKeyconfiguration",
    "signature": "putRecordingKeyconfiguration(keyConfigurationId, body)",
    "parameters": [
      {
        "name": "keyConfigurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RecordingEncryptionConfiguration",
        "required": "true"
      }
    ],
    "return": "RecordingEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet keyConfigurationId: String = \"\" // Key Configurations Id\nlet body: RecordingEncryptionConfiguration = new RecordingEncryptionConfiguration(...) // Encryption key configuration metadata\n\n// Update the encryption key configurations\nPutRecordingKeyconfigurationRequest.putRecordingKeyconfiguration(keyConfigurationId: keyConfigurationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingKeyconfigurationRequest.putRecordingKeyconfiguration was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordinglocalkeyssetting": {
    "operationId": "putrecordinglocalkeyssetting",
    "functionName": "putRecordingLocalkeysSetting",
    "signature": "putRecordingLocalkeysSetting(settingsId, body)",
    "parameters": [
      {
        "name": "settingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "LocalEncryptionConfiguration",
        "required": "true"
      }
    ],
    "return": "LocalEncryptionConfiguration",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet settingsId: String = \"\" // Settings Id\nlet body: LocalEncryptionConfiguration = new LocalEncryptionConfiguration(...) // Local Encryption metadata\n\n// Update the local encryption settings\nPutRecordingLocalkeysSettingRequest.putRecordingLocalkeysSetting(settingsId: settingsId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingLocalkeysSettingRequest.putRecordingLocalkeysSetting was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingmediaretentionpolicy": {
    "operationId": "putrecordingmediaretentionpolicy",
    "functionName": "putRecordingMediaretentionpolicy",
    "signature": "putRecordingMediaretentionpolicy(policyId, body)",
    "parameters": [
      {
        "name": "policyId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Policy",
        "required": "true"
      }
    ],
    "return": "Policy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet policyId: String = \"\" // Policy ID\nlet body: Policy = new Policy(...) // Policy\n\n// Update a media retention policy\nPutRecordingMediaretentionpolicyRequest.putRecordingMediaretentionpolicy(policyId: policyId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingMediaretentionpolicyRequest.putRecordingMediaretentionpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingrecordingkeysrotationschedule": {
    "operationId": "putrecordingrecordingkeysrotationschedule",
    "functionName": "putRecordingRecordingkeysRotationschedule",
    "signature": "putRecordingRecordingkeysRotationschedule(body)",
    "parameters": [
      {
        "name": "body",
        "type": "KeyRotationSchedule",
        "required": "true"
      }
    ],
    "return": "KeyRotationSchedule",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: KeyRotationSchedule = new KeyRotationSchedule(...) // KeyRotationSchedule\n\n// Update key rotation schedule\nPutRecordingRecordingkeysRotationscheduleRequest.putRecordingRecordingkeysRotationschedule(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingRecordingkeysRotationscheduleRequest.putRecordingRecordingkeysRotationschedule was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingsettings": {
    "operationId": "putrecordingsettings",
    "functionName": "putRecordingSettings",
    "signature": "putRecordingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RecordingSettings",
        "required": "true"
      }
    ],
    "return": "RecordingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RecordingSettings = new RecordingSettings(...) // Recording settings\n\n// Update the Recording Settings for the Organization\nPutRecordingSettingsRequest.putRecordingSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRecordingSettingsRequest.putRecordingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "putrecordingsdeletionprotection": {
    "operationId": "putrecordingsdeletionprotection",
    "functionName": "putRecordingsDeletionprotection",
    "signature": "putRecordingsDeletionprotection(protect, body)",
    "parameters": [
      {
        "name": "protect",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "body",
        "type": "ConversationDeletionProtectionQuery",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet protect: Bool = true // Check for apply, uncheck for revoke (each action requires the respective permission)\nlet body: ConversationDeletionProtectionQuery = new ConversationDeletionProtectionQuery(...) // \n\n// Apply or revoke recording protection for conversations\nPutRecordingsDeletionprotectionRequest.putRecordingsDeletionprotection(protect: protect, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutRecordingsDeletionprotectionRequest.putRecordingsDeletionprotection was successful\")\n    }\n}"
  },
  "deleteresponsemanagementlibrary": {
    "operationId": "deleteresponsemanagementlibrary",
    "functionName": "deleteResponsemanagementLibrary",
    "signature": "deleteResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet libraryId: String = \"\" // Library ID\n\n// Delete an existing response library.\nDeleteResponsemanagementLibraryRequest.deleteResponsemanagementLibrary(libraryId: libraryId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteResponsemanagementLibraryRequest.deleteResponsemanagementLibrary was successful\")\n    }\n}"
  },
  "deleteresponsemanagementresponse": {
    "operationId": "deleteresponsemanagementresponse",
    "functionName": "deleteResponsemanagementResponse",
    "signature": "deleteResponsemanagementResponse(responseId)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseId: String = \"\" // Response ID\n\n// Delete an existing response.\nDeleteResponsemanagementResponseRequest.deleteResponsemanagementResponse(responseId: responseId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteResponsemanagementResponseRequest.deleteResponsemanagementResponse was successful\")\n    }\n}"
  },
  "deleteresponsemanagementresponseasset": {
    "operationId": "deleteresponsemanagementresponseasset",
    "functionName": "deleteResponsemanagementResponseasset",
    "signature": "deleteResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseAssetId: String = \"\" // Asset Id\n\n// Delete response asset\nDeleteResponsemanagementResponseassetRequest.deleteResponsemanagementResponseasset(responseAssetId: responseAssetId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteResponsemanagementResponseassetRequest.deleteResponsemanagementResponseasset was successful\")\n    }\n}"
  },
  "getresponsemanagementlibraries": {
    "operationId": "getresponsemanagementlibraries",
    "functionName": "getResponsemanagementLibraries",
    "signature": "getResponsemanagementLibraries(pageNumber, pageSize, messagingTemplateFilter)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "messagingTemplateFilter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "LibraryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet messagingTemplateFilter: GetResponsemanagementLibrariesRequest.MessagingTemplateFilter_getResponsemanagementLibraries = GetResponsemanagementLibrariesRequest.MessagingTemplateFilter_getResponsemanagementLibraries.enummember // Returns a list of libraries that contain responses with at least one messaging template defined for a specific message channel\n\n// Gets a list of existing response libraries.\nGetResponsemanagementLibrariesRequest.getResponsemanagementLibraries(pageNumber: pageNumber, pageSize: pageSize, messagingTemplateFilter: messagingTemplateFilter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementLibrariesRequest.getResponsemanagementLibraries was successful\")\n        dump(response)\n    }\n}"
  },
  "getresponsemanagementlibrary": {
    "operationId": "getresponsemanagementlibrary",
    "functionName": "getResponsemanagementLibrary",
    "signature": "getResponsemanagementLibrary(libraryId)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet libraryId: String = \"\" // Library ID\n\n// Get details about an existing response library.\nGetResponsemanagementLibraryRequest.getResponsemanagementLibrary(libraryId: libraryId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementLibraryRequest.getResponsemanagementLibrary was successful\")\n        dump(response)\n    }\n}"
  },
  "getresponsemanagementresponse": {
    "operationId": "getresponsemanagementresponse",
    "functionName": "getResponsemanagementResponse",
    "signature": "getResponsemanagementResponse(responseId, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ModelResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseId: String = \"\" // Response ID\nlet expand: GetResponsemanagementResponseRequest.Expand_getResponsemanagementResponse = GetResponsemanagementResponseRequest.Expand_getResponsemanagementResponse.enummember // Expand instructions for the return value.\n\n// Get details about an existing response.\nGetResponsemanagementResponseRequest.getResponsemanagementResponse(responseId: responseId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementResponseRequest.getResponsemanagementResponse was successful\")\n        dump(response)\n    }\n}"
  },
  "getresponsemanagementresponseasset": {
    "operationId": "getresponsemanagementresponseasset",
    "functionName": "getResponsemanagementResponseasset",
    "signature": "getResponsemanagementResponseasset(responseAssetId)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseAssetId: String = \"\" // Asset Id\n\n// Get response asset information\nGetResponsemanagementResponseassetRequest.getResponsemanagementResponseasset(responseAssetId: responseAssetId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementResponseassetRequest.getResponsemanagementResponseasset was successful\")\n        dump(response)\n    }\n}"
  },
  "getresponsemanagementresponseassetsstatusstatusid": {
    "operationId": "getresponsemanagementresponseassetsstatusstatusid",
    "functionName": "getResponsemanagementResponseassetsStatusStatusId",
    "signature": "getResponsemanagementResponseassetsStatusStatusId(statusId)",
    "parameters": [
      {
        "name": "statusId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ResponseAssetStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet statusId: String = \"\" // Status Id\n\n// Get response asset upload status\nGetResponsemanagementResponseassetsStatusStatusIdRequest.getResponsemanagementResponseassetsStatusStatusId(statusId: statusId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementResponseassetsStatusStatusIdRequest.getResponsemanagementResponseassetsStatusStatusId was successful\")\n        dump(response)\n    }\n}"
  },
  "getresponsemanagementresponses": {
    "operationId": "getresponsemanagementresponses",
    "functionName": "getResponsemanagementResponses",
    "signature": "getResponsemanagementResponses(libraryId, pageNumber, pageSize, expand)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ResponseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet libraryId: String = \"\" // Library ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet expand: GetResponsemanagementResponsesRequest.Expand_getResponsemanagementResponses = GetResponsemanagementResponsesRequest.Expand_getResponsemanagementResponses.enummember // Expand instructions for the return value.\n\n// Gets a list of existing responses.\nGetResponsemanagementResponsesRequest.getResponsemanagementResponses(libraryId: libraryId, pageNumber: pageNumber, pageSize: pageSize, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetResponsemanagementResponsesRequest.getResponsemanagementResponses was successful\")\n        dump(response)\n    }\n}"
  },
  "postresponsemanagementlibraries": {
    "operationId": "postresponsemanagementlibraries",
    "functionName": "postResponsemanagementLibraries",
    "signature": "postResponsemanagementLibraries(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Library",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Library = new Library(...) // Library\n\n// Create a response library.\nPostResponsemanagementLibrariesRequest.postResponsemanagementLibraries(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostResponsemanagementLibrariesRequest.postResponsemanagementLibraries was successful\")\n        dump(response)\n    }\n}"
  },
  "postresponsemanagementresponseassetssearch": {
    "operationId": "postresponsemanagementresponseassetssearch",
    "functionName": "postResponsemanagementResponseassetsSearch",
    "signature": "postResponsemanagementResponseassetsSearch(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "ResponseAssetSearchRequest",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ResponseAssetSearchResults",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ResponseAssetSearchRequest = new ResponseAssetSearchRequest(...) // request\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Search response assets\nPostResponsemanagementResponseassetsSearchRequest.postResponsemanagementResponseassetsSearch(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostResponsemanagementResponseassetsSearchRequest.postResponsemanagementResponseassetsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postresponsemanagementresponseassetsuploads": {
    "operationId": "postresponsemanagementresponseassetsuploads",
    "functionName": "postResponsemanagementResponseassetsUploads",
    "signature": "postResponsemanagementResponseassetsUploads(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateResponseAssetRequest",
        "required": "true"
      }
    ],
    "return": "CreateResponseAssetResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateResponseAssetRequest = new CreateResponseAssetRequest(...) // request\n\n// Creates pre-signed url for uploading response asset\nPostResponsemanagementResponseassetsUploadsRequest.postResponsemanagementResponseassetsUploads(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostResponsemanagementResponseassetsUploadsRequest.postResponsemanagementResponseassetsUploads was successful\")\n        dump(response)\n    }\n}"
  },
  "postresponsemanagementresponses": {
    "operationId": "postresponsemanagementresponses",
    "functionName": "postResponsemanagementResponses",
    "signature": "postResponsemanagementResponses(body, expand)",
    "parameters": [
      {
        "name": "body",
        "type": "ModelResponse",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ModelResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ModelResponse = new ModelResponse(...) // Response\nlet expand: PostResponsemanagementResponsesRequest.Expand_postResponsemanagementResponses = PostResponsemanagementResponsesRequest.Expand_postResponsemanagementResponses.enummember // Expand instructions for the return value.\n\n// Create a response.\nPostResponsemanagementResponsesRequest.postResponsemanagementResponses(body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostResponsemanagementResponsesRequest.postResponsemanagementResponses was successful\")\n        dump(response)\n    }\n}"
  },
  "postresponsemanagementresponsesquery": {
    "operationId": "postresponsemanagementresponsesquery",
    "functionName": "postResponsemanagementResponsesQuery",
    "signature": "postResponsemanagementResponsesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ResponseQueryRequest",
        "required": "true"
      }
    ],
    "return": "ResponseQueryResults",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ResponseQueryRequest = new ResponseQueryRequest(...) // Response\n\n// Query responses\nPostResponsemanagementResponsesQueryRequest.postResponsemanagementResponsesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostResponsemanagementResponsesQueryRequest.postResponsemanagementResponsesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "putresponsemanagementlibrary": {
    "operationId": "putresponsemanagementlibrary",
    "functionName": "putResponsemanagementLibrary",
    "signature": "putResponsemanagementLibrary(libraryId, body)",
    "parameters": [
      {
        "name": "libraryId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Library",
        "required": "true"
      }
    ],
    "return": "Library",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet libraryId: String = \"\" // Library ID\nlet body: Library = new Library(...) // Library\n\n// Update an existing response library.\nPutResponsemanagementLibraryRequest.putResponsemanagementLibrary(libraryId: libraryId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutResponsemanagementLibraryRequest.putResponsemanagementLibrary was successful\")\n        dump(response)\n    }\n}"
  },
  "putresponsemanagementresponse": {
    "operationId": "putresponsemanagementresponse",
    "functionName": "putResponsemanagementResponse",
    "signature": "putResponsemanagementResponse(responseId, body, expand)",
    "parameters": [
      {
        "name": "responseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ModelResponse",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ModelResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseId: String = \"\" // Response ID\nlet body: ModelResponse = new ModelResponse(...) // Response\nlet expand: PutResponsemanagementResponseRequest.Expand_putResponsemanagementResponse = PutResponsemanagementResponseRequest.Expand_putResponsemanagementResponse.enummember // Expand instructions for the return value.\n\n// Update an existing response.\nPutResponsemanagementResponseRequest.putResponsemanagementResponse(responseId: responseId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutResponsemanagementResponseRequest.putResponsemanagementResponse was successful\")\n        dump(response)\n    }\n}"
  },
  "putresponsemanagementresponseasset": {
    "operationId": "putresponsemanagementresponseasset",
    "functionName": "putResponsemanagementResponseasset",
    "signature": "putResponsemanagementResponseasset(responseAssetId, body)",
    "parameters": [
      {
        "name": "responseAssetId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ResponseAssetRequest",
        "required": "true"
      }
    ],
    "return": "ResponseAsset",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet responseAssetId: String = \"\" // Asset Id\nlet body: ResponseAssetRequest = new ResponseAssetRequest(...) // request\n\n// Update response asset\nPutResponsemanagementResponseassetRequest.putResponsemanagementResponseasset(responseAssetId: responseAssetId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutResponsemanagementResponseassetRequest.putResponsemanagementResponseasset was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteroutingassessment": {
    "operationId": "deleteroutingassessment",
    "functionName": "deleteRoutingAssessment",
    "signature": "deleteRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assessmentId: String = \"\" // Benefit Assessment ID\n\n// Delete single benefit assessment.\nDeleteRoutingAssessmentRequest.deleteRoutingAssessment(assessmentId: assessmentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingAssessmentRequest.deleteRoutingAssessment was successful\")\n    }\n}"
  },
  "deleteroutingemaildomain": {
    "operationId": "deleteroutingemaildomain",
    "functionName": "deleteRoutingEmailDomain",
    "signature": "deleteRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // domain ID\n\n// Delete a domain\nDeleteRoutingEmailDomainRequest.deleteRoutingEmailDomain(domainId: domainId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingEmailDomainRequest.deleteRoutingEmailDomain was successful\")\n    }\n}"
  },
  "deleteroutingemaildomainroute": {
    "operationId": "deleteroutingemaildomainroute",
    "functionName": "deleteRoutingEmailDomainRoute",
    "signature": "deleteRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainName: String = \"\" // email domain\nlet routeId: String = \"\" // route ID\n\n// Delete a route\nDeleteRoutingEmailDomainRouteRequest.deleteRoutingEmailDomainRoute(domainName: domainName, routeId: routeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingEmailDomainRouteRequest.deleteRoutingEmailDomainRoute was successful\")\n    }\n}"
  },
  "deleteroutingpredictor": {
    "operationId": "deleteroutingpredictor",
    "functionName": "deleteRoutingPredictor",
    "signature": "deleteRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet predictorId: String = \"\" // Predictor ID\n\n// Delete single predictor.\nDeleteRoutingPredictorRequest.deleteRoutingPredictor(predictorId: predictorId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingPredictorRequest.deleteRoutingPredictor was successful\")\n    }\n}"
  },
  "deleteroutingqueue": {
    "operationId": "deleteroutingqueue",
    "functionName": "deleteRoutingQueue",
    "signature": "deleteRoutingQueue(queueId, forceDelete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet forceDelete: Bool = true // forceDelete\n\n// Delete a queue\nDeleteRoutingQueueRequest.deleteRoutingQueue(queueId: queueId, forceDelete: forceDelete) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingQueueRequest.deleteRoutingQueue was successful\")\n    }\n}"
  },
  "deleteroutingqueuemember": {
    "operationId": "deleteroutingqueuemember",
    "functionName": "deleteRoutingQueueMember",
    "signature": "deleteRoutingQueueMember(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet memberId: String = \"\" // Member ID\n\n// Delete a queue member.\nDeleteRoutingQueueMemberRequest.deleteRoutingQueueMember(queueId: queueId, memberId: memberId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingQueueMemberRequest.deleteRoutingQueueMember was successful\")\n    }\n}"
  },
  "deleteroutingqueueuser": {
    "operationId": "deleteroutingqueueuser",
    "functionName": "deleteRoutingQueueUser",
    "signature": "deleteRoutingQueueUser(queueId, memberId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet memberId: String = \"\" // Member ID\n\n// DEPRECATED: use DELETE /routing/queues/{queueId}/members/{memberId}.  Delete queue member.\nDeleteRoutingQueueUserRequest.deleteRoutingQueueUser(queueId: queueId, memberId: memberId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingQueueUserRequest.deleteRoutingQueueUser was successful\")\n    }\n}"
  },
  "deleteroutingqueuewrapupcode": {
    "operationId": "deleteroutingqueuewrapupcode",
    "functionName": "deleteRoutingQueueWrapupcode",
    "signature": "deleteRoutingQueueWrapupcode(queueId, codeId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet codeId: String = \"\" // Code ID\n\n// Delete a wrap-up code from a queue\nDeleteRoutingQueueWrapupcodeRequest.deleteRoutingQueueWrapupcode(queueId: queueId, codeId: codeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingQueueWrapupcodeRequest.deleteRoutingQueueWrapupcode was successful\")\n    }\n}"
  },
  "deleteroutingsettings": {
    "operationId": "deleteroutingsettings",
    "functionName": "deleteRoutingSettings",
    "signature": "deleteRoutingSettings()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete an organization's routing settings\nDeleteRoutingSettingsRequest.deleteRoutingSettings() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingSettingsRequest.deleteRoutingSettings was successful\")\n    }\n}"
  },
  "deleteroutingskill": {
    "operationId": "deleteroutingskill",
    "functionName": "deleteRoutingSkill",
    "signature": "deleteRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet skillId: String = \"\" // Skill ID\n\n// Delete Routing Skill\nDeleteRoutingSkillRequest.deleteRoutingSkill(skillId: skillId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingSkillRequest.deleteRoutingSkill was successful\")\n    }\n}"
  },
  "deleteroutingsmsaddress": {
    "operationId": "deleteroutingsmsaddress",
    "functionName": "deleteRoutingSmsAddress",
    "signature": "deleteRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet addressId: String = \"\" // Address ID\n\n// Delete an Address by Id for SMS\nDeleteRoutingSmsAddressRequest.deleteRoutingSmsAddress(addressId: addressId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingSmsAddressRequest.deleteRoutingSmsAddress was successful\")\n    }\n}"
  },
  "deleteroutingsmsphonenumber": {
    "operationId": "deleteroutingsmsphonenumber",
    "functionName": "deleteRoutingSmsPhonenumber",
    "signature": "deleteRoutingSmsPhonenumber(addressId, async)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet addressId: String = \"\" // Address ID\nlet async: Bool = true // Delete a phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the deletion of a provisioned phone number. \n\n// Delete a phone number provisioned for SMS.\nDeleteRoutingSmsPhonenumberRequest.deleteRoutingSmsPhonenumber(addressId: addressId, async: async) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingSmsPhonenumberRequest.deleteRoutingSmsPhonenumber was successful\")\n    }\n}"
  },
  "deleteroutinguserutilization": {
    "operationId": "deleteroutinguserutilization",
    "functionName": "deleteRoutingUserUtilization",
    "signature": "deleteRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Delete the user's max utilization settings and revert to the organization-wide default.\nDeleteRoutingUserUtilizationRequest.deleteRoutingUserUtilization(userId: userId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingUserUtilizationRequest.deleteRoutingUserUtilization was successful\")\n    }\n}"
  },
  "deleteroutingutilization": {
    "operationId": "deleteroutingutilization",
    "functionName": "deleteRoutingUtilization",
    "signature": "deleteRoutingUtilization()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete the organization-wide max utilization settings and revert to the system default.\nDeleteRoutingUtilizationRequest.deleteRoutingUtilization() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingUtilizationRequest.deleteRoutingUtilization was successful\")\n    }\n}"
  },
  "deleteroutingwrapupcode": {
    "operationId": "deleteroutingwrapupcode",
    "functionName": "deleteRoutingWrapupcode",
    "signature": "deleteRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet codeId: String = \"\" // Wrapup Code ID\n\n// Delete wrap-up code\nDeleteRoutingWrapupcodeRequest.deleteRoutingWrapupcode(codeId: codeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteRoutingWrapupcodeRequest.deleteRoutingWrapupcode was successful\")\n    }\n}"
  },
  "deleteuserroutinglanguage": {
    "operationId": "deleteuserroutinglanguage",
    "functionName": "deleteUserRoutinglanguage",
    "signature": "deleteUserRoutinglanguage(userId, languageId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet languageId: String = \"\" // languageId\n\n// Remove routing language from user\nDeleteUserRoutinglanguageRequest.deleteUserRoutinglanguage(userId: userId, languageId: languageId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteUserRoutinglanguageRequest.deleteUserRoutinglanguage was successful\")\n    }\n}"
  },
  "deleteuserroutingskill": {
    "operationId": "deleteuserroutingskill",
    "functionName": "deleteUserRoutingskill",
    "signature": "deleteUserRoutingskill(userId, skillId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet skillId: String = \"\" // skillId\n\n// Remove routing skill from user\nDeleteUserRoutingskillRequest.deleteUserRoutingskill(userId: userId, skillId: skillId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteUserRoutingskillRequest.deleteUserRoutingskill was successful\")\n    }\n}"
  },
  "getroutingassessment": {
    "operationId": "getroutingassessment",
    "functionName": "getRoutingAssessment",
    "signature": "getRoutingAssessment(assessmentId)",
    "parameters": [
      {
        "name": "assessmentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet assessmentId: String = \"\" // Benefit Assessment ID\n\n// Retrieve a single benefit assessment.\nGetRoutingAssessmentRequest.getRoutingAssessment(assessmentId: assessmentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingAssessmentRequest.getRoutingAssessment was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingassessments": {
    "operationId": "getroutingassessments",
    "functionName": "getRoutingAssessments",
    "signature": "getRoutingAssessments(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet queueId: [String] = [\"\"] // Queue ID(s) to filter assessments by.\n\n// Retrieve all benefit assessments.\nGetRoutingAssessmentsRequest.getRoutingAssessments(before: before, after: after, limit: limit, pageSize: pageSize, queueId: queueId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingAssessmentsRequest.getRoutingAssessments was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingassessmentsjob": {
    "operationId": "getroutingassessmentsjob",
    "functionName": "getRoutingAssessmentsJob",
    "signature": "getRoutingAssessmentsJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // Benefit Assessment Job ID\n\n// Retrieve a single benefit assessments job.\nGetRoutingAssessmentsJobRequest.getRoutingAssessmentsJob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingAssessmentsJobRequest.getRoutingAssessmentsJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingassessmentsjobs": {
    "operationId": "getroutingassessmentsjobs",
    "functionName": "getRoutingAssessmentsJobs",
    "signature": "getRoutingAssessmentsJobs(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "AssessmentJobListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: [String] = [\"\"] // Division ID(s) to filter assessment jobs by.\n\n// Retrieve all benefit assessment jobs.\nGetRoutingAssessmentsJobsRequest.getRoutingAssessmentsJobs(divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingAssessmentsJobsRequest.getRoutingAssessmentsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingemaildomain": {
    "operationId": "getroutingemaildomain",
    "functionName": "getRoutingEmailDomain",
    "signature": "getRoutingEmailDomain(domainId)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // domain ID\n\n// Get domain\nGetRoutingEmailDomainRequest.getRoutingEmailDomain(domainId: domainId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingEmailDomainRequest.getRoutingEmailDomain was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingemaildomainroute": {
    "operationId": "getroutingemaildomainroute",
    "functionName": "getRoutingEmailDomainRoute",
    "signature": "getRoutingEmailDomainRoute(domainName, routeId)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainName: String = \"\" // email domain\nlet routeId: String = \"\" // route ID\n\n// Get a route\nGetRoutingEmailDomainRouteRequest.getRoutingEmailDomainRoute(domainName: domainName, routeId: routeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingEmailDomainRouteRequest.getRoutingEmailDomainRoute was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingemaildomainroutes": {
    "operationId": "getroutingemaildomainroutes",
    "functionName": "getRoutingEmailDomainRoutes",
    "signature": "getRoutingEmailDomainRoutes(domainName, pageSize, pageNumber, pattern)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "InboundRouteEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainName: String = \"\" // email domain\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet pattern: String = \"\" // Filter routes by the route's pattern property\n\n// Get routes\nGetRoutingEmailDomainRoutesRequest.getRoutingEmailDomainRoutes(domainName: domainName, pageSize: pageSize, pageNumber: pageNumber, pattern: pattern) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingEmailDomainRoutesRequest.getRoutingEmailDomainRoutes was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingemaildomains": {
    "operationId": "getroutingemaildomains",
    "functionName": "getRoutingEmailDomains",
    "signature": "getRoutingEmailDomains(excludeStatus)",
    "parameters": [
      {
        "name": "excludeStatus",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "InboundDomainEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet excludeStatus: Bool = true // Exclude MX record data\n\n// Get domains\nGetRoutingEmailDomainsRequest.getRoutingEmailDomains(excludeStatus: excludeStatus) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingEmailDomainsRequest.getRoutingEmailDomains was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingemailsetup": {
    "operationId": "getroutingemailsetup",
    "functionName": "getRoutingEmailSetup",
    "signature": "getRoutingEmailSetup()",
    "return": "EmailSetup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get email setup\nGetRoutingEmailSetupRequest.getRoutingEmailSetup() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingEmailSetupRequest.getRoutingEmailSetup was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutinglanguages": {
    "operationId": "getroutinglanguages",
    "functionName": "getRoutingLanguages",
    "signature": "getRoutingLanguages(pageSize, pageNumber, sortOrder, name, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LanguageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetRoutingLanguagesRequest.SortOrder_getRoutingLanguages = GetRoutingLanguagesRequest.SortOrder_getRoutingLanguages.enummember // Ascending or descending sort order\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // id\n\n// Get the list of supported languages.\nGetRoutingLanguagesRequest.getRoutingLanguages(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingLanguagesRequest.getRoutingLanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingmessagerecipient": {
    "operationId": "getroutingmessagerecipient",
    "functionName": "getRoutingMessageRecipient",
    "signature": "getRoutingMessageRecipient(recipientId)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recipientId: String = \"\" // Recipient ID\n\n// Get a recipient\nGetRoutingMessageRecipientRequest.getRoutingMessageRecipient(recipientId: recipientId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingMessageRecipientRequest.getRoutingMessageRecipient was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingmessagerecipients": {
    "operationId": "getroutingmessagerecipients",
    "functionName": "getRoutingMessageRecipients",
    "signature": "getRoutingMessageRecipients(messengerType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "messengerType",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "RecipientListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messengerType: GetRoutingMessageRecipientsRequest.MessengerType_getRoutingMessageRecipients = GetRoutingMessageRecipientsRequest.MessengerType_getRoutingMessageRecipients.enummember // Messenger Type\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get recipients\nGetRoutingMessageRecipientsRequest.getRoutingMessageRecipients(messengerType: messengerType, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingMessageRecipientsRequest.getRoutingMessageRecipients was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingpredictor": {
    "operationId": "getroutingpredictor",
    "functionName": "getRoutingPredictor",
    "signature": "getRoutingPredictor(predictorId)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Predictor",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet predictorId: String = \"\" // Predictor ID\n\n// Retrieve a single predictor.\nGetRoutingPredictorRequest.getRoutingPredictor(predictorId: predictorId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingPredictorRequest.getRoutingPredictor was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingpredictors": {
    "operationId": "getroutingpredictors",
    "functionName": "getRoutingPredictors",
    "signature": "getRoutingPredictors(before, after, limit, pageSize, queueId)",
    "parameters": [
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "limit",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "String",
        "required": "false"
      },
      {
        "name": "queueId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PredictorListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet before: String = \"\" // The cursor that points to the start of the set of entities that has been returned.\nlet after: String = \"\" // The cursor that points to the end of the set of entities that has been returned.\nlet limit: String = \"\" // Number of entities to return. Maximum of 200. Deprecated in favour of pageSize, use CursorQueryParameters instead.\nlet pageSize: String = \"\" // Number of entities to return. Maximum of 200.\nlet queueId: [String] = [\"\"] // Comma-separated list of queue Ids to filter by.\n\n// Retrieve all predictors.\nGetRoutingPredictorsRequest.getRoutingPredictors(before: before, after: after, limit: limit, pageSize: pageSize, queueId: queueId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingPredictorsRequest.getRoutingPredictors was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingpredictorskeyperformanceindicators": {
    "operationId": "getroutingpredictorskeyperformanceindicators",
    "functionName": "getRoutingPredictorsKeyperformanceindicators",
    "signature": "getRoutingPredictorsKeyperformanceindicators()",
    "return": "[KeyPerformanceIndicator]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of Key Performance Indicators available for the predictors.\nGetRoutingPredictorsKeyperformanceindicatorsRequest.getRoutingPredictorsKeyperformanceindicators() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingPredictorsKeyperformanceindicatorsRequest.getRoutingPredictorsKeyperformanceindicators was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueue": {
    "operationId": "getroutingqueue",
    "functionName": "getRoutingQueue",
    "signature": "getRoutingQueue(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\n\n// Get details about this queue.\nGetRoutingQueueRequest.getRoutingQueue(queueId: queueId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueRequest.getRoutingQueue was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuecomparisonperiod": {
    "operationId": "getroutingqueuecomparisonperiod",
    "functionName": "getRoutingQueueComparisonperiod",
    "signature": "getRoutingQueueComparisonperiod(queueId, comparisonPeriodId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "comparisonPeriodId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriod",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue id\nlet comparisonPeriodId: String = \"\" // ComparisonPeriod id\n\n// Get a Comparison Period.\nGetRoutingQueueComparisonperiodRequest.getRoutingQueueComparisonperiod(queueId: queueId, comparisonPeriodId: comparisonPeriodId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueComparisonperiodRequest.getRoutingQueueComparisonperiod was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuecomparisonperiods": {
    "operationId": "getroutingqueuecomparisonperiods",
    "functionName": "getRoutingQueueComparisonperiods",
    "signature": "getRoutingQueueComparisonperiods(queueId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ComparisonPeriodListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue id\n\n// Get list of comparison periods\nGetRoutingQueueComparisonperiodsRequest.getRoutingQueueComparisonperiods(queueId: queueId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueComparisonperiodsRequest.getRoutingQueueComparisonperiods was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueueestimatedwaittime": {
    "operationId": "getroutingqueueestimatedwaittime",
    "functionName": "getRoutingQueueEstimatedwaittime",
    "signature": "getRoutingQueueEstimatedwaittime(queueId, conversationId)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // queueId\nlet conversationId: String = \"\" // conversationId\n\n// Get Estimated Wait Time\nGetRoutingQueueEstimatedwaittimeRequest.getRoutingQueueEstimatedwaittime(queueId: queueId, conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueEstimatedwaittimeRequest.getRoutingQueueEstimatedwaittime was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuemediatypeestimatedwaittime": {
    "operationId": "getroutingqueuemediatypeestimatedwaittime",
    "functionName": "getRoutingQueueMediatypeEstimatedwaittime",
    "signature": "getRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EstimatedWaitTimePredictions",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // queueId\nlet mediaType: String = \"\" // mediaType\n\n// Get Estimated Wait Time\nGetRoutingQueueMediatypeEstimatedwaittimeRequest.getRoutingQueueMediatypeEstimatedwaittime(queueId: queueId, mediaType: mediaType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueMediatypeEstimatedwaittimeRequest.getRoutingQueueMediatypeEstimatedwaittime was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuemembers": {
    "operationId": "getroutingqueuemembers",
    "functionName": "getRoutingQueueMembers",
    "signature": "getRoutingQueueMembers(queueId, pageNumber, pageSize, sortOrder, expand, name, profileSkills, skills, languages, routingStatus, presence, memberBy, joined)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "memberBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet pageNumber: Int = 0 // \nlet pageSize: Int = 0 // Max value is 100\nlet sortOrder: GetRoutingQueueMembersRequest.SortOrder_getRoutingQueueMembers = GetRoutingQueueMembersRequest.SortOrder_getRoutingQueueMembers.enummember // Note: results are sorted by name.\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet name: String = \"\" // Filter by queue member name\nlet profileSkills: [String] = [\"\"] // Filter by profile skill\nlet skills: [String] = [\"\"] // Filter by skill\nlet languages: [String] = [\"\"] // Filter by language\nlet routingStatus: [String] = [\"\"] // Filter by routing status\nlet presence: [String] = [\"\"] // Filter by presence\nlet memberBy: GetRoutingQueueMembersRequest.MemberBy_getRoutingQueueMembers = GetRoutingQueueMembersRequest.MemberBy_getRoutingQueueMembers.enummember // Filter by member type\nlet joined: Bool = true // Filter by joined status\n\n// Get the members of this queue.\nGetRoutingQueueMembersRequest.getRoutingQueueMembers(queueId: queueId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, expand: expand, name: name, profileSkills: profileSkills, skills: skills, languages: languages, routingStatus: routingStatus, presence: presence, memberBy: memberBy, joined: joined) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueMembersRequest.getRoutingQueueMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueueusers": {
    "operationId": "getroutingqueueusers",
    "functionName": "getRoutingQueueUsers",
    "signature": "getRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "profileSkills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "skills",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "languages",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "routingStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "presence",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet pageNumber: Int = 0 // \nlet pageSize: Int = 0 // Max value is 100\nlet sortOrder: GetRoutingQueueUsersRequest.SortOrder_getRoutingQueueUsers = GetRoutingQueueUsersRequest.SortOrder_getRoutingQueueUsers.enummember // Note: results are sorted by name.\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet joined: Bool = true // Filter by joined status\nlet name: String = \"\" // Filter by queue member name\nlet profileSkills: [String] = [\"\"] // Filter by profile skill\nlet skills: [String] = [\"\"] // Filter by skill\nlet languages: [String] = [\"\"] // Filter by language\nlet routingStatus: [String] = [\"\"] // Filter by routing status\nlet presence: [String] = [\"\"] // Filter by presence\n\n// DEPRECATED: use GET /routing/queues/{queueId}/members.  Get the members of this queue.\nGetRoutingQueueUsersRequest.getRoutingQueueUsers(queueId: queueId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, expand: expand, joined: joined, name: name, profileSkills: profileSkills, skills: skills, languages: languages, routingStatus: routingStatus, presence: presence) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueUsersRequest.getRoutingQueueUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuewrapupcodes": {
    "operationId": "getroutingqueuewrapupcodes",
    "functionName": "getRoutingQueueWrapupcodes",
    "signature": "getRoutingQueueWrapupcodes(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get the wrap-up codes for a queue\nGetRoutingQueueWrapupcodesRequest.getRoutingQueueWrapupcodes(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueueWrapupcodesRequest.getRoutingQueueWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueues": {
    "operationId": "getroutingqueues",
    "functionName": "getRoutingQueues",
    "signature": "getRoutingQueues(pageNumber, pageSize, sortOrder, name, _id, divisionId)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortOrder: GetRoutingQueuesRequest.SortOrder_getRoutingQueues = GetRoutingQueuesRequest.SortOrder_getRoutingQueues.enummember // Note: results are sorted by name.\nlet name: String = \"\" // Filter by queue name\nlet _id: [String] = [\"\"] // Filter by queue ID(s)\nlet divisionId: [String] = [\"\"] // Filter by queue division ID(s)\n\n// Get list of queues.\nGetRoutingQueuesRequest.getRoutingQueues(pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueuesRequest.getRoutingQueues was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuesdivisionviews": {
    "operationId": "getroutingqueuesdivisionviews",
    "functionName": "getRoutingQueuesDivisionviews",
    "signature": "getRoutingQueuesDivisionviews(pageSize, pageNumber, sortBy, sortOrder, name, _id, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size [max value is 100]\nlet pageNumber: Int = 0 // Page number [max value is 5]\nlet sortBy: GetRoutingQueuesDivisionviewsRequest.SortBy_getRoutingQueuesDivisionviews = GetRoutingQueuesDivisionviewsRequest.SortBy_getRoutingQueuesDivisionviews.enummember // Sort by\nlet sortOrder: GetRoutingQueuesDivisionviewsRequest.SortOrder_getRoutingQueuesDivisionviews = GetRoutingQueuesDivisionviewsRequest.SortOrder_getRoutingQueuesDivisionviews.enummember // Sort order\nlet name: String = \"\" // Name\nlet _id: [String] = [\"\"] // Queue ID(s)\nlet divisionId: [String] = [\"\"] // Division ID(s)\n\n// Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).\nGetRoutingQueuesDivisionviewsRequest.getRoutingQueuesDivisionviews(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueuesDivisionviewsRequest.getRoutingQueuesDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuesdivisionviewsall": {
    "operationId": "getroutingqueuesdivisionviewsall",
    "functionName": "getRoutingQueuesDivisionviewsAll",
    "signature": "getRoutingQueuesDivisionviewsAll(pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "QueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size [max value is 500]\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetRoutingQueuesDivisionviewsAllRequest.SortOrder_getRoutingQueuesDivisionviewsAll = GetRoutingQueuesDivisionviewsAllRequest.SortOrder_getRoutingQueuesDivisionviewsAll.enummember // Sort order\n\n// Get a paged listing of simplified queue objects, sorted by name.  Can be used to get a digest of all queues in an organization.\nGetRoutingQueuesDivisionviewsAllRequest.getRoutingQueuesDivisionviewsAll(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueuesDivisionviewsAllRequest.getRoutingQueuesDivisionviewsAll was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingqueuesme": {
    "operationId": "getroutingqueuesme",
    "functionName": "getRoutingQueuesMe",
    "signature": "getRoutingQueuesMe(pageNumber, pageSize, joined, sortOrder)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet joined: Bool = true // Filter by joined status.\nlet sortOrder: GetRoutingQueuesMeRequest.SortOrder_getRoutingQueuesMe = GetRoutingQueuesMeRequest.SortOrder_getRoutingQueuesMe.enummember // Note: results are sorted by name.\n\n// Get a paged listing of queues the user is a member of.\nGetRoutingQueuesMeRequest.getRoutingQueuesMe(pageNumber: pageNumber, pageSize: pageSize, joined: joined, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingQueuesMeRequest.getRoutingQueuesMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsettings": {
    "operationId": "getroutingsettings",
    "functionName": "getRoutingSettings",
    "signature": "getRoutingSettings()",
    "return": "RoutingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get an organization's routing settings\nGetRoutingSettingsRequest.getRoutingSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSettingsRequest.getRoutingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsettingscontactcenter": {
    "operationId": "getroutingsettingscontactcenter",
    "functionName": "getRoutingSettingsContactcenter",
    "signature": "getRoutingSettingsContactcenter()",
    "return": "ContactCenterSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Contact Center Settings\nGetRoutingSettingsContactcenterRequest.getRoutingSettingsContactcenter() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSettingsContactcenterRequest.getRoutingSettingsContactcenter was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsettingstranscription": {
    "operationId": "getroutingsettingstranscription",
    "functionName": "getRoutingSettingsTranscription",
    "signature": "getRoutingSettingsTranscription()",
    "return": "TranscriptionSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Transcription Settings\nGetRoutingSettingsTranscriptionRequest.getRoutingSettingsTranscription() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSettingsTranscriptionRequest.getRoutingSettingsTranscription was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingskill": {
    "operationId": "getroutingskill",
    "functionName": "getRoutingSkill",
    "signature": "getRoutingSkill(skillId)",
    "parameters": [
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet skillId: String = \"\" // Skill ID\n\n// Get Routing Skill\nGetRoutingSkillRequest.getRoutingSkill(skillId: skillId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSkillRequest.getRoutingSkill was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingskills": {
    "operationId": "getroutingskills",
    "functionName": "getRoutingSkills",
    "signature": "getRoutingSkills(pageSize, pageNumber, name, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "SkillEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Filter for results that start with this value\nlet _id: [String] = [\"\"] // id\n\n// Get the list of routing skills.\nGetRoutingSkillsRequest.getRoutingSkills(pageSize: pageSize, pageNumber: pageNumber, name: name, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSkillsRequest.getRoutingSkills was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsmsaddress": {
    "operationId": "getroutingsmsaddress",
    "functionName": "getRoutingSmsAddress",
    "signature": "getRoutingSmsAddress(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet addressId: String = \"\" // Address ID\n\n// Get an Address by Id for SMS\nGetRoutingSmsAddressRequest.getRoutingSmsAddress(addressId: addressId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSmsAddressRequest.getRoutingSmsAddress was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsmsaddresses": {
    "operationId": "getroutingsmsaddresses",
    "functionName": "getRoutingSmsAddresses",
    "signature": "getRoutingSmsAddresses(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SmsAddressEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of Addresses for SMS\nGetRoutingSmsAddressesRequest.getRoutingSmsAddresses(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSmsAddressesRequest.getRoutingSmsAddresses was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsmsavailablephonenumbers": {
    "operationId": "getroutingsmsavailablephonenumbers",
    "functionName": "getRoutingSmsAvailablephonenumbers",
    "signature": "getRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, region, city, areaCode, pattern, addressRequirement)",
    "parameters": [
      {
        "name": "countryCode",
        "type": "String",
        "required": "true"
      },
      {
        "name": "phoneNumberType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "region",
        "type": "String",
        "required": "false"
      },
      {
        "name": "city",
        "type": "String",
        "required": "false"
      },
      {
        "name": "areaCode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pattern",
        "type": "String",
        "required": "false"
      },
      {
        "name": "addressRequirement",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SMSAvailablePhoneNumberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet countryCode: String = \"\" // The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned\nlet phoneNumberType: GetRoutingSmsAvailablephonenumbersRequest.PhoneNumberType_getRoutingSmsAvailablephonenumbers = GetRoutingSmsAvailablephonenumbersRequest.PhoneNumberType_getRoutingSmsAvailablephonenumbers.enummember // Type of available phone numbers searched\nlet region: String = \"\" // Region/province/state that can be used to restrict the numbers returned\nlet city: String = \"\" // City that can be used to restrict the numbers returned\nlet areaCode: String = \"\" // Area code that can be used to restrict the numbers returned\nlet pattern: String = \"\" // A pattern to match phone numbers. Valid characters are '*' and [0-9a-zA-Z]. The '*' character will match any single digit.\nlet addressRequirement: GetRoutingSmsAvailablephonenumbersRequest.AddressRequirement_getRoutingSmsAvailablephonenumbers = GetRoutingSmsAvailablephonenumbersRequest.AddressRequirement_getRoutingSmsAvailablephonenumbers.enummember // This indicates whether the phone number requires to have an Address registered.\n\n// Get a list of available phone numbers for SMS provisioning.\nGetRoutingSmsAvailablephonenumbersRequest.getRoutingSmsAvailablephonenumbers(countryCode: countryCode, phoneNumberType: phoneNumberType, region: region, city: city, areaCode: areaCode, pattern: pattern, addressRequirement: addressRequirement) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSmsAvailablephonenumbersRequest.getRoutingSmsAvailablephonenumbers was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsmsphonenumber": {
    "operationId": "getroutingsmsphonenumber",
    "functionName": "getRoutingSmsPhonenumber",
    "signature": "getRoutingSmsPhonenumber(addressId)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet addressId: String = \"\" // Address ID\n\n// Get a phone number provisioned for SMS.\nGetRoutingSmsPhonenumberRequest.getRoutingSmsPhonenumber(addressId: addressId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSmsPhonenumberRequest.getRoutingSmsPhonenumber was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingsmsphonenumbers": {
    "operationId": "getroutingsmsphonenumbers",
    "functionName": "getRoutingSmsPhonenumbers",
    "signature": "getRoutingSmsPhonenumbers(phoneNumber, phoneNumberType, phoneNumberStatus, countryCode, pageSize, pageNumber, sortBy, sortOrder, language)",
    "parameters": [
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumberType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "phoneNumberStatus",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "countryCode",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneNumber: String = \"\" // Filter on phone number address. Allowable characters are the digits '0-9' and the wild card character '\\\\*'. If just digits are present, a contains search is done on the address pattern. For example, '317' could be matched anywhere in the address. An '\\\\*' will match multiple digits. For example, to match a specific area code within the US a pattern like '1317*' could be used.\nlet phoneNumberType: [String] = [\"\"] // Filter on phone number type\nlet phoneNumberStatus: [String] = [\"\"] // Filter on phone number status\nlet countryCode: [String] = [\"\"] // Filter on country code\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: GetRoutingSmsPhonenumbersRequest.SortBy_getRoutingSmsPhonenumbers = GetRoutingSmsPhonenumbersRequest.SortBy_getRoutingSmsPhonenumbers.enummember // Optional field to sort results\nlet sortOrder: GetRoutingSmsPhonenumbersRequest.SortOrder_getRoutingSmsPhonenumbers = GetRoutingSmsPhonenumbersRequest.SortOrder_getRoutingSmsPhonenumbers.enummember // Sort order\nlet language: String = en-US // A language tag (which is sometimes referred to as a \\\"locale identifier\\\") to use to localize country field and sort operations\n\n// Get a list of provisioned phone numbers.\nGetRoutingSmsPhonenumbersRequest.getRoutingSmsPhonenumbers(phoneNumber: phoneNumber, phoneNumberType: phoneNumberType, phoneNumberStatus: phoneNumberStatus, countryCode: countryCode, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingSmsPhonenumbersRequest.getRoutingSmsPhonenumbers was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutinguserutilization": {
    "operationId": "getroutinguserutilization",
    "functionName": "getRoutingUserUtilization",
    "signature": "getRoutingUserUtilization(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get the user's max utilization settings.  If not configured, the organization-wide default is returned.\nGetRoutingUserUtilizationRequest.getRoutingUserUtilization(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingUserUtilizationRequest.getRoutingUserUtilization was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingutilization": {
    "operationId": "getroutingutilization",
    "functionName": "getRoutingUtilization",
    "signature": "getRoutingUtilization()",
    "return": "Utilization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the organization-wide max utilization settings.\nGetRoutingUtilizationRequest.getRoutingUtilization() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingUtilizationRequest.getRoutingUtilization was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingwrapupcode": {
    "operationId": "getroutingwrapupcode",
    "functionName": "getRoutingWrapupcode",
    "signature": "getRoutingWrapupcode(codeId)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet codeId: String = \"\" // Wrapup Code ID\n\n// Get details about this wrap-up code.\nGetRoutingWrapupcodeRequest.getRoutingWrapupcode(codeId: codeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingWrapupcodeRequest.getRoutingWrapupcode was successful\")\n        dump(response)\n    }\n}"
  },
  "getroutingwrapupcodes": {
    "operationId": "getroutingwrapupcodes",
    "functionName": "getRoutingWrapupcodes",
    "signature": "getRoutingWrapupcodes(pageSize, pageNumber, sortBy, sortOrder, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WrapupCodeEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: GetRoutingWrapupcodesRequest.SortBy_getRoutingWrapupcodes = GetRoutingWrapupcodesRequest.SortBy_getRoutingWrapupcodes.enummember // Sort by\nlet sortOrder: GetRoutingWrapupcodesRequest.SortOrder_getRoutingWrapupcodes = GetRoutingWrapupcodesRequest.SortOrder_getRoutingWrapupcodes.enummember // Sort order\nlet name: String = \"\" // Wrapup code's name ('Sort by' param is ignored unless this field is provided)\n\n// Get list of wrapup codes.\nGetRoutingWrapupcodesRequest.getRoutingWrapupcodes(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetRoutingWrapupcodesRequest.getRoutingWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserqueues": {
    "operationId": "getuserqueues",
    "functionName": "getUserQueues",
    "signature": "getUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "joined",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet joined: Bool = true // Is joined to the queue\nlet divisionId: [String] = [\"\"] // Division ID(s)\n\n// Get queues for user\nGetUserQueuesRequest.getUserQueues(userId: userId, pageSize: pageSize, pageNumber: pageNumber, joined: joined, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserQueuesRequest.getUserQueues was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserroutinglanguages": {
    "operationId": "getuserroutinglanguages",
    "functionName": "getUserRoutinglanguages",
    "signature": "getUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetUserRoutinglanguagesRequest.SortOrder_getUserRoutinglanguages = GetUserRoutinglanguagesRequest.SortOrder_getUserRoutinglanguages.enummember // Ascending or descending sort order\n\n// List routing language for user\nGetUserRoutinglanguagesRequest.getUserRoutinglanguages(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserRoutinglanguagesRequest.getUserRoutinglanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserroutingskills": {
    "operationId": "getuserroutingskills",
    "functionName": "getUserRoutingskills",
    "signature": "getUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetUserRoutingskillsRequest.SortOrder_getUserRoutingskills = GetUserRoutingskillsRequest.SortOrder_getUserRoutingskills.enummember // Ascending or descending sort order\n\n// List routing skills for user\nGetUserRoutingskillsRequest.getUserRoutingskills(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserRoutingskillsRequest.getUserRoutingskills was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingconversation": {
    "operationId": "patchroutingconversation",
    "functionName": "patchRoutingConversation",
    "signature": "patchRoutingConversation(conversationId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoutingConversationAttributesRequest",
        "required": "true"
      }
    ],
    "return": "RoutingConversationAttributesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet body: RoutingConversationAttributesRequest = new RoutingConversationAttributesRequest(...) // Conversation Attributes\n\n// Update attributes of an in-queue conversation\nPatchRoutingConversationRequest.patchRoutingConversation(conversationId: conversationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingConversationRequest.patchRoutingConversation was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingemaildomain": {
    "operationId": "patchroutingemaildomain",
    "functionName": "patchRoutingEmailDomain",
    "signature": "patchRoutingEmailDomain(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InboundDomainPatchRequest",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // domain ID\nlet body: InboundDomainPatchRequest = new InboundDomainPatchRequest(...) // Domain settings\n\n// Update domain settings\nPatchRoutingEmailDomainRequest.patchRoutingEmailDomain(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingEmailDomainRequest.patchRoutingEmailDomain was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingemaildomainvalidate": {
    "operationId": "patchroutingemaildomainvalidate",
    "functionName": "patchRoutingEmailDomainValidate",
    "signature": "patchRoutingEmailDomainValidate(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InboundDomainPatchRequest",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // domain ID\nlet body: InboundDomainPatchRequest = new InboundDomainPatchRequest(...) // Domain settings\n\n// Validate domain settings\nPatchRoutingEmailDomainValidateRequest.patchRoutingEmailDomainValidate(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingEmailDomainValidateRequest.patchRoutingEmailDomainValidate was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingpredictor": {
    "operationId": "patchroutingpredictor",
    "functionName": "patchRoutingPredictor",
    "signature": "patchRoutingPredictor(predictorId, body)",
    "parameters": [
      {
        "name": "predictorId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchPredictorRequest",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet predictorId: String = \"\" // Predictor ID\nlet body: PatchPredictorRequest = new PatchPredictorRequest(...) // \n\n// Update single predictor.\nPatchRoutingPredictorRequest.patchRoutingPredictor(predictorId: predictorId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingPredictorRequest.patchRoutingPredictor was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingqueuemember": {
    "operationId": "patchroutingqueuemember",
    "functionName": "patchRoutingQueueMember",
    "signature": "patchRoutingQueueMember(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "QueueMember",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet memberId: String = \"\" // Member ID\nlet body: QueueMember = new QueueMember(...) // Queue Member\n\n// Update the ring number OR joined status for a queue member.\nPatchRoutingQueueMemberRequest.patchRoutingQueueMember(queueId: queueId, memberId: memberId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchRoutingQueueMemberRequest.patchRoutingQueueMember was successful\")\n    }\n}"
  },
  "patchroutingqueuemembers": {
    "operationId": "patchroutingqueuemembers",
    "functionName": "patchRoutingQueueMembers",
    "signature": "patchRoutingQueueMembers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[QueueMember]",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: [QueueMember] = [new QueueMember(...)] // Queue Members\n\n// Join or unjoin a set of users for a queue\nPatchRoutingQueueMembersRequest.patchRoutingQueueMembers(queueId: queueId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingQueueMembersRequest.patchRoutingQueueMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingqueueuser": {
    "operationId": "patchroutingqueueuser",
    "functionName": "patchRoutingQueueUser",
    "signature": "patchRoutingQueueUser(queueId, memberId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "QueueMember",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet memberId: String = \"\" // Member ID\nlet body: QueueMember = new QueueMember(...) // Queue Member\n\n// DEPRECATED: use PATCH /routing/queues/{queueId}/members/{memberId}.  Update the ring number OR joined status for a User in a Queue.\nPatchRoutingQueueUserRequest.patchRoutingQueueUser(queueId: queueId, memberId: memberId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchRoutingQueueUserRequest.patchRoutingQueueUser was successful\")\n    }\n}"
  },
  "patchroutingqueueusers": {
    "operationId": "patchroutingqueueusers",
    "functionName": "patchRoutingQueueUsers",
    "signature": "patchRoutingQueueUsers(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[QueueMember]",
        "required": "true"
      }
    ],
    "return": "QueueMemberEntityListingV1",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: [QueueMember] = [new QueueMember(...)] // Queue Members\n\n// DEPRECATED: use PATCH /routing/queues/{queueId}/members.  Join or unjoin a set of users for a queue.\nPatchRoutingQueueUsersRequest.patchRoutingQueueUsers(queueId: queueId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchRoutingQueueUsersRequest.patchRoutingQueueUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "patchroutingsettingscontactcenter": {
    "operationId": "patchroutingsettingscontactcenter",
    "functionName": "patchRoutingSettingsContactcenter",
    "signature": "patchRoutingSettingsContactcenter(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ContactCenterSettings",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ContactCenterSettings = new ContactCenterSettings(...) // Contact Center Settings\n\n// Update Contact Center Settings\nPatchRoutingSettingsContactcenterRequest.patchRoutingSettingsContactcenter(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchRoutingSettingsContactcenterRequest.patchRoutingSettingsContactcenter was successful\")\n    }\n}"
  },
  "patchuserqueue": {
    "operationId": "patchuserqueue",
    "functionName": "patchUserQueue",
    "signature": "patchUserQueue(queueId, userId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserQueue",
        "required": "true"
      }
    ],
    "return": "UserQueue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet userId: String = \"\" // User ID\nlet body: UserQueue = new UserQueue(...) // Queue Member\n\n// Join or unjoin a queue for a user\nPatchUserQueueRequest.patchUserQueue(queueId: queueId, userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserQueueRequest.patchUserQueue was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserqueues": {
    "operationId": "patchuserqueues",
    "functionName": "patchUserQueues",
    "signature": "patchUserQueues(userId, body, divisionId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[UserQueue]",
        "required": "true"
      },
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserQueueEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [UserQueue] = [new UserQueue(...)] // User Queues\nlet divisionId: [String] = [\"\"] // Division ID(s)\n\n// Join or unjoin a set of queues for a user\nPatchUserQueuesRequest.patchUserQueues(userId: userId, body: body, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserQueuesRequest.patchUserQueues was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserroutinglanguage": {
    "operationId": "patchuserroutinglanguage",
    "functionName": "patchUserRoutinglanguage",
    "signature": "patchUserRoutinglanguage(userId, languageId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "languageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserRoutingLanguage",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet languageId: String = \"\" // languageId\nlet body: UserRoutingLanguage = new UserRoutingLanguage(...) // Language\n\n// Update routing language proficiency or state.\nPatchUserRoutinglanguageRequest.patchUserRoutinglanguage(userId: userId, languageId: languageId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserRoutinglanguageRequest.patchUserRoutinglanguage was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserroutinglanguagesbulk": {
    "operationId": "patchuserroutinglanguagesbulk",
    "functionName": "patchUserRoutinglanguagesBulk",
    "signature": "patchUserRoutinglanguagesBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[UserRoutingLanguagePost]",
        "required": "true"
      }
    ],
    "return": "UserLanguageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [UserRoutingLanguagePost] = [new UserRoutingLanguagePost(...)] // Language\n\n// Add bulk routing language to user. Max limit 50 languages\nPatchUserRoutinglanguagesBulkRequest.patchUserRoutinglanguagesBulk(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserRoutinglanguagesBulkRequest.patchUserRoutinglanguagesBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuserroutingskillsbulk": {
    "operationId": "patchuserroutingskillsbulk",
    "functionName": "patchUserRoutingskillsBulk",
    "signature": "patchUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[UserRoutingSkillPost]",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [UserRoutingSkillPost] = [new UserRoutingSkillPost(...)] // Skill\n\n// Bulk add routing skills to user\nPatchUserRoutingskillsBulkRequest.patchUserRoutingskillsBulk(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserRoutingskillsBulkRequest.patchUserRoutingskillsBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingassessments": {
    "operationId": "postroutingassessments",
    "functionName": "postRoutingAssessments",
    "signature": "postRoutingAssessments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateBenefitAssessmentRequest",
        "required": "false"
      }
    ],
    "return": "BenefitAssessment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateBenefitAssessmentRequest = new CreateBenefitAssessmentRequest(...) // \n\n// Create a benefit assessment.\nPostRoutingAssessmentsRequest.postRoutingAssessments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingAssessmentsRequest.postRoutingAssessments was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingassessmentsjobs": {
    "operationId": "postroutingassessmentsjobs",
    "functionName": "postRoutingAssessmentsJobs",
    "signature": "postRoutingAssessmentsJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateBenefitAssessmentJobRequest",
        "required": "false"
      }
    ],
    "return": "BenefitAssessmentJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateBenefitAssessmentJobRequest = new CreateBenefitAssessmentJobRequest(...) // \n\n// Create a benefit assessment job.\nPostRoutingAssessmentsJobsRequest.postRoutingAssessmentsJobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingAssessmentsJobsRequest.postRoutingAssessmentsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingemaildomainroutes": {
    "operationId": "postroutingemaildomainroutes",
    "functionName": "postRoutingEmailDomainRoutes",
    "signature": "postRoutingEmailDomainRoutes(domainName, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InboundRoute",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainName: String = \"\" // email domain\nlet body: InboundRoute = new InboundRoute(...) // Route\n\n// Create a route\nPostRoutingEmailDomainRoutesRequest.postRoutingEmailDomainRoutes(domainName: domainName, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingEmailDomainRoutesRequest.postRoutingEmailDomainRoutes was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingemaildomaintestconnection": {
    "operationId": "postroutingemaildomaintestconnection",
    "functionName": "postRoutingEmailDomainTestconnection",
    "signature": "postRoutingEmailDomainTestconnection(domainId, body)",
    "parameters": [
      {
        "name": "domainId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TestMessage",
        "required": "false"
      }
    ],
    "return": "TestMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainId: String = \"\" // domain ID\nlet body: TestMessage = new TestMessage(...) // TestMessage\n\n// Tests the custom SMTP server integration connection set on this domain\nPostRoutingEmailDomainTestconnectionRequest.postRoutingEmailDomainTestconnection(domainId: domainId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingEmailDomainTestconnectionRequest.postRoutingEmailDomainTestconnection was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingemaildomains": {
    "operationId": "postroutingemaildomains",
    "functionName": "postRoutingEmailDomains",
    "signature": "postRoutingEmailDomains(body)",
    "parameters": [
      {
        "name": "body",
        "type": "InboundDomain",
        "required": "true"
      }
    ],
    "return": "InboundDomain",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: InboundDomain = new InboundDomain(...) // Domain\n\n// Create a domain\nPostRoutingEmailDomainsRequest.postRoutingEmailDomains(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingEmailDomainsRequest.postRoutingEmailDomains was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutinglanguages": {
    "operationId": "postroutinglanguages",
    "functionName": "postRoutingLanguages",
    "signature": "postRoutingLanguages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Language",
        "required": "true"
      }
    ],
    "return": "Language",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Language = new Language(...) // Language\n\n// Create Language\nPostRoutingLanguagesRequest.postRoutingLanguages(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingLanguagesRequest.postRoutingLanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingpredictors": {
    "operationId": "postroutingpredictors",
    "functionName": "postRoutingPredictors",
    "signature": "postRoutingPredictors(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreatePredictorRequest",
        "required": "false"
      }
    ],
    "return": "Predictor",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreatePredictorRequest = new CreatePredictorRequest(...) // \n\n// Create a predictor.\nPostRoutingPredictorsRequest.postRoutingPredictors(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingPredictorsRequest.postRoutingPredictors was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingqueuemembers": {
    "operationId": "postroutingqueuemembers",
    "functionName": "postRoutingQueueMembers",
    "signature": "postRoutingQueueMembers(queueId, body, delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[WritableEntity]",
        "required": "true"
      },
      {
        "name": "delete",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: [WritableEntity] = [new WritableEntity(...)] // Queue Members\nlet delete: Bool = true // True to delete queue members\n\n// Bulk add or delete up to 100 queue members\nPostRoutingQueueMembersRequest.postRoutingQueueMembers(queueId: queueId, body: body, delete: delete) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostRoutingQueueMembersRequest.postRoutingQueueMembers was successful\")\n    }\n}"
  },
  "postroutingqueueusers": {
    "operationId": "postroutingqueueusers",
    "functionName": "postRoutingQueueUsers",
    "signature": "postRoutingQueueUsers(queueId, body, delete)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[WritableEntity]",
        "required": "true"
      },
      {
        "name": "delete",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: [WritableEntity] = [new WritableEntity(...)] // Queue Members\nlet delete: Bool = true // True to delete queue members\n\n// DEPRECATED: use POST /routing/queues/{queueId}/members.  Bulk add or delete up to 100 queue members.\nPostRoutingQueueUsersRequest.postRoutingQueueUsers(queueId: queueId, body: body, delete: delete) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostRoutingQueueUsersRequest.postRoutingQueueUsers was successful\")\n    }\n}"
  },
  "postroutingqueuewrapupcodes": {
    "operationId": "postroutingqueuewrapupcodes",
    "functionName": "postRoutingQueueWrapupcodes",
    "signature": "postRoutingQueueWrapupcodes(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[WrapUpCodeReference]",
        "required": "true"
      }
    ],
    "return": "[WrapupCode]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: [WrapUpCodeReference] = [new WrapUpCodeReference(...)] // List of wrapup codes\n\n// Add up to 100 wrap-up codes to a queue\nPostRoutingQueueWrapupcodesRequest.postRoutingQueueWrapupcodes(queueId: queueId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingQueueWrapupcodesRequest.postRoutingQueueWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingqueues": {
    "operationId": "postroutingqueues",
    "functionName": "postRoutingQueues",
    "signature": "postRoutingQueues(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateQueueRequest",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateQueueRequest = new CreateQueueRequest(...) // Queue\n\n// Create a queue\nPostRoutingQueuesRequest.postRoutingQueues(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingQueuesRequest.postRoutingQueues was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingskills": {
    "operationId": "postroutingskills",
    "functionName": "postRoutingSkills",
    "signature": "postRoutingSkills(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RoutingSkill",
        "required": "true"
      }
    ],
    "return": "RoutingSkill",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RoutingSkill = new RoutingSkill(...) // Skill\n\n// Create Skill\nPostRoutingSkillsRequest.postRoutingSkills(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingSkillsRequest.postRoutingSkills was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingsmsaddresses": {
    "operationId": "postroutingsmsaddresses",
    "functionName": "postRoutingSmsAddresses",
    "signature": "postRoutingSmsAddresses(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SmsAddressProvision",
        "required": "true"
      }
    ],
    "return": "SmsAddress",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SmsAddressProvision = new SmsAddressProvision(...) // SmsAddress\n\n// Provision an Address for SMS\nPostRoutingSmsAddressesRequest.postRoutingSmsAddresses(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingSmsAddressesRequest.postRoutingSmsAddresses was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingsmsphonenumbers": {
    "operationId": "postroutingsmsphonenumbers",
    "functionName": "postRoutingSmsPhonenumbers",
    "signature": "postRoutingSmsPhonenumbers(body, async)",
    "parameters": [
      {
        "name": "body",
        "type": "SmsPhoneNumberProvision",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SmsPhoneNumberProvision = new SmsPhoneNumberProvision(...) // SmsPhoneNumber\nlet async: Bool = true // Provision a new phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the provisioning of a new phone number. Check the phoneNumber's provisioningStatus for completion of this request.\n\n// Provision a phone number for SMS\nPostRoutingSmsPhonenumbersRequest.postRoutingSmsPhonenumbers(body: body, async: async) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingSmsPhonenumbersRequest.postRoutingSmsPhonenumbers was successful\")\n        dump(response)\n    }\n}"
  },
  "postroutingwrapupcodes": {
    "operationId": "postroutingwrapupcodes",
    "functionName": "postRoutingWrapupcodes",
    "signature": "postRoutingWrapupcodes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WrapupCode",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WrapupCode = new WrapupCode(...) // WrapupCode\n\n// Create a wrap-up code\nPostRoutingWrapupcodesRequest.postRoutingWrapupcodes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostRoutingWrapupcodesRequest.postRoutingWrapupcodes was successful\")\n        dump(response)\n    }\n}"
  },
  "postuserroutinglanguages": {
    "operationId": "postuserroutinglanguages",
    "functionName": "postUserRoutinglanguages",
    "signature": "postUserRoutinglanguages(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserRoutingLanguagePost",
        "required": "true"
      }
    ],
    "return": "UserRoutingLanguage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: UserRoutingLanguagePost = new UserRoutingLanguagePost(...) // Language\n\n// Add routing language to user\nPostUserRoutinglanguagesRequest.postUserRoutinglanguages(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUserRoutinglanguagesRequest.postUserRoutinglanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "postuserroutingskills": {
    "operationId": "postuserroutingskills",
    "functionName": "postUserRoutingskills",
    "signature": "postUserRoutingskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserRoutingSkillPost",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: UserRoutingSkillPost = new UserRoutingSkillPost(...) // Skill\n\n// Add routing skill to user\nPostUserRoutingskillsRequest.postUserRoutingskills(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUserRoutingskillsRequest.postUserRoutingskills was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingemaildomainroute": {
    "operationId": "putroutingemaildomainroute",
    "functionName": "putRoutingEmailDomainRoute",
    "signature": "putRoutingEmailDomainRoute(domainName, routeId, body)",
    "parameters": [
      {
        "name": "domainName",
        "type": "String",
        "required": "true"
      },
      {
        "name": "routeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "InboundRoute",
        "required": "true"
      }
    ],
    "return": "InboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet domainName: String = \"\" // email domain\nlet routeId: String = \"\" // route ID\nlet body: InboundRoute = new InboundRoute(...) // Route\n\n// Update a route\nPutRoutingEmailDomainRouteRequest.putRoutingEmailDomainRoute(domainName: domainName, routeId: routeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingEmailDomainRouteRequest.putRoutingEmailDomainRoute was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingmessagerecipient": {
    "operationId": "putroutingmessagerecipient",
    "functionName": "putRoutingMessageRecipient",
    "signature": "putRoutingMessageRecipient(recipientId, body)",
    "parameters": [
      {
        "name": "recipientId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Recipient",
        "required": "true"
      }
    ],
    "return": "Recipient",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recipientId: String = \"\" // Recipient ID\nlet body: Recipient = new Recipient(...) // Recipient\n\n// Update a recipient\nPutRoutingMessageRecipientRequest.putRoutingMessageRecipient(recipientId: recipientId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingMessageRecipientRequest.putRoutingMessageRecipient was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingqueue": {
    "operationId": "putroutingqueue",
    "functionName": "putRoutingQueue",
    "signature": "putRoutingQueue(queueId, body)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "QueueRequest",
        "required": "true"
      }
    ],
    "return": "Queue",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet body: QueueRequest = new QueueRequest(...) // Queue\n\n// Update a queue\nPutRoutingQueueRequest.putRoutingQueue(queueId: queueId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingQueueRequest.putRoutingQueue was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingsettings": {
    "operationId": "putroutingsettings",
    "functionName": "putRoutingSettings",
    "signature": "putRoutingSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "RoutingSettings",
        "required": "true"
      }
    ],
    "return": "RoutingSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: RoutingSettings = new RoutingSettings(...) // Organization Settings\n\n// Update an organization's routing settings\nPutRoutingSettingsRequest.putRoutingSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingSettingsRequest.putRoutingSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingsettingstranscription": {
    "operationId": "putroutingsettingstranscription",
    "functionName": "putRoutingSettingsTranscription",
    "signature": "putRoutingSettingsTranscription(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TranscriptionSettings",
        "required": "true"
      }
    ],
    "return": "TranscriptionSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TranscriptionSettings = new TranscriptionSettings(...) // Organization Settings\n\n// Update Transcription Settings\nPutRoutingSettingsTranscriptionRequest.putRoutingSettingsTranscription(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingSettingsTranscriptionRequest.putRoutingSettingsTranscription was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingsmsphonenumber": {
    "operationId": "putroutingsmsphonenumber",
    "functionName": "putRoutingSmsPhonenumber",
    "signature": "putRoutingSmsPhonenumber(addressId, body, async)",
    "parameters": [
      {
        "name": "addressId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SmsPhoneNumber",
        "required": "true"
      },
      {
        "name": "async",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "SmsPhoneNumber",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet addressId: String = \"\" // Address ID\nlet body: SmsPhoneNumber = new SmsPhoneNumber(...) // SmsPhoneNumber\nlet async: Bool = true // Update an existing phone number for SMS in an asynchronous manner. If the async parameter value is true, this initiates the update of a provisioned phone number. Check the phoneNumber's provisioningStatus for the progress of this request.\n\n// Update a phone number provisioned for SMS.\nPutRoutingSmsPhonenumberRequest.putRoutingSmsPhonenumber(addressId: addressId, body: body, async: async) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingSmsPhonenumberRequest.putRoutingSmsPhonenumber was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutinguserutilization": {
    "operationId": "putroutinguserutilization",
    "functionName": "putRoutingUserUtilization",
    "signature": "putRoutingUserUtilization(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Utilization",
        "required": "true"
      }
    ],
    "return": "AgentMaxUtilization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: Utilization = new Utilization(...) // utilization\n\n// Update the user's max utilization settings.  Include only those media types requiring custom configuration.\nPutRoutingUserUtilizationRequest.putRoutingUserUtilization(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingUserUtilizationRequest.putRoutingUserUtilization was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingutilization": {
    "operationId": "putroutingutilization",
    "functionName": "putRoutingUtilization",
    "signature": "putRoutingUtilization(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Utilization",
        "required": "true"
      }
    ],
    "return": "Utilization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Utilization = new Utilization(...) // utilization\n\n// Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.\nPutRoutingUtilizationRequest.putRoutingUtilization(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingUtilizationRequest.putRoutingUtilization was successful\")\n        dump(response)\n    }\n}"
  },
  "putroutingwrapupcode": {
    "operationId": "putroutingwrapupcode",
    "functionName": "putRoutingWrapupcode",
    "signature": "putRoutingWrapupcode(codeId, body)",
    "parameters": [
      {
        "name": "codeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WrapupCode",
        "required": "true"
      }
    ],
    "return": "WrapupCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet codeId: String = \"\" // Wrapup Code ID\nlet body: WrapupCode = new WrapupCode(...) // WrapupCode\n\n// Update wrap-up code\nPutRoutingWrapupcodeRequest.putRoutingWrapupcode(codeId: codeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutRoutingWrapupcodeRequest.putRoutingWrapupcode was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserroutingskill": {
    "operationId": "putuserroutingskill",
    "functionName": "putUserRoutingskill",
    "signature": "putUserRoutingskill(userId, skillId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "skillId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserRoutingSkill",
        "required": "true"
      }
    ],
    "return": "UserRoutingSkill",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet skillId: String = \"\" // skillId\nlet body: UserRoutingSkill = new UserRoutingSkill(...) // Skill\n\n// Update routing skill proficiency or state.\nPutUserRoutingskillRequest.putUserRoutingskill(userId: userId, skillId: skillId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserRoutingskillRequest.putUserRoutingskill was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserroutingskillsbulk": {
    "operationId": "putuserroutingskillsbulk",
    "functionName": "putUserRoutingskillsBulk",
    "signature": "putUserRoutingskillsBulk(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[UserRoutingSkillPost]",
        "required": "true"
      }
    ],
    "return": "UserSkillEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [UserRoutingSkillPost] = [new UserRoutingSkillPost(...)] // Skill\n\n// Replace all routing skills assigned to a user\nPutUserRoutingskillsBulkRequest.putUserRoutingskillsBulk(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserRoutingskillsBulkRequest.putUserRoutingskillsBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "deletescimuser": {
    "operationId": "deletescimuser",
    "functionName": "deleteScimUser",
    "signature": "deleteScimUser(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/users.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Delete a user\nDeleteScimUserRequest.deleteScimUser(userId: userId, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteScimUserRequest.deleteScimUser was successful\")\n        dump(response)\n    }\n}"
  },
  "deletescimv2user": {
    "operationId": "deletescimv2user",
    "functionName": "deleteScimV2User",
    "signature": "deleteScimV2User(userId, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Delete a user\nDeleteScimV2UserRequest.deleteScimV2User(userId: userId, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteScimV2UserRequest.deleteScimV2User was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimgroup": {
    "operationId": "getscimgroup",
    "functionName": "getScimGroup",
    "signature": "getScimGroup(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/groups.\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n\n// Get a group\nGetScimGroupRequest.getScimGroup(groupId: groupId, attributes: attributes, excludedAttributes: excludedAttributes, ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimGroupRequest.getScimGroup was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimgroups": {
    "operationId": "getscimgroups",
    "functionName": "getScimGroups",
    "signature": "getScimGroups(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startIndex: Int = 0 // The 1-based index of the first query result.\nlet count: Int = 0 // The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet filter: String = displayName eq groupName // Filters results. If nothing is specified, returns all groups. Examples of valid values: \\\"id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3\\\", \\\"displayname eq Sales\\\".\n\n// Get a list of groups\nGetScimGroupsRequest.getScimGroups(startIndex: startIndex, count: count, attributes: attributes, excludedAttributes: excludedAttributes, filter: filter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimGroupsRequest.getScimGroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimresourcetype": {
    "operationId": "getscimresourcetype",
    "functionName": "getScimResourcetype",
    "signature": "getScimResourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet resourceType: GetScimResourcetypeRequest.ResourceType_getScimResourcetype = GetScimResourcetypeRequest.ResourceType_getScimResourcetype.enummember // The type of resource. Returned with GET /api/v2/scim/resourcetypes.\n\n// Get a resource type\nGetScimResourcetypeRequest.getScimResourcetype(resourceType: resourceType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimResourcetypeRequest.getScimResourcetype was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimresourcetypes": {
    "operationId": "getscimresourcetypes",
    "functionName": "getScimResourcetypes",
    "signature": "getScimResourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of resource types\nGetScimResourcetypesRequest.getScimResourcetypes() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimResourcetypesRequest.getScimResourcetypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimschema": {
    "operationId": "getscimschema",
    "functionName": "getScimSchema",
    "signature": "getScimSchema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: GetScimSchemaRequest.SchemaId_getScimSchema = GetScimSchemaRequest.SchemaId_getScimSchema.enummember // The ID of a schema. Returned with GET /api/v2/scim/schemas.\n\n// Get a SCIM schema\nGetScimSchemaRequest.getScimSchema(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimSchemaRequest.getScimSchema was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimschemas": {
    "operationId": "getscimschemas",
    "functionName": "getScimSchemas",
    "signature": "getScimSchemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filter: String = displayName eq groupName // Filtered results are invalid and return 403 Unauthorized.\n\n// Get a list of SCIM schemas\nGetScimSchemasRequest.getScimSchemas(filter: filter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimSchemasRequest.getScimSchemas was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimserviceproviderconfig": {
    "operationId": "getscimserviceproviderconfig",
    "functionName": "getScimServiceproviderconfig",
    "signature": "getScimServiceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/serviceproviderconfig. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n\n// Get a service provider's configuration\nGetScimServiceproviderconfigRequest.getScimServiceproviderconfig(ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimServiceproviderconfigRequest.getScimServiceproviderconfig was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimuser": {
    "operationId": "getscimuser",
    "functionName": "getScimUser",
    "signature": "getScimUser(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/users.\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n\n// Get a user\nGetScimUserRequest.getScimUser(userId: userId, attributes: attributes, excludedAttributes: excludedAttributes, ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimUserRequest.getScimUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimusers": {
    "operationId": "getscimusers",
    "functionName": "getScimUsers",
    "signature": "getScimUsers(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startIndex: Int = 0 // The 1-based index of the first query result.\nlet count: Int = 0 // The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet filter: String = \"\" // Filters results. If nothing is specified, returns all active users. Examples of valid values: \\\"id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9\\\", \\\"userName eq search@sample.org\\\", \\\"manager eq 16e10e2f-1136-43fe-bb84-eac073168a49\\\", \\\"email eq search@sample.org\\\", \\\"division eq divisionName\\\", \\\"externalId eq 167844\\\", \\\"active eq false\\\", \\\"employeeNumber eq 9876543210\\\".\n\n// Get a list of users\nGetScimUsersRequest.getScimUsers(startIndex: startIndex, count: count, attributes: attributes, excludedAttributes: excludedAttributes, filter: filter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimUsersRequest.getScimUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2group": {
    "operationId": "getscimv2group",
    "functionName": "getScimV2Group",
    "signature": "getScimV2Group(groupId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n\n// Get a group\nGetScimV2GroupRequest.getScimV2Group(groupId: groupId, attributes: attributes, excludedAttributes: excludedAttributes, ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2GroupRequest.getScimV2Group was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2groups": {
    "operationId": "getscimv2groups",
    "functionName": "getScimV2Groups",
    "signature": "getScimV2Groups(filter, startIndex, count, attributes, excludedAttributes)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "true"
      },
      {
        "name": "startIndex",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ScimGroupListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filter: String = displayName eq groupName // Filters results. If nothing is specified, returns all groups. Examples of valid values: \\\"id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3\\\", \\\"displayname eq Sales\\\".\nlet startIndex: Int = 0 // The 1-based index of the first query result.\nlet count: Int = 0 // The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns \\\"id\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\n\n// Get a list of groups\nGetScimV2GroupsRequest.getScimV2Groups(filter: filter, startIndex: startIndex, count: count, attributes: attributes, excludedAttributes: excludedAttributes) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2GroupsRequest.getScimV2Groups was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2resourcetype": {
    "operationId": "getscimv2resourcetype",
    "functionName": "getScimV2Resourcetype",
    "signature": "getScimV2Resourcetype(resourceType)",
    "parameters": [
      {
        "name": "resourceType",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimConfigResourceType",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet resourceType: GetScimV2ResourcetypeRequest.ResourceType_getScimV2Resourcetype = GetScimV2ResourcetypeRequest.ResourceType_getScimV2Resourcetype.enummember // The type of resource. Returned with GET /api/v2/scim/v2/resourcetypes.\n\n// Get a resource type\nGetScimV2ResourcetypeRequest.getScimV2Resourcetype(resourceType: resourceType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2ResourcetypeRequest.getScimV2Resourcetype was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2resourcetypes": {
    "operationId": "getscimv2resourcetypes",
    "functionName": "getScimV2Resourcetypes",
    "signature": "getScimV2Resourcetypes()",
    "return": "ScimConfigResourceTypesListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of resource types\nGetScimV2ResourcetypesRequest.getScimV2Resourcetypes() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2ResourcetypesRequest.getScimV2Resourcetypes was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2schema": {
    "operationId": "getscimv2schema",
    "functionName": "getScimV2Schema",
    "signature": "getScimV2Schema(schemaId)",
    "parameters": [
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScimV2SchemaDefinition",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaId: GetScimV2SchemaRequest.SchemaId_getScimV2Schema = GetScimV2SchemaRequest.SchemaId_getScimV2Schema.enummember // The ID of a schema. Returned with GET /api/v2/scim/v2/schemas.\n\n// Get a SCIM schema\nGetScimV2SchemaRequest.getScimV2Schema(schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2SchemaRequest.getScimV2Schema was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2schemas": {
    "operationId": "getscimv2schemas",
    "functionName": "getScimV2Schemas",
    "signature": "getScimV2Schemas(filter)",
    "parameters": [
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2SchemaListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet filter: String = displayName eq groupName // Filtered results are invalid and return 403 Unauthorized.\n\n// Get a list of SCIM schemas\nGetScimV2SchemasRequest.getScimV2Schemas(filter: filter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2SchemasRequest.getScimV2Schemas was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2serviceproviderconfig": {
    "operationId": "getscimv2serviceproviderconfig",
    "functionName": "getScimV2Serviceproviderconfig",
    "signature": "getScimV2Serviceproviderconfig(ifNoneMatch)",
    "parameters": [
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimServiceProviderConfig",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. \n\n// Get a service provider's configuration\nGetScimV2ServiceproviderconfigRequest.getScimV2Serviceproviderconfig(ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2ServiceproviderconfigRequest.getScimV2Serviceproviderconfig was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2user": {
    "operationId": "getscimv2user",
    "functionName": "getScimV2User",
    "signature": "getScimV2User(userId, attributes, excludedAttributes, ifNoneMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "ifNoneMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet ifNoneMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.\n\n// Get a user\nGetScimV2UserRequest.getScimV2User(userId: userId, attributes: attributes, excludedAttributes: excludedAttributes, ifNoneMatch: ifNoneMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2UserRequest.getScimV2User was successful\")\n        dump(response)\n    }\n}"
  },
  "getscimv2users": {
    "operationId": "getscimv2users",
    "functionName": "getScimV2Users",
    "signature": "getScimV2Users(startIndex, count, attributes, excludedAttributes, filter)",
    "parameters": [
      {
        "name": "startIndex",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "count",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "attributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "excludedAttributes",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "filter",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimUserListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet startIndex: Int = 0 // The 1-based index of the first query result.\nlet count: Int = 0 // The requested number of items per page. A value of 0 returns \\\"totalResults\\\". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the \\\"excludedAttributes\\\" or \\\"attributes\\\" query parameters to exclude or only include secondary lookup values such as \\\"externalId\\\",  \\\"roles\\\", \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages\\\", or \\\"urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills\\\".\nlet attributes: [String] = [\"\"] // Indicates which attributes to include. Returns these attributes and the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"attributes\\\" to avoid expensive secondary calls for the default attributes.\nlet excludedAttributes: [String] = [\"\"] // Indicates which attributes to exclude. Returns the default attributes minus \\\"excludedAttributes\\\". Always returns the \\\"id\\\", \\\"userName\\\", \\\"active\\\", and \\\"meta\\\" attributes. Use \\\"excludedAttributes\\\" to avoid expensive secondary calls for the default attributes.\nlet filter: String = \"\" // Filters results. If nothing is specified, returns all active users. Examples of valid values: \\\"id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9\\\", \\\"userName eq search@sample.org\\\", \\\"manager eq 16e10e2f-1136-43fe-bb84-eac073168a49\\\", \\\"email eq search@sample.org\\\", \\\"division eq divisionName\\\", \\\"externalId eq 167844\\\", \\\"active eq false\\\", \\\"employeeNumber eq 9876543210\\\".\n\n// Get a list of users\nGetScimV2UsersRequest.getScimV2Users(startIndex: startIndex, count: count, attributes: attributes, excludedAttributes: excludedAttributes, filter: filter) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScimV2UsersRequest.getScimV2Users was successful\")\n        dump(response)\n    }\n}"
  },
  "patchscimgroup": {
    "operationId": "patchscimgroup",
    "functionName": "patchScimGroup",
    "signature": "patchScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2PatchRequest",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body: ScimV2PatchRequest = new ScimV2PatchRequest(...) // The information used to modify a group.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Modify a group\nPatchScimGroupRequest.patchScimGroup(groupId: groupId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchScimGroupRequest.patchScimGroup was successful\")\n        dump(response)\n    }\n}"
  },
  "patchscimuser": {
    "operationId": "patchscimuser",
    "functionName": "patchScimUser",
    "signature": "patchScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2PatchRequest",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/users.\nlet body: ScimV2PatchRequest = new ScimV2PatchRequest(...) // The information used to modify a user.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Modify a user\nPatchScimUserRequest.patchScimUser(userId: userId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchScimUserRequest.patchScimUser was successful\")\n        dump(response)\n    }\n}"
  },
  "patchscimv2group": {
    "operationId": "patchscimv2group",
    "functionName": "patchScimV2Group",
    "signature": "patchScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2PatchRequest",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body: ScimV2PatchRequest = new ScimV2PatchRequest(...) // The information used to modify a group.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Modify a group\nPatchScimV2GroupRequest.patchScimV2Group(groupId: groupId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchScimV2GroupRequest.patchScimV2Group was successful\")\n        dump(response)\n    }\n}"
  },
  "patchscimv2user": {
    "operationId": "patchscimv2user",
    "functionName": "patchScimV2User",
    "signature": "patchScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2PatchRequest",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body: ScimV2PatchRequest = new ScimV2PatchRequest(...) // The information used to modify a user.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Modify a user\nPatchScimV2UserRequest.patchScimV2User(userId: userId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchScimV2UserRequest.patchScimV2User was successful\")\n        dump(response)\n    }\n}"
  },
  "postscimusers": {
    "operationId": "postscimusers",
    "functionName": "postScimUsers",
    "signature": "postScimUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ScimV2CreateUser",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ScimV2CreateUser = new ScimV2CreateUser(...) // The information used to create a user.\n\n// Create a user\nPostScimUsersRequest.postScimUsers(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostScimUsersRequest.postScimUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "postscimv2users": {
    "operationId": "postscimv2users",
    "functionName": "postScimV2Users",
    "signature": "postScimV2Users(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ScimV2CreateUser",
        "required": "true"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ScimV2CreateUser = new ScimV2CreateUser(...) // The information used to create a user.\n\n// Create a user\nPostScimV2UsersRequest.postScimV2Users(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostScimV2UsersRequest.postScimV2Users was successful\")\n        dump(response)\n    }\n}"
  },
  "putscimgroup": {
    "operationId": "putscimgroup",
    "functionName": "putScimGroup",
    "signature": "putScimGroup(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2Group",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/groups.\nlet body: ScimV2Group = new ScimV2Group(...) // The information used to replace a group.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Replace a group\nPutScimGroupRequest.putScimGroup(groupId: groupId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutScimGroupRequest.putScimGroup was successful\")\n        dump(response)\n    }\n}"
  },
  "putscimuser": {
    "operationId": "putscimuser",
    "functionName": "putScimUser",
    "signature": "putScimUser(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2User",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/users.\nlet body: ScimV2User = new ScimV2User(...) // The information used to replace a user.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Replace a user\nPutScimUserRequest.putScimUser(userId: userId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutScimUserRequest.putScimUser was successful\")\n        dump(response)\n    }\n}"
  },
  "putscimv2group": {
    "operationId": "putscimv2group",
    "functionName": "putScimV2Group",
    "signature": "putScimV2Group(groupId, body, ifMatch)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2Group",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2Group",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // The ID of a group. Returned with GET /api/v2/scim/v2/groups.\nlet body: ScimV2Group = new ScimV2Group(...) // The information used to replace a group.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Replace a group\nPutScimV2GroupRequest.putScimV2Group(groupId: groupId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutScimV2GroupRequest.putScimV2Group was successful\")\n        dump(response)\n    }\n}"
  },
  "putscimv2user": {
    "operationId": "putscimv2user",
    "functionName": "putScimV2User",
    "signature": "putScimV2User(userId, body, ifMatch)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ScimV2User",
        "required": "true"
      },
      {
        "name": "ifMatch",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScimV2User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // The ID of a user. Returned with GET /api/v2/scim/v2/users.\nlet body: ScimV2User = new ScimV2User(...) // The information used to replace a user.\nlet ifMatch: String = \"\" // The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: \\\"42\\\". If the ETag is different from the version on the server, returns 400 with a \\\"scimType\\\" of \\\"invalidVers\\\".\n\n// Replace a user\nPutScimV2UserRequest.putScimV2User(userId: userId, body: body, ifMatch: ifMatch) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutScimV2UserRequest.putScimV2User was successful\")\n        dump(response)\n    }\n}"
  },
  "getscript": {
    "operationId": "getscript",
    "functionName": "getScript",
    "signature": "getScript(scriptId)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Script",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\n\n// Get a script\nGetScriptRequest.getScript(scriptId: scriptId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptRequest.getScript was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptpage": {
    "operationId": "getscriptpage",
    "functionName": "getScriptPage",
    "signature": "getScriptPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet pageId: String = \"\" // Page ID\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get a page\nGetScriptPageRequest.getScriptPage(scriptId: scriptId, pageId: pageId, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptPageRequest.getScriptPage was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptpages": {
    "operationId": "getscriptpages",
    "functionName": "getScriptPages",
    "signature": "getScriptPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get the list of pages\nGetScriptPagesRequest.getScriptPages(scriptId: scriptId, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptPagesRequest.getScriptPages was successful\")\n        dump(response)\n    }\n}"
  },
  "getscripts": {
    "operationId": "getscripts",
    "functionName": "getScripts",
    "signature": "getScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name filter\nlet feature: String = \"\" // Feature filter\nlet flowId: String = \"\" // Secure flow id filter\nlet sortBy: GetScriptsRequest.SortBy_getScripts = GetScriptsRequest.SortBy_getScripts.enummember // SortBy\nlet sortOrder: GetScriptsRequest.SortOrder_getScripts = GetScriptsRequest.SortOrder_getScripts.enummember // SortOrder\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\nlet divisionIds: String = \"\" // Filters scripts to requested divisionIds\n\n// Get the list of scripts\nGetScriptsRequest.getScripts(pageSize: pageSize, pageNumber: pageNumber, expand: expand, name: name, feature: feature, flowId: flowId, sortBy: sortBy, sortOrder: sortOrder, scriptDataVersion: scriptDataVersion, divisionIds: divisionIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsRequest.getScripts was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptsdivisionviews": {
    "operationId": "getscriptsdivisionviews",
    "functionName": "getScriptsDivisionviews",
    "signature": "getScriptsDivisionviews(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name filter\nlet feature: String = \"\" // Feature filter\nlet flowId: String = \"\" // Secure flow id filter\nlet sortBy: GetScriptsDivisionviewsRequest.SortBy_getScriptsDivisionviews = GetScriptsDivisionviewsRequest.SortBy_getScriptsDivisionviews.enummember // SortBy\nlet sortOrder: GetScriptsDivisionviewsRequest.SortOrder_getScriptsDivisionviews = GetScriptsDivisionviewsRequest.SortOrder_getScriptsDivisionviews.enummember // SortOrder\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\nlet divisionIds: String = \"\" // Filters scripts to requested divisionIds\n\n// Get the metadata for a list of scripts\nGetScriptsDivisionviewsRequest.getScriptsDivisionviews(pageSize: pageSize, pageNumber: pageNumber, expand: expand, name: name, feature: feature, flowId: flowId, sortBy: sortBy, sortOrder: sortOrder, scriptDataVersion: scriptDataVersion, divisionIds: divisionIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsDivisionviewsRequest.getScriptsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublished": {
    "operationId": "getscriptspublished",
    "functionName": "getScriptsPublished",
    "signature": "getScriptsPublished(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name filter\nlet feature: String = \"\" // Feature filter\nlet flowId: String = \"\" // Secure flow id filter\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\nlet divisionIds: String = \"\" // Filters scripts to requested divisionIds\n\n// Get the published scripts.\nGetScriptsPublishedRequest.getScriptsPublished(pageSize: pageSize, pageNumber: pageNumber, expand: expand, name: name, feature: feature, flowId: flowId, scriptDataVersion: scriptDataVersion, divisionIds: divisionIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedRequest.getScriptsPublished was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublisheddivisionviews": {
    "operationId": "getscriptspublisheddivisionviews",
    "functionName": "getScriptsPublishedDivisionviews",
    "signature": "getScriptsPublishedDivisionviews(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion, divisionIds)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "flowId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionIds",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ScriptEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: String = \"\" // Expand\nlet name: String = \"\" // Name filter\nlet feature: String = \"\" // Feature filter\nlet flowId: String = \"\" // Secure flow id filter\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\nlet divisionIds: String = \"\" // Filters scripts to requested divisionIds\n\n// Get the published scripts metadata.\nGetScriptsPublishedDivisionviewsRequest.getScriptsPublishedDivisionviews(pageSize: pageSize, pageNumber: pageNumber, expand: expand, name: name, feature: feature, flowId: flowId, scriptDataVersion: scriptDataVersion, divisionIds: divisionIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedDivisionviewsRequest.getScriptsPublishedDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublishedscriptid": {
    "operationId": "getscriptspublishedscriptid",
    "functionName": "getScriptsPublishedScriptId",
    "signature": "getScriptsPublishedScriptId(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Script",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get the published script.\nGetScriptsPublishedScriptIdRequest.getScriptsPublishedScriptId(scriptId: scriptId, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedScriptIdRequest.getScriptsPublishedScriptId was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublishedscriptidpage": {
    "operationId": "getscriptspublishedscriptidpage",
    "functionName": "getScriptsPublishedScriptIdPage",
    "signature": "getScriptsPublishedScriptIdPage(scriptId, pageId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Page",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet pageId: String = \"\" // Page ID\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get the published page.\nGetScriptsPublishedScriptIdPageRequest.getScriptsPublishedScriptIdPage(scriptId: scriptId, pageId: pageId, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedScriptIdPageRequest.getScriptsPublishedScriptIdPage was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublishedscriptidpages": {
    "operationId": "getscriptspublishedscriptidpages",
    "functionName": "getScriptsPublishedScriptIdPages",
    "signature": "getScriptsPublishedScriptIdPages(scriptId, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[Page]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get the list of published pages\nGetScriptsPublishedScriptIdPagesRequest.getScriptsPublishedScriptIdPages(scriptId: scriptId, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedScriptIdPagesRequest.getScriptsPublishedScriptIdPages was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptspublishedscriptidvariables": {
    "operationId": "getscriptspublishedscriptidvariables",
    "functionName": "getScriptsPublishedScriptIdVariables",
    "signature": "getScriptsPublishedScriptIdVariables(scriptId, input, output, type, scriptDataVersion)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "input",
        "type": "String",
        "required": "false"
      },
      {
        "name": "output",
        "type": "String",
        "required": "false"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "scriptDataVersion",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet input: String = \"\" // input\nlet output: String = \"\" // output\nlet type: String = \"\" // type\nlet scriptDataVersion: String = \"\" // Advanced usage - controls the data version of the script\n\n// Get the published variables\nGetScriptsPublishedScriptIdVariablesRequest.getScriptsPublishedScriptIdVariables(scriptId: scriptId, input: input, output: output, type: type, scriptDataVersion: scriptDataVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsPublishedScriptIdVariablesRequest.getScriptsPublishedScriptIdVariables was successful\")\n        dump(response)\n    }\n}"
  },
  "getscriptsuploadstatus": {
    "operationId": "getscriptsuploadstatus",
    "functionName": "getScriptsUploadStatus",
    "signature": "getScriptsUploadStatus(uploadId, longPoll)",
    "parameters": [
      {
        "name": "uploadId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "longPoll",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "ImportScriptStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet uploadId: String = \"\" // Upload ID\nlet longPoll: Bool = true // Enable longPolling endpoint\n\n// Get the upload status of an imported script\nGetScriptsUploadStatusRequest.getScriptsUploadStatus(uploadId: uploadId, longPoll: longPoll) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetScriptsUploadStatusRequest.getScriptsUploadStatus was successful\")\n        dump(response)\n    }\n}"
  },
  "postscriptexport": {
    "operationId": "postscriptexport",
    "functionName": "postScriptExport",
    "signature": "postScriptExport(scriptId, body)",
    "parameters": [
      {
        "name": "scriptId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ExportScriptRequest",
        "required": "false"
      }
    ],
    "return": "ExportScriptResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet scriptId: String = \"\" // Script ID\nlet body: ExportScriptRequest = new ExportScriptRequest(...) // \n\n// Export a script via download service.\nPostScriptExportRequest.postScriptExport(scriptId: scriptId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostScriptExportRequest.postScriptExport was successful\")\n        dump(response)\n    }\n}"
  },
  "getdocumentationgknsearch": {
    "operationId": "getdocumentationgknsearch",
    "functionName": "getDocumentationGknSearch",
    "signature": "getDocumentationGknSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\n\n// Search gkn documentation using the q64 value returned from a previous search\nGetDocumentationGknSearchRequest.getDocumentationGknSearch(q64: q64) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDocumentationGknSearchRequest.getDocumentationGknSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "getdocumentationsearch": {
    "operationId": "getdocumentationsearch",
    "functionName": "getDocumentationSearch",
    "signature": "getDocumentationSearch(q64)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\n\n// Search documentation using the q64 value returned from a previous search\nGetDocumentationSearchRequest.getDocumentationSearch(q64: q64) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDocumentationSearchRequest.getDocumentationSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "getsearch": {
    "operationId": "getsearch",
    "functionName": "getSearch",
    "signature": "getSearch(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet profile: Bool = true // profile\n\n// Search using the q64 value returned from a previous search.\nGetSearchRequest.getSearch(q64: q64, expand: expand, profile: profile) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSearchRequest.getSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "getsearchsuggest": {
    "operationId": "getsearchsuggest",
    "functionName": "getSearchSuggest",
    "signature": "getSearchSuggest(q64, expand, profile)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "profile",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet profile: Bool = true // profile\n\n// Suggest resources using the q64 value returned from a previous suggest query.\nGetSearchSuggestRequest.getSearchSuggest(q64: q64, expand: expand, profile: profile) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSearchSuggestRequest.getSearchSuggest was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserssearch": {
    "operationId": "getuserssearch",
    "functionName": "getUsersSearch",
    "signature": "getUsersSearch(q64, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // expand\nlet integrationPresenceSource: GetUsersSearchRequest.IntegrationPresenceSource_getUsersSearch = GetUsersSearchRequest.IntegrationPresenceSource_getUsersSearch.enummember // integrationPresenceSource\n\n// Search users using the q64 value returned from a previous search\nGetUsersSearchRequest.getUsersSearch(q64: q64, expand: expand, integrationPresenceSource: integrationPresenceSource) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersSearchRequest.getUsersSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailsearch": {
    "operationId": "getvoicemailsearch",
    "functionName": "getVoicemailSearch",
    "signature": "getVoicemailSearch(q64, expand)",
    "parameters": [
      {
        "name": "q64",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet q64: String = \"\" // q64\nlet expand: [String] = [\"\"] // expand\n\n// Search voicemails using the q64 value returned from a previous search\nGetVoicemailSearchRequest.getVoicemailSearch(q64: q64, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailSearchRequest.getVoicemailSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postdocumentationgknsearch": {
    "operationId": "postdocumentationgknsearch",
    "functionName": "postDocumentationGknSearch",
    "signature": "postDocumentationGknSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GKNDocumentationSearchRequest",
        "required": "true"
      }
    ],
    "return": "GKNDocumentationSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GKNDocumentationSearchRequest = new GKNDocumentationSearchRequest(...) // Search request options\n\n// Search gkn documentation\nPostDocumentationGknSearchRequest.postDocumentationGknSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostDocumentationGknSearchRequest.postDocumentationGknSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postdocumentationsearch": {
    "operationId": "postdocumentationsearch",
    "functionName": "postDocumentationSearch",
    "signature": "postDocumentationSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DocumentationSearchRequest",
        "required": "true"
      }
    ],
    "return": "DocumentationSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DocumentationSearchRequest = new DocumentationSearchRequest(...) // Search request options\n\n// Search documentation\nPostDocumentationSearchRequest.postDocumentationSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostDocumentationSearchRequest.postDocumentationSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postsearch": {
    "operationId": "postsearch",
    "functionName": "postSearch",
    "signature": "postSearch(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "SearchRequest",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SearchRequest = new SearchRequest(...) // Search request options\nlet profile: Bool = true // profile\n\n// Search resources.\nPostSearchRequest.postSearch(body: body, profile: profile) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSearchRequest.postSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postsearchsuggest": {
    "operationId": "postsearchsuggest",
    "functionName": "postSearchSuggest",
    "signature": "postSearchSuggest(body, profile)",
    "parameters": [
      {
        "name": "body",
        "type": "SuggestSearchRequest",
        "required": "true"
      },
      {
        "name": "profile",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "JsonNodeSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SuggestSearchRequest = new SuggestSearchRequest(...) // Search request options\nlet profile: Bool = true // profile\n\n// Suggest resources.\nPostSearchSuggestRequest.postSearchSuggest(body: body, profile: profile) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSearchSuggestRequest.postSearchSuggest was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticstranscriptssearch": {
    "operationId": "postspeechandtextanalyticstranscriptssearch",
    "functionName": "postSpeechandtextanalyticsTranscriptsSearch",
    "signature": "postSpeechandtextanalyticsTranscriptsSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TranscriptSearchRequest",
        "required": "true"
      }
    ],
    "return": "JsonSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TranscriptSearchRequest = new TranscriptSearchRequest(...) // Search request options\n\n// Search resources.\nPostSpeechandtextanalyticsTranscriptsSearchRequest.postSpeechandtextanalyticsTranscriptsSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsTranscriptsSearchRequest.postSpeechandtextanalyticsTranscriptsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postuserssearch": {
    "operationId": "postuserssearch",
    "functionName": "postUsersSearch",
    "signature": "postUsersSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UserSearchRequest",
        "required": "true"
      }
    ],
    "return": "UsersSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UserSearchRequest = new UserSearchRequest(...) // Search request options\n\n// Search users\nPostUsersSearchRequest.postUsersSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUsersSearchRequest.postUsersSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postvoicemailsearch": {
    "operationId": "postvoicemailsearch",
    "functionName": "postVoicemailSearch",
    "signature": "postVoicemailSearch(body)",
    "parameters": [
      {
        "name": "body",
        "type": "VoicemailSearchRequest",
        "required": "true"
      }
    ],
    "return": "VoicemailsSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: VoicemailSearchRequest = new VoicemailSearchRequest(...) // Search request options\n\n// Search voicemails\nPostVoicemailSearchRequest.postVoicemailSearch(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostVoicemailSearchRequest.postVoicemailSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "deletespeechandtextanalyticsprogram": {
    "operationId": "deletespeechandtextanalyticsprogram",
    "functionName": "deleteSpeechandtextanalyticsProgram",
    "signature": "deleteSpeechandtextanalyticsProgram(programId, forceDelete)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDelete",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet programId: String = \"\" // The id of the program\nlet forceDelete: Bool = true // Indicates whether the program is forced to be deleted or not. Required when the program to delete is the default program.\n\n// Delete a Speech & Text Analytics program by id\nDeleteSpeechandtextanalyticsProgramRequest.deleteSpeechandtextanalyticsProgram(programId: programId, forceDelete: forceDelete) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteSpeechandtextanalyticsProgramRequest.deleteSpeechandtextanalyticsProgram was successful\")\n    }\n}"
  },
  "deletespeechandtextanalyticssentimentfeedback": {
    "operationId": "deletespeechandtextanalyticssentimentfeedback",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedback",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedback()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete All Speech & Text Analytics SentimentFeedback\nDeleteSpeechandtextanalyticsSentimentfeedbackRequest.deleteSpeechandtextanalyticsSentimentfeedback() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteSpeechandtextanalyticsSentimentfeedbackRequest.deleteSpeechandtextanalyticsSentimentfeedback was successful\")\n    }\n}"
  },
  "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid": {
    "operationId": "deletespeechandtextanalyticssentimentfeedbacksentimentfeedbackid",
    "functionName": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId",
    "signature": "deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)",
    "parameters": [
      {
        "name": "sentimentFeedbackId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sentimentFeedbackId: String = \"\" // The Id of the SentimentFeedback\n\n// Delete a Speech & Text Analytics SentimentFeedback by Id\nDeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequest.deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId: sentimentFeedbackId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdRequest.deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId was successful\")\n    }\n}"
  },
  "deletespeechandtextanalyticstopic": {
    "operationId": "deletespeechandtextanalyticstopic",
    "functionName": "deleteSpeechandtextanalyticsTopic",
    "signature": "deleteSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet topicId: String = \"\" // The id of the topic\n\n// Delete a Speech & Text Analytics topic by id\nDeleteSpeechandtextanalyticsTopicRequest.deleteSpeechandtextanalyticsTopic(topicId: topicId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteSpeechandtextanalyticsTopicRequest.deleteSpeechandtextanalyticsTopic was successful\")\n    }\n}"
  },
  "getspeechandtextanalyticsconversation": {
    "operationId": "getspeechandtextanalyticsconversation",
    "functionName": "getSpeechandtextanalyticsConversation",
    "signature": "getSpeechandtextanalyticsConversation(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ConversationMetrics",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation Id\n\n// Get Speech and Text Analytics for a specific conversation\nGetSpeechandtextanalyticsConversationRequest.getSpeechandtextanalyticsConversation(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsConversationRequest.getSpeechandtextanalyticsConversation was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsconversationcommunicationtranscripturl": {
    "operationId": "getspeechandtextanalyticsconversationcommunicationtranscripturl",
    "functionName": "getSpeechandtextanalyticsConversationCommunicationTranscripturl",
    "signature": "getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "communicationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TranscriptUrl",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // Conversation ID\nlet communicationId: String = \"\" // Communication ID\n\n// Get the pre-signed S3 URL for the transcript of a specific communication of a conversation\nGetSpeechandtextanalyticsConversationCommunicationTranscripturlRequest.getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId: conversationId, communicationId: communicationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsConversationCommunicationTranscripturlRequest.getSpeechandtextanalyticsConversationCommunicationTranscripturl was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogram": {
    "operationId": "getspeechandtextanalyticsprogram",
    "functionName": "getSpeechandtextanalyticsProgram",
    "signature": "getSpeechandtextanalyticsProgram(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet programId: String = \"\" // The id of the program\n\n// Get a Speech & Text Analytics program by id\nGetSpeechandtextanalyticsProgramRequest.getSpeechandtextanalyticsProgram(programId: programId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramRequest.getSpeechandtextanalyticsProgram was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogrammappings": {
    "operationId": "getspeechandtextanalyticsprogrammappings",
    "functionName": "getSpeechandtextanalyticsProgramMappings",
    "signature": "getSpeechandtextanalyticsProgramMappings(programId)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet programId: String = \"\" // The id of the program\n\n// Get Speech & Text Analytics program mappings to queues and flows by id\nGetSpeechandtextanalyticsProgramMappingsRequest.getSpeechandtextanalyticsProgramMappings(programId: programId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramMappingsRequest.getSpeechandtextanalyticsProgramMappings was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprograms": {
    "operationId": "getspeechandtextanalyticsprograms",
    "functionName": "getSpeechandtextanalyticsPrograms",
    "signature": "getSpeechandtextanalyticsPrograms(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ProgramsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet nextPage: String = \"\" // The key for listing the next page\nlet pageSize: Int = 0 // The page size for the listing\n\n// Get the list of Speech & Text Analytics programs\nGetSpeechandtextanalyticsProgramsRequest.getSpeechandtextanalyticsPrograms(nextPage: nextPage, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramsRequest.getSpeechandtextanalyticsPrograms was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogramsgeneraljob": {
    "operationId": "getspeechandtextanalyticsprogramsgeneraljob",
    "functionName": "getSpeechandtextanalyticsProgramsGeneralJob",
    "signature": "getSpeechandtextanalyticsProgramsGeneralJob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // The id of the publish programs job\n\n// Get a Speech & Text Analytics general program job by id\nGetSpeechandtextanalyticsProgramsGeneralJobRequest.getSpeechandtextanalyticsProgramsGeneralJob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramsGeneralJobRequest.getSpeechandtextanalyticsProgramsGeneralJob was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogramsmappings": {
    "operationId": "getspeechandtextanalyticsprogramsmappings",
    "functionName": "getSpeechandtextanalyticsProgramsMappings",
    "signature": "getSpeechandtextanalyticsProgramsMappings(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "ProgramsMappingsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet nextPage: String = \"\" // The key for listing the next page\nlet pageSize: Int = 0 // The page size for the listing\n\n// Get the list of Speech & Text Analytics programs mappings to queues and flows\nGetSpeechandtextanalyticsProgramsMappingsRequest.getSpeechandtextanalyticsProgramsMappings(nextPage: nextPage, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramsMappingsRequest.getSpeechandtextanalyticsProgramsMappings was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogramspublishjob": {
    "operationId": "getspeechandtextanalyticsprogramspublishjob",
    "functionName": "getSpeechandtextanalyticsProgramsPublishjob",
    "signature": "getSpeechandtextanalyticsProgramsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // The id of the publish programs job\n\n// Get a Speech & Text Analytics publish programs job by id\nGetSpeechandtextanalyticsProgramsPublishjobRequest.getSpeechandtextanalyticsProgramsPublishjob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramsPublishjobRequest.getSpeechandtextanalyticsProgramsPublishjob was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticsprogramsunpublished": {
    "operationId": "getspeechandtextanalyticsprogramsunpublished",
    "functionName": "getSpeechandtextanalyticsProgramsUnpublished",
    "signature": "getSpeechandtextanalyticsProgramsUnpublished(nextPage, pageSize)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "UnpublishedProgramsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet nextPage: String = \"\" // The key for listing the next page\nlet pageSize: Int = 0 // The page size for the listing\n\n// Get the list of Speech & Text Analytics unpublished programs\nGetSpeechandtextanalyticsProgramsUnpublishedRequest.getSpeechandtextanalyticsProgramsUnpublished(nextPage: nextPage, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsProgramsUnpublishedRequest.getSpeechandtextanalyticsProgramsUnpublished was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticssentimentdialects": {
    "operationId": "getspeechandtextanalyticssentimentdialects",
    "functionName": "getSpeechandtextanalyticsSentimentDialects",
    "signature": "getSpeechandtextanalyticsSentimentDialects()",
    "return": "EntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of Speech & Text Analytics sentiment supported dialects\nGetSpeechandtextanalyticsSentimentDialectsRequest.getSpeechandtextanalyticsSentimentDialects() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsSentimentDialectsRequest.getSpeechandtextanalyticsSentimentDialects was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticssentimentfeedback": {
    "operationId": "getspeechandtextanalyticssentimentfeedback",
    "functionName": "getSpeechandtextanalyticsSentimentfeedback",
    "signature": "getSpeechandtextanalyticsSentimentfeedback(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SentimentFeedbackEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dialect: String = en-US // The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n\n// Get the list of Speech & Text Analytics SentimentFeedback\nGetSpeechandtextanalyticsSentimentfeedbackRequest.getSpeechandtextanalyticsSentimentfeedback(dialect: dialect) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsSentimentfeedbackRequest.getSpeechandtextanalyticsSentimentfeedback was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticssettings": {
    "operationId": "getspeechandtextanalyticssettings",
    "functionName": "getSpeechandtextanalyticsSettings",
    "signature": "getSpeechandtextanalyticsSettings()",
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get Speech And Text Analytics Settings\nGetSpeechandtextanalyticsSettingsRequest.getSpeechandtextanalyticsSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsSettingsRequest.getSpeechandtextanalyticsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticstopic": {
    "operationId": "getspeechandtextanalyticstopic",
    "functionName": "getSpeechandtextanalyticsTopic",
    "signature": "getSpeechandtextanalyticsTopic(topicId)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet topicId: String = \"\" // The id of the topic\n\n// Get a Speech & Text Analytics topic by id\nGetSpeechandtextanalyticsTopicRequest.getSpeechandtextanalyticsTopic(topicId: topicId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsTopicRequest.getSpeechandtextanalyticsTopic was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticstopics": {
    "operationId": "getspeechandtextanalyticstopics",
    "functionName": "getSpeechandtextanalyticsTopics",
    "signature": "getSpeechandtextanalyticsTopics(nextPage, pageSize, state, name, ids, sortBy, sortOrder)",
    "parameters": [
      {
        "name": "nextPage",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ids",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TopicsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet nextPage: String = \"\" // The key for listing the next page\nlet pageSize: Int = 0 // The page size for the listing\nlet state: GetSpeechandtextanalyticsTopicsRequest.State_getSpeechandtextanalyticsTopics = GetSpeechandtextanalyticsTopicsRequest.State_getSpeechandtextanalyticsTopics.enummember // Topic state. Defaults to latest\nlet name: String = \"\" // Case insensitive partial name to filter by\nlet ids: [String] = [\"\"] // Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed.\nlet sortBy: GetSpeechandtextanalyticsTopicsRequest.SortBy_getSpeechandtextanalyticsTopics = GetSpeechandtextanalyticsTopicsRequest.SortBy_getSpeechandtextanalyticsTopics.enummember // Sort results by. Defaults to name\nlet sortOrder: GetSpeechandtextanalyticsTopicsRequest.SortOrder_getSpeechandtextanalyticsTopics = GetSpeechandtextanalyticsTopicsRequest.SortOrder_getSpeechandtextanalyticsTopics.enummember // Sort order. Defaults to asc\n\n// Get the list of Speech & Text Analytics topics\nGetSpeechandtextanalyticsTopicsRequest.getSpeechandtextanalyticsTopics(nextPage: nextPage, pageSize: pageSize, state: state, name: name, ids: ids, sortBy: sortBy, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsTopicsRequest.getSpeechandtextanalyticsTopics was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticstopicsdialects": {
    "operationId": "getspeechandtextanalyticstopicsdialects",
    "functionName": "getSpeechandtextanalyticsTopicsDialects",
    "signature": "getSpeechandtextanalyticsTopicsDialects()",
    "return": "EntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get list of supported Speech & Text Analytics topics dialects\nGetSpeechandtextanalyticsTopicsDialectsRequest.getSpeechandtextanalyticsTopicsDialects() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsTopicsDialectsRequest.getSpeechandtextanalyticsTopicsDialects was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticstopicsgeneral": {
    "operationId": "getspeechandtextanalyticstopicsgeneral",
    "functionName": "getSpeechandtextanalyticsTopicsGeneral",
    "signature": "getSpeechandtextanalyticsTopicsGeneral(dialect)",
    "parameters": [
      {
        "name": "dialect",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "GeneralTopicsEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dialect: GetSpeechandtextanalyticsTopicsGeneralRequest.Dialect_getSpeechandtextanalyticsTopicsGeneral = GetSpeechandtextanalyticsTopicsGeneralRequest.Dialect_getSpeechandtextanalyticsTopicsGeneral.enummember // The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard\n\n// Get the Speech & Text Analytics general topics for a given dialect\nGetSpeechandtextanalyticsTopicsGeneralRequest.getSpeechandtextanalyticsTopicsGeneral(dialect: dialect) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsTopicsGeneralRequest.getSpeechandtextanalyticsTopicsGeneral was successful\")\n        dump(response)\n    }\n}"
  },
  "getspeechandtextanalyticstopicspublishjob": {
    "operationId": "getspeechandtextanalyticstopicspublishjob",
    "functionName": "getSpeechandtextanalyticsTopicsPublishjob",
    "signature": "getSpeechandtextanalyticsTopicsPublishjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // The id of the publish topics job\n\n// Get a Speech & Text Analytics publish topics job by id\nGetSpeechandtextanalyticsTopicsPublishjobRequest.getSpeechandtextanalyticsTopicsPublishjob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetSpeechandtextanalyticsTopicsPublishjobRequest.getSpeechandtextanalyticsTopicsPublishjob was successful\")\n        dump(response)\n    }\n}"
  },
  "patchspeechandtextanalyticssettings": {
    "operationId": "patchspeechandtextanalyticssettings",
    "functionName": "patchSpeechandtextanalyticsSettings",
    "signature": "patchSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SpeechTextAnalyticsSettingsRequest",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SpeechTextAnalyticsSettingsRequest = new SpeechTextAnalyticsSettingsRequest(...) // Speech And Text Analytics Settings\n\n// Patch Speech And Text Analytics Settings\nPatchSpeechandtextanalyticsSettingsRequest.patchSpeechandtextanalyticsSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchSpeechandtextanalyticsSettingsRequest.patchSpeechandtextanalyticsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticsprograms": {
    "operationId": "postspeechandtextanalyticsprograms",
    "functionName": "postSpeechandtextanalyticsPrograms",
    "signature": "postSpeechandtextanalyticsPrograms(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ProgramRequest",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ProgramRequest = new ProgramRequest(...) // The program to create\n\n// Create new Speech & Text Analytics program\nPostSpeechandtextanalyticsProgramsRequest.postSpeechandtextanalyticsPrograms(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsProgramsRequest.postSpeechandtextanalyticsPrograms was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticsprogramsgeneraljobs": {
    "operationId": "postspeechandtextanalyticsprogramsgeneraljobs",
    "functionName": "postSpeechandtextanalyticsProgramsGeneralJobs",
    "signature": "postSpeechandtextanalyticsProgramsGeneralJobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "GeneralProgramJobRequest",
        "required": "true"
      }
    ],
    "return": "GeneralProgramJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: GeneralProgramJobRequest = new GeneralProgramJobRequest(...) // The general programs job to create\n\n// Create new Speech & Text Analytics general program job\nPostSpeechandtextanalyticsProgramsGeneralJobsRequest.postSpeechandtextanalyticsProgramsGeneralJobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsProgramsGeneralJobsRequest.postSpeechandtextanalyticsProgramsGeneralJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticsprogramspublishjobs": {
    "operationId": "postspeechandtextanalyticsprogramspublishjobs",
    "functionName": "postSpeechandtextanalyticsProgramsPublishjobs",
    "signature": "postSpeechandtextanalyticsProgramsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ProgramJobRequest",
        "required": "true"
      }
    ],
    "return": "ProgramJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ProgramJobRequest = new ProgramJobRequest(...) // The publish programs job to create\n\n// Create new Speech & Text Analytics publish programs job\nPostSpeechandtextanalyticsProgramsPublishjobsRequest.postSpeechandtextanalyticsProgramsPublishjobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsProgramsPublishjobsRequest.postSpeechandtextanalyticsProgramsPublishjobs was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticssentimentfeedback": {
    "operationId": "postspeechandtextanalyticssentimentfeedback",
    "functionName": "postSpeechandtextanalyticsSentimentfeedback",
    "signature": "postSpeechandtextanalyticsSentimentfeedback(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SentimentFeedback",
        "required": "true"
      }
    ],
    "return": "SentimentFeedback",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SentimentFeedback = new SentimentFeedback(...) // The SentimentFeedback to create\n\n// Create a Speech & Text Analytics SentimentFeedback\nPostSpeechandtextanalyticsSentimentfeedbackRequest.postSpeechandtextanalyticsSentimentfeedback(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsSentimentfeedbackRequest.postSpeechandtextanalyticsSentimentfeedback was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticstopics": {
    "operationId": "postspeechandtextanalyticstopics",
    "functionName": "postSpeechandtextanalyticsTopics",
    "signature": "postSpeechandtextanalyticsTopics(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TopicRequest",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TopicRequest = new TopicRequest(...) // The topic to create\n\n// Create new Speech & Text Analytics topic\nPostSpeechandtextanalyticsTopicsRequest.postSpeechandtextanalyticsTopics(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsTopicsRequest.postSpeechandtextanalyticsTopics was successful\")\n        dump(response)\n    }\n}"
  },
  "postspeechandtextanalyticstopicspublishjobs": {
    "operationId": "postspeechandtextanalyticstopicspublishjobs",
    "functionName": "postSpeechandtextanalyticsTopicsPublishjobs",
    "signature": "postSpeechandtextanalyticsTopicsPublishjobs(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TopicJobRequest",
        "required": "true"
      }
    ],
    "return": "TopicJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TopicJobRequest = new TopicJobRequest(...) // The publish topics job to create\n\n// Create new Speech & Text Analytics publish topics job\nPostSpeechandtextanalyticsTopicsPublishjobsRequest.postSpeechandtextanalyticsTopicsPublishjobs(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostSpeechandtextanalyticsTopicsPublishjobsRequest.postSpeechandtextanalyticsTopicsPublishjobs was successful\")\n        dump(response)\n    }\n}"
  },
  "putspeechandtextanalyticsprogram": {
    "operationId": "putspeechandtextanalyticsprogram",
    "functionName": "putSpeechandtextanalyticsProgram",
    "signature": "putSpeechandtextanalyticsProgram(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ProgramRequest",
        "required": "true"
      }
    ],
    "return": "Program",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet programId: String = \"\" // The id of the program\nlet body: ProgramRequest = new ProgramRequest(...) // The program to update\n\n// Update existing Speech & Text Analytics program\nPutSpeechandtextanalyticsProgramRequest.putSpeechandtextanalyticsProgram(programId: programId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutSpeechandtextanalyticsProgramRequest.putSpeechandtextanalyticsProgram was successful\")\n        dump(response)\n    }\n}"
  },
  "putspeechandtextanalyticsprogrammappings": {
    "operationId": "putspeechandtextanalyticsprogrammappings",
    "functionName": "putSpeechandtextanalyticsProgramMappings",
    "signature": "putSpeechandtextanalyticsProgramMappings(programId, body)",
    "parameters": [
      {
        "name": "programId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ProgramMappingsRequest",
        "required": "true"
      }
    ],
    "return": "ProgramMappings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet programId: String = \"\" // The id of the program\nlet body: ProgramMappingsRequest = new ProgramMappingsRequest(...) // The program to set mappings for\n\n// Set Speech & Text Analytics program mappings to queues and flows\nPutSpeechandtextanalyticsProgramMappingsRequest.putSpeechandtextanalyticsProgramMappings(programId: programId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutSpeechandtextanalyticsProgramMappingsRequest.putSpeechandtextanalyticsProgramMappings was successful\")\n        dump(response)\n    }\n}"
  },
  "putspeechandtextanalyticssettings": {
    "operationId": "putspeechandtextanalyticssettings",
    "functionName": "putSpeechandtextanalyticsSettings",
    "signature": "putSpeechandtextanalyticsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "SpeechTextAnalyticsSettingsRequest",
        "required": "true"
      }
    ],
    "return": "SpeechTextAnalyticsSettingsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: SpeechTextAnalyticsSettingsRequest = new SpeechTextAnalyticsSettingsRequest(...) // Speech And Text Analytics Settings\n\n// Update Speech And Text Analytics Settings\nPutSpeechandtextanalyticsSettingsRequest.putSpeechandtextanalyticsSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutSpeechandtextanalyticsSettingsRequest.putSpeechandtextanalyticsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "putspeechandtextanalyticstopic": {
    "operationId": "putspeechandtextanalyticstopic",
    "functionName": "putSpeechandtextanalyticsTopic",
    "signature": "putSpeechandtextanalyticsTopic(topicId, body)",
    "parameters": [
      {
        "name": "topicId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TopicRequest",
        "required": "true"
      }
    ],
    "return": "Topic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet topicId: String = \"\" // The id of the topic\nlet body: TopicRequest = new TopicRequest(...) // The topic to update\n\n// Update existing Speech & Text Analytics topic\nPutSpeechandtextanalyticsTopicRequest.putSpeechandtextanalyticsTopic(topicId: topicId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutSpeechandtextanalyticsTopicRequest.putSpeechandtextanalyticsTopic was successful\")\n        dump(response)\n    }\n}"
  },
  "deletestationassociateduser": {
    "operationId": "deletestationassociateduser",
    "functionName": "deleteStationAssociateduser",
    "signature": "deleteStationAssociateduser(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet stationId: String = \"\" // Station ID\n\n// Unassigns the user assigned to this station\nDeleteStationAssociateduserRequest.deleteStationAssociateduser(stationId: stationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteStationAssociateduserRequest.deleteStationAssociateduser was successful\")\n    }\n}"
  },
  "getstation": {
    "operationId": "getstation",
    "functionName": "getStation",
    "signature": "getStation(stationId)",
    "parameters": [
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Station",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet stationId: String = \"\" // Station ID\n\n// Get station.\nGetStationRequest.getStation(stationId: stationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetStationRequest.getStation was successful\")\n        dump(response)\n    }\n}"
  },
  "getstations": {
    "operationId": "getstations",
    "functionName": "getStations",
    "signature": "getStations(pageSize, pageNumber, sortBy, name, userSelectable, webRtcUserId, _id, lineAppearanceId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "userSelectable",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "String",
        "required": "false"
      },
      {
        "name": "lineAppearanceId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "StationEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet name: String = \"\" // Name\nlet userSelectable: String = \"\" // True for stations that the user can select otherwise false\nlet webRtcUserId: String = \"\" // Filter for the webRtc station of the webRtcUserId\nlet _id: String = \"\" // Comma separated list of stationIds\nlet lineAppearanceId: String = \"\" // lineAppearanceId\n\n// Get the list of available stations.\nGetStationsRequest.getStations(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, name: name, userSelectable: userSelectable, webRtcUserId: webRtcUserId, _id: _id, lineAppearanceId: lineAppearanceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetStationsRequest.getStations was successful\")\n        dump(response)\n    }\n}"
  },
  "getstationssettings": {
    "operationId": "getstationssettings",
    "functionName": "getStationsSettings",
    "signature": "getStationsSettings()",
    "return": "StationSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get an organization's StationSettings\nGetStationsSettingsRequest.getStationsSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetStationsSettingsRequest.getStationsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "patchstationssettings": {
    "operationId": "patchstationssettings",
    "functionName": "patchStationsSettings",
    "signature": "patchStationsSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "StationSettings",
        "required": "true"
      }
    ],
    "return": "StationSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: StationSettings = new StationSettings(...) // Station settings\n\n// Patch an organization's StationSettings\nPatchStationsSettingsRequest.patchStationsSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchStationsSettingsRequest.patchStationsSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonysiptraces": {
    "operationId": "gettelephonysiptraces",
    "functionName": "getTelephonySiptraces",
    "signature": "getTelephonySiptraces(dateStart, dateEnd, callId, toUser, fromUser, conversationId)",
    "parameters": [
      {
        "name": "dateStart",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "dateEnd",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "callId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "toUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "fromUser",
        "type": "String",
        "required": "false"
      },
      {
        "name": "conversationId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "SipSearchResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet dateStart: Date = new Date(...) // Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet dateEnd: Date = new Date(...) // End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z\nlet callId: String = \"\" // unique identification of the placed call\nlet toUser: String = \"\" // User to who the call was placed\nlet fromUser: String = \"\" // user who placed the call\nlet conversationId: String = \"\" // Unique identification of the conversation\n\n// Fetch SIP metadata\nGetTelephonySiptracesRequest.getTelephonySiptraces(dateStart: dateStart, dateEnd: dateEnd, callId: callId, toUser: toUser, fromUser: fromUser, conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonySiptracesRequest.getTelephonySiptraces was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonysiptracesdownloaddownloadid": {
    "operationId": "gettelephonysiptracesdownloaddownloadid",
    "functionName": "getTelephonySiptracesDownloadDownloadId",
    "signature": "getTelephonySiptracesDownloadDownloadId(downloadId)",
    "parameters": [
      {
        "name": "downloadId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SignedUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet downloadId: String = \"\" // unique id for the downloaded file in S3\n\n// Get signed S3 URL for a pcap download\nGetTelephonySiptracesDownloadDownloadIdRequest.getTelephonySiptracesDownloadDownloadId(downloadId: downloadId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonySiptracesDownloadDownloadIdRequest.getTelephonySiptracesDownloadDownloadId was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonysiptracesdownload": {
    "operationId": "posttelephonysiptracesdownload",
    "functionName": "postTelephonySiptracesDownload",
    "signature": "postTelephonySiptracesDownload(sIPSearchPublicRequest)",
    "parameters": [
      {
        "name": "sIPSearchPublicRequest",
        "type": "SIPSearchPublicRequest",
        "required": "true"
      }
    ],
    "return": "SipDownloadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sIPSearchPublicRequest: SIPSearchPublicRequest = new SIPSearchPublicRequest(...) // \n\n// Request a download of a pcap file to S3\nPostTelephonySiptracesDownloadRequest.postTelephonySiptracesDownload(sIPSearchPublicRequest: sIPSearchPublicRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonySiptracesDownloadRequest.postTelephonySiptracesDownload was successful\")\n        dump(response)\n    }\n}"
  },
  "deletetelephonyprovidersedge": {
    "operationId": "deletetelephonyprovidersedge",
    "functionName": "deleteTelephonyProvidersEdge",
    "signature": "deleteTelephonyProvidersEdge(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Delete a edge.\nDeleteTelephonyProvidersEdgeRequest.deleteTelephonyProvidersEdge(edgeId: edgeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgeRequest.deleteTelephonyProvidersEdge was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgelogicalinterface": {
    "operationId": "deletetelephonyprovidersedgelogicalinterface",
    "functionName": "deleteTelephonyProvidersEdgeLogicalinterface",
    "signature": "deleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet interfaceId: String = \"\" // Interface ID\n\n// Delete an edge logical interface\nDeleteTelephonyProvidersEdgeLogicalinterfaceRequest.deleteTelephonyProvidersEdgeLogicalinterface(edgeId: edgeId, interfaceId: interfaceId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgeLogicalinterfaceRequest.deleteTelephonyProvidersEdgeLogicalinterface was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesoftwareupdate": {
    "operationId": "deletetelephonyprovidersedgesoftwareupdate",
    "functionName": "deleteTelephonyProvidersEdgeSoftwareupdate",
    "signature": "deleteTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Cancels any in-progress update for this edge.\nDeleteTelephonyProvidersEdgeSoftwareupdateRequest.deleteTelephonyProvidersEdgeSoftwareupdate(edgeId: edgeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgeSoftwareupdateRequest.deleteTelephonyProvidersEdgeSoftwareupdate was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgescertificateauthority": {
    "operationId": "deletetelephonyprovidersedgescertificateauthority",
    "functionName": "deleteTelephonyProvidersEdgesCertificateauthority",
    "signature": "deleteTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet certificateId: String = \"\" // Certificate ID\n\n// Delete a certificate authority.\nDeleteTelephonyProvidersEdgesCertificateauthorityRequest.deleteTelephonyProvidersEdgesCertificateauthority(certificateId: certificateId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesCertificateauthorityRequest.deleteTelephonyProvidersEdgesCertificateauthority was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesdidpool": {
    "operationId": "deletetelephonyprovidersedgesdidpool",
    "functionName": "deleteTelephonyProvidersEdgesDidpool",
    "signature": "deleteTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet didPoolId: String = \"\" // DID pool ID\n\n// Delete a DID Pool by ID.\nDeleteTelephonyProvidersEdgesDidpoolRequest.deleteTelephonyProvidersEdgesDidpool(didPoolId: didPoolId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesDidpoolRequest.deleteTelephonyProvidersEdgesDidpool was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesedgegroup": {
    "operationId": "deletetelephonyprovidersedgesedgegroup",
    "functionName": "deleteTelephonyProvidersEdgesEdgegroup",
    "signature": "deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeGroupId: String = \"\" // Edge group ID\n\n// Delete an edge group.\nDeleteTelephonyProvidersEdgesEdgegroupRequest.deleteTelephonyProvidersEdgesEdgegroup(edgeGroupId: edgeGroupId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesEdgegroupRequest.deleteTelephonyProvidersEdgesEdgegroup was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesextensionpool": {
    "operationId": "deletetelephonyprovidersedgesextensionpool",
    "functionName": "deleteTelephonyProvidersEdgesExtensionpool",
    "signature": "deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet extensionPoolId: String = \"\" // Extension pool ID\n\n// Delete an extension pool by ID\nDeleteTelephonyProvidersEdgesExtensionpoolRequest.deleteTelephonyProvidersEdgesExtensionpool(extensionPoolId: extensionPoolId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesExtensionpoolRequest.deleteTelephonyProvidersEdgesExtensionpool was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesoutboundroute": {
    "operationId": "deletetelephonyprovidersedgesoutboundroute",
    "functionName": "deleteTelephonyProvidersEdgesOutboundroute",
    "signature": "deleteTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outboundRouteId: String = \"\" // Outbound route ID\n\n// Delete Outbound Route\nDeleteTelephonyProvidersEdgesOutboundrouteRequest.deleteTelephonyProvidersEdgesOutboundroute(outboundRouteId: outboundRouteId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesOutboundrouteRequest.deleteTelephonyProvidersEdgesOutboundroute was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesphone": {
    "operationId": "deletetelephonyprovidersedgesphone",
    "functionName": "deleteTelephonyProvidersEdgesPhone",
    "signature": "deleteTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneId: String = \"\" // Phone ID\n\n// Delete a Phone by ID\nDeleteTelephonyProvidersEdgesPhoneRequest.deleteTelephonyProvidersEdgesPhone(phoneId: phoneId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesPhoneRequest.deleteTelephonyProvidersEdgesPhone was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgesphonebasesetting": {
    "operationId": "deletetelephonyprovidersedgesphonebasesetting",
    "functionName": "deleteTelephonyProvidersEdgesPhonebasesetting",
    "signature": "deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneBaseId: String = \"\" // Phone base ID\n\n// Delete a Phone Base Settings by ID\nDeleteTelephonyProvidersEdgesPhonebasesettingRequest.deleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId: phoneBaseId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesPhonebasesettingRequest.deleteTelephonyProvidersEdgesPhonebasesetting was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgessite": {
    "operationId": "deletetelephonyprovidersedgessite",
    "functionName": "deleteTelephonyProvidersEdgesSite",
    "signature": "deleteTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\n\n// Delete a Site by ID\nDeleteTelephonyProvidersEdgesSiteRequest.deleteTelephonyProvidersEdgesSite(siteId: siteId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesSiteRequest.deleteTelephonyProvidersEdgesSite was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgessiteoutboundroute": {
    "operationId": "deletetelephonyprovidersedgessiteoutboundroute",
    "functionName": "deleteTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "deleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet outboundRouteId: String = \"\" // Outbound route ID\n\n// Delete Outbound Route\nDeleteTelephonyProvidersEdgesSiteOutboundrouteRequest.deleteTelephonyProvidersEdgesSiteOutboundroute(siteId: siteId, outboundRouteId: outboundRouteId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesSiteOutboundrouteRequest.deleteTelephonyProvidersEdgesSiteOutboundroute was successful\")\n    }\n}"
  },
  "deletetelephonyprovidersedgestrunkbasesetting": {
    "operationId": "deletetelephonyprovidersedgestrunkbasesetting",
    "functionName": "deleteTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkBaseSettingsId: String = \"\" // Trunk Base ID\n\n// Delete a Trunk Base Settings object by ID\nDeleteTelephonyProvidersEdgesTrunkbasesettingRequest.deleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId: trunkBaseSettingsId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTelephonyProvidersEdgesTrunkbasesettingRequest.deleteTelephonyProvidersEdgesTrunkbasesetting was successful\")\n    }\n}"
  },
  "getconfigurationschemasedgesvnext": {
    "operationId": "getconfigurationschemasedgesvnext",
    "functionName": "getConfigurationSchemasEdgesVnext",
    "signature": "getConfigurationSchemasEdgesVnext(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SchemaCategoryEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Lists available schema categories (Deprecated)\nGetConfigurationSchemasEdgesVnextRequest.getConfigurationSchemasEdgesVnext(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConfigurationSchemasEdgesVnextRequest.getConfigurationSchemasEdgesVnext was successful\")\n        dump(response)\n    }\n}"
  },
  "getconfigurationschemasedgesvnextschemacategory": {
    "operationId": "getconfigurationschemasedgesvnextschemacategory",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategory",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SchemaReferenceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaCategory: String = \"\" // Schema category\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List schemas of a specific category (Deprecated)\nGetConfigurationSchemasEdgesVnextSchemaCategoryRequest.getConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory: schemaCategory, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConfigurationSchemasEdgesVnextSchemaCategoryRequest.getConfigurationSchemasEdgesVnextSchemaCategory was successful\")\n        dump(response)\n    }\n}"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematype": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematype",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "SchemaReferenceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaCategory: String = \"\" // Schema category\nlet schemaType: String = \"\" // Schema type\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List schemas of a specific category (Deprecated)\nGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory: schemaCategory, schemaType: schemaType, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaType was successful\")\n        dump(response)\n    }\n}"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematypeschemaid": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaid",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Organization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaCategory: String = \"\" // Schema category\nlet schemaType: String = \"\" // Schema type\nlet schemaId: String = \"\" // Schema ID\n\n// Get a json schema (Deprecated)\nGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory: schemaCategory, schemaType: schemaType, schemaId: schemaId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId was successful\")\n        dump(response)\n    }\n}"
  },
  "getconfigurationschemasedgesvnextschemacategoryschematypeschemaidextensiontypemetadataid": {
    "operationId": "getconfigurationschemasedgesvnextschemacategoryschematypeschemaidextensiontypemetadataid",
    "functionName": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId",
    "signature": "getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type)",
    "parameters": [
      {
        "name": "schemaCategory",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "schemaId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "extensionType",
        "type": "String",
        "required": "true"
      },
      {
        "name": "metadataId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "Organization",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet schemaCategory: String = \"\" // Schema category\nlet schemaType: String = \"\" // Schema type\nlet schemaId: String = \"\" // Schema ID\nlet extensionType: String = \"\" // extension\nlet metadataId: String = \"\" // Metadata ID\nlet type: String = \"\" // Type\n\n// Get metadata for a schema (Deprecated)\nGetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataIdRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory: schemaCategory, schemaType: schemaType, schemaId: schemaId, extensionType: extensionType, metadataId: metadataId, type: type) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataIdRequest.getConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedge": {
    "operationId": "gettelephonyprovidersedge",
    "functionName": "getTelephonyProvidersEdge",
    "signature": "getTelephonyProvidersEdge(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Edge",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\n\n// Get edge.\nGetTelephonyProvidersEdgeRequest.getTelephonyProvidersEdge(edgeId: edgeId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeRequest.getTelephonyProvidersEdge was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgediagnosticnslookup": {
    "operationId": "gettelephonyprovidersedgediagnosticnslookup",
    "functionName": "getTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "getTelephonyProvidersEdgeDiagnosticNslookup(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\nGetTelephonyProvidersEdgeDiagnosticNslookupRequest.getTelephonyProvidersEdgeDiagnosticNslookup(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeDiagnosticNslookupRequest.getTelephonyProvidersEdgeDiagnosticNslookup was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgediagnosticping": {
    "operationId": "gettelephonyprovidersedgediagnosticping",
    "functionName": "getTelephonyProvidersEdgeDiagnosticPing",
    "signature": "getTelephonyProvidersEdgeDiagnosticPing(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\nGetTelephonyProvidersEdgeDiagnosticPingRequest.getTelephonyProvidersEdgeDiagnosticPing(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeDiagnosticPingRequest.getTelephonyProvidersEdgeDiagnosticPing was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgediagnosticroute": {
    "operationId": "gettelephonyprovidersedgediagnosticroute",
    "functionName": "getTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "getTelephonyProvidersEdgeDiagnosticRoute(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\nGetTelephonyProvidersEdgeDiagnosticRouteRequest.getTelephonyProvidersEdgeDiagnosticRoute(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeDiagnosticRouteRequest.getTelephonyProvidersEdgeDiagnosticRoute was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgediagnostictracepath": {
    "operationId": "gettelephonyprovidersedgediagnostictracepath",
    "functionName": "getTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "getTelephonyProvidersEdgeDiagnosticTracepath(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnosticResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Get networking-related information from an Edge for a target IP or host.\nGetTelephonyProvidersEdgeDiagnosticTracepathRequest.getTelephonyProvidersEdgeDiagnosticTracepath(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeDiagnosticTracepathRequest.getTelephonyProvidersEdgeDiagnosticTracepath was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeline": {
    "operationId": "gettelephonyprovidersedgeline",
    "functionName": "getTelephonyProvidersEdgeLine",
    "signature": "getTelephonyProvidersEdgeLine(edgeId, lineId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeLine",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet lineId: String = \"\" // Line ID\n\n// Get line\nGetTelephonyProvidersEdgeLineRequest.getTelephonyProvidersEdgeLine(edgeId: edgeId, lineId: lineId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeLineRequest.getTelephonyProvidersEdgeLine was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgelines": {
    "operationId": "gettelephonyprovidersedgelines",
    "functionName": "getTelephonyProvidersEdgeLines",
    "signature": "getTelephonyProvidersEdgeLines(edgeId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "EdgeLineEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get the list of lines.\nGetTelephonyProvidersEdgeLinesRequest.getTelephonyProvidersEdgeLines(edgeId: edgeId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeLinesRequest.getTelephonyProvidersEdgeLines was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgelogicalinterface": {
    "operationId": "gettelephonyprovidersedgelogicalinterface",
    "functionName": "getTelephonyProvidersEdgeLogicalinterface",
    "signature": "getTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet interfaceId: String = \"\" // Interface ID\nlet expand: [String] = [\"\"] // Field to expand in the response\n\n// Get an edge logical interface\nGetTelephonyProvidersEdgeLogicalinterfaceRequest.getTelephonyProvidersEdgeLogicalinterface(edgeId: edgeId, interfaceId: interfaceId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeLogicalinterfaceRequest.getTelephonyProvidersEdgeLogicalinterface was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgelogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgelogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgeLogicalinterfaces(edgeId, expand)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet expand: [String] = [\"\"] // Field to expand in the response\n\n// Get edge logical interfaces.\nGetTelephonyProvidersEdgeLogicalinterfacesRequest.getTelephonyProvidersEdgeLogicalinterfaces(edgeId: edgeId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeLogicalinterfacesRequest.getTelephonyProvidersEdgeLogicalinterfaces was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgelogsjob": {
    "operationId": "gettelephonyprovidersedgelogsjob",
    "functionName": "getTelephonyProvidersEdgeLogsJob",
    "signature": "getTelephonyProvidersEdgeLogsJob(edgeId, jobId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJob",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet jobId: String = \"\" // Job ID\n\n// Get an Edge logs job.\nGetTelephonyProvidersEdgeLogsJobRequest.getTelephonyProvidersEdgeLogsJob(edgeId: edgeId, jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeLogsJobRequest.getTelephonyProvidersEdgeLogsJob was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgemetrics": {
    "operationId": "gettelephonyprovidersedgemetrics",
    "functionName": "getTelephonyProvidersEdgeMetrics",
    "signature": "getTelephonyProvidersEdgeMetrics(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeMetrics",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Get the edge metrics.\nGetTelephonyProvidersEdgeMetricsRequest.getTelephonyProvidersEdgeMetrics(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeMetricsRequest.getTelephonyProvidersEdgeMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgephysicalinterface": {
    "operationId": "gettelephonyprovidersedgephysicalinterface",
    "functionName": "getTelephonyProvidersEdgePhysicalinterface",
    "signature": "getTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainPhysicalInterface",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet interfaceId: String = \"\" // Interface ID\n\n// Get edge physical interface.\nGetTelephonyProvidersEdgePhysicalinterfaceRequest.getTelephonyProvidersEdgePhysicalinterface(edgeId: edgeId, interfaceId: interfaceId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgePhysicalinterfaceRequest.getTelephonyProvidersEdgePhysicalinterface was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgephysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgephysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgePhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgePhysicalinterfaces(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Retrieve a list of all configured physical interfaces from a specific edge.\nGetTelephonyProvidersEdgePhysicalinterfacesRequest.getTelephonyProvidersEdgePhysicalinterfaces(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgePhysicalinterfacesRequest.getTelephonyProvidersEdgePhysicalinterfaces was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesetuppackage": {
    "operationId": "gettelephonyprovidersedgesetuppackage",
    "functionName": "getTelephonyProvidersEdgeSetuppackage",
    "signature": "getTelephonyProvidersEdgeSetuppackage(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VmPairingInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Get the setup package for a locally deployed edge device. This is needed to complete the setup process for the virtual edge.\nGetTelephonyProvidersEdgeSetuppackageRequest.getTelephonyProvidersEdgeSetuppackage(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeSetuppackageRequest.getTelephonyProvidersEdgeSetuppackage was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesoftwareupdate": {
    "operationId": "gettelephonyprovidersedgesoftwareupdate",
    "functionName": "getTelephonyProvidersEdgeSoftwareupdate",
    "signature": "getTelephonyProvidersEdgeSoftwareupdate(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Gets software update status information about any edge.\nGetTelephonyProvidersEdgeSoftwareupdateRequest.getTelephonyProvidersEdgeSoftwareupdate(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeSoftwareupdateRequest.getTelephonyProvidersEdgeSoftwareupdate was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesoftwareversions": {
    "operationId": "gettelephonyprovidersedgesoftwareversions",
    "functionName": "getTelephonyProvidersEdgeSoftwareversions",
    "signature": "getTelephonyProvidersEdgeSoftwareversions(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareVersionDtoEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\n\n// Gets all the available software versions for this edge.\nGetTelephonyProvidersEdgeSoftwareversionsRequest.getTelephonyProvidersEdgeSoftwareversions(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeSoftwareversionsRequest.getTelephonyProvidersEdgeSoftwareversions was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgetrunks": {
    "operationId": "gettelephonyprovidersedgetrunks",
    "functionName": "getTelephonyProvidersEdgeTrunks",
    "signature": "getTelephonyProvidersEdgeTrunks(edgeId, pageNumber, pageSize, sortBy, sortOrder, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Value by which to sort\nlet sortOrder: String = \"\" // Sort order\nlet trunkBaseId: String = \"\" // Filter by Trunk Base Ids\nlet trunkType: GetTelephonyProvidersEdgeTrunksRequest.TrunkType_getTelephonyProvidersEdgeTrunks = GetTelephonyProvidersEdgeTrunksRequest.TrunkType_getTelephonyProvidersEdgeTrunks.enummember // Filter by a Trunk type\n\n// Get the list of available trunks for the given Edge.\nGetTelephonyProvidersEdgeTrunksRequest.getTelephonyProvidersEdgeTrunks(edgeId: edgeId, pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, trunkBaseId: trunkBaseId, trunkType: trunkType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgeTrunksRequest.getTelephonyProvidersEdgeTrunks was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedges": {
    "operationId": "gettelephonyprovidersedges",
    "functionName": "getTelephonyProvidersEdges",
    "signature": "getTelephonyProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "EdgeEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet siteId: String = \"\" // Filter by site.id\nlet edgeGroupId: String = \"\" // Filter by edgeGroup.id\nlet sortBy: String = \"\" // Sort by\nlet managed: Bool = true // Filter by managed\n\n// Get the list of edges.\nGetTelephonyProvidersEdgesRequest.getTelephonyProvidersEdges(pageSize: pageSize, pageNumber: pageNumber, name: name, siteId: siteId, edgeGroupId: edgeGroupId, sortBy: sortBy, managed: managed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesRequest.getTelephonyProvidersEdges was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesavailablelanguages": {
    "operationId": "gettelephonyprovidersedgesavailablelanguages",
    "functionName": "getTelephonyProvidersEdgesAvailablelanguages",
    "signature": "getTelephonyProvidersEdgesAvailablelanguages()",
    "return": "AvailableLanguageList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of available languages.\nGetTelephonyProvidersEdgesAvailablelanguagesRequest.getTelephonyProvidersEdgesAvailablelanguages() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesAvailablelanguagesRequest.getTelephonyProvidersEdgesAvailablelanguages was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgescertificateauthorities": {
    "operationId": "gettelephonyprovidersedgescertificateauthorities",
    "functionName": "getTelephonyProvidersEdgesCertificateauthorities",
    "signature": "getTelephonyProvidersEdgesCertificateauthorities()",
    "return": "CertificateAuthorityEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the list of certificate authorities.\nGetTelephonyProvidersEdgesCertificateauthoritiesRequest.getTelephonyProvidersEdgesCertificateauthorities() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesCertificateauthoritiesRequest.getTelephonyProvidersEdgesCertificateauthorities was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgescertificateauthority": {
    "operationId": "gettelephonyprovidersedgescertificateauthority",
    "functionName": "getTelephonyProvidersEdgesCertificateauthority",
    "signature": "getTelephonyProvidersEdgesCertificateauthority(certificateId)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet certificateId: String = \"\" // Certificate ID\n\n// Get a certificate authority.\nGetTelephonyProvidersEdgesCertificateauthorityRequest.getTelephonyProvidersEdgesCertificateauthority(certificateId: certificateId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesCertificateauthorityRequest.getTelephonyProvidersEdgesCertificateauthority was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesdid": {
    "operationId": "gettelephonyprovidersedgesdid",
    "functionName": "getTelephonyProvidersEdgesDid",
    "signature": "getTelephonyProvidersEdgesDid(didId)",
    "parameters": [
      {
        "name": "didId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DID",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet didId: String = \"\" // DID ID\n\n// Get a DID by ID.\nGetTelephonyProvidersEdgesDidRequest.getTelephonyProvidersEdgesDid(didId: didId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesDidRequest.getTelephonyProvidersEdgesDid was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesdidpool": {
    "operationId": "gettelephonyprovidersedgesdidpool",
    "functionName": "getTelephonyProvidersEdgesDidpool",
    "signature": "getTelephonyProvidersEdgesDidpool(didPoolId)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet didPoolId: String = \"\" // DID pool ID\n\n// Get a DID Pool by ID.\nGetTelephonyProvidersEdgesDidpoolRequest.getTelephonyProvidersEdgesDidpool(didPoolId: didPoolId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesDidpoolRequest.getTelephonyProvidersEdgesDidpool was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesdidpools": {
    "operationId": "gettelephonyprovidersedgesdidpools",
    "functionName": "getTelephonyProvidersEdgesDidpools",
    "signature": "getTelephonyProvidersEdgesDidpools(pageSize, pageNumber, sortBy, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDPoolEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet _id: [String] = [\"\"] // Filter by a specific list of ID's\n\n// Get a listing of DID Pools\nGetTelephonyProvidersEdgesDidpoolsRequest.getTelephonyProvidersEdgesDidpools(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesDidpoolsRequest.getTelephonyProvidersEdgesDidpools was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesdidpoolsdids": {
    "operationId": "gettelephonyprovidersedgesdidpoolsdids",
    "functionName": "getTelephonyProvidersEdgesDidpoolsDids",
    "signature": "getTelephonyProvidersEdgesDidpoolsDids(type, _id, numberMatch, pageSize, pageNumber, sortOrder)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "true"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "numberMatch",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DIDNumberEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet type: GetTelephonyProvidersEdgesDidpoolsDidsRequest.ModelType_getTelephonyProvidersEdgesDidpoolsDids = GetTelephonyProvidersEdgesDidpoolsDidsRequest.ModelType_getTelephonyProvidersEdgesDidpoolsDids.enummember // The type of numbers to return.\nlet _id: [String] = [\"\"] // Filter by a specific list of DID Pools.  If this is not provided, numbers from all DID Pools will be returned.\nlet numberMatch: String = \"\" // A number to filter the results by.\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: String = \"\" // Sort order\n\n// Get a listing of unassigned and/or assigned numbers in a set of DID Pools.\nGetTelephonyProvidersEdgesDidpoolsDidsRequest.getTelephonyProvidersEdgesDidpoolsDids(type: type, _id: _id, numberMatch: numberMatch, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesDidpoolsDidsRequest.getTelephonyProvidersEdgesDidpoolsDids was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesdids": {
    "operationId": "gettelephonyprovidersedgesdids",
    "functionName": "getTelephonyProvidersEdgesDids",
    "signature": "getTelephonyProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber, ownerId, didPoolId, _id)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneNumber",
        "type": "String",
        "required": "false"
      },
      {
        "name": "ownerId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "didPoolId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DIDEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet phoneNumber: String = \"\" // Filter by phoneNumber\nlet ownerId: String = \"\" // Filter by the owner of a phone number\nlet didPoolId: String = \"\" // Filter by the DID Pool assignment\nlet _id: [String] = [\"\"] // Filter by a specific list of ID's\n\n// Get a listing of DIDs\nGetTelephonyProvidersEdgesDidsRequest.getTelephonyProvidersEdgesDids(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, phoneNumber: phoneNumber, ownerId: ownerId, didPoolId: didPoolId, _id: _id) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesDidsRequest.getTelephonyProvidersEdgesDids was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesedgegroup": {
    "operationId": "gettelephonyprovidersedgesedgegroup",
    "functionName": "getTelephonyProvidersEdgesEdgegroup",
    "signature": "getTelephonyProvidersEdgesEdgegroup(edgeGroupId, expand)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "EdgeGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeGroupId: String = \"\" // Edge group ID\nlet expand: [String] = [\"\"] // Fields to expand in the response\n\n// Get edge group.\nGetTelephonyProvidersEdgesEdgegroupRequest.getTelephonyProvidersEdgesEdgegroup(edgeGroupId: edgeGroupId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesEdgegroupRequest.getTelephonyProvidersEdgesEdgegroup was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "gettelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgegroupId: String = \"\" // Edge Group ID\nlet edgetrunkbaseId: String = \"\" // Edge Trunk Base ID\n\n// Gets the edge trunk base associated with the edge group\nGetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest.getTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId: edgegroupId, edgetrunkbaseId: edgetrunkbaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest.getTelephonyProvidersEdgesEdgegroupEdgetrunkbase was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesedgegroups": {
    "operationId": "gettelephonyprovidersedgesedgegroups",
    "functionName": "getTelephonyProvidersEdgesEdgegroups",
    "signature": "getTelephonyProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "EdgeGroupEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Sort by\nlet managed: Bool = true // Filter by managed\n\n// Get the list of edge groups.\nGetTelephonyProvidersEdgesEdgegroupsRequest.getTelephonyProvidersEdgesEdgegroups(pageSize: pageSize, pageNumber: pageNumber, name: name, sortBy: sortBy, managed: managed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesEdgegroupsRequest.getTelephonyProvidersEdgesEdgegroups was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesedgeversionreport": {
    "operationId": "gettelephonyprovidersedgesedgeversionreport",
    "functionName": "getTelephonyProvidersEdgesEdgeversionreport",
    "signature": "getTelephonyProvidersEdgesEdgeversionreport()",
    "return": "EdgeVersionReport",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the edge version report.\nGetTelephonyProvidersEdgesEdgeversionreportRequest.getTelephonyProvidersEdgesEdgeversionreport() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesEdgeversionreportRequest.getTelephonyProvidersEdgesEdgeversionreport was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesexpired": {
    "operationId": "gettelephonyprovidersedgesexpired",
    "functionName": "getTelephonyProvidersEdgesExpired",
    "signature": "getTelephonyProvidersEdgesExpired()",
    "return": "ExpiredEdgeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// List of edges more than 4 edge versions behind the latest software.\nGetTelephonyProvidersEdgesExpiredRequest.getTelephonyProvidersEdgesExpired() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesExpiredRequest.getTelephonyProvidersEdgesExpired was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesextension": {
    "operationId": "gettelephonyprovidersedgesextension",
    "functionName": "getTelephonyProvidersEdgesExtension",
    "signature": "getTelephonyProvidersEdgesExtension(extensionId)",
    "parameters": [
      {
        "name": "extensionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Extension",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet extensionId: String = \"\" // Extension ID\n\n// Get an extension by ID.\nGetTelephonyProvidersEdgesExtensionRequest.getTelephonyProvidersEdgesExtension(extensionId: extensionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesExtensionRequest.getTelephonyProvidersEdgesExtension was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesextensionpool": {
    "operationId": "gettelephonyprovidersedgesextensionpool",
    "functionName": "getTelephonyProvidersEdgesExtensionpool",
    "signature": "getTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet extensionPoolId: String = \"\" // Extension pool ID\n\n// Get an extension pool by ID\nGetTelephonyProvidersEdgesExtensionpoolRequest.getTelephonyProvidersEdgesExtensionpool(extensionPoolId: extensionPoolId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesExtensionpoolRequest.getTelephonyProvidersEdgesExtensionpool was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesextensionpools": {
    "operationId": "gettelephonyprovidersedgesextensionpools",
    "functionName": "getTelephonyProvidersEdgesExtensionpools",
    "signature": "getTelephonyProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionPoolEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet number: String = \"\" // Deprecated, filtering by number not supported\n\n// Get a listing of extension pools\nGetTelephonyProvidersEdgesExtensionpoolsRequest.getTelephonyProvidersEdgesExtensionpools(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, number: number) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesExtensionpoolsRequest.getTelephonyProvidersEdgesExtensionpools was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesextensions": {
    "operationId": "gettelephonyprovidersedgesextensions",
    "functionName": "getTelephonyProvidersEdgesExtensions",
    "signature": "getTelephonyProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, number)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "number",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ExtensionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet number: String = \"\" // Filter by number\n\n// Get a listing of extensions\nGetTelephonyProvidersEdgesExtensionsRequest.getTelephonyProvidersEdgesExtensions(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, number: number) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesExtensionsRequest.getTelephonyProvidersEdgesExtensions was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesline": {
    "operationId": "gettelephonyprovidersedgesline",
    "functionName": "getTelephonyProvidersEdgesLine",
    "signature": "getTelephonyProvidersEdgesLine(lineId)",
    "parameters": [
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet lineId: String = \"\" // Line ID\n\n// Get a Line by ID\nGetTelephonyProvidersEdgesLineRequest.getTelephonyProvidersEdgesLine(lineId: lineId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLineRequest.getTelephonyProvidersEdgesLine was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeslinebasesetting": {
    "operationId": "gettelephonyprovidersedgeslinebasesetting",
    "functionName": "getTelephonyProvidersEdgesLinebasesetting",
    "signature": "getTelephonyProvidersEdgesLinebasesetting(lineBaseId)",
    "parameters": [
      {
        "name": "lineBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "LineBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet lineBaseId: String = \"\" // Line base ID\n\n// Get a line base settings object by ID\nGetTelephonyProvidersEdgesLinebasesettingRequest.getTelephonyProvidersEdgesLinebasesetting(lineBaseId: lineBaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLinebasesettingRequest.getTelephonyProvidersEdgesLinebasesetting was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeslinebasesettings": {
    "operationId": "gettelephonyprovidersedgeslinebasesettings",
    "functionName": "getTelephonyProvidersEdgesLinebasesettings",
    "signature": "getTelephonyProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder, expand)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineBaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Value by which to sort\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\n\n// Get a listing of line base settings objects\nGetTelephonyProvidersEdgesLinebasesettingsRequest.getTelephonyProvidersEdgesLinebasesettings(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLinebasesettingsRequest.getTelephonyProvidersEdgesLinebasesettings was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeslines": {
    "operationId": "gettelephonyprovidersedgeslines",
    "functionName": "getTelephonyProvidersEdgesLines",
    "signature": "getTelephonyProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LineEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet sortBy: String = \"\" // Value by which to sort\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\n\n// Get a list of Lines\nGetTelephonyProvidersEdgesLinesRequest.getTelephonyProvidersEdgesLines(pageSize: pageSize, pageNumber: pageNumber, name: name, sortBy: sortBy, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLinesRequest.getTelephonyProvidersEdgesLines was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeslinestemplate": {
    "operationId": "gettelephonyprovidersedgeslinestemplate",
    "functionName": "getTelephonyProvidersEdgesLinesTemplate",
    "signature": "getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)",
    "parameters": [
      {
        "name": "lineBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Line",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet lineBaseSettingsId: String = \"\" // The id of a Line Base Settings object upon which to base this Line\n\n// Get a Line instance template based on a Line Base Settings object. This object can then be modified and saved as a new Line instance\nGetTelephonyProvidersEdgesLinesTemplateRequest.getTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId: lineBaseSettingsId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLinesTemplateRequest.getTelephonyProvidersEdgesLinesTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgeslogicalinterfaces": {
    "operationId": "gettelephonyprovidersedgeslogicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesLogicalinterfaces",
    "signature": "getTelephonyProvidersEdgesLogicalinterfaces(edgeIds, expand)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "LogicalInterfaceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeIds: String = \"\" // Comma separated list of Edge Id's\nlet expand: [String] = [\"\"] // Field to expand in the response\n\n// Get edge logical interfaces.\nGetTelephonyProvidersEdgesLogicalinterfacesRequest.getTelephonyProvidersEdgesLogicalinterfaces(edgeIds: edgeIds, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesLogicalinterfacesRequest.getTelephonyProvidersEdgesLogicalinterfaces was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesmetrics": {
    "operationId": "gettelephonyprovidersedgesmetrics",
    "functionName": "getTelephonyProvidersEdgesMetrics",
    "signature": "getTelephonyProvidersEdgesMetrics(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[EdgeMetrics]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeIds: String = \"\" // Comma separated list of Edge Id's\n\n// Get the metrics for a list of edges.\nGetTelephonyProvidersEdgesMetricsRequest.getTelephonyProvidersEdgesMetrics(edgeIds: edgeIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesMetricsRequest.getTelephonyProvidersEdgesMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesoutboundroute": {
    "operationId": "gettelephonyprovidersedgesoutboundroute",
    "functionName": "getTelephonyProvidersEdgesOutboundroute",
    "signature": "getTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outboundRouteId: String = \"\" // Outbound route ID\n\n// Get outbound route\nGetTelephonyProvidersEdgesOutboundrouteRequest.getTelephonyProvidersEdgesOutboundroute(outboundRouteId: outboundRouteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesOutboundrouteRequest.getTelephonyProvidersEdgesOutboundroute was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesoutboundroutes": {
    "operationId": "gettelephonyprovidersedgesoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesOutboundroutes",
    "signature": "getTelephonyProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet siteId: String = \"\" // Filter by site.id\nlet externalTrunkBasesIds: String = \"\" // Filter by externalTrunkBases.ids\nlet sortBy: String = \"\" // Sort by\n\n// Get outbound routes\nGetTelephonyProvidersEdgesOutboundroutesRequest.getTelephonyProvidersEdgesOutboundroutes(pageSize: pageSize, pageNumber: pageNumber, name: name, siteId: siteId, externalTrunkBasesIds: externalTrunkBasesIds, sortBy: sortBy) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesOutboundroutesRequest.getTelephonyProvidersEdgesOutboundroutes was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphone": {
    "operationId": "gettelephonyprovidersedgesphone",
    "functionName": "getTelephonyProvidersEdgesPhone",
    "signature": "getTelephonyProvidersEdgesPhone(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneId: String = \"\" // Phone ID\n\n// Get a Phone by ID\nGetTelephonyProvidersEdgesPhoneRequest.getTelephonyProvidersEdgesPhone(phoneId: phoneId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhoneRequest.getTelephonyProvidersEdgesPhone was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphonebasesetting": {
    "operationId": "gettelephonyprovidersedgesphonebasesetting",
    "functionName": "getTelephonyProvidersEdgesPhonebasesetting",
    "signature": "getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneBaseId: String = \"\" // Phone base ID\n\n// Get a Phone Base Settings object by ID\nGetTelephonyProvidersEdgesPhonebasesettingRequest.getTelephonyProvidersEdgesPhonebasesetting(phoneBaseId: phoneBaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonebasesettingRequest.getTelephonyProvidersEdgesPhonebasesetting was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphonebasesettings": {
    "operationId": "gettelephonyprovidersedgesphonebasesettings",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettings",
    "signature": "getTelephonyProvidersEdgesPhonebasesettings(pageSize, pageNumber, sortBy, sortOrder, expand, name)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "PhoneBaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Value by which to sort\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\nlet name: String = \"\" // Name\n\n// Get a list of Phone Base Settings objects\nGetTelephonyProvidersEdgesPhonebasesettingsRequest.getTelephonyProvidersEdgesPhonebasesettings(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, expand: expand, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonebasesettingsRequest.getTelephonyProvidersEdgesPhonebasesettings was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphonebasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "PhoneMetaBaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of available makes and models to create a new Phone Base Settings\nGetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesRequest.getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabasesRequest.getTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphonebasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgesphonebasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesPhonebasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)",
    "parameters": [
      {
        "name": "phoneMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneMetabaseId: String = \"\" // The id of a metabase object upon which to base this Phone Base Settings\n\n// Get a Phone Base Settings instance template from a given make and model. This object can then be modified and saved as a new Phone Base Settings instance\nGetTelephonyProvidersEdgesPhonebasesettingsTemplateRequest.getTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId: phoneMetabaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonebasesettingsTemplateRequest.getTelephonyProvidersEdgesPhonebasesettingsTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphones": {
    "operationId": "gettelephonyprovidersedgesphones",
    "functionName": "getTelephonyProvidersEdgesPhones",
    "signature": "getTelephonyProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, name, statusOperationalStatus, secondaryStatusOperationalStatus, expand, fields)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "siteId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "webRtcUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesLoggedInUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesDefaultForUserId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "phoneHardwareId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "linesName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "statusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "secondaryStatusOperationalStatus",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "fields",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "PhoneEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: GetTelephonyProvidersEdgesPhonesRequest.SortBy_getTelephonyProvidersEdgesPhones = GetTelephonyProvidersEdgesPhonesRequest.SortBy_getTelephonyProvidersEdgesPhones.enummember // The field to sort by\nlet sortOrder: String = \"\" // Sort order\nlet siteId: String = \"\" // Filter by site.id\nlet webRtcUserId: String = \"\" // Filter by webRtcUser.id\nlet phoneBaseSettingsId: String = \"\" // Filter by phoneBaseSettings.id\nlet linesLoggedInUserId: String = \"\" // Filter by lines.loggedInUser.id\nlet linesDefaultForUserId: String = \"\" // Filter by lines.defaultForUser.id\nlet phoneHardwareId: String = \"\" // Filter by phone_hardwareId\nlet linesId: String = \"\" // Filter by lines.id\nlet linesName: String = \"\" // Filter by lines.name\nlet name: String = \"\" // Name of the Phone to filter by\nlet statusOperationalStatus: String = \"\" // The primary status to filter by\nlet secondaryStatusOperationalStatus: String = \"\" // The secondary status to filter by\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\nlet fields: [String] = [\"\"] // Fields and properties to get, comma-separated\n\n// Get a list of Phone Instances\nGetTelephonyProvidersEdgesPhonesRequest.getTelephonyProvidersEdgesPhones(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, siteId: siteId, webRtcUserId: webRtcUserId, phoneBaseSettingsId: phoneBaseSettingsId, linesLoggedInUserId: linesLoggedInUserId, linesDefaultForUserId: linesDefaultForUserId, phoneHardwareId: phoneHardwareId, linesId: linesId, linesName: linesName, name: name, statusOperationalStatus: statusOperationalStatus, secondaryStatusOperationalStatus: secondaryStatusOperationalStatus, expand: expand, fields: fields) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonesRequest.getTelephonyProvidersEdgesPhones was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphonestemplate": {
    "operationId": "gettelephonyprovidersedgesphonestemplate",
    "functionName": "getTelephonyProvidersEdgesPhonesTemplate",
    "signature": "getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)",
    "parameters": [
      {
        "name": "phoneBaseSettingsId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneBaseSettingsId: String = \"\" // The id of a Phone Base Settings object upon which to base this Phone\n\n// Get a Phone instance template based on a Phone Base Settings object. This object can then be modified and saved as a new Phone instance\nGetTelephonyProvidersEdgesPhonesTemplateRequest.getTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId: phoneBaseSettingsId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhonesTemplateRequest.getTelephonyProvidersEdgesPhonesTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgesphysicalinterfaces": {
    "operationId": "gettelephonyprovidersedgesphysicalinterfaces",
    "functionName": "getTelephonyProvidersEdgesPhysicalinterfaces",
    "signature": "getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)",
    "parameters": [
      {
        "name": "edgeIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PhysicalInterfaceEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeIds: String = \"\" // Comma separated list of Edge Id's\n\n// Get physical interfaces for edges.\nGetTelephonyProvidersEdgesPhysicalinterfacesRequest.getTelephonyProvidersEdgesPhysicalinterfaces(edgeIds: edgeIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesPhysicalinterfacesRequest.getTelephonyProvidersEdgesPhysicalinterfaces was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessite": {
    "operationId": "gettelephonyprovidersedgessite",
    "functionName": "getTelephonyProvidersEdgesSite",
    "signature": "getTelephonyProvidersEdgesSite(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\n\n// Get a Site by ID.\nGetTelephonyProvidersEdgesSiteRequest.getTelephonyProvidersEdgesSite(siteId: siteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteRequest.getTelephonyProvidersEdgesSite was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessitenumberplan": {
    "operationId": "gettelephonyprovidersedgessitenumberplan",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplan",
    "signature": "getTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "numberPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "NumberPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet numberPlanId: String = \"\" // Number Plan ID\n\n// Get a Number Plan by ID.\nGetTelephonyProvidersEdgesSiteNumberplanRequest.getTelephonyProvidersEdgesSiteNumberplan(siteId: siteId, numberPlanId: numberPlanId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteNumberplanRequest.getTelephonyProvidersEdgesSiteNumberplan was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessitenumberplans": {
    "operationId": "gettelephonyprovidersedgessitenumberplans",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplans",
    "signature": "getTelephonyProvidersEdgesSiteNumberplans(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\n\n// Get the list of Number Plans for this Site. Only fetches the first 200 records.\nGetTelephonyProvidersEdgesSiteNumberplansRequest.getTelephonyProvidersEdgesSiteNumberplans(siteId: siteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteNumberplansRequest.getTelephonyProvidersEdgesSiteNumberplans was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessitenumberplansclassifications": {
    "operationId": "gettelephonyprovidersedgessitenumberplansclassifications",
    "functionName": "getTelephonyProvidersEdgesSiteNumberplansClassifications",
    "signature": "getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, classification)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "classification",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet classification: String = \"\" // Classification\n\n// Get a list of Classifications for this Site\nGetTelephonyProvidersEdgesSiteNumberplansClassificationsRequest.getTelephonyProvidersEdgesSiteNumberplansClassifications(siteId: siteId, classification: classification) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteNumberplansClassificationsRequest.getTelephonyProvidersEdgesSiteNumberplansClassifications was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessiteoutboundroute": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroute",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet outboundRouteId: String = \"\" // Outbound route ID\n\n// Get an outbound route\nGetTelephonyProvidersEdgesSiteOutboundrouteRequest.getTelephonyProvidersEdgesSiteOutboundroute(siteId: siteId, outboundRouteId: outboundRouteId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteOutboundrouteRequest.getTelephonyProvidersEdgesSiteOutboundroute was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "gettelephonyprovidersedgessiteoutboundroutes",
    "functionName": "getTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "getTelephonyProvidersEdgesSiteOutboundroutes(siteId, pageSize, pageNumber, name, externalTrunkBasesIds, sortBy)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "externalTrunkBasesIds",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "OutboundRouteBaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet name: String = \"\" // Name\nlet externalTrunkBasesIds: String = \"\" // externalTrunkBases.ids\nlet sortBy: String = \"\" // Sort by\n\n// Get outbound routes\nGetTelephonyProvidersEdgesSiteOutboundroutesRequest.getTelephonyProvidersEdgesSiteOutboundroutes(siteId: siteId, pageSize: pageSize, pageNumber: pageNumber, name: name, externalTrunkBasesIds: externalTrunkBasesIds, sortBy: sortBy) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSiteOutboundroutesRequest.getTelephonyProvidersEdgesSiteOutboundroutes was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgessites": {
    "operationId": "gettelephonyprovidersedgessites",
    "functionName": "getTelephonyProvidersEdgesSites",
    "signature": "getTelephonyProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId, managed)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      },
      {
        "name": "locationId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "SiteEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortBy: String = \"\" // Sort by\nlet sortOrder: String = \"\" // Sort order\nlet name: String = \"\" // Name\nlet locationId: String = \"\" // Location Id\nlet managed: Bool = true // Filter by managed\n\n// Get the list of Sites.\nGetTelephonyProvidersEdgesSitesRequest.getTelephonyProvidersEdgesSites(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, locationId: locationId, managed: managed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesSitesRequest.getTelephonyProvidersEdgesSites was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestimezones": {
    "operationId": "gettelephonyprovidersedgestimezones",
    "functionName": "getTelephonyProvidersEdgesTimezones",
    "signature": "getTelephonyProvidersEdgesTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get a list of Edge-compatible time zones\nGetTelephonyProvidersEdgesTimezonesRequest.getTelephonyProvidersEdgesTimezones(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTimezonesRequest.getTelephonyProvidersEdgesTimezones was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunk": {
    "operationId": "gettelephonyprovidersedgestrunk",
    "functionName": "getTelephonyProvidersEdgesTrunk",
    "signature": "getTelephonyProvidersEdgesTrunk(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "Trunk",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkId: String = \"\" // Trunk ID\n\n// Get a Trunk by ID\nGetTelephonyProvidersEdgesTrunkRequest.getTelephonyProvidersEdgesTrunk(trunkId: trunkId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkRequest.getTelephonyProvidersEdgesTrunk was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkmetrics": {
    "operationId": "gettelephonyprovidersedgestrunkmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunkMetrics",
    "signature": "getTelephonyProvidersEdgesTrunkMetrics(trunkId)",
    "parameters": [
      {
        "name": "trunkId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkMetrics",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkId: String = \"\" // Trunk Id\n\n// Get the trunk metrics.\nGetTelephonyProvidersEdgesTrunkMetricsRequest.getTelephonyProvidersEdgesTrunkMetrics(trunkId: trunkId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkMetricsRequest.getTelephonyProvidersEdgesTrunkMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkbasesetting": {
    "operationId": "gettelephonyprovidersedgestrunkbasesetting",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, ignoreHidden)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "ignoreHidden",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "TrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkBaseSettingsId: String = \"\" // Trunk Base ID\nlet ignoreHidden: Bool = true // Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\n\n// Get a Trunk Base Settings object by ID\nGetTelephonyProvidersEdgesTrunkbasesettingRequest.getTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId: trunkBaseSettingsId, ignoreHidden: ignoreHidden) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkbasesettingRequest.getTelephonyProvidersEdgesTrunkbasesetting was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkbasesettings": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettings",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled, ignoreHidden, managed, expand, name)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "recordingEnabled",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "ignoreHidden",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "managed",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "name",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkBaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Value by which to sort\nlet sortOrder: String = \"\" // Sort order\nlet recordingEnabled: Bool = true // Filter trunks by recording enabled\nlet ignoreHidden: Bool = true // Set this to true to not receive trunk properties that are meant to be hidden or for internal system usage only.\nlet managed: Bool = true // Filter by managed\nlet expand: [String] = [\"\"] // Fields to expand in the response, comma-separated\nlet name: String = \"\" // Name of the TrunkBase to filter by\n\n// Get Trunk Base Settings listing\nGetTelephonyProvidersEdgesTrunkbasesettingsRequest.getTelephonyProvidersEdgesTrunkbasesettings(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, recordingEnabled: recordingEnabled, ignoreHidden: ignoreHidden, managed: managed, expand: expand, name: name) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkbasesettingsRequest.getTelephonyProvidersEdgesTrunkbasesettings was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingsavailablemetabases",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrunkMetabaseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet type: GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesRequest.ModelType_getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases = GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesRequest.ModelType_getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases.enummember // \nlet pageSize: Int = 0 // \nlet pageNumber: Int = 0 // \n\n// Get a list of available makes and models to create a new Trunk Base Settings\nGetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesRequest.getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type: type, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabasesRequest.getTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkbasesettingstemplate": {
    "operationId": "gettelephonyprovidersedgestrunkbasesettingstemplate",
    "functionName": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate",
    "signature": "getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)",
    "parameters": [
      {
        "name": "trunkMetabaseId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkMetabaseId: String = \"\" // The id of a metabase object upon which to base this Trunk Base Settings\n\n// Get a Trunk Base Settings instance template from a given make and model. This object can then be modified and saved as a new Trunk Base Settings instance\nGetTelephonyProvidersEdgesTrunkbasesettingsTemplateRequest.getTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId: trunkMetabaseId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkbasesettingsTemplateRequest.getTelephonyProvidersEdgesTrunkbasesettingsTemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunks": {
    "operationId": "gettelephonyprovidersedgestrunks",
    "functionName": "getTelephonyProvidersEdgesTrunks",
    "signature": "getTelephonyProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType)",
    "parameters": [
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortBy",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "edgeId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkBaseId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageNumber: Int = 0 // Page number\nlet pageSize: Int = 0 // Page size\nlet sortBy: String = \"\" // Value by which to sort\nlet sortOrder: String = \"\" // Sort order\nlet edgeId: String = \"\" // Filter by Edge Ids\nlet trunkBaseId: String = \"\" // Filter by Trunk Base Ids\nlet trunkType: GetTelephonyProvidersEdgesTrunksRequest.TrunkType_getTelephonyProvidersEdgesTrunks = GetTelephonyProvidersEdgesTrunksRequest.TrunkType_getTelephonyProvidersEdgesTrunks.enummember // Filter by a Trunk type\n\n// Get the list of available trunks.\nGetTelephonyProvidersEdgesTrunksRequest.getTelephonyProvidersEdgesTrunks(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, sortOrder: sortOrder, edgeId: edgeId, trunkBaseId: trunkBaseId, trunkType: trunkType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunksRequest.getTelephonyProvidersEdgesTrunks was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunksmetrics": {
    "operationId": "gettelephonyprovidersedgestrunksmetrics",
    "functionName": "getTelephonyProvidersEdgesTrunksMetrics",
    "signature": "getTelephonyProvidersEdgesTrunksMetrics(trunkIds)",
    "parameters": [
      {
        "name": "trunkIds",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[TrunkMetrics]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkIds: String = \"\" // Comma separated list of Trunk Id's\n\n// Get the metrics for a list of trunks.\nGetTelephonyProvidersEdgesTrunksMetricsRequest.getTelephonyProvidersEdgesTrunksMetrics(trunkIds: trunkIds) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunksMetricsRequest.getTelephonyProvidersEdgesTrunksMetrics was successful\")\n        dump(response)\n    }\n}"
  },
  "gettelephonyprovidersedgestrunkswithrecording": {
    "operationId": "gettelephonyprovidersedgestrunkswithrecording",
    "functionName": "getTelephonyProvidersEdgesTrunkswithrecording",
    "signature": "getTelephonyProvidersEdgesTrunkswithrecording(trunkType)",
    "parameters": [
      {
        "name": "trunkType",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "TrunkRecordingEnabledCount",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkType: GetTelephonyProvidersEdgesTrunkswithrecordingRequest.TrunkType_getTelephonyProvidersEdgesTrunkswithrecording = GetTelephonyProvidersEdgesTrunkswithrecordingRequest.TrunkType_getTelephonyProvidersEdgesTrunkswithrecording.enummember // The type of this trunk base.\n\n// Get Counts of trunks that have recording disabled or enabled\nGetTelephonyProvidersEdgesTrunkswithrecordingRequest.getTelephonyProvidersEdgesTrunkswithrecording(trunkType: trunkType) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTelephonyProvidersEdgesTrunkswithrecordingRequest.getTelephonyProvidersEdgesTrunkswithrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgediagnosticnslookup": {
    "operationId": "posttelephonyprovidersedgediagnosticnslookup",
    "functionName": "postTelephonyProvidersEdgeDiagnosticNslookup",
    "signature": "postTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeNetworkDiagnosticRequest",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\nlet body: EdgeNetworkDiagnosticRequest = new EdgeNetworkDiagnosticRequest(...) // request payload to get network diagnostic\n\n// Nslookup request command to collect networking-related information from an Edge for a target IP or host.\nPostTelephonyProvidersEdgeDiagnosticNslookupRequest.postTelephonyProvidersEdgeDiagnosticNslookup(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeDiagnosticNslookupRequest.postTelephonyProvidersEdgeDiagnosticNslookup was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgediagnosticping": {
    "operationId": "posttelephonyprovidersedgediagnosticping",
    "functionName": "postTelephonyProvidersEdgeDiagnosticPing",
    "signature": "postTelephonyProvidersEdgeDiagnosticPing(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeNetworkDiagnosticRequest",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\nlet body: EdgeNetworkDiagnosticRequest = new EdgeNetworkDiagnosticRequest(...) // request payload to get network diagnostic\n\n// Ping Request command to collect networking-related information from an Edge for a target IP or host.\nPostTelephonyProvidersEdgeDiagnosticPingRequest.postTelephonyProvidersEdgeDiagnosticPing(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeDiagnosticPingRequest.postTelephonyProvidersEdgeDiagnosticPing was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgediagnosticroute": {
    "operationId": "posttelephonyprovidersedgediagnosticroute",
    "functionName": "postTelephonyProvidersEdgeDiagnosticRoute",
    "signature": "postTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeNetworkDiagnosticRequest",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\nlet body: EdgeNetworkDiagnosticRequest = new EdgeNetworkDiagnosticRequest(...) // request payload to get network diagnostic\n\n// Route request command to collect networking-related information from an Edge for a target IP or host.\nPostTelephonyProvidersEdgeDiagnosticRouteRequest.postTelephonyProvidersEdgeDiagnosticRoute(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeDiagnosticRouteRequest.postTelephonyProvidersEdgeDiagnosticRoute was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgediagnostictracepath": {
    "operationId": "posttelephonyprovidersedgediagnostictracepath",
    "functionName": "postTelephonyProvidersEdgeDiagnosticTracepath",
    "signature": "postTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeNetworkDiagnosticRequest",
        "required": "true"
      }
    ],
    "return": "EdgeNetworkDiagnostic",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\nlet body: EdgeNetworkDiagnosticRequest = new EdgeNetworkDiagnosticRequest(...) // request payload to get network diagnostic\n\n// Tracepath request command to collect networking-related information from an Edge for a target IP or host.\nPostTelephonyProvidersEdgeDiagnosticTracepathRequest.postTelephonyProvidersEdgeDiagnosticTracepath(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeDiagnosticTracepathRequest.postTelephonyProvidersEdgeDiagnosticTracepath was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgelogicalinterfaces": {
    "operationId": "posttelephonyprovidersedgelogicalinterfaces",
    "functionName": "postTelephonyProvidersEdgeLogicalinterfaces",
    "signature": "postTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainLogicalInterface",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: DomainLogicalInterface = new DomainLogicalInterface(...) // Logical interface\n\n// Create an edge logical interface.\nPostTelephonyProvidersEdgeLogicalinterfacesRequest.postTelephonyProvidersEdgeLogicalinterfaces(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeLogicalinterfacesRequest.postTelephonyProvidersEdgeLogicalinterfaces was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgelogsjobupload": {
    "operationId": "posttelephonyprovidersedgelogsjobupload",
    "functionName": "postTelephonyProvidersEdgeLogsJobUpload",
    "signature": "postTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeLogsJobUploadRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet jobId: String = \"\" // Job ID\nlet body: EdgeLogsJobUploadRequest = new EdgeLogsJobUploadRequest(...) // Log upload request\n\n// Request that the specified fileIds be uploaded from the Edge.\nPostTelephonyProvidersEdgeLogsJobUploadRequest.postTelephonyProvidersEdgeLogsJobUpload(edgeId: edgeId, jobId: jobId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostTelephonyProvidersEdgeLogsJobUploadRequest.postTelephonyProvidersEdgeLogsJobUpload was successful\")\n    }\n}"
  },
  "posttelephonyprovidersedgelogsjobs": {
    "operationId": "posttelephonyprovidersedgelogsjobs",
    "functionName": "postTelephonyProvidersEdgeLogsJobs",
    "signature": "postTelephonyProvidersEdgeLogsJobs(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeLogsJobRequest",
        "required": "true"
      }
    ],
    "return": "EdgeLogsJobResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: EdgeLogsJobRequest = new EdgeLogsJobRequest(...) // EdgeLogsJobRequest\n\n// Create a job to upload a list of Edge logs.\nPostTelephonyProvidersEdgeLogsJobsRequest.postTelephonyProvidersEdgeLogsJobs(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeLogsJobsRequest.postTelephonyProvidersEdgeLogsJobs was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgereboot": {
    "operationId": "posttelephonyprovidersedgereboot",
    "functionName": "postTelephonyProvidersEdgeReboot",
    "signature": "postTelephonyProvidersEdgeReboot(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeRebootParameters",
        "required": "false"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: EdgeRebootParameters = new EdgeRebootParameters(...) // Parameters for the edge reboot\n\n// Reboot an Edge\nPostTelephonyProvidersEdgeRebootRequest.postTelephonyProvidersEdgeReboot(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeRebootRequest.postTelephonyProvidersEdgeReboot was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesoftwareupdate": {
    "operationId": "posttelephonyprovidersedgesoftwareupdate",
    "functionName": "postTelephonyProvidersEdgeSoftwareupdate",
    "signature": "postTelephonyProvidersEdgeSoftwareupdate(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainEdgeSoftwareUpdateDto",
        "required": "true"
      }
    ],
    "return": "DomainEdgeSoftwareUpdateDto",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: DomainEdgeSoftwareUpdateDto = new DomainEdgeSoftwareUpdateDto(...) // Software update request\n\n// Starts a software update for this edge.\nPostTelephonyProvidersEdgeSoftwareupdateRequest.postTelephonyProvidersEdgeSoftwareupdate(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeSoftwareupdateRequest.postTelephonyProvidersEdgeSoftwareupdate was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgestatuscode": {
    "operationId": "posttelephonyprovidersedgestatuscode",
    "functionName": "postTelephonyProvidersEdgeStatuscode",
    "signature": "postTelephonyProvidersEdgeStatuscode(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeServiceStateRequest",
        "required": "false"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: EdgeServiceStateRequest = new EdgeServiceStateRequest(...) // Edge Service State\n\n// Take an Edge in or out of service\nPostTelephonyProvidersEdgeStatuscodeRequest.postTelephonyProvidersEdgeStatuscode(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeStatuscodeRequest.postTelephonyProvidersEdgeStatuscode was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgeunpair": {
    "operationId": "posttelephonyprovidersedgeunpair",
    "functionName": "postTelephonyProvidersEdgeUnpair",
    "signature": "postTelephonyProvidersEdgeUnpair(edgeId)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge Id\n\n// Unpair an Edge\nPostTelephonyProvidersEdgeUnpairRequest.postTelephonyProvidersEdgeUnpair(edgeId: edgeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgeUnpairRequest.postTelephonyProvidersEdgeUnpair was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedges": {
    "operationId": "posttelephonyprovidersedges",
    "functionName": "postTelephonyProvidersEdges",
    "signature": "postTelephonyProvidersEdges(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Edge",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Edge = new Edge(...) // Edge\n\n// Create an edge.\nPostTelephonyProvidersEdgesRequest.postTelephonyProvidersEdges(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesRequest.postTelephonyProvidersEdges was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesaddressvalidation": {
    "operationId": "posttelephonyprovidersedgesaddressvalidation",
    "functionName": "postTelephonyProvidersEdgesAddressvalidation",
    "signature": "postTelephonyProvidersEdgesAddressvalidation(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ValidateAddressRequest",
        "required": "true"
      }
    ],
    "return": "ValidateAddressResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ValidateAddressRequest = new ValidateAddressRequest(...) // Address\n\n// Validates a street address\nPostTelephonyProvidersEdgesAddressvalidationRequest.postTelephonyProvidersEdgesAddressvalidation(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesAddressvalidationRequest.postTelephonyProvidersEdgesAddressvalidation was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgescertificateauthorities": {
    "operationId": "posttelephonyprovidersedgescertificateauthorities",
    "functionName": "postTelephonyProvidersEdgesCertificateauthorities",
    "signature": "postTelephonyProvidersEdgesCertificateauthorities(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DomainCertificateAuthority",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DomainCertificateAuthority = new DomainCertificateAuthority(...) // CertificateAuthority\n\n// Create a certificate authority.\nPostTelephonyProvidersEdgesCertificateauthoritiesRequest.postTelephonyProvidersEdgesCertificateauthorities(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesCertificateauthoritiesRequest.postTelephonyProvidersEdgesCertificateauthorities was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesdidpools": {
    "operationId": "posttelephonyprovidersedgesdidpools",
    "functionName": "postTelephonyProvidersEdgesDidpools",
    "signature": "postTelephonyProvidersEdgesDidpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DIDPool",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DIDPool = new DIDPool(...) // DID pool\n\n// Create a new DID pool\nPostTelephonyProvidersEdgesDidpoolsRequest.postTelephonyProvidersEdgesDidpools(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesDidpoolsRequest.postTelephonyProvidersEdgesDidpools was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesedgegroups": {
    "operationId": "posttelephonyprovidersedgesedgegroups",
    "functionName": "postTelephonyProvidersEdgesEdgegroups",
    "signature": "postTelephonyProvidersEdgesEdgegroups(body)",
    "parameters": [
      {
        "name": "body",
        "type": "EdgeGroup",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: EdgeGroup = new EdgeGroup(...) // EdgeGroup\n\n// Create an edge group.\nPostTelephonyProvidersEdgesEdgegroupsRequest.postTelephonyProvidersEdgesEdgegroups(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesEdgegroupsRequest.postTelephonyProvidersEdgesEdgegroups was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesextensionpools": {
    "operationId": "posttelephonyprovidersedgesextensionpools",
    "functionName": "postTelephonyProvidersEdgesExtensionpools",
    "signature": "postTelephonyProvidersEdgesExtensionpools(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ExtensionPool",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ExtensionPool = new ExtensionPool(...) // ExtensionPool\n\n// Create a new extension pool\nPostTelephonyProvidersEdgesExtensionpoolsRequest.postTelephonyProvidersEdgesExtensionpools(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesExtensionpoolsRequest.postTelephonyProvidersEdgesExtensionpools was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesoutboundroutes": {
    "operationId": "posttelephonyprovidersedgesoutboundroutes",
    "functionName": "postTelephonyProvidersEdgesOutboundroutes",
    "signature": "postTelephonyProvidersEdgesOutboundroutes(body)",
    "parameters": [
      {
        "name": "body",
        "type": "OutboundRoute",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: OutboundRoute = new OutboundRoute(...) // OutboundRoute\n\n// Create outbound rule\nPostTelephonyProvidersEdgesOutboundroutesRequest.postTelephonyProvidersEdgesOutboundroutes(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesOutboundroutesRequest.postTelephonyProvidersEdgesOutboundroutes was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesphonereboot": {
    "operationId": "posttelephonyprovidersedgesphonereboot",
    "functionName": "postTelephonyProvidersEdgesPhoneReboot",
    "signature": "postTelephonyProvidersEdgesPhoneReboot(phoneId)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneId: String = \"\" // Phone Id\n\n// Reboot a Phone\nPostTelephonyProvidersEdgesPhoneRebootRequest.postTelephonyProvidersEdgesPhoneReboot(phoneId: phoneId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostTelephonyProvidersEdgesPhoneRebootRequest.postTelephonyProvidersEdgesPhoneReboot was successful\")\n    }\n}"
  },
  "posttelephonyprovidersedgesphonebasesettings": {
    "operationId": "posttelephonyprovidersedgesphonebasesettings",
    "functionName": "postTelephonyProvidersEdgesPhonebasesettings",
    "signature": "postTelephonyProvidersEdgesPhonebasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PhoneBase",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PhoneBase = new PhoneBase(...) // Phone base settings\n\n// Create a new Phone Base Settings object\nPostTelephonyProvidersEdgesPhonebasesettingsRequest.postTelephonyProvidersEdgesPhonebasesettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesPhonebasesettingsRequest.postTelephonyProvidersEdgesPhonebasesettings was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesphones": {
    "operationId": "posttelephonyprovidersedgesphones",
    "functionName": "postTelephonyProvidersEdgesPhones",
    "signature": "postTelephonyProvidersEdgesPhones(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Phone",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Phone = new Phone(...) // Phone\n\n// Create a new Phone\nPostTelephonyProvidersEdgesPhonesRequest.postTelephonyProvidersEdgesPhones(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesPhonesRequest.postTelephonyProvidersEdgesPhones was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgesphonesreboot": {
    "operationId": "posttelephonyprovidersedgesphonesreboot",
    "functionName": "postTelephonyProvidersEdgesPhonesReboot",
    "signature": "postTelephonyProvidersEdgesPhonesReboot(body)",
    "parameters": [
      {
        "name": "body",
        "type": "PhonesReboot",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: PhonesReboot = new PhonesReboot(...) // Phones\n\n// Reboot Multiple Phones\nPostTelephonyProvidersEdgesPhonesRebootRequest.postTelephonyProvidersEdgesPhonesReboot(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostTelephonyProvidersEdgesPhonesRebootRequest.postTelephonyProvidersEdgesPhonesReboot was successful\")\n    }\n}"
  },
  "posttelephonyprovidersedgessiteoutboundroutes": {
    "operationId": "posttelephonyprovidersedgessiteoutboundroutes",
    "functionName": "postTelephonyProvidersEdgesSiteOutboundroutes",
    "signature": "postTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OutboundRouteBase",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet body: OutboundRouteBase = new OutboundRouteBase(...) // OutboundRoute\n\n// Create outbound route\nPostTelephonyProvidersEdgesSiteOutboundroutesRequest.postTelephonyProvidersEdgesSiteOutboundroutes(siteId: siteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesSiteOutboundroutesRequest.postTelephonyProvidersEdgesSiteOutboundroutes was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgessiterebalance": {
    "operationId": "posttelephonyprovidersedgessiterebalance",
    "functionName": "postTelephonyProvidersEdgesSiteRebalance",
    "signature": "postTelephonyProvidersEdgesSiteRebalance(siteId)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\n\n// Triggers the rebalance operation.\nPostTelephonyProvidersEdgesSiteRebalanceRequest.postTelephonyProvidersEdgesSiteRebalance(siteId: siteId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostTelephonyProvidersEdgesSiteRebalanceRequest.postTelephonyProvidersEdgesSiteRebalance was successful\")\n    }\n}"
  },
  "posttelephonyprovidersedgessites": {
    "operationId": "posttelephonyprovidersedgessites",
    "functionName": "postTelephonyProvidersEdgesSites",
    "signature": "postTelephonyProvidersEdgesSites(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Site",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Site = new Site(...) // Site\n\n// Create a Site.\nPostTelephonyProvidersEdgesSitesRequest.postTelephonyProvidersEdgesSites(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesSitesRequest.postTelephonyProvidersEdgesSites was successful\")\n        dump(response)\n    }\n}"
  },
  "posttelephonyprovidersedgestrunkbasesettings": {
    "operationId": "posttelephonyprovidersedgestrunkbasesettings",
    "functionName": "postTelephonyProvidersEdgesTrunkbasesettings",
    "signature": "postTelephonyProvidersEdgesTrunkbasesettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "TrunkBase",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: TrunkBase = new TrunkBase(...) // Trunk base settings\n\n// Create a Trunk Base Settings object\nPostTelephonyProvidersEdgesTrunkbasesettingsRequest.postTelephonyProvidersEdgesTrunkbasesettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTelephonyProvidersEdgesTrunkbasesettingsRequest.postTelephonyProvidersEdgesTrunkbasesettings was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedge": {
    "operationId": "puttelephonyprovidersedge",
    "functionName": "putTelephonyProvidersEdge",
    "signature": "putTelephonyProvidersEdge(edgeId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Edge",
        "required": "true"
      }
    ],
    "return": "Edge",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet body: Edge = new Edge(...) // Edge\n\n// Update a edge.\nPutTelephonyProvidersEdgeRequest.putTelephonyProvidersEdge(edgeId: edgeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgeRequest.putTelephonyProvidersEdge was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgeline": {
    "operationId": "puttelephonyprovidersedgeline",
    "functionName": "putTelephonyProvidersEdgeLine",
    "signature": "putTelephonyProvidersEdgeLine(edgeId, lineId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "lineId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeLine",
        "required": "true"
      }
    ],
    "return": "EdgeLine",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet lineId: String = \"\" // Line ID\nlet body: EdgeLine = new EdgeLine(...) // Line\n\n// Update a line.\nPutTelephonyProvidersEdgeLineRequest.putTelephonyProvidersEdgeLine(edgeId: edgeId, lineId: lineId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgeLineRequest.putTelephonyProvidersEdgeLine was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgelogicalinterface": {
    "operationId": "puttelephonyprovidersedgelogicalinterface",
    "functionName": "putTelephonyProvidersEdgeLogicalinterface",
    "signature": "putTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)",
    "parameters": [
      {
        "name": "edgeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "interfaceId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainLogicalInterface",
        "required": "true"
      }
    ],
    "return": "DomainLogicalInterface",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeId: String = \"\" // Edge ID\nlet interfaceId: String = \"\" // Interface ID\nlet body: DomainLogicalInterface = new DomainLogicalInterface(...) // Logical interface\n\n// Update an edge logical interface.\nPutTelephonyProvidersEdgeLogicalinterfaceRequest.putTelephonyProvidersEdgeLogicalinterface(edgeId: edgeId, interfaceId: interfaceId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgeLogicalinterfaceRequest.putTelephonyProvidersEdgeLogicalinterface was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgescertificateauthority": {
    "operationId": "puttelephonyprovidersedgescertificateauthority",
    "functionName": "putTelephonyProvidersEdgesCertificateauthority",
    "signature": "putTelephonyProvidersEdgesCertificateauthority(certificateId, body)",
    "parameters": [
      {
        "name": "certificateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DomainCertificateAuthority",
        "required": "true"
      }
    ],
    "return": "DomainCertificateAuthority",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet certificateId: String = \"\" // Certificate ID\nlet body: DomainCertificateAuthority = new DomainCertificateAuthority(...) // Certificate authority\n\n// Update a certificate authority.\nPutTelephonyProvidersEdgesCertificateauthorityRequest.putTelephonyProvidersEdgesCertificateauthority(certificateId: certificateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesCertificateauthorityRequest.putTelephonyProvidersEdgesCertificateauthority was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesdid": {
    "operationId": "puttelephonyprovidersedgesdid",
    "functionName": "putTelephonyProvidersEdgesDid",
    "signature": "putTelephonyProvidersEdgesDid(didId, body)",
    "parameters": [
      {
        "name": "didId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DID",
        "required": "true"
      }
    ],
    "return": "DID",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet didId: String = \"\" // DID ID\nlet body: DID = new DID(...) // DID\n\n// Update a DID by ID.\nPutTelephonyProvidersEdgesDidRequest.putTelephonyProvidersEdgesDid(didId: didId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesDidRequest.putTelephonyProvidersEdgesDid was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesdidpool": {
    "operationId": "puttelephonyprovidersedgesdidpool",
    "functionName": "putTelephonyProvidersEdgesDidpool",
    "signature": "putTelephonyProvidersEdgesDidpool(didPoolId, body)",
    "parameters": [
      {
        "name": "didPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "DIDPool",
        "required": "true"
      }
    ],
    "return": "DIDPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet didPoolId: String = \"\" // DID pool ID\nlet body: DIDPool = new DIDPool(...) // DID pool\n\n// Update a DID Pool by ID.\nPutTelephonyProvidersEdgesDidpoolRequest.putTelephonyProvidersEdgesDidpool(didPoolId: didPoolId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesDidpoolRequest.putTelephonyProvidersEdgesDidpool was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesedgegroup": {
    "operationId": "puttelephonyprovidersedgesedgegroup",
    "functionName": "putTelephonyProvidersEdgesEdgegroup",
    "signature": "putTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)",
    "parameters": [
      {
        "name": "edgeGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeGroup",
        "required": "true"
      }
    ],
    "return": "EdgeGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgeGroupId: String = \"\" // Edge group ID\nlet body: EdgeGroup = new EdgeGroup(...) // EdgeGroup\n\n// Update an edge group.\nPutTelephonyProvidersEdgesEdgegroupRequest.putTelephonyProvidersEdgesEdgegroup(edgeGroupId: edgeGroupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesEdgegroupRequest.putTelephonyProvidersEdgesEdgegroup was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesedgegroupedgetrunkbase": {
    "operationId": "puttelephonyprovidersedgesedgegroupedgetrunkbase",
    "functionName": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
    "signature": "putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)",
    "parameters": [
      {
        "name": "edgegroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "edgetrunkbaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "EdgeTrunkBase",
        "required": "true"
      }
    ],
    "return": "EdgeTrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet edgegroupId: String = \"\" // Edge Group ID\nlet edgetrunkbaseId: String = \"\" // Edge Trunk Base ID\nlet body: EdgeTrunkBase = new EdgeTrunkBase(...) // EdgeTrunkBase\n\n// Update the edge trunk base associated with the edge group\nPutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest.putTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId: edgegroupId, edgetrunkbaseId: edgetrunkbaseId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesEdgegroupEdgetrunkbaseRequest.putTelephonyProvidersEdgesEdgegroupEdgetrunkbase was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesextension": {
    "operationId": "puttelephonyprovidersedgesextension",
    "functionName": "putTelephonyProvidersEdgesExtension",
    "signature": "putTelephonyProvidersEdgesExtension(extensionId, body)",
    "parameters": [
      {
        "name": "extensionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Extension",
        "required": "true"
      }
    ],
    "return": "Extension",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet extensionId: String = \"\" // Extension ID\nlet body: Extension = new Extension(...) // Extension\n\n// Update an extension by ID.\nPutTelephonyProvidersEdgesExtensionRequest.putTelephonyProvidersEdgesExtension(extensionId: extensionId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesExtensionRequest.putTelephonyProvidersEdgesExtension was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesextensionpool": {
    "operationId": "puttelephonyprovidersedgesextensionpool",
    "functionName": "putTelephonyProvidersEdgesExtensionpool",
    "signature": "putTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)",
    "parameters": [
      {
        "name": "extensionPoolId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ExtensionPool",
        "required": "true"
      }
    ],
    "return": "ExtensionPool",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet extensionPoolId: String = \"\" // Extension pool ID\nlet body: ExtensionPool = new ExtensionPool(...) // ExtensionPool\n\n// Update an extension pool by ID\nPutTelephonyProvidersEdgesExtensionpoolRequest.putTelephonyProvidersEdgesExtensionpool(extensionPoolId: extensionPoolId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesExtensionpoolRequest.putTelephonyProvidersEdgesExtensionpool was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesoutboundroute": {
    "operationId": "puttelephonyprovidersedgesoutboundroute",
    "functionName": "putTelephonyProvidersEdgesOutboundroute",
    "signature": "putTelephonyProvidersEdgesOutboundroute(outboundRouteId, body)",
    "parameters": [
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OutboundRoute",
        "required": "true"
      }
    ],
    "return": "OutboundRoute",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet outboundRouteId: String = \"\" // Outbound route ID\nlet body: OutboundRoute = new OutboundRoute(...) // OutboundRoute\n\n// Update outbound route\nPutTelephonyProvidersEdgesOutboundrouteRequest.putTelephonyProvidersEdgesOutboundroute(outboundRouteId: outboundRouteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesOutboundrouteRequest.putTelephonyProvidersEdgesOutboundroute was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesphone": {
    "operationId": "puttelephonyprovidersedgesphone",
    "functionName": "putTelephonyProvidersEdgesPhone",
    "signature": "putTelephonyProvidersEdgesPhone(phoneId, body)",
    "parameters": [
      {
        "name": "phoneId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Phone",
        "required": "true"
      }
    ],
    "return": "Phone",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneId: String = \"\" // Phone ID\nlet body: Phone = new Phone(...) // Phone\n\n// Update a Phone by ID\nPutTelephonyProvidersEdgesPhoneRequest.putTelephonyProvidersEdgesPhone(phoneId: phoneId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesPhoneRequest.putTelephonyProvidersEdgesPhone was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgesphonebasesetting": {
    "operationId": "puttelephonyprovidersedgesphonebasesetting",
    "functionName": "putTelephonyProvidersEdgesPhonebasesetting",
    "signature": "putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)",
    "parameters": [
      {
        "name": "phoneBaseId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PhoneBase",
        "required": "true"
      }
    ],
    "return": "PhoneBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet phoneBaseId: String = \"\" // Phone base ID\nlet body: PhoneBase = new PhoneBase(...) // Phone base settings\n\n// Update a Phone Base Settings by ID\nPutTelephonyProvidersEdgesPhonebasesettingRequest.putTelephonyProvidersEdgesPhonebasesetting(phoneBaseId: phoneBaseId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesPhonebasesettingRequest.putTelephonyProvidersEdgesPhonebasesetting was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgessite": {
    "operationId": "puttelephonyprovidersedgessite",
    "functionName": "putTelephonyProvidersEdgesSite",
    "signature": "putTelephonyProvidersEdgesSite(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "Site",
        "required": "true"
      }
    ],
    "return": "Site",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet body: Site = new Site(...) // Site\n\n// Update a Site by ID.\nPutTelephonyProvidersEdgesSiteRequest.putTelephonyProvidersEdgesSite(siteId: siteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesSiteRequest.putTelephonyProvidersEdgesSite was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgessitenumberplans": {
    "operationId": "puttelephonyprovidersedgessitenumberplans",
    "functionName": "putTelephonyProvidersEdgesSiteNumberplans",
    "signature": "putTelephonyProvidersEdgesSiteNumberplans(siteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[NumberPlan]",
        "required": "true"
      }
    ],
    "return": "[NumberPlan]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet body: [NumberPlan] = [new NumberPlan(...)] // List of number plans\n\n// Update the list of Number Plans. A user can update maximum 200 number plans at a time.\nPutTelephonyProvidersEdgesSiteNumberplansRequest.putTelephonyProvidersEdgesSiteNumberplans(siteId: siteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesSiteNumberplansRequest.putTelephonyProvidersEdgesSiteNumberplans was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgessiteoutboundroute": {
    "operationId": "puttelephonyprovidersedgessiteoutboundroute",
    "functionName": "putTelephonyProvidersEdgesSiteOutboundroute",
    "signature": "putTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)",
    "parameters": [
      {
        "name": "siteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "outboundRouteId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OutboundRouteBase",
        "required": "true"
      }
    ],
    "return": "OutboundRouteBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet siteId: String = \"\" // Site ID\nlet outboundRouteId: String = \"\" // Outbound route ID\nlet body: OutboundRouteBase = new OutboundRouteBase(...) // OutboundRoute\n\n// Update outbound route\nPutTelephonyProvidersEdgesSiteOutboundrouteRequest.putTelephonyProvidersEdgesSiteOutboundroute(siteId: siteId, outboundRouteId: outboundRouteId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesSiteOutboundrouteRequest.putTelephonyProvidersEdgesSiteOutboundroute was successful\")\n        dump(response)\n    }\n}"
  },
  "puttelephonyprovidersedgestrunkbasesetting": {
    "operationId": "puttelephonyprovidersedgestrunkbasesetting",
    "functionName": "putTelephonyProvidersEdgesTrunkbasesetting",
    "signature": "putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)",
    "parameters": [
      {
        "name": "trunkBaseSettingsId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TrunkBase",
        "required": "true"
      }
    ],
    "return": "TrunkBase",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet trunkBaseSettingsId: String = \"\" // Trunk Base ID\nlet body: TrunkBase = new TrunkBase(...) // Trunk base settings\n\n// Update a Trunk Base Settings object by ID\nPutTelephonyProvidersEdgesTrunkbasesettingRequest.putTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId: trunkBaseSettingsId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutTelephonyProvidersEdgesTrunkbasesettingRequest.putTelephonyProvidersEdgesTrunkbasesetting was successful\")\n        dump(response)\n    }\n}"
  },
  "gettextbotsbotssearch": {
    "operationId": "gettextbotsbotssearch",
    "functionName": "getTextbotsBotsSearch",
    "signature": "getTextbotsBotsSearch(botType, botName, botId, pageSize)",
    "parameters": [
      {
        "name": "botType",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "botName",
        "type": "String",
        "required": "false"
      },
      {
        "name": "botId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "BotSearchResponseEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet botType: [String] = [\"\"] // Bot types\nlet botName: String = \"\" // Bot name\nlet botId: [String] = [\"\"] // Bot IDs\nlet pageSize: Int = 0 // The maximum results to return\n\n// Find bots using the currently configured friendly name or ID.\nGetTextbotsBotsSearchRequest.getTextbotsBotsSearch(botType: botType, botName: botName, botId: botId, pageSize: pageSize) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTextbotsBotsSearchRequest.getTextbotsBotsSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "posttextbotsbotflowssessionturns": {
    "operationId": "posttextbotsbotflowssessionturns",
    "functionName": "postTextbotsBotflowsSessionTurns",
    "signature": "postTextbotsBotflowsSessionTurns(sessionId, turnRequest)",
    "parameters": [
      {
        "name": "sessionId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "turnRequest",
        "type": "TextBotFlowTurnRequest",
        "required": "true"
      }
    ],
    "return": "TextBotFlowTurnResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet sessionId: String = \"\" // The bot flow session ID, typically obtained from 'POST /api/v2/textbots/botflows/sessions'\nlet turnRequest: TextBotFlowTurnRequest = new TextBotFlowTurnRequest(...) // \n\n// Issue a bot flow turn event\nPostTextbotsBotflowsSessionTurnsRequest.postTextbotsBotflowsSessionTurns(sessionId: sessionId, turnRequest: turnRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTextbotsBotflowsSessionTurnsRequest.postTextbotsBotflowsSessionTurns was successful\")\n        dump(response)\n    }\n}"
  },
  "posttextbotsbotflowssessions": {
    "operationId": "posttextbotsbotflowssessions",
    "functionName": "postTextbotsBotflowsSessions",
    "signature": "postTextbotsBotflowsSessions(launchRequest)",
    "parameters": [
      {
        "name": "launchRequest",
        "type": "TextBotFlowLaunchRequest",
        "required": "true"
      }
    ],
    "return": "TextBotFlowLaunchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet launchRequest: TextBotFlowLaunchRequest = new TextBotFlowLaunchRequest(...) // \n\n// Create an execution instance of a bot flow definition.\nPostTextbotsBotflowsSessionsRequest.postTextbotsBotflowsSessions(launchRequest: launchRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTextbotsBotflowsSessionsRequest.postTextbotsBotflowsSessions was successful\")\n        dump(response)\n    }\n}"
  },
  "posttextbotsbotsexecute": {
    "operationId": "posttextbotsbotsexecute",
    "functionName": "postTextbotsBotsExecute",
    "signature": "postTextbotsBotsExecute(postTextRequest)",
    "parameters": [
      {
        "name": "postTextRequest",
        "type": "PostTextRequest",
        "required": "true"
      }
    ],
    "return": "PostTextResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet postTextRequest: PostTextRequest = new PostTextRequest(...) // \n\n// Send an intent to a bot to start a dialog/interact with it via text\nPostTextbotsBotsExecuteRequest.postTextbotsBotsExecute(postTextRequest: postTextRequest) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostTextbotsBotsExecuteRequest.postTextbotsBotsExecute was successful\")\n        dump(response)\n    }\n}"
  },
  "deletetoken": {
    "operationId": "deletetoken",
    "functionName": "deleteToken",
    "signature": "deleteToken(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Delete all auth tokens for the specified user.\nDeleteTokenRequest.deleteToken(userId: userId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTokenRequest.deleteToken was successful\")\n    }\n}"
  },
  "deletetokensme": {
    "operationId": "deletetokensme",
    "functionName": "deleteTokensMe",
    "signature": "deleteTokensMe()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete auth token used to make the request.\nDeleteTokensMeRequest.deleteTokensMe() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteTokensMeRequest.deleteTokensMe was successful\")\n    }\n}"
  },
  "gettokensme": {
    "operationId": "gettokensme",
    "functionName": "getTokensMe",
    "signature": "getTokensMe()",
    "return": "TokenInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Fetch information about the current token\nGetTokensMeRequest.getTokensMe() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTokensMeRequest.getTokensMe was successful\")\n        dump(response)\n    }\n}"
  },
  "headtokensme": {
    "operationId": "headtokensme",
    "functionName": "headTokensMe",
    "signature": "headTokensMe()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Verify user token\nHeadTokensMeRequest.headTokensMe() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"HeadTokensMeRequest.headTokensMe was successful\")\n    }\n}"
  },
  "postlanguageunderstandingmineruploads": {
    "operationId": "postlanguageunderstandingmineruploads",
    "functionName": "postLanguageunderstandingMinerUploads",
    "signature": "postLanguageunderstandingMinerUploads(minerId, body)",
    "parameters": [
      {
        "name": "minerId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "JSON",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet minerId: String = \"\" // Miner ID\nlet body: JSON = new JSON(...) // query\n\n// Creates a presigned URL for uploading a chat corpus which will be used for mining by intent miner\nPostLanguageunderstandingMinerUploadsRequest.postLanguageunderstandingMinerUploads(minerId: minerId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostLanguageunderstandingMinerUploadsRequest.postLanguageunderstandingMinerUploads was successful\")\n        dump(response)\n    }\n}"
  },
  "postuploadspublicassetsimages": {
    "operationId": "postuploadspublicassetsimages",
    "functionName": "postUploadsPublicassetsImages",
    "signature": "postUploadsPublicassetsImages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UploadUrlRequest",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UploadUrlRequest = new UploadUrlRequest(...) // query\n\n// Creates presigned url for uploading a public asset image\nPostUploadsPublicassetsImagesRequest.postUploadsPublicassetsImages(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUploadsPublicassetsImagesRequest.postUploadsPublicassetsImages was successful\")\n        dump(response)\n    }\n}"
  },
  "postuploadsrecordings": {
    "operationId": "postuploadsrecordings",
    "functionName": "postUploadsRecordings",
    "signature": "postUploadsRecordings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UploadUrlRequest",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UploadUrlRequest = new UploadUrlRequest(...) // query\n\n// Creates presigned url for uploading a recording file\nPostUploadsRecordingsRequest.postUploadsRecordings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUploadsRecordingsRequest.postUploadsRecordings was successful\")\n        dump(response)\n    }\n}"
  },
  "postuploadsworkforcemanagementhistoricaldatacsv": {
    "operationId": "postuploadsworkforcemanagementhistoricaldatacsv",
    "functionName": "postUploadsWorkforcemanagementHistoricaldataCsv",
    "signature": "postUploadsWorkforcemanagementHistoricaldataCsv(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UploadUrlRequest",
        "required": "true"
      }
    ],
    "return": "UploadUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UploadUrlRequest = new UploadUrlRequest(...) // query\n\n// Creates presigned url for uploading WFM historical data file. Requires data in csv format.\nPostUploadsWorkforcemanagementHistoricaldataCsvRequest.postUploadsWorkforcemanagementHistoricaldataCsv(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUploadsWorkforcemanagementHistoricaldataCsvRequest.postUploadsWorkforcemanagementHistoricaldataCsv was successful\")\n        dump(response)\n    }\n}"
  },
  "getusagequeryexecutionidresults": {
    "operationId": "getusagequeryexecutionidresults",
    "functionName": "getUsageQueryExecutionIdResults",
    "signature": "getUsageQueryExecutionIdResults(executionId)",
    "parameters": [
      {
        "name": "executionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ApiUsageQueryResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet executionId: String = \"\" // ID of the query execution\n\n// Get the results of a usage query\nGetUsageQueryExecutionIdResultsRequest.getUsageQueryExecutionIdResults(executionId: executionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsageQueryExecutionIdResultsRequest.getUsageQueryExecutionIdResults was successful\")\n        dump(response)\n    }\n}"
  },
  "postusagequery": {
    "operationId": "postusagequery",
    "functionName": "postUsageQuery",
    "signature": "postUsageQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ApiUsageQuery",
        "required": "true"
      }
    ],
    "return": "UsageExecutionResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ApiUsageQuery = new ApiUsageQuery(...) // Query\n\n// Query organization API Usage - \nPostUsageQueryRequest.postUsageQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUsageQueryRequest.postUsageQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteuserrecording": {
    "operationId": "deleteuserrecording",
    "functionName": "deleteUserrecording",
    "signature": "deleteUserrecording(recordingId)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recordingId: String = \"\" // User Recording ID\n\n// Delete a user recording.\nDeleteUserrecordingRequest.deleteUserrecording(recordingId: recordingId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteUserrecordingRequest.deleteUserrecording was successful\")\n    }\n}"
  },
  "getuserrecording": {
    "operationId": "getuserrecording",
    "functionName": "getUserrecording",
    "signature": "getUserrecording(recordingId, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recordingId: String = \"\" // User Recording ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a user recording.\nGetUserrecordingRequest.getUserrecording(recordingId: recordingId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserrecordingRequest.getUserrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserrecordingmedia": {
    "operationId": "getuserrecordingmedia",
    "functionName": "getUserrecordingMedia",
    "signature": "getUserrecordingMedia(recordingId, formatId)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "DownloadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recordingId: String = \"\" // User Recording ID\nlet formatId: GetUserrecordingMediaRequest.FormatId_getUserrecordingMedia = GetUserrecordingMediaRequest.FormatId_getUserrecordingMedia.enummember // The desired media format.\n\n// Download a user recording.\nGetUserrecordingMediaRequest.getUserrecordingMedia(recordingId: recordingId, formatId: formatId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserrecordingMediaRequest.getUserrecordingMedia was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserrecordings": {
    "operationId": "getuserrecordings",
    "functionName": "getUserrecordings",
    "signature": "getUserrecordings(pageSize, pageNumber, expand)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecordingEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Get a list of user recordings.\nGetUserrecordingsRequest.getUserrecordings(pageSize: pageSize, pageNumber: pageNumber, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserrecordingsRequest.getUserrecordings was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserrecordingssummary": {
    "operationId": "getuserrecordingssummary",
    "functionName": "getUserrecordingsSummary",
    "signature": "getUserrecordingsSummary()",
    "return": "FaxSummary",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get user recording summary\nGetUserrecordingsSummaryRequest.getUserrecordingsSummary() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserrecordingsSummaryRequest.getUserrecordingsSummary was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserrecording": {
    "operationId": "putuserrecording",
    "functionName": "putUserrecording",
    "signature": "putUserrecording(recordingId, body, expand)",
    "parameters": [
      {
        "name": "recordingId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserRecording",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserRecording",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recordingId: String = \"\" // User Recording ID\nlet body: UserRecording = new UserRecording(...) // UserRecording\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\n\n// Update a user recording.\nPutUserrecordingRequest.putUserrecording(recordingId: recordingId, body: body, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserrecordingRequest.putUserrecording was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteuser": {
    "operationId": "deleteuser",
    "functionName": "deleteUser",
    "signature": "deleteUser(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "JSON",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Delete user\nDeleteUserRequest.deleteUser(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteUserRequest.deleteUser was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteuserstationassociatedstation": {
    "operationId": "deleteuserstationassociatedstation",
    "functionName": "deleteUserStationAssociatedstation",
    "signature": "deleteUserStationAssociatedstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Clear associated station\nDeleteUserStationAssociatedstationRequest.deleteUserStationAssociatedstation(userId: userId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteUserStationAssociatedstationRequest.deleteUserStationAssociatedstation was successful\")\n    }\n}"
  },
  "deleteuserstationdefaultstation": {
    "operationId": "deleteuserstationdefaultstation",
    "functionName": "deleteUserStationDefaultstation",
    "signature": "deleteUserStationDefaultstation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Clear default station\nDeleteUserStationDefaultstationRequest.deleteUserStationDefaultstation(userId: userId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteUserStationDefaultstationRequest.deleteUserStationDefaultstation was successful\")\n    }\n}"
  },
  "getprofilesusers": {
    "operationId": "getprofilesusers",
    "functionName": "getProfilesUsers",
    "signature": "getProfilesUsers(pageSize, pageNumber, _id, jid, sortOrder, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jid",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfileEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // id\nlet jid: [String] = [\"\"] // jid\nlet sortOrder: GetProfilesUsersRequest.SortOrder_getProfilesUsers = GetProfilesUsersRequest.SortOrder_getProfilesUsers.enummember // Ascending or descending sort order\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet integrationPresenceSource: GetProfilesUsersRequest.IntegrationPresenceSource_getProfilesUsers = GetProfilesUsersRequest.IntegrationPresenceSource_getProfilesUsers.enummember // Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \\\"expand\\\".\n\n// Get a user profile listing\nGetProfilesUsersRequest.getProfilesUsers(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jid: jid, sortOrder: sortOrder, expand: expand, integrationPresenceSource: integrationPresenceSource) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetProfilesUsersRequest.getProfilesUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getuser": {
    "operationId": "getuser",
    "functionName": "getUser",
    "signature": "getUser(userId, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet integrationPresenceSource: GetUserRequest.IntegrationPresenceSource_getUser = GetUserRequest.IntegrationPresenceSource_getUser.enummember // Gets an integration presence for a user instead of their default.\nlet state: GetUserRequest.State_getUser = GetUserRequest.State_getUser.enummember // Search for a user with this state\n\n// Get user.\nGetUserRequest.getUser(userId: userId, expand: expand, integrationPresenceSource: integrationPresenceSource, state: state) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserRequest.getUser was successful\")\n        dump(response)\n    }\n}"
  },
  "getuseradjacents": {
    "operationId": "getuseradjacents",
    "functionName": "getUserAdjacents",
    "signature": "getUserAdjacents(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "Adjacents",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get adjacents\nGetUserAdjacentsRequest.getUserAdjacents(userId: userId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserAdjacentsRequest.getUserAdjacents was successful\")\n        dump(response)\n    }\n}"
  },
  "getusercallforwarding": {
    "operationId": "getusercallforwarding",
    "functionName": "getUserCallforwarding",
    "signature": "getUserCallforwarding(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get a user's CallForwarding\nGetUserCallforwardingRequest.getUserCallforwarding(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserCallforwardingRequest.getUserCallforwarding was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserdirectreports": {
    "operationId": "getuserdirectreports",
    "functionName": "getUserDirectreports",
    "signature": "getUserDirectreports(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get direct reports\nGetUserDirectreportsRequest.getUserDirectreports(userId: userId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserDirectreportsRequest.getUserDirectreports was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserfavorites": {
    "operationId": "getuserfavorites",
    "functionName": "getUserFavorites",
    "signature": "getUserFavorites(userId, pageSize, pageNumber, sortOrder, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: String = \"\" // Sort order\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Deprecated; will be revived with new contract\nGetUserFavoritesRequest.getUserFavorites(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserFavoritesRequest.getUserFavorites was successful\")\n        dump(response)\n    }\n}"
  },
  "getuseroutofoffice": {
    "operationId": "getuseroutofoffice",
    "functionName": "getUserOutofoffice",
    "signature": "getUserOutofoffice(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get a OutOfOffice\nGetUserOutofofficeRequest.getUserOutofoffice(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserOutofofficeRequest.getUserOutofoffice was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserprofile": {
    "operationId": "getuserprofile",
    "functionName": "getUserProfile",
    "signature": "getUserProfile(userId, expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserProfile",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // userId\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet integrationPresenceSource: GetUserProfileRequest.IntegrationPresenceSource_getUserProfile = GetUserProfileRequest.IntegrationPresenceSource_getUserProfile.enummember // Gets an integration presence for a user instead of their default.\n\n// Get user profile\nGetUserProfileRequest.getUserProfile(userId: userId, expand: expand, integrationPresenceSource: integrationPresenceSource) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserProfileRequest.getUserProfile was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserprofileskills": {
    "operationId": "getuserprofileskills",
    "functionName": "getUserProfileskills",
    "signature": "getUserProfileskills(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// List profile skills for a user\nGetUserProfileskillsRequest.getUserProfileskills(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserProfileskillsRequest.getUserProfileskills was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserroutingstatus": {
    "operationId": "getuserroutingstatus",
    "functionName": "getUserRoutingstatus",
    "signature": "getUserRoutingstatus(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Fetch the routing status of a user\nGetUserRoutingstatusRequest.getUserRoutingstatus(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserRoutingstatusRequest.getUserRoutingstatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserstate": {
    "operationId": "getuserstate",
    "functionName": "getUserState",
    "signature": "getUserState(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get user state information.\nGetUserStateRequest.getUserState(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserStateRequest.getUserState was successful\")\n        dump(response)\n    }\n}"
  },
  "getuserstation": {
    "operationId": "getuserstation",
    "functionName": "getUserStation",
    "signature": "getUserStation(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "UserStations",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get station information for user\nGetUserStationRequest.getUserStation(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserStationRequest.getUserStation was successful\")\n        dump(response)\n    }\n}"
  },
  "getusersuperiors": {
    "operationId": "getusersuperiors",
    "functionName": "getUserSuperiors",
    "signature": "getUserSuperiors(userId, expand)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "[User]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\n\n// Get superiors\nGetUserSuperiorsRequest.getUserSuperiors(userId: userId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserSuperiorsRequest.getUserSuperiors was successful\")\n        dump(response)\n    }\n}"
  },
  "getusertrustors": {
    "operationId": "getusertrustors",
    "functionName": "getUserTrustors",
    "signature": "getUserTrustors(userId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TrustorEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List the organizations that have authorized/trusted the user.\nGetUserTrustorsRequest.getUserTrustors(userId: userId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUserTrustorsRequest.getUserTrustors was successful\")\n        dump(response)\n    }\n}"
  },
  "getusers": {
    "operationId": "getusers",
    "functionName": "getUsers",
    "signature": "getUsers(pageSize, pageNumber, _id, jabberId, sortOrder, expand, integrationPresenceSource, state)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "_id",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "jabberId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      },
      {
        "name": "state",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet _id: [String] = [\"\"] // A list of user IDs to fetch by bulk\nlet jabberId: [String] = [\"\"] // A list of jabberIds to fetch by bulk (cannot be used with the \\\"id\\\" parameter)\nlet sortOrder: GetUsersRequest.SortOrder_getUsers = GetUsersRequest.SortOrder_getUsers.enummember // Ascending or descending sort order\nlet expand: [String] = [\"\"] // Which fields, if any, to expand\nlet integrationPresenceSource: GetUsersRequest.IntegrationPresenceSource_getUsers = GetUsersRequest.IntegrationPresenceSource_getUsers.enummember // Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \\\"expand\\\". When using this parameter the maximum number of users that can be returned is 100.\nlet state: GetUsersRequest.State_getUsers = GetUsersRequest.State_getUsers.enummember // Only list users of this state\n\n// Get the list of available users.\nGetUsersRequest.getUsers(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder, expand: expand, integrationPresenceSource: integrationPresenceSource, state: state) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersRequest.getUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getusersdevelopmentactivities": {
    "operationId": "getusersdevelopmentactivities",
    "functionName": "getUsersDevelopmentActivities",
    "signature": "getUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: [String] = [\"\"] // Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId.\nlet moduleId: String = \"\" // Specifies the ID of the learning module.\nlet interval: String = \"\" // Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet completionInterval: String = \"\" // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetUsersDevelopmentActivitiesRequest.Overdue_getUsersDevelopmentActivities = GetUsersDevelopmentActivitiesRequest.Overdue_getUsersDevelopmentActivities.enummember // Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetUsersDevelopmentActivitiesRequest.SortOrder_getUsersDevelopmentActivities = GetUsersDevelopmentActivitiesRequest.SortOrder_getUsersDevelopmentActivities.enummember // Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\nlet types: [String] = [\"\"] // Specifies the activity types.\nlet statuses: [String] = [\"\"] // Specifies the activity statuses to filter by\nlet relationship: [String] = [\"\"] // Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n\n// Get list of Development Activities\nGetUsersDevelopmentActivitiesRequest.getUsersDevelopmentActivities(userId: userId, moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, types: types, statuses: statuses, relationship: relationship) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersDevelopmentActivitiesRequest.getUsersDevelopmentActivities was successful\")\n        dump(response)\n    }\n}"
  },
  "getusersdevelopmentactivitiesme": {
    "operationId": "getusersdevelopmentactivitiesme",
    "functionName": "getUsersDevelopmentActivitiesMe",
    "signature": "getUsersDevelopmentActivitiesMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
    "parameters": [
      {
        "name": "moduleId",
        "type": "String",
        "required": "false"
      },
      {
        "name": "interval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "completionInterval",
        "type": "String",
        "required": "false"
      },
      {
        "name": "overdue",
        "type": "String",
        "required": "false"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "types",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "statuses",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "relationship",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "DevelopmentActivityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet moduleId: String = \"\" // Specifies the ID of the learning module.\nlet interval: String = \"\" // Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet completionInterval: String = \"\" // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss\nlet overdue: GetUsersDevelopmentActivitiesMeRequest.Overdue_getUsersDevelopmentActivitiesMe = GetUsersDevelopmentActivitiesMeRequest.Overdue_getUsersDevelopmentActivitiesMe.enummember // Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\nlet sortOrder: GetUsersDevelopmentActivitiesMeRequest.SortOrder_getUsersDevelopmentActivitiesMe = GetUsersDevelopmentActivitiesMeRequest.SortOrder_getUsersDevelopmentActivitiesMe.enummember // Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)\nlet types: [String] = [\"\"] // Specifies the activity types.\nlet statuses: [String] = [\"\"] // Specifies the activity statuses to filter by\nlet relationship: [String] = [\"\"] // Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.\n\n// Get list of Development Activities for current user\nGetUsersDevelopmentActivitiesMeRequest.getUsersDevelopmentActivitiesMe(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, types: types, statuses: statuses, relationship: relationship) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersDevelopmentActivitiesMeRequest.getUsersDevelopmentActivitiesMe was successful\")\n        dump(response)\n    }\n}"
  },
  "getusersdevelopmentactivity": {
    "operationId": "getusersdevelopmentactivity",
    "functionName": "getUsersDevelopmentActivity",
    "signature": "getUsersDevelopmentActivity(activityId, type)",
    "parameters": [
      {
        "name": "activityId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "type",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivity",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet activityId: String = \"\" // Specifies the activity ID, maps to either assignment or appointment ID\nlet type: GetUsersDevelopmentActivityRequest.ModelType_getUsersDevelopmentActivity = GetUsersDevelopmentActivityRequest.ModelType_getUsersDevelopmentActivity.enummember // Specifies the activity type.\n\n// Get a Development Activity\nGetUsersDevelopmentActivityRequest.getUsersDevelopmentActivity(activityId: activityId, type: type) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersDevelopmentActivityRequest.getUsersDevelopmentActivity was successful\")\n        dump(response)\n    }\n}"
  },
  "getusersme": {
    "operationId": "getusersme",
    "functionName": "getUsersMe",
    "signature": "getUsersMe(expand, integrationPresenceSource)",
    "parameters": [
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "integrationPresenceSource",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "UserMe",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet expand: [String] = [\"\"] // Which fields, if any, to expand.\nlet integrationPresenceSource: GetUsersMeRequest.IntegrationPresenceSource_getUsersMe = GetUsersMeRequest.IntegrationPresenceSource_getUsersMe.enummember // Get your presence for a given integration. This parameter will only be used when presence is provided as an \\\"expand\\\".\n\n// Get current user details.\nGetUsersMeRequest.getUsersMe(expand: expand, integrationPresenceSource: integrationPresenceSource) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetUsersMeRequest.getUsersMe was successful\")\n        dump(response)\n    }\n}"
  },
  "patchuser": {
    "operationId": "patchuser",
    "functionName": "patchUser",
    "signature": "patchUser(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateUser",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: UpdateUser = new UpdateUser(...) // User\n\n// Update user\nPatchUserRequest.patchUser(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserRequest.patchUser was successful\")\n        dump(response)\n    }\n}"
  },
  "patchusercallforwarding": {
    "operationId": "patchusercallforwarding",
    "functionName": "patchUserCallforwarding",
    "signature": "patchUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CallForwarding",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: CallForwarding = new CallForwarding(...) // Call forwarding\n\n// Patch a user's CallForwarding\nPatchUserCallforwardingRequest.patchUserCallforwarding(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUserCallforwardingRequest.patchUserCallforwarding was successful\")\n        dump(response)\n    }\n}"
  },
  "patchusersbulk": {
    "operationId": "patchusersbulk",
    "functionName": "patchUsersBulk",
    "signature": "patchUsersBulk(body)",
    "parameters": [
      {
        "name": "body",
        "type": "[PatchUser]",
        "required": "true"
      }
    ],
    "return": "UserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: [PatchUser] = [new PatchUser(...)] // Users\n\n// Update bulk acd autoanswer on users\nPatchUsersBulkRequest.patchUsersBulk(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchUsersBulkRequest.patchUsersBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "postuserinvite": {
    "operationId": "postuserinvite",
    "functionName": "postUserInvite",
    "signature": "postUserInvite(userId, force)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "force",
        "type": "Bool",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet force: Bool = true // Resend the invitation even if one is already outstanding\n\n// Send an activation email to the user\nPostUserInviteRequest.postUserInvite(userId: userId, force: force) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostUserInviteRequest.postUserInvite was successful\")\n    }\n}"
  },
  "postuserpassword": {
    "operationId": "postuserpassword",
    "functionName": "postUserPassword",
    "signature": "postUserPassword(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ChangePasswordRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: ChangePasswordRequest = new ChangePasswordRequest(...) // Password\n\n// Change a users password\nPostUserPasswordRequest.postUserPassword(userId: userId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostUserPasswordRequest.postUserPassword was successful\")\n    }\n}"
  },
  "postusers": {
    "operationId": "postusers",
    "functionName": "postUsers",
    "signature": "postUsers(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateUser",
        "required": "true"
      }
    ],
    "return": "User",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateUser = new CreateUser(...) // User\n\n// Create user\nPostUsersRequest.postUsers(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUsersRequest.postUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "postusersdevelopmentactivitiesaggregatesquery": {
    "operationId": "postusersdevelopmentactivitiesaggregatesquery",
    "functionName": "postUsersDevelopmentActivitiesAggregatesQuery",
    "signature": "postUsersDevelopmentActivitiesAggregatesQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "DevelopmentActivityAggregateParam",
        "required": "true"
      }
    ],
    "return": "DevelopmentActivityAggregateResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: DevelopmentActivityAggregateParam = new DevelopmentActivityAggregateParam(...) // Aggregate Request\n\n// Retrieve aggregated development activity data\nPostUsersDevelopmentActivitiesAggregatesQueryRequest.postUsersDevelopmentActivitiesAggregatesQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostUsersDevelopmentActivitiesAggregatesQueryRequest.postUsersDevelopmentActivitiesAggregatesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postusersmepassword": {
    "operationId": "postusersmepassword",
    "functionName": "postUsersMePassword",
    "signature": "postUsersMePassword(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ChangeMyPasswordRequest",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ChangeMyPasswordRequest = new ChangeMyPasswordRequest(...) // Password\n\n// Change your password\nPostUsersMePasswordRequest.postUsersMePassword(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostUsersMePasswordRequest.postUsersMePassword was successful\")\n    }\n}"
  },
  "putusercallforwarding": {
    "operationId": "putusercallforwarding",
    "functionName": "putUserCallforwarding",
    "signature": "putUserCallforwarding(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CallForwarding",
        "required": "true"
      }
    ],
    "return": "CallForwarding",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: CallForwarding = new CallForwarding(...) // Call forwarding\n\n// Update a user's CallForwarding\nPutUserCallforwardingRequest.putUserCallforwarding(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserCallforwardingRequest.putUserCallforwarding was successful\")\n        dump(response)\n    }\n}"
  },
  "putuseroutofoffice": {
    "operationId": "putuseroutofoffice",
    "functionName": "putUserOutofoffice",
    "signature": "putUserOutofoffice(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "OutOfOffice",
        "required": "true"
      }
    ],
    "return": "OutOfOffice",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: OutOfOffice = new OutOfOffice(...) // The updated OutOffOffice\n\n// Update an OutOfOffice\nPutUserOutofofficeRequest.putUserOutofoffice(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserOutofofficeRequest.putUserOutofoffice was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserprofileskills": {
    "operationId": "putuserprofileskills",
    "functionName": "putUserProfileskills",
    "signature": "putUserProfileskills(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[String]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: [String] = [\"\"] // Skills\n\n// Update profile skills for a user\nPutUserProfileskillsRequest.putUserProfileskills(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserProfileskillsRequest.putUserProfileskills was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserroutingstatus": {
    "operationId": "putuserroutingstatus",
    "functionName": "putUserRoutingstatus",
    "signature": "putUserRoutingstatus(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "RoutingStatus",
        "required": "true"
      }
    ],
    "return": "RoutingStatus",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: RoutingStatus = new RoutingStatus(...) // Routing Status\n\n// Update the routing status of a user\nPutUserRoutingstatusRequest.putUserRoutingstatus(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserRoutingstatusRequest.putUserRoutingstatus was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserstate": {
    "operationId": "putuserstate",
    "functionName": "putUserState",
    "signature": "putUserState(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserState",
        "required": "true"
      }
    ],
    "return": "UserState",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: UserState = new UserState(...) // User\n\n// Update user state information.\nPutUserStateRequest.putUserState(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutUserStateRequest.putUserState was successful\")\n        dump(response)\n    }\n}"
  },
  "putuserstationassociatedstationstationid": {
    "operationId": "putuserstationassociatedstationstationid",
    "functionName": "putUserStationAssociatedstationStationId",
    "signature": "putUserStationAssociatedstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet stationId: String = \"\" // stationId\n\n// Set associated station\nPutUserStationAssociatedstationStationIdRequest.putUserStationAssociatedstationStationId(userId: userId, stationId: stationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutUserStationAssociatedstationStationIdRequest.putUserStationAssociatedstationStationId was successful\")\n    }\n}"
  },
  "putuserstationdefaultstationstationid": {
    "operationId": "putuserstationdefaultstationstationid",
    "functionName": "putUserStationDefaultstationStationId",
    "signature": "putUserStationDefaultstationStationId(userId, stationId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "stationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet stationId: String = \"\" // stationId\n\n// Set default station\nPutUserStationDefaultstationStationIdRequest.putUserStationDefaultstationStationId(userId: userId, stationId: stationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PutUserStationDefaultstationStationIdRequest.putUserStationDefaultstationStationId was successful\")\n    }\n}"
  },
  "getdate": {
    "operationId": "getdate",
    "functionName": "getDate",
    "signature": "getDate()",
    "return": "ServerDate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the current system date/time\nGetDateRequest.getDate() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetDateRequest.getDate was successful\")\n        dump(response)\n    }\n}"
  },
  "getipranges": {
    "operationId": "getipranges",
    "functionName": "getIpranges",
    "signature": "getIpranges()",
    "return": "IpAddressRangeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get public ip address ranges for Genesys Cloud\nGetIprangesRequest.getIpranges() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetIprangesRequest.getIpranges was successful\")\n        dump(response)\n    }\n}"
  },
  "gettimezones": {
    "operationId": "gettimezones",
    "functionName": "getTimezones",
    "signature": "getTimezones(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "TimeZoneEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get time zones list\nGetTimezonesRequest.getTimezones(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetTimezonesRequest.getTimezones was successful\")\n        dump(response)\n    }\n}"
  },
  "postcertificatedetails": {
    "operationId": "postcertificatedetails",
    "functionName": "postCertificateDetails",
    "signature": "postCertificateDetails(body)",
    "parameters": [
      {
        "name": "body",
        "type": "Certificate",
        "required": "true"
      }
    ],
    "return": "ParsedCertificate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: Certificate = new Certificate(...) // Certificate\n\n// Returns the information about an X509 PEM encoded certificate or certificate chain.\nPostCertificateDetailsRequest.postCertificateDetails(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostCertificateDetailsRequest.postCertificateDetails was successful\")\n        dump(response)\n    }\n}"
  },
  "deletevoicemailmessage": {
    "operationId": "deletevoicemailmessage",
    "functionName": "deleteVoicemailMessage",
    "signature": "deleteVoicemailMessage(messageId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // Message ID\n\n// Delete a voicemail message.\nDeleteVoicemailMessageRequest.deleteVoicemailMessage(messageId: messageId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteVoicemailMessageRequest.deleteVoicemailMessage was successful\")\n    }\n}"
  },
  "deletevoicemailmessages": {
    "operationId": "deletevoicemailmessages",
    "functionName": "deleteVoicemailMessages",
    "signature": "deleteVoicemailMessages()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete all voicemail messages\nDeleteVoicemailMessagesRequest.deleteVoicemailMessages() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteVoicemailMessagesRequest.deleteVoicemailMessages was successful\")\n    }\n}"
  },
  "getvoicemailgroupmailbox": {
    "operationId": "getvoicemailgroupmailbox",
    "functionName": "getVoicemailGroupMailbox",
    "signature": "getVoicemailGroupMailbox(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailMailboxInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // groupId\n\n// Get the group's mailbox information\nGetVoicemailGroupMailboxRequest.getVoicemailGroupMailbox(groupId: groupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailGroupMailboxRequest.getVoicemailGroupMailbox was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailgroupmessages": {
    "operationId": "getvoicemailgroupmessages",
    "functionName": "getVoicemailGroupMessages",
    "signature": "getVoicemailGroupMessages(groupId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List voicemail messages\nGetVoicemailGroupMessagesRequest.getVoicemailGroupMessages(groupId: groupId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailGroupMessagesRequest.getVoicemailGroupMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailgrouppolicy": {
    "operationId": "getvoicemailgrouppolicy",
    "functionName": "getVoicemailGroupPolicy",
    "signature": "getVoicemailGroupPolicy(groupId)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\n\n// Get a group's voicemail policy\nGetVoicemailGroupPolicyRequest.getVoicemailGroupPolicy(groupId: groupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailGroupPolicyRequest.getVoicemailGroupPolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmailbox": {
    "operationId": "getvoicemailmailbox",
    "functionName": "getVoicemailMailbox",
    "signature": "getVoicemailMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the current user's mailbox information\nGetVoicemailMailboxRequest.getVoicemailMailbox() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMailboxRequest.getVoicemailMailbox was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmemailbox": {
    "operationId": "getvoicemailmemailbox",
    "functionName": "getVoicemailMeMailbox",
    "signature": "getVoicemailMeMailbox()",
    "return": "VoicemailMailboxInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the current user's mailbox information\nGetVoicemailMeMailboxRequest.getVoicemailMeMailbox() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMeMailboxRequest.getVoicemailMeMailbox was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmemessages": {
    "operationId": "getvoicemailmemessages",
    "functionName": "getVoicemailMeMessages",
    "signature": "getVoicemailMeMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List voicemail messages\nGetVoicemailMeMessagesRequest.getVoicemailMeMessages(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMeMessagesRequest.getVoicemailMeMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmepolicy": {
    "operationId": "getvoicemailmepolicy",
    "functionName": "getVoicemailMePolicy",
    "signature": "getVoicemailMePolicy()",
    "return": "VoicemailUserPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the current user's voicemail policy\nGetVoicemailMePolicyRequest.getVoicemailMePolicy() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMePolicyRequest.getVoicemailMePolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmessage": {
    "operationId": "getvoicemailmessage",
    "functionName": "getVoicemailMessage",
    "signature": "getVoicemailMessage(messageId, expand)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // Message ID\nlet expand: [String] = [\"\"] // If the caller is a known user, which fields, if any, to expand\n\n// Get a voicemail message\nGetVoicemailMessageRequest.getVoicemailMessage(messageId: messageId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMessageRequest.getVoicemailMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmessagemedia": {
    "operationId": "getvoicemailmessagemedia",
    "functionName": "getVoicemailMessageMedia",
    "signature": "getVoicemailMessageMedia(messageId, formatId)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "formatId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "VoicemailMediaInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // Message ID\nlet formatId: GetVoicemailMessageMediaRequest.FormatId_getVoicemailMessageMedia = GetVoicemailMessageMediaRequest.FormatId_getVoicemailMessageMedia.enummember // The desired media format.\n\n// Get media playback URI for this voicemail message\nGetVoicemailMessageMediaRequest.getVoicemailMessageMedia(messageId: messageId, formatId: formatId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMessageMediaRequest.getVoicemailMessageMedia was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailmessages": {
    "operationId": "getvoicemailmessages",
    "functionName": "getVoicemailMessages",
    "signature": "getVoicemailMessages(ids, expand)",
    "parameters": [
      {
        "name": "ids",
        "type": "String",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet ids: String = \"\" // An optional comma separated list of VoicemailMessage ids\nlet expand: [String] = [\"\"] // If the caller is a known user, which fields, if any, to expand\n\n// List voicemail messages\nGetVoicemailMessagesRequest.getVoicemailMessages(ids: ids, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailMessagesRequest.getVoicemailMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailpolicy": {
    "operationId": "getvoicemailpolicy",
    "functionName": "getVoicemailPolicy",
    "signature": "getVoicemailPolicy()",
    "return": "VoicemailOrganizationPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a policy\nGetVoicemailPolicyRequest.getVoicemailPolicy() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailPolicyRequest.getVoicemailPolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailqueuemessages": {
    "operationId": "getvoicemailqueuemessages",
    "functionName": "getVoicemailQueueMessages",
    "signature": "getVoicemailQueueMessages(queueId, pageSize, pageNumber)",
    "parameters": [
      {
        "name": "queueId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "VoicemailMessageEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet queueId: String = \"\" // Queue ID\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// List voicemail messages\nGetVoicemailQueueMessagesRequest.getVoicemailQueueMessages(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailQueueMessagesRequest.getVoicemailQueueMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getvoicemailuserpolicy": {
    "operationId": "getvoicemailuserpolicy",
    "functionName": "getVoicemailUserpolicy",
    "signature": "getVoicemailUserpolicy(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\n\n// Get a user's voicemail policy\nGetVoicemailUserpolicyRequest.getVoicemailUserpolicy(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetVoicemailUserpolicyRequest.getVoicemailUserpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "patchvoicemailgrouppolicy": {
    "operationId": "patchvoicemailgrouppolicy",
    "functionName": "patchVoicemailGroupPolicy",
    "signature": "patchVoicemailGroupPolicy(groupId, body)",
    "parameters": [
      {
        "name": "groupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "VoicemailGroupPolicy",
        "required": "true"
      }
    ],
    "return": "VoicemailGroupPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet groupId: String = \"\" // Group ID\nlet body: VoicemailGroupPolicy = new VoicemailGroupPolicy(...) // The group's voicemail policy\n\n// Update a group's voicemail policy\nPatchVoicemailGroupPolicyRequest.patchVoicemailGroupPolicy(groupId: groupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchVoicemailGroupPolicyRequest.patchVoicemailGroupPolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "patchvoicemailmepolicy": {
    "operationId": "patchvoicemailmepolicy",
    "functionName": "patchVoicemailMePolicy",
    "signature": "patchVoicemailMePolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "VoicemailUserPolicy",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: VoicemailUserPolicy = new VoicemailUserPolicy(...) // The user's voicemail policy\n\n// Update the current user's voicemail policy\nPatchVoicemailMePolicyRequest.patchVoicemailMePolicy(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchVoicemailMePolicyRequest.patchVoicemailMePolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "patchvoicemailmessage": {
    "operationId": "patchvoicemailmessage",
    "functionName": "patchVoicemailMessage",
    "signature": "patchVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "VoicemailMessage",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // Message ID\nlet body: VoicemailMessage = new VoicemailMessage(...) // VoicemailMessage\n\n// Update a voicemail message\nPatchVoicemailMessageRequest.patchVoicemailMessage(messageId: messageId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchVoicemailMessageRequest.patchVoicemailMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "patchvoicemailuserpolicy": {
    "operationId": "patchvoicemailuserpolicy",
    "functionName": "patchVoicemailUserpolicy",
    "signature": "patchVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "VoicemailUserPolicy",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: VoicemailUserPolicy = new VoicemailUserPolicy(...) // The user's voicemail policy\n\n// Update a user's voicemail policy\nPatchVoicemailUserpolicyRequest.patchVoicemailUserpolicy(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchVoicemailUserpolicyRequest.patchVoicemailUserpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "postvoicemailmessages": {
    "operationId": "postvoicemailmessages",
    "functionName": "postVoicemailMessages",
    "signature": "postVoicemailMessages(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CopyVoicemailMessage",
        "required": "false"
      }
    ],
    "return": "VoicemailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CopyVoicemailMessage = new CopyVoicemailMessage(...) // \n\n// Copy a voicemail message to a user or group\nPostVoicemailMessagesRequest.postVoicemailMessages(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostVoicemailMessagesRequest.postVoicemailMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "putvoicemailmessage": {
    "operationId": "putvoicemailmessage",
    "functionName": "putVoicemailMessage",
    "signature": "putVoicemailMessage(messageId, body)",
    "parameters": [
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "VoicemailMessage",
        "required": "true"
      }
    ],
    "return": "VoicemailMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet messageId: String = \"\" // Message ID\nlet body: VoicemailMessage = new VoicemailMessage(...) // VoicemailMessage\n\n// Update a voicemail message\nPutVoicemailMessageRequest.putVoicemailMessage(messageId: messageId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutVoicemailMessageRequest.putVoicemailMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "putvoicemailpolicy": {
    "operationId": "putvoicemailpolicy",
    "functionName": "putVoicemailPolicy",
    "signature": "putVoicemailPolicy(body)",
    "parameters": [
      {
        "name": "body",
        "type": "VoicemailOrganizationPolicy",
        "required": "true"
      }
    ],
    "return": "VoicemailOrganizationPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: VoicemailOrganizationPolicy = new VoicemailOrganizationPolicy(...) // Policy\n\n// Update a policy\nPutVoicemailPolicyRequest.putVoicemailPolicy(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutVoicemailPolicyRequest.putVoicemailPolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "putvoicemailuserpolicy": {
    "operationId": "putvoicemailuserpolicy",
    "functionName": "putVoicemailUserpolicy",
    "signature": "putVoicemailUserpolicy(userId, body)",
    "parameters": [
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "VoicemailUserPolicy",
        "required": "true"
      }
    ],
    "return": "VoicemailUserPolicy",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: String = \"\" // User ID\nlet body: VoicemailUserPolicy = new VoicemailUserPolicy(...) // The user's voicemail policy\n\n// Update a user's voicemail policy\nPutVoicemailUserpolicyRequest.putVoicemailUserpolicy(userId: userId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutVoicemailUserpolicyRequest.putVoicemailUserpolicy was successful\")\n        dump(response)\n    }\n}"
  },
  "deletewebchatdeployment": {
    "operationId": "deletewebchatdeployment",
    "functionName": "deleteWebchatDeployment",
    "signature": "deleteWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Deployment Id\n\n// Delete a WebChat deployment\nDeleteWebchatDeploymentRequest.deleteWebchatDeployment(deploymentId: deploymentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWebchatDeploymentRequest.deleteWebchatDeployment was successful\")\n    }\n}"
  },
  "deletewebchatguestconversationmember": {
    "operationId": "deletewebchatguestconversationmember",
    "functionName": "deleteWebchatGuestConversationMember",
    "signature": "deleteWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet memberId: String = \"\" // memberId\n\n// Remove a member from a chat conversation\nDeleteWebchatGuestConversationMemberRequest.deleteWebchatGuestConversationMember(conversationId: conversationId, memberId: memberId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWebchatGuestConversationMemberRequest.deleteWebchatGuestConversationMember was successful\")\n    }\n}"
  },
  "deletewebchatsettings": {
    "operationId": "deletewebchatsettings",
    "functionName": "deleteWebchatSettings",
    "signature": "deleteWebchatSettings()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Remove WebChat deployment settings\nDeleteWebchatSettingsRequest.deleteWebchatSettings() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWebchatSettingsRequest.deleteWebchatSettings was successful\")\n    }\n}"
  },
  "getwebchatdeployment": {
    "operationId": "getwebchatdeployment",
    "functionName": "getWebchatDeployment",
    "signature": "getWebchatDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Deployment Id\n\n// Get a WebChat deployment\nGetWebchatDeploymentRequest.getWebchatDeployment(deploymentId: deploymentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatDeploymentRequest.getWebchatDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatdeployments": {
    "operationId": "getwebchatdeployments",
    "functionName": "getWebchatDeployments",
    "signature": "getWebchatDeployments()",
    "return": "WebChatDeploymentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// List WebChat deployments\nGetWebchatDeploymentsRequest.getWebchatDeployments() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatDeploymentsRequest.getWebchatDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmediarequest": {
    "operationId": "getwebchatguestconversationmediarequest",
    "functionName": "getWebchatGuestConversationMediarequest",
    "signature": "getWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet mediaRequestId: String = \"\" // mediaRequestId\n\n// Get a media request in the conversation\nGetWebchatGuestConversationMediarequestRequest.getWebchatGuestConversationMediarequest(conversationId: conversationId, mediaRequestId: mediaRequestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMediarequestRequest.getWebchatGuestConversationMediarequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmediarequests": {
    "operationId": "getwebchatguestconversationmediarequests",
    "functionName": "getWebchatGuestConversationMediarequests",
    "signature": "getWebchatGuestConversationMediarequests(conversationId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequestEntityList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\n\n// Get all media requests to the guest in the conversation\nGetWebchatGuestConversationMediarequestsRequest.getWebchatGuestConversationMediarequests(conversationId: conversationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMediarequestsRequest.getWebchatGuestConversationMediarequests was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmember": {
    "operationId": "getwebchatguestconversationmember",
    "functionName": "getWebchatGuestConversationMember",
    "signature": "getWebchatGuestConversationMember(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMemberInfo",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet memberId: String = \"\" // memberId\n\n// Get a web chat conversation member\nGetWebchatGuestConversationMemberRequest.getWebchatGuestConversationMember(conversationId: conversationId, memberId: memberId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMemberRequest.getWebchatGuestConversationMember was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmembers": {
    "operationId": "getwebchatguestconversationmembers",
    "functionName": "getWebchatGuestConversationMembers",
    "signature": "getWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "excludeDisconnectedMembers",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "WebChatMemberInfoEntityList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet pageSize: Int = 0 // The number of entries to return per page, or omitted for the default.\nlet pageNumber: Int = 0 // The page number to return, or omitted for the first page.\nlet excludeDisconnectedMembers: Bool = true // If true, the results will not contain members who have a DISCONNECTED state.\n\n// Get the members of a chat conversation.\nGetWebchatGuestConversationMembersRequest.getWebchatGuestConversationMembers(conversationId: conversationId, pageSize: pageSize, pageNumber: pageNumber, excludeDisconnectedMembers: excludeDisconnectedMembers) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMembersRequest.getWebchatGuestConversationMembers was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmessage": {
    "operationId": "getwebchatguestconversationmessage",
    "functionName": "getWebchatGuestConversationMessage",
    "signature": "getWebchatGuestConversationMessage(conversationId, messageId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "messageId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet messageId: String = \"\" // messageId\n\n// Get a web chat conversation message\nGetWebchatGuestConversationMessageRequest.getWebchatGuestConversationMessage(conversationId: conversationId, messageId: messageId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMessageRequest.getWebchatGuestConversationMessage was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatguestconversationmessages": {
    "operationId": "getwebchatguestconversationmessages",
    "functionName": "getWebchatGuestConversationMessages",
    "signature": "getWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "after",
        "type": "String",
        "required": "false"
      },
      {
        "name": "before",
        "type": "String",
        "required": "false"
      },
      {
        "name": "sortOrder",
        "type": "String",
        "required": "false"
      },
      {
        "name": "maxResults",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "WebChatMessageEntityList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet after: String = \"\" // If available, get the messages chronologically after the id of this message\nlet before: String = \"\" // If available, get the messages chronologically before the id of this message\nlet sortOrder: GetWebchatGuestConversationMessagesRequest.SortOrder_getWebchatGuestConversationMessages = GetWebchatGuestConversationMessagesRequest.SortOrder_getWebchatGuestConversationMessages.enummember // Sort order\nlet maxResults: Int = 0 // Limit the returned number of messages, up to a maximum of 100\n\n// Get the messages of a chat conversation.\nGetWebchatGuestConversationMessagesRequest.getWebchatGuestConversationMessages(conversationId: conversationId, after: after, before: before, sortOrder: sortOrder, maxResults: maxResults) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatGuestConversationMessagesRequest.getWebchatGuestConversationMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebchatsettings": {
    "operationId": "getwebchatsettings",
    "functionName": "getWebchatSettings",
    "signature": "getWebchatSettings()",
    "return": "WebChatSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get WebChat deployment settings\nGetWebchatSettingsRequest.getWebchatSettings() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebchatSettingsRequest.getWebchatSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "patchwebchatguestconversationmediarequest": {
    "operationId": "patchwebchatguestconversationmediarequest",
    "functionName": "patchWebchatGuestConversationMediarequest",
    "signature": "patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "mediaRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WebChatGuestMediaRequest",
        "required": "true"
      }
    ],
    "return": "WebChatGuestMediaRequest",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet mediaRequestId: String = \"\" // mediaRequestId\nlet body: WebChatGuestMediaRequest = new WebChatGuestMediaRequest(...) // Request\n\n// Update a media request in the conversation, setting the state to ACCEPTED/DECLINED/ERRORED\nPatchWebchatGuestConversationMediarequestRequest.patchWebchatGuestConversationMediarequest(conversationId: conversationId, mediaRequestId: mediaRequestId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWebchatGuestConversationMediarequestRequest.patchWebchatGuestConversationMediarequest was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebchatdeployments": {
    "operationId": "postwebchatdeployments",
    "functionName": "postWebchatDeployments",
    "signature": "postWebchatDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WebChatDeployment",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WebChatDeployment = new WebChatDeployment(...) // Deployment\n\n// Create WebChat deployment\nPostWebchatDeploymentsRequest.postWebchatDeployments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebchatDeploymentsRequest.postWebchatDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebchatguestconversationmembermessages": {
    "operationId": "postwebchatguestconversationmembermessages",
    "functionName": "postWebchatGuestConversationMemberMessages",
    "signature": "postWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateWebChatMessageRequest",
        "required": "true"
      }
    ],
    "return": "WebChatMessage",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet memberId: String = \"\" // memberId\nlet body: CreateWebChatMessageRequest = new CreateWebChatMessageRequest(...) // Message\n\n// Send a message in a chat conversation.\nPostWebchatGuestConversationMemberMessagesRequest.postWebchatGuestConversationMemberMessages(conversationId: conversationId, memberId: memberId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebchatGuestConversationMemberMessagesRequest.postWebchatGuestConversationMemberMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebchatguestconversationmembertyping": {
    "operationId": "postwebchatguestconversationmembertyping",
    "functionName": "postWebchatGuestConversationMemberTyping",
    "signature": "postWebchatGuestConversationMemberTyping(conversationId, memberId)",
    "parameters": [
      {
        "name": "conversationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "memberId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebChatTyping",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet conversationId: String = \"\" // conversationId\nlet memberId: String = \"\" // memberId\n\n// Send a typing-indicator in a chat conversation.\nPostWebchatGuestConversationMemberTypingRequest.postWebchatGuestConversationMemberTyping(conversationId: conversationId, memberId: memberId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebchatGuestConversationMemberTypingRequest.postWebchatGuestConversationMemberTyping was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebchatguestconversations": {
    "operationId": "postwebchatguestconversations",
    "functionName": "postWebchatGuestConversations",
    "signature": "postWebchatGuestConversations(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateWebChatConversationRequest",
        "required": "true"
      }
    ],
    "return": "CreateWebChatConversationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateWebChatConversationRequest = new CreateWebChatConversationRequest(...) // CreateConversationRequest\n\n// Create an ACD chat conversation from an external customer.\nPostWebchatGuestConversationsRequest.postWebchatGuestConversations(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebchatGuestConversationsRequest.postWebchatGuestConversations was successful\")\n        dump(response)\n    }\n}"
  },
  "putwebchatdeployment": {
    "operationId": "putwebchatdeployment",
    "functionName": "putWebchatDeployment",
    "signature": "putWebchatDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WebChatDeployment",
        "required": "true"
      }
    ],
    "return": "WebChatDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Deployment Id\nlet body: WebChatDeployment = new WebChatDeployment(...) // Deployment\n\n// Update a WebChat deployment\nPutWebchatDeploymentRequest.putWebchatDeployment(deploymentId: deploymentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWebchatDeploymentRequest.putWebchatDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "putwebchatsettings": {
    "operationId": "putwebchatsettings",
    "functionName": "putWebchatSettings",
    "signature": "putWebchatSettings(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WebChatSettings",
        "required": "true"
      }
    ],
    "return": "WebChatSettings",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WebChatSettings = new WebChatSettings(...) // webChatSettings\n\n// Update WebChat deployment settings\nPutWebchatSettingsRequest.putWebchatSettings(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWebchatSettingsRequest.putWebchatSettings was successful\")\n        dump(response)\n    }\n}"
  },
  "deletewebdeploymentsconfiguration": {
    "operationId": "deletewebdeploymentsconfiguration",
    "functionName": "deleteWebdeploymentsConfiguration",
    "signature": "deleteWebdeploymentsConfiguration(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\n\n// Delete all versions of a configuration\nDeleteWebdeploymentsConfigurationRequest.deleteWebdeploymentsConfiguration(configurationId: configurationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWebdeploymentsConfigurationRequest.deleteWebdeploymentsConfiguration was successful\")\n    }\n}"
  },
  "deletewebdeploymentsdeployment": {
    "operationId": "deletewebdeploymentsdeployment",
    "functionName": "deleteWebdeploymentsDeployment",
    "signature": "deleteWebdeploymentsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // The deployment ID\n\n// Delete a deployment\nDeleteWebdeploymentsDeploymentRequest.deleteWebdeploymentsDeployment(deploymentId: deploymentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWebdeploymentsDeploymentRequest.deleteWebdeploymentsDeployment was successful\")\n    }\n}"
  },
  "getwebdeploymentsconfigurationversion": {
    "operationId": "getwebdeploymentsconfigurationversion",
    "functionName": "getWebdeploymentsConfigurationVersion",
    "signature": "getWebdeploymentsConfigurationVersion(configurationId, versionId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "versionId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\nlet versionId: String = \"\" // The version of the configuration to get\n\n// Get a configuration version\nGetWebdeploymentsConfigurationVersionRequest.getWebdeploymentsConfigurationVersion(configurationId: configurationId, versionId: versionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsConfigurationVersionRequest.getWebdeploymentsConfigurationVersion was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebdeploymentsconfigurationversions": {
    "operationId": "getwebdeploymentsconfigurationversions",
    "functionName": "getWebdeploymentsConfigurationVersions",
    "signature": "getWebdeploymentsConfigurationVersions(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\n\n// Get the versions of a configuration\nGetWebdeploymentsConfigurationVersionsRequest.getWebdeploymentsConfigurationVersions(configurationId: configurationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsConfigurationVersionsRequest.getWebdeploymentsConfigurationVersions was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebdeploymentsconfigurationversionsdraft": {
    "operationId": "getwebdeploymentsconfigurationversionsdraft",
    "functionName": "getWebdeploymentsConfigurationVersionsDraft",
    "signature": "getWebdeploymentsConfigurationVersionsDraft(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\n\n// Get the configuration draft\nGetWebdeploymentsConfigurationVersionsDraftRequest.getWebdeploymentsConfigurationVersionsDraft(configurationId: configurationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsConfigurationVersionsDraftRequest.getWebdeploymentsConfigurationVersionsDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebdeploymentsconfigurations": {
    "operationId": "getwebdeploymentsconfigurations",
    "functionName": "getWebdeploymentsConfigurations",
    "signature": "getWebdeploymentsConfigurations(showOnlyPublished)",
    "parameters": [
      {
        "name": "showOnlyPublished",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "WebDeploymentConfigurationVersionEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet showOnlyPublished: Bool = true // Get only configuration drafts with published versions\n\n// View configuration drafts\nGetWebdeploymentsConfigurationsRequest.getWebdeploymentsConfigurations(showOnlyPublished: showOnlyPublished) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsConfigurationsRequest.getWebdeploymentsConfigurations was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebdeploymentsdeployment": {
    "operationId": "getwebdeploymentsdeployment",
    "functionName": "getWebdeploymentsDeployment",
    "signature": "getWebdeploymentsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // The deployment ID\n\n// Get a deployment\nGetWebdeploymentsDeploymentRequest.getWebdeploymentsDeployment(deploymentId: deploymentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsDeploymentRequest.getWebdeploymentsDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebdeploymentsdeployments": {
    "operationId": "getwebdeploymentsdeployments",
    "functionName": "getWebdeploymentsDeployments",
    "signature": "getWebdeploymentsDeployments()",
    "return": "WebDeploymentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get deployments\nGetWebdeploymentsDeploymentsRequest.getWebdeploymentsDeployments() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebdeploymentsDeploymentsRequest.getWebdeploymentsDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebdeploymentsconfigurationversionsdraftpublish": {
    "operationId": "postwebdeploymentsconfigurationversionsdraftpublish",
    "functionName": "postWebdeploymentsConfigurationVersionsDraftPublish",
    "signature": "postWebdeploymentsConfigurationVersionsDraftPublish(configurationId)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\n\n// Publish the configuration draft and create a new version\nPostWebdeploymentsConfigurationVersionsDraftPublishRequest.postWebdeploymentsConfigurationVersionsDraftPublish(configurationId: configurationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebdeploymentsConfigurationVersionsDraftPublishRequest.postWebdeploymentsConfigurationVersionsDraftPublish was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebdeploymentsconfigurations": {
    "operationId": "postwebdeploymentsconfigurations",
    "functionName": "postWebdeploymentsConfigurations",
    "signature": "postWebdeploymentsConfigurations(configurationVersion)",
    "parameters": [
      {
        "name": "configurationVersion",
        "type": "WebDeploymentConfigurationVersion",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationVersion: WebDeploymentConfigurationVersion = new WebDeploymentConfigurationVersion(...) // \n\n// Create a configuration draft\nPostWebdeploymentsConfigurationsRequest.postWebdeploymentsConfigurations(configurationVersion: configurationVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebdeploymentsConfigurationsRequest.postWebdeploymentsConfigurations was successful\")\n        dump(response)\n    }\n}"
  },
  "postwebdeploymentsdeployments": {
    "operationId": "postwebdeploymentsdeployments",
    "functionName": "postWebdeploymentsDeployments",
    "signature": "postWebdeploymentsDeployments(deployment)",
    "parameters": [
      {
        "name": "deployment",
        "type": "WebDeployment",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deployment: WebDeployment = new WebDeployment(...) // \n\n// Create a deployment\nPostWebdeploymentsDeploymentsRequest.postWebdeploymentsDeployments(deployment: deployment) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWebdeploymentsDeploymentsRequest.postWebdeploymentsDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "putwebdeploymentsconfigurationversionsdraft": {
    "operationId": "putwebdeploymentsconfigurationversionsdraft",
    "functionName": "putWebdeploymentsConfigurationVersionsDraft",
    "signature": "putWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)",
    "parameters": [
      {
        "name": "configurationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "configurationVersion",
        "type": "WebDeploymentConfigurationVersion",
        "required": "true"
      }
    ],
    "return": "WebDeploymentConfigurationVersion",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet configurationId: String = \"\" // The configuration version ID\nlet configurationVersion: WebDeploymentConfigurationVersion = new WebDeploymentConfigurationVersion(...) // \n\n// Update the configuration draft\nPutWebdeploymentsConfigurationVersionsDraftRequest.putWebdeploymentsConfigurationVersionsDraft(configurationId: configurationId, configurationVersion: configurationVersion) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWebdeploymentsConfigurationVersionsDraftRequest.putWebdeploymentsConfigurationVersionsDraft was successful\")\n        dump(response)\n    }\n}"
  },
  "putwebdeploymentsdeployment": {
    "operationId": "putwebdeploymentsdeployment",
    "functionName": "putWebdeploymentsDeployment",
    "signature": "putWebdeploymentsDeployment(deploymentId, deployment)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "deployment",
        "type": "WebDeployment",
        "required": "true"
      }
    ],
    "return": "WebDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // The deployment ID\nlet deployment: WebDeployment = new WebDeployment(...) // \n\n// Update a deployment\nPutWebdeploymentsDeploymentRequest.putWebdeploymentsDeployment(deploymentId: deploymentId, deployment: deployment) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWebdeploymentsDeploymentRequest.putWebdeploymentsDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "getwebmessagingmessages": {
    "operationId": "getwebmessagingmessages",
    "functionName": "getWebmessagingMessages",
    "signature": "getWebmessagingMessages(pageSize, pageNumber)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      }
    ],
    "return": "WebMessagingMessageEntityList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Page size\nlet pageNumber: Int = 0 // Page number\n\n// Get the messages for a web messaging session.\nGetWebmessagingMessagesRequest.getWebmessagingMessages(pageSize: pageSize, pageNumber: pageNumber) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWebmessagingMessagesRequest.getWebmessagingMessages was successful\")\n        dump(response)\n    }\n}"
  },
  "deletewidgetsdeployment": {
    "operationId": "deletewidgetsdeployment",
    "functionName": "deleteWidgetsDeployment",
    "signature": "deleteWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Widget Config Id\n\n// Delete a Widget deployment\nDeleteWidgetsDeploymentRequest.deleteWidgetsDeployment(deploymentId: deploymentId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWidgetsDeploymentRequest.deleteWidgetsDeployment was successful\")\n    }\n}"
  },
  "getwidgetsdeployment": {
    "operationId": "getwidgetsdeployment",
    "functionName": "getWidgetsDeployment",
    "signature": "getWidgetsDeployment(deploymentId)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Widget Config Id\n\n// Get a Widget deployment\nGetWidgetsDeploymentRequest.getWidgetsDeployment(deploymentId: deploymentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWidgetsDeploymentRequest.getWidgetsDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "getwidgetsdeployments": {
    "operationId": "getwidgetsdeployments",
    "functionName": "getWidgetsDeployments",
    "signature": "getWidgetsDeployments()",
    "return": "WidgetDeploymentEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// List Widget deployments\nGetWidgetsDeploymentsRequest.getWidgetsDeployments() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWidgetsDeploymentsRequest.getWidgetsDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "postwidgetsdeployments": {
    "operationId": "postwidgetsdeployments",
    "functionName": "postWidgetsDeployments",
    "signature": "postWidgetsDeployments(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WidgetDeployment",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WidgetDeployment = new WidgetDeployment(...) // Deployment\n\n// Create Widget deployment\nPostWidgetsDeploymentsRequest.postWidgetsDeployments(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWidgetsDeploymentsRequest.postWidgetsDeployments was successful\")\n        dump(response)\n    }\n}"
  },
  "putwidgetsdeployment": {
    "operationId": "putwidgetsdeployment",
    "functionName": "putWidgetsDeployment",
    "signature": "putWidgetsDeployment(deploymentId, body)",
    "parameters": [
      {
        "name": "deploymentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WidgetDeployment",
        "required": "true"
      }
    ],
    "return": "WidgetDeployment",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet deploymentId: String = \"\" // Widget Config Id\nlet body: WidgetDeployment = new WidgetDeployment(...) // Deployment\n\n// Update a Widget deployment\nPutWidgetsDeploymentRequest.putWidgetsDeployment(deploymentId: deploymentId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWidgetsDeploymentRequest.putWidgetsDeployment was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunit": {
    "operationId": "deleteworkforcemanagementbusinessunit",
    "functionName": "deleteWorkforcemanagementBusinessunit",
    "signature": "deleteWorkforcemanagementBusinessunit(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n// Delete business unit\nDeleteWorkforcemanagementBusinessunitRequest.deleteWorkforcemanagementBusinessunit(businessUnitId: businessUnitId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitRequest.deleteWorkforcemanagementBusinessunit was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitactivitycode": {
    "operationId": "deleteworkforcemanagementbusinessunitactivitycode",
    "functionName": "deleteWorkforcemanagementBusinessunitActivitycode",
    "signature": "deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId: String = \"\" // The ID of the activity code to delete\n\n// Deletes an activity code\nDeleteWorkforcemanagementBusinessunitActivitycodeRequest.deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId: businessUnitId, activityCodeId: activityCodeId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitActivitycodeRequest.deleteWorkforcemanagementBusinessunitActivitycode was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "deleteworkforcemanagementbusinessunitplanninggroup",
    "functionName": "deleteWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet planningGroupId: String = \"\" // The ID of a planning group to delete\n\n// Deletes the planning group\nDeleteWorkforcemanagementBusinessunitPlanninggroupRequest.deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: businessUnitId, planningGroupId: planningGroupId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitPlanninggroupRequest.deleteWorkforcemanagementBusinessunitPlanninggroup was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "deleteworkforcemanagementbusinessunitschedulingrun",
    "functionName": "deleteWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet runId: String = \"\" // The ID of the schedule run\n\n// Cancel a scheduling run\nDeleteWorkforcemanagementBusinessunitSchedulingRunRequest.deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: businessUnitId, runId: runId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitSchedulingRunRequest.deleteWorkforcemanagementBusinessunitSchedulingRun was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "deleteworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "deleteWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet serviceGoalTemplateId: String = \"\" // The ID of the service goal template to delete\n\n// Delete a service goal template\nDeleteWorkforcemanagementBusinessunitServicegoaltemplateRequest.deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitServicegoaltemplateRequest.deleteWorkforcemanagementBusinessunitServicegoaltemplate was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitweekschedule": {
    "operationId": "deleteworkforcemanagementbusinessunitweekschedule",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\n\n// Delete a schedule\nDeleteWorkforcemanagementBusinessunitWeekScheduleRequest.deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"DeleteWorkforcemanagementBusinessunitWeekScheduleRequest.deleteWorkforcemanagementBusinessunitWeekSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "deleteworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "deleteworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\n\n// Delete a short term forecast\nDeleteWorkforcemanagementBusinessunitWeekShorttermforecastRequest.deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementBusinessunitWeekShorttermforecastRequest.deleteWorkforcemanagementBusinessunitWeekShorttermforecast was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementcalendarurlics": {
    "operationId": "deleteworkforcemanagementcalendarurlics",
    "functionName": "deleteWorkforcemanagementCalendarUrlIcs",
    "signature": "deleteWorkforcemanagementCalendarUrlIcs()",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Disable generated calendar link for the current user\nDeleteWorkforcemanagementCalendarUrlIcsRequest.deleteWorkforcemanagementCalendarUrlIcs() { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementCalendarUrlIcsRequest.deleteWorkforcemanagementCalendarUrlIcs was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementmanagementunit": {
    "operationId": "deleteworkforcemanagementmanagementunit",
    "functionName": "deleteWorkforcemanagementManagementunit",
    "signature": "deleteWorkforcemanagementManagementunit(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Delete management unit\nDeleteWorkforcemanagementManagementunitRequest.deleteWorkforcemanagementManagementunit(managementUnitId: managementUnitId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementManagementunitRequest.deleteWorkforcemanagementManagementunit was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "deleteworkforcemanagementmanagementunittimeofflimit",
    "functionName": "deleteWorkforcemanagementManagementunitTimeofflimit",
    "signature": "deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet timeOffLimitId: String = \"\" // The ID of the time off limit object to delete\n\n// Deletes a time off limit object\nDeleteWorkforcemanagementManagementunitTimeofflimitRequest.deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId: managementUnitId, timeOffLimitId: timeOffLimitId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementManagementunitTimeofflimitRequest.deleteWorkforcemanagementManagementunitTimeofflimit was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "deleteworkforcemanagementmanagementunittimeoffplan",
    "functionName": "deleteWorkforcemanagementManagementunitTimeoffplan",
    "signature": "deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet timeOffPlanId: String = \"\" // The ID of the time off plan to delete\n\n// Deletes a time off plan\nDeleteWorkforcemanagementManagementunitTimeoffplanRequest.deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId: managementUnitId, timeOffPlanId: timeOffPlanId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementManagementunitTimeoffplanRequest.deleteWorkforcemanagementManagementunitTimeoffplan was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementmanagementunitworkplan": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplan",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplan",
    "signature": "deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId: String = \"\" // The ID of the work plan to delete\n\n// Delete a work plan\nDeleteWorkforcemanagementManagementunitWorkplanRequest.deleteWorkforcemanagementManagementunitWorkplan(managementUnitId: managementUnitId, workPlanId: workPlanId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementManagementunitWorkplanRequest.deleteWorkforcemanagementManagementunitWorkplan was successful\")\n    }\n}"
  },
  "deleteworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "deleteworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "deleteWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId: String = \"\" // The ID of the work plan rotation to be deleted\n\n// Delete a work plan rotation\nDeleteWorkforcemanagementManagementunitWorkplanrotationRequest.deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"DeleteWorkforcemanagementManagementunitWorkplanrotationRequest.deleteWorkforcemanagementManagementunitWorkplanrotation was successful\")\n    }\n}"
  },
  "getworkforcemanagementadherence": {
    "operationId": "getworkforcemanagementadherence",
    "functionName": "getWorkforcemanagementAdherence",
    "signature": "getWorkforcemanagementAdherence(userId)",
    "parameters": [
      {
        "name": "userId",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "[UserScheduleAdherence]",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet userId: [String] = [\"\"] // User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request\n\n// Get a list of UserScheduleAdherence records for the requested users\nGetWorkforcemanagementAdherenceRequest.getWorkforcemanagementAdherence(userId: userId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementAdherenceRequest.getWorkforcemanagementAdherence was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementadhocmodelingjob": {
    "operationId": "getworkforcemanagementadhocmodelingjob",
    "functionName": "getWorkforcemanagementAdhocmodelingjob",
    "signature": "getWorkforcemanagementAdhocmodelingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ModelingStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // The id of the modeling job\n\n// Get status of the modeling job\nGetWorkforcemanagementAdhocmodelingjobRequest.getWorkforcemanagementAdhocmodelingjob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementAdhocmodelingjobRequest.getWorkforcemanagementAdhocmodelingjob was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementagentmanagementunit": {
    "operationId": "getworkforcemanagementagentmanagementunit",
    "functionName": "getWorkforcemanagementAgentManagementunit",
    "signature": "getWorkforcemanagementAgentManagementunit(agentId)",
    "parameters": [
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "AgentManagementUnitReference",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet agentId: String = \"\" // The ID of the agent to look up\n\n// Get the management unit to which the agent belongs\nGetWorkforcemanagementAgentManagementunitRequest.getWorkforcemanagementAgentManagementunit(agentId: agentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementAgentManagementunitRequest.getWorkforcemanagementAgentManagementunit was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementagentsmemanagementunit": {
    "operationId": "getworkforcemanagementagentsmemanagementunit",
    "functionName": "getWorkforcemanagementAgentsMeManagementunit",
    "signature": "getWorkforcemanagementAgentsMeManagementunit()",
    "return": "AgentManagementUnitReference",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get the management unit to which the currently logged in agent belongs\nGetWorkforcemanagementAgentsMeManagementunitRequest.getWorkforcemanagementAgentsMeManagementunit() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementAgentsMeManagementunitRequest.getWorkforcemanagementAgentsMeManagementunit was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunit": {
    "operationId": "getworkforcemanagementbusinessunit",
    "functionName": "getWorkforcemanagementBusinessunit",
    "signature": "getWorkforcemanagementBusinessunit(businessUnitId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet expand: [String] = [\"\"] // \n\n// Get business unit\nGetWorkforcemanagementBusinessunitRequest.getWorkforcemanagementBusinessunit(businessUnitId: businessUnitId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitRequest.getWorkforcemanagementBusinessunit was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitactivitycode": {
    "operationId": "getworkforcemanagementbusinessunitactivitycode",
    "functionName": "getWorkforcemanagementBusinessunitActivitycode",
    "signature": "getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId: String = \"\" // The ID of the activity code to fetch\n\n// Get an activity code\nGetWorkforcemanagementBusinessunitActivitycodeRequest.getWorkforcemanagementBusinessunitActivitycode(businessUnitId: businessUnitId, activityCodeId: activityCodeId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitActivitycodeRequest.getWorkforcemanagementBusinessunitActivitycode was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "getworkforcemanagementbusinessunitactivitycodes",
    "functionName": "getWorkforcemanagementBusinessunitActivitycodes",
    "signature": "getWorkforcemanagementBusinessunitActivitycodes(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BusinessUnitActivityCodeListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\n\n// Get activity codes\nGetWorkforcemanagementBusinessunitActivitycodesRequest.getWorkforcemanagementBusinessunitActivitycodes(businessUnitId: businessUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitActivitycodesRequest.getWorkforcemanagementBusinessunitActivitycodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitintradayplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitintradayplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitIntradayPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, date)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "date",
        "type": "Date",
        "required": "true"
      }
    ],
    "return": "WfmIntradayPlanningGroupListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet date: Date = new Date(...) // yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\n\n// Get intraday planning groups for the given date\nGetWorkforcemanagementBusinessunitIntradayPlanninggroupsRequest.getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId: businessUnitId, date: date) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitIntradayPlanninggroupsRequest.getWorkforcemanagementBusinessunitIntradayPlanninggroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitmanagementunits": {
    "operationId": "getworkforcemanagementbusinessunitmanagementunits",
    "functionName": "getWorkforcemanagementBusinessunitManagementunits",
    "signature": "getWorkforcemanagementBusinessunitManagementunits(businessUnitId, feature, divisionId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet feature: GetWorkforcemanagementBusinessunitManagementunitsRequest.Feature_getWorkforcemanagementBusinessunitManagementunits = GetWorkforcemanagementBusinessunitManagementunitsRequest.Feature_getWorkforcemanagementBusinessunitManagementunits.enummember // \nlet divisionId: String = \"\" // \n\n// Get all authorized management units in the business unit\nGetWorkforcemanagementBusinessunitManagementunitsRequest.getWorkforcemanagementBusinessunitManagementunits(businessUnitId: businessUnitId, feature: feature, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitManagementunitsRequest.getWorkforcemanagementBusinessunitManagementunits was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroup",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet planningGroupId: String = \"\" // The ID of a planning group to fetch\n\n// Get a planning group\nGetWorkforcemanagementBusinessunitPlanninggroupRequest.getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: businessUnitId, planningGroupId: planningGroupId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitPlanninggroupRequest.getWorkforcemanagementBusinessunitPlanninggroup was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "PlanningGroupList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\n\n// Gets list of planning groups\nGetWorkforcemanagementBusinessunitPlanninggroupsRequest.getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId: businessUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitPlanninggroupsRequest.getWorkforcemanagementBusinessunitPlanninggroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrun",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRun",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet runId: String = \"\" // The ID of the schedule run\n\n// Get a scheduling run\nGetWorkforcemanagementBusinessunitSchedulingRunRequest.getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: businessUnitId, runId: runId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitSchedulingRunRequest.getWorkforcemanagementBusinessunitSchedulingRun was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitschedulingrunresult": {
    "operationId": "getworkforcemanagementbusinessunitschedulingrunresult",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRunResult",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "managementUnitIds",
        "type": "[String]",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "true"
      }
    ],
    "return": "BuRescheduleResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet runId: String = \"\" // The ID of the schedule run\nlet managementUnitIds: [String] = [\"\"] // The IDs of the management units for which to fetch the reschedule results\nlet expand: [String] = [\"\"] // The fields to expand. Omitting will return an empty response\n\n// Get the result of a rescheduling operation\nGetWorkforcemanagementBusinessunitSchedulingRunResultRequest.getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId: businessUnitId, runId: runId, managementUnitIds: managementUnitIds, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitSchedulingRunResultRequest.getWorkforcemanagementBusinessunitSchedulingRunResult was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitschedulingruns": {
    "operationId": "getworkforcemanagementbusinessunitschedulingruns",
    "functionName": "getWorkforcemanagementBusinessunitSchedulingRuns",
    "signature": "getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuScheduleRunListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\n\n// Get the list of scheduling runs\nGetWorkforcemanagementBusinessunitSchedulingRunsRequest.getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId: businessUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitSchedulingRunsRequest.getWorkforcemanagementBusinessunitSchedulingRuns was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet serviceGoalTemplateId: String = \"\" // The ID of a service goal template to fetch\n\n// Get a service goal template\nGetWorkforcemanagementBusinessunitServicegoaltemplateRequest.getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitServicegoaltemplateRequest.getWorkforcemanagementBusinessunitServicegoaltemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "getworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "getWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ServiceGoalTemplateList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\n\n// Gets list of service goal templates\nGetWorkforcemanagementBusinessunitServicegoaltemplatesRequest.getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId: businessUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitServicegoaltemplatesRequest.getWorkforcemanagementBusinessunitServicegoaltemplates was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekschedule": {
    "operationId": "getworkforcemanagementbusinessunitweekschedule",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedule",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet expand: GetWorkforcemanagementBusinessunitWeekScheduleRequest.Expand_getWorkforcemanagementBusinessunitWeekSchedule = GetWorkforcemanagementBusinessunitWeekScheduleRequest.Expand_getWorkforcemanagementBusinessunitWeekSchedule.enummember // expand\n\n// Get the metadata for the schedule, describing which management units and agents are in the scheduleSchedule data can then be loaded with the query route\nGetWorkforcemanagementBusinessunitWeekScheduleRequest.getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekScheduleRequest.getWorkforcemanagementBusinessunitWeekSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekschedulegenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulegenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ScheduleGenerationResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\n\n// Get the generation results for a generated schedule\nGetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsRequest.getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekScheduleGenerationresultsRequest.getWorkforcemanagementBusinessunitWeekScheduleGenerationresults was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekscheduleheadcountforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekscheduleheadcountforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, forceDownload)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownload",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "BuHeadcountForecastResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet forceDownload: Bool = true // Whether to force the result to come via download url.  For testing purposes only\n\n// Get the headcount forecast by planning group for the schedule\nGetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastRequest.getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, forceDownload: forceDownload) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecastRequest.getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekschedulehistoryagent": {
    "operationId": "getworkforcemanagementbusinessunitweekschedulehistoryagent",
    "functionName": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
    "signature": "getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuAgentScheduleHistoryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet agentId: String = \"\" // THe ID of the agent\n\n// Loads agent's schedule history.\nGetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentRequest.getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, agentId: agentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgentRequest.getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekschedules": {
    "operationId": "getworkforcemanagementbusinessunitweekschedules",
    "functionName": "getWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, includeOnlyPublished, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BuScheduleListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: String = \"\" // First day of schedule week in yyyy-MM-dd format, or 'recent' (without quotes) to get recent schedules\nlet includeOnlyPublished: Bool = true // includeOnlyPublished\nlet expand: GetWorkforcemanagementBusinessunitWeekSchedulesRequest.Expand_getWorkforcemanagementBusinessunitWeekSchedules = GetWorkforcemanagementBusinessunitWeekSchedulesRequest.Expand_getWorkforcemanagementBusinessunitWeekSchedules.enummember // expand\n\n// Get the list of week schedules for the specified week\nGetWorkforcemanagementBusinessunitWeekSchedulesRequest.getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId: businessUnitId, weekId: weekId, includeOnlyPublished: includeOnlyPublished, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekSchedulesRequest.getWorkforcemanagementBusinessunitWeekSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecast": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecast",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecast",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, expand)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BuShortTermForecast",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\nlet expand: [String] = [\"\"] // \n\n// Get a short term forecast\nGetWorkforcemanagementBusinessunitWeekShorttermforecastRequest.getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastRequest.getWorkforcemanagementBusinessunitWeekShorttermforecast was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastData",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, weekNumber, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "BuForecastResultResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\nlet weekNumber: Int = 0 // The week number to fetch (for multi-week forecasts)\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\n\n// Get the result of a short term forecast calculation\nGetWorkforcemanagementBusinessunitWeekShorttermforecastDataRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, weekNumber: weekNumber, forceDownloadService: forceDownloadService) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastDataRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastData was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastgenerationresults",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuForecastGenerationResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\n\n// Gets the forecast generation results\nGetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresultsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastlongtermforecastdata",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "LongTermForecastResultResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\n\n// Get the result of a long term forecast calculation\nGetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, forceDownloadService: forceDownloadService) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdataRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecastplanninggroups",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ForecastPlanningGroupsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast\n\n// Gets the forecast planning group snapshot\nGetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroupsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitweekshorttermforecasts": {
    "operationId": "getworkforcemanagementbusinessunitweekshorttermforecasts",
    "functionName": "getWorkforcemanagementBusinessunitWeekShorttermforecasts",
    "signature": "getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "BuShortTermForecastListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: String = \"\" // The week start date of the forecast in yyyy-MM-dd format or 'recent' (without quotes) to fetch recent forecasts\n\n// Get short term forecasts\nGetWorkforcemanagementBusinessunitWeekShorttermforecastsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId: businessUnitId, weekDateId: weekDateId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitWeekShorttermforecastsRequest.getWorkforcemanagementBusinessunitWeekShorttermforecasts was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunits": {
    "operationId": "getworkforcemanagementbusinessunits",
    "functionName": "getWorkforcemanagementBusinessunits",
    "signature": "getWorkforcemanagementBusinessunits(feature, divisionId)",
    "parameters": [
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet feature: GetWorkforcemanagementBusinessunitsRequest.Feature_getWorkforcemanagementBusinessunits = GetWorkforcemanagementBusinessunitsRequest.Feature_getWorkforcemanagementBusinessunits.enummember // \nlet divisionId: String = \"\" // \n\n// Get business units\nGetWorkforcemanagementBusinessunitsRequest.getWorkforcemanagementBusinessunits(feature: feature, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitsRequest.getWorkforcemanagementBusinessunits was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementbusinessunitsdivisionviews": {
    "operationId": "getworkforcemanagementbusinessunitsdivisionviews",
    "functionName": "getWorkforcemanagementBusinessunitsDivisionviews",
    "signature": "getWorkforcemanagementBusinessunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "BusinessUnitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: [String] = [\"\"] // The divisionIds to filter by. If omitted, will return business units in all divisions\n\n// Get business units across divisions\nGetWorkforcemanagementBusinessunitsDivisionviewsRequest.getWorkforcemanagementBusinessunitsDivisionviews(divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementBusinessunitsDivisionviewsRequest.getWorkforcemanagementBusinessunitsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementcalendardataics": {
    "operationId": "getworkforcemanagementcalendardataics",
    "functionName": "getWorkforcemanagementCalendarDataIcs",
    "signature": "getWorkforcemanagementCalendarDataIcs(calendarId)",
    "parameters": [
      {
        "name": "calendarId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "String",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet calendarId: String = \"\" // The id of the ics-formatted calendar\n\n// Get ics formatted calendar based on shareable link\nGetWorkforcemanagementCalendarDataIcsRequest.getWorkforcemanagementCalendarDataIcs(calendarId: calendarId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementCalendarDataIcsRequest.getWorkforcemanagementCalendarDataIcs was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementcalendarurlics": {
    "operationId": "getworkforcemanagementcalendarurlics",
    "functionName": "getWorkforcemanagementCalendarUrlIcs",
    "signature": "getWorkforcemanagementCalendarUrlIcs()",
    "return": "CalendarUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get existing calendar link for the current user\nGetWorkforcemanagementCalendarUrlIcsRequest.getWorkforcemanagementCalendarUrlIcs() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementCalendarUrlIcsRequest.getWorkforcemanagementCalendarUrlIcs was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "getworkforcemanagementhistoricaldatadeletejob",
    "functionName": "getWorkforcemanagementHistoricaldataDeletejob",
    "signature": "getWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Retrieves delete job status for historical data imports of the organization\nGetWorkforcemanagementHistoricaldataDeletejobRequest.getWorkforcemanagementHistoricaldataDeletejob() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementHistoricaldataDeletejobRequest.getWorkforcemanagementHistoricaldataDeletejob was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementhistoricaldataimportstatus": {
    "operationId": "getworkforcemanagementhistoricaldataimportstatus",
    "functionName": "getWorkforcemanagementHistoricaldataImportstatus",
    "signature": "getWorkforcemanagementHistoricaldataImportstatus()",
    "return": "HistoricalImportStatusListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Retrieves status of the historical data imports of the organization\nGetWorkforcemanagementHistoricaldataImportstatusRequest.getWorkforcemanagementHistoricaldataImportstatus() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementHistoricaldataImportstatusRequest.getWorkforcemanagementHistoricaldataImportstatus was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunit": {
    "operationId": "getworkforcemanagementmanagementunit",
    "functionName": "getWorkforcemanagementManagementunit",
    "signature": "getWorkforcemanagementManagementunit(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet expand: [String] = [\"\"] // \n\n// Get management unit\nGetWorkforcemanagementManagementunitRequest.getWorkforcemanagementManagementunit(managementUnitId: managementUnitId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitRequest.getWorkforcemanagementManagementunit was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitactivitycodes": {
    "operationId": "getworkforcemanagementmanagementunitactivitycodes",
    "functionName": "getWorkforcemanagementManagementunitActivitycodes",
    "signature": "getWorkforcemanagementManagementunitActivitycodes(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ActivityCodeContainer",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Get activity codes\nGetWorkforcemanagementManagementunitActivitycodesRequest.getWorkforcemanagementManagementunitActivitycodes(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitActivitycodesRequest.getWorkforcemanagementManagementunitActivitycodes was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitadherence": {
    "operationId": "getworkforcemanagementmanagementunitadherence",
    "functionName": "getWorkforcemanagementManagementunitAdherence",
    "signature": "getWorkforcemanagementManagementunitAdherence(managementUnitId, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "UserScheduleAdherenceListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\n\n// Get a list of user schedule adherence records for the requested management unit\nGetWorkforcemanagementManagementunitAdherenceRequest.getWorkforcemanagementManagementunitAdherence(managementUnitId: managementUnitId, forceDownloadService: forceDownloadService) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitAdherenceRequest.getWorkforcemanagementManagementunitAdherence was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitagent": {
    "operationId": "getworkforcemanagementmanagementunitagent",
    "functionName": "getWorkforcemanagementManagementunitAgent",
    "signature": "getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, excludeCapabilities)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "excludeCapabilities",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "WfmAgent",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId: String = \"\" // The agent id\nlet excludeCapabilities: Bool = true // Excludes all capabilities of the agent such as queues, languages, and skills\n\n// Get data for agent in the management unit\nGetWorkforcemanagementManagementunitAgentRequest.getWorkforcemanagementManagementunitAgent(managementUnitId: managementUnitId, agentId: agentId, excludeCapabilities: excludeCapabilities) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitAgentRequest.getWorkforcemanagementManagementunitAgent was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitagentshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitagentshifttrades",
    "functionName": "getWorkforcemanagementManagementunitAgentShifttrades",
    "signature": "getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "agentId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet agentId: String = \"\" // The agent id\n\n// Gets all the shift trades for a given agent\nGetWorkforcemanagementManagementunitAgentShifttradesRequest.getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId: managementUnitId, agentId: agentId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitAgentShifttradesRequest.getWorkforcemanagementManagementunitAgentShifttrades was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitshifttradesmatched": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesmatched",
    "functionName": "getWorkforcemanagementManagementunitShifttradesMatched",
    "signature": "getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "ShiftTradeMatchesSummaryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Gets a summary of all shift trades in the matched state\nGetWorkforcemanagementManagementunitShifttradesMatchedRequest.getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitShifttradesMatchedRequest.getWorkforcemanagementManagementunitShifttradesMatched was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitshifttradesusers": {
    "operationId": "getworkforcemanagementmanagementunitshifttradesusers",
    "functionName": "getWorkforcemanagementManagementunitShifttradesUsers",
    "signature": "getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Gets list of users available for whom you can send direct shift trade requests\nGetWorkforcemanagementManagementunitShifttradesUsersRequest.getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitShifttradesUsersRequest.getWorkforcemanagementManagementunitShifttradesUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimit",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimit",
    "signature": "getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet timeOffLimitId: String = \"\" // The ID of the time off limit to fetch\n\n// Gets a time off limit object\nGetWorkforcemanagementManagementunitTimeofflimitRequest.getWorkforcemanagementManagementunitTimeofflimit(managementUnitId: managementUnitId, timeOffLimitId: timeOffLimitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitTimeofflimitRequest.getWorkforcemanagementManagementunitTimeofflimit was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunittimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitTimeofflimits(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffLimitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\n\n// Gets a list of time off limit objects under management unit.\nGetWorkforcemanagementManagementunitTimeofflimitsRequest.getWorkforcemanagementManagementunitTimeofflimits(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitTimeofflimitsRequest.getWorkforcemanagementManagementunitTimeofflimits was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplan",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplan",
    "signature": "getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet timeOffPlanId: String = \"\" // The ID of the time off plan to fetch\n\n// Gets a time off plan\nGetWorkforcemanagementManagementunitTimeoffplanRequest.getWorkforcemanagementManagementunitTimeoffplan(managementUnitId: managementUnitId, timeOffPlanId: timeOffPlanId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitTimeoffplanRequest.getWorkforcemanagementManagementunitTimeoffplan was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "getworkforcemanagementmanagementunittimeoffplans",
    "functionName": "getWorkforcemanagementManagementunitTimeoffplans",
    "signature": "getWorkforcemanagementManagementunitTimeoffplans(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffPlanListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\n\n// Gets a list of time off plans\nGetWorkforcemanagementManagementunitTimeoffplansRequest.getWorkforcemanagementManagementunitTimeoffplans(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitTimeoffplansRequest.getWorkforcemanagementManagementunitTimeoffplans was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId: String = \"\" // The userId to whom the Time Off Request applies.\nlet timeOffRequestId: String = \"\" // Time Off Request Id\n\n// Get a time off request\nGetWorkforcemanagementManagementunitUserTimeoffrequestRequest.getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId: managementUnitId, userId: userId, timeOffRequestId: timeOffRequestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitUserTimeoffrequestRequest.getWorkforcemanagementManagementunitUserTimeoffrequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequesttimeofflimits",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet userId: String = \"\" // The userId to whom the time off request applies.\nlet timeOffRequestId: String = \"\" // The ID of the time off request, which dates and activityCodeId determine limit values to retrieve\n\n// Retrieves time off limit, allocated and waitlisted values according to specific time off request\nGetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsRequest.getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId: managementUnitId, userId: userId, timeOffRequestId: timeOffRequestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimitsRequest.getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitusertimeoffrequests": {
    "operationId": "getworkforcemanagementmanagementunitusertimeoffrequests",
    "functionName": "getWorkforcemanagementManagementunitUserTimeoffrequests",
    "signature": "getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, recentlyReviewed)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "recentlyReviewed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId: String = \"\" // The userId to whom the Time Off Request applies.\nlet recentlyReviewed: Bool = true // Limit results to requests that have been reviewed within the preceding 30 days\n\n// Get a list of time off requests for a given user\nGetWorkforcemanagementManagementunitUserTimeoffrequestsRequest.getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId: managementUnitId, userId: userId, recentlyReviewed: recentlyReviewed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitUserTimeoffrequestsRequest.getWorkforcemanagementManagementunitUserTimeoffrequests was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitusers": {
    "operationId": "getworkforcemanagementmanagementunitusers",
    "functionName": "getWorkforcemanagementManagementunitUsers",
    "signature": "getWorkforcemanagementManagementunitUsers(managementUnitId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WfmUserEntityListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\n\n// Get users in the management unit\nGetWorkforcemanagementManagementunitUsersRequest.getWorkforcemanagementManagementunitUsers(managementUnitId: managementUnitId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitUsersRequest.getWorkforcemanagementManagementunitUsers was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitweekschedule": {
    "operationId": "getworkforcemanagementmanagementunitweekschedule",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedule",
    "signature": "getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, expand, forceDownloadService)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "WeekScheduleResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId: String = \"\" // First day of schedule week in yyyy-MM-dd format.\nlet scheduleId: String = \"\" // The ID of the schedule to fetch\nlet expand: GetWorkforcemanagementManagementunitWeekScheduleRequest.Expand_getWorkforcemanagementManagementunitWeekSchedule = GetWorkforcemanagementManagementunitWeekScheduleRequest.Expand_getWorkforcemanagementManagementunitWeekSchedule.enummember // Which fields, if any, to expand\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\n\n// Deprecated.  Use the equivalent business unit resource instead. Get a week schedule\nGetWorkforcemanagementManagementunitWeekScheduleRequest.getWorkforcemanagementManagementunitWeekSchedule(managementUnitId: managementUnitId, weekId: weekId, scheduleId: scheduleId, expand: expand, forceDownloadService: forceDownloadService) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWeekScheduleRequest.getWorkforcemanagementManagementunitWeekSchedule was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitweekschedules": {
    "operationId": "getworkforcemanagementmanagementunitweekschedules",
    "functionName": "getWorkforcemanagementManagementunitWeekSchedules",
    "signature": "getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, includeOnlyPublished, earliestWeekDate, latestWeekDate)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnlyPublished",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "earliestWeekDate",
        "type": "String",
        "required": "false"
      },
      {
        "name": "latestWeekDate",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "WeekScheduleListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekId: String = \"\" // First day of schedule week in yyyy-MM-dd format.\nlet includeOnlyPublished: Bool = true // Return only published schedules\nlet earliestWeekDate: String = \"\" // The start date of the earliest week to query in yyyy-MM-dd format\nlet latestWeekDate: String = \"\" // The start date of the latest week to query in yyyy-MM-dd format\n\n// Deprecated.  Use the equivalent business unit resource instead. Get the list of schedules in a week in management unit\nGetWorkforcemanagementManagementunitWeekSchedulesRequest.getWorkforcemanagementManagementunitWeekSchedules(managementUnitId: managementUnitId, weekId: weekId, includeOnlyPublished: includeOnlyPublished, earliestWeekDate: earliestWeekDate, latestWeekDate: latestWeekDate) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWeekSchedulesRequest.getWorkforcemanagementManagementunitWeekSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "getworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "getWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, evaluateMatches)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "evaluateMatches",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "WeekShiftTradeListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet evaluateMatches: Bool = true // Whether to evaluate the matches for violations\n\n// Gets all the shift trades for a given week\nGetWorkforcemanagementManagementunitWeekShifttradesRequest.getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId: managementUnitId, weekDateId: weekDateId, evaluateMatches: evaluateMatches) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWeekShifttradesRequest.getWorkforcemanagementManagementunitWeekShifttrades was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitworkplan": {
    "operationId": "getworkforcemanagementmanagementunitworkplan",
    "functionName": "getWorkforcemanagementManagementunitWorkplan",
    "signature": "getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, includeOnly)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "includeOnly",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId: String = \"\" // The ID of the work plan to fetch\nlet includeOnly: [String] = [\"\"] // limit response to the specified fields\n\n// Get a work plan\nGetWorkforcemanagementManagementunitWorkplanRequest.getWorkforcemanagementManagementunitWorkplan(managementUnitId: managementUnitId, workPlanId: workPlanId, includeOnly: includeOnly) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWorkplanRequest.getWorkforcemanagementManagementunitWorkplan was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId: String = \"\" // The ID of the work plan rotation to fetch\n\n// Get a work plan rotation\nGetWorkforcemanagementManagementunitWorkplanrotationRequest.getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWorkplanrotationRequest.getWorkforcemanagementManagementunitWorkplanrotation was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "getworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "getWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet expand: [String] = [\"\"] // \n\n// Get work plan rotations\nGetWorkforcemanagementManagementunitWorkplanrotationsRequest.getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId: managementUnitId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWorkplanrotationsRequest.getWorkforcemanagementManagementunitWorkplanrotations was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitworkplans": {
    "operationId": "getworkforcemanagementmanagementunitworkplans",
    "functionName": "getWorkforcemanagementManagementunitWorkplans",
    "signature": "getWorkforcemanagementManagementunitWorkplans(managementUnitId, expand)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "WorkPlanListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet expand: [String] = [\"\"] // \n\n// Get work plans\nGetWorkforcemanagementManagementunitWorkplansRequest.getWorkforcemanagementManagementunitWorkplans(managementUnitId: managementUnitId, expand: expand) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitWorkplansRequest.getWorkforcemanagementManagementunitWorkplans was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunits": {
    "operationId": "getworkforcemanagementmanagementunits",
    "functionName": "getWorkforcemanagementManagementunits",
    "signature": "getWorkforcemanagementManagementunits(pageSize, pageNumber, expand, feature, divisionId)",
    "parameters": [
      {
        "name": "pageSize",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "pageNumber",
        "type": "Int",
        "required": "false"
      },
      {
        "name": "expand",
        "type": "String",
        "required": "false"
      },
      {
        "name": "feature",
        "type": "String",
        "required": "false"
      },
      {
        "name": "divisionId",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet pageSize: Int = 0 // Deprecated, paging is not supported\nlet pageNumber: Int = 0 // Deprecated, paging is not supported\nlet expand: GetWorkforcemanagementManagementunitsRequest.Expand_getWorkforcemanagementManagementunits = GetWorkforcemanagementManagementunitsRequest.Expand_getWorkforcemanagementManagementunits.enummember // Deprecated, expand settings on the single MU route\nlet feature: GetWorkforcemanagementManagementunitsRequest.Feature_getWorkforcemanagementManagementunits = GetWorkforcemanagementManagementunitsRequest.Feature_getWorkforcemanagementManagementunits.enummember // \nlet divisionId: String = \"\" // \n\n// Get management units\nGetWorkforcemanagementManagementunitsRequest.getWorkforcemanagementManagementunits(pageSize: pageSize, pageNumber: pageNumber, expand: expand, feature: feature, divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitsRequest.getWorkforcemanagementManagementunits was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementmanagementunitsdivisionviews": {
    "operationId": "getworkforcemanagementmanagementunitsdivisionviews",
    "functionName": "getWorkforcemanagementManagementunitsDivisionviews",
    "signature": "getWorkforcemanagementManagementunitsDivisionviews(divisionId)",
    "parameters": [
      {
        "name": "divisionId",
        "type": "[String]",
        "required": "false"
      }
    ],
    "return": "ManagementUnitListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet divisionId: [String] = [\"\"] // The divisionIds to filter by. If omitted, will return all divisions\n\n// Get management units across divisions\nGetWorkforcemanagementManagementunitsDivisionviewsRequest.getWorkforcemanagementManagementunitsDivisionviews(divisionId: divisionId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementManagementunitsDivisionviewsRequest.getWorkforcemanagementManagementunitsDivisionviews was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementnotifications": {
    "operationId": "getworkforcemanagementnotifications",
    "functionName": "getWorkforcemanagementNotifications",
    "signature": "getWorkforcemanagementNotifications()",
    "return": "NotificationsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Get a list of notifications for the current user\nGetWorkforcemanagementNotificationsRequest.getWorkforcemanagementNotifications() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementNotificationsRequest.getWorkforcemanagementNotifications was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementschedulingjob": {
    "operationId": "getworkforcemanagementschedulingjob",
    "functionName": "getWorkforcemanagementSchedulingjob",
    "signature": "getWorkforcemanagementSchedulingjob(jobId)",
    "parameters": [
      {
        "name": "jobId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "SchedulingStatusResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet jobId: String = \"\" // The id of the scheduling job\n\n// Get status of the scheduling job\nGetWorkforcemanagementSchedulingjobRequest.getWorkforcemanagementSchedulingjob(jobId: jobId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementSchedulingjobRequest.getWorkforcemanagementSchedulingjob was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementshifttrades": {
    "operationId": "getworkforcemanagementshifttrades",
    "functionName": "getWorkforcemanagementShifttrades",
    "signature": "getWorkforcemanagementShifttrades()",
    "return": "ShiftTradeListResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Gets all of my shift trades\nGetWorkforcemanagementShifttradesRequest.getWorkforcemanagementShifttrades() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementShifttradesRequest.getWorkforcemanagementShifttrades was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementtimeoffrequest": {
    "operationId": "getworkforcemanagementtimeoffrequest",
    "functionName": "getWorkforcemanagementTimeoffrequest",
    "signature": "getWorkforcemanagementTimeoffrequest(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet timeOffRequestId: String = \"\" // The ID of the time off request\n\n// Get a time off request for the current user\nGetWorkforcemanagementTimeoffrequestRequest.getWorkforcemanagementTimeoffrequest(timeOffRequestId: timeOffRequestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementTimeoffrequestRequest.getWorkforcemanagementTimeoffrequest was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementtimeoffrequestwaitlistpositions": {
    "operationId": "getworkforcemanagementtimeoffrequestwaitlistpositions",
    "functionName": "getWorkforcemanagementTimeoffrequestWaitlistpositions",
    "signature": "getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet timeOffRequestId: String = \"\" // The ID of the time off request\n\n// Get the daily waitlist positions of a time off request for the current user\nGetWorkforcemanagementTimeoffrequestWaitlistpositionsRequest.getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId: timeOffRequestId) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementTimeoffrequestWaitlistpositionsRequest.getWorkforcemanagementTimeoffrequestWaitlistpositions was successful\")\n        dump(response)\n    }\n}"
  },
  "getworkforcemanagementtimeoffrequests": {
    "operationId": "getworkforcemanagementtimeoffrequests",
    "functionName": "getWorkforcemanagementTimeoffrequests",
    "signature": "getWorkforcemanagementTimeoffrequests(recentlyReviewed)",
    "parameters": [
      {
        "name": "recentlyReviewed",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet recentlyReviewed: Bool = true // Limit results to requests that have been reviewed within the preceding 30 days\n\n// Get a list of time off requests for the current user\nGetWorkforcemanagementTimeoffrequestsRequest.getWorkforcemanagementTimeoffrequests(recentlyReviewed: recentlyReviewed) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"GetWorkforcemanagementTimeoffrequestsRequest.getWorkforcemanagementTimeoffrequests was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementbusinessunit": {
    "operationId": "patchworkforcemanagementbusinessunit",
    "functionName": "patchWorkforcemanagementBusinessunit",
    "signature": "patchWorkforcemanagementBusinessunit(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateBusinessUnitRequest",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet body: UpdateBusinessUnitRequest = new UpdateBusinessUnitRequest(...) // body\n\n// Update business unit\nPatchWorkforcemanagementBusinessunitRequest.patchWorkforcemanagementBusinessunit(businessUnitId: businessUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementBusinessunitRequest.patchWorkforcemanagementBusinessunit was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementbusinessunitactivitycode": {
    "operationId": "patchworkforcemanagementbusinessunitactivitycode",
    "functionName": "patchWorkforcemanagementBusinessunitActivitycode",
    "signature": "patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "activityCodeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateActivityCodeRequest",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet activityCodeId: String = \"\" // The ID of the activity code to update\nlet body: UpdateActivityCodeRequest = new UpdateActivityCodeRequest(...) // body\n\n// Update an activity code\nPatchWorkforcemanagementBusinessunitActivitycodeRequest.patchWorkforcemanagementBusinessunitActivitycode(businessUnitId: businessUnitId, activityCodeId: activityCodeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementBusinessunitActivitycodeRequest.patchWorkforcemanagementBusinessunitActivitycode was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementbusinessunitplanninggroup": {
    "operationId": "patchworkforcemanagementbusinessunitplanninggroup",
    "functionName": "patchWorkforcemanagementBusinessunitPlanninggroup",
    "signature": "patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "planningGroupId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdatePlanningGroupRequest",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet planningGroupId: String = \"\" // The ID of a planning group to update\nlet body: UpdatePlanningGroupRequest = new UpdatePlanningGroupRequest(...) // body\n\n// Updates the planning group\nPatchWorkforcemanagementBusinessunitPlanninggroupRequest.patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId: businessUnitId, planningGroupId: planningGroupId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementBusinessunitPlanninggroupRequest.patchWorkforcemanagementBusinessunitPlanninggroup was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementbusinessunitschedulingrun": {
    "operationId": "patchworkforcemanagementbusinessunitschedulingrun",
    "functionName": "patchWorkforcemanagementBusinessunitSchedulingRun",
    "signature": "patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "runId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchBuScheduleRunRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet runId: String = \"\" // The ID of the schedule run\nlet body: PatchBuScheduleRunRequest = new PatchBuScheduleRunRequest(...) // body\n\n// Mark a schedule run as applied\nPatchWorkforcemanagementBusinessunitSchedulingRunRequest.patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId: businessUnitId, runId: runId, body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PatchWorkforcemanagementBusinessunitSchedulingRunRequest.patchWorkforcemanagementBusinessunitSchedulingRun was successful\")\n    }\n}"
  },
  "patchworkforcemanagementbusinessunitservicegoaltemplate": {
    "operationId": "patchworkforcemanagementbusinessunitservicegoaltemplate",
    "functionName": "patchWorkforcemanagementBusinessunitServicegoaltemplate",
    "signature": "patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "serviceGoalTemplateId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateServiceGoalTemplate",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet serviceGoalTemplateId: String = \"\" // The ID of a service goal template to update\nlet body: UpdateServiceGoalTemplate = new UpdateServiceGoalTemplate(...) // body\n\n// Updates a service goal template\nPatchWorkforcemanagementBusinessunitServicegoaltemplateRequest.patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId: businessUnitId, serviceGoalTemplateId: serviceGoalTemplateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementBusinessunitServicegoaltemplateRequest.patchWorkforcemanagementBusinessunitServicegoaltemplate was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunit": {
    "operationId": "patchworkforcemanagementmanagementunit",
    "functionName": "patchWorkforcemanagementManagementunit",
    "signature": "patchWorkforcemanagementManagementunit(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateManagementUnitRequest",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: UpdateManagementUnitRequest = new UpdateManagementUnitRequest(...) // body\n\n// Update the requested management unit\nPatchWorkforcemanagementManagementunitRequest.patchWorkforcemanagementManagementunit(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitRequest.patchWorkforcemanagementManagementunit was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunittimeofflimit": {
    "operationId": "patchworkforcemanagementmanagementunittimeofflimit",
    "functionName": "patchWorkforcemanagementManagementunitTimeofflimit",
    "signature": "patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateTimeOffLimitRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet timeOffLimitId: String = \"\" // The id of time off limit object to update\nlet body: UpdateTimeOffLimitRequest = new UpdateTimeOffLimitRequest(...) // body\n\n// Updates a time off limit object.\nPatchWorkforcemanagementManagementunitTimeofflimitRequest.patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId: managementUnitId, timeOffLimitId: timeOffLimitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitTimeofflimitRequest.patchWorkforcemanagementManagementunitTimeofflimit was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunittimeoffplan": {
    "operationId": "patchworkforcemanagementmanagementunittimeoffplan",
    "functionName": "patchWorkforcemanagementManagementunitTimeoffplan",
    "signature": "patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateTimeOffPlanRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet timeOffPlanId: String = \"\" // The ID of the time off plan to update\nlet body: UpdateTimeOffPlanRequest = new UpdateTimeOffPlanRequest(...) // body\n\n// Updates a time off plan\nPatchWorkforcemanagementManagementunitTimeoffplanRequest.patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId: managementUnitId, timeOffPlanId: timeOffPlanId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitTimeoffplanRequest.patchWorkforcemanagementManagementunitTimeoffplan was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunitusertimeoffrequest": {
    "operationId": "patchworkforcemanagementmanagementunitusertimeoffrequest",
    "functionName": "patchWorkforcemanagementManagementunitUserTimeoffrequest",
    "signature": "patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "userId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AdminTimeOffRequestPatch",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet userId: String = \"\" // The id of the user the requested time off request belongs to\nlet timeOffRequestId: String = \"\" // The id of the time off request to update\nlet body: AdminTimeOffRequestPatch = new AdminTimeOffRequestPatch(...) // body\n\n// Update a time off request\nPatchWorkforcemanagementManagementunitUserTimeoffrequestRequest.patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId: managementUnitId, userId: userId, timeOffRequestId: timeOffRequestId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitUserTimeoffrequestRequest.patchWorkforcemanagementManagementunitUserTimeoffrequest was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunitweekshifttrade": {
    "operationId": "patchworkforcemanagementmanagementunitweekshifttrade",
    "functionName": "patchWorkforcemanagementManagementunitWeekShifttrade",
    "signature": "patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, tradeId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "PatchShiftTradeRequest",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet tradeId: String = \"\" // The ID of the shift trade to update\nlet body: PatchShiftTradeRequest = new PatchShiftTradeRequest(...) // body\n\n// Updates a shift trade. This route can only be called by the initiating agent\nPatchWorkforcemanagementManagementunitWeekShifttradeRequest.patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId: managementUnitId, weekDateId: weekDateId, tradeId: tradeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitWeekShifttradeRequest.patchWorkforcemanagementManagementunitWeekShifttrade was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunitworkplan": {
    "operationId": "patchworkforcemanagementmanagementunitworkplan",
    "functionName": "patchWorkforcemanagementManagementunitWorkplan",
    "signature": "patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, validationMode, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "WorkPlan",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId: String = \"\" // The ID of the work plan to update\nlet validationMode: PatchWorkforcemanagementManagementunitWorkplanRequest.ValidationMode_patchWorkforcemanagementManagementunitWorkplan = PatchWorkforcemanagementManagementunitWorkplanRequest.ValidationMode_patchWorkforcemanagementManagementunitWorkplan.enummember // Allows to update work plan even if validation result is invalid\nlet body: WorkPlan = new WorkPlan(...) // body\n\n// Update a work plan\nPatchWorkforcemanagementManagementunitWorkplanRequest.patchWorkforcemanagementManagementunitWorkplan(managementUnitId: managementUnitId, workPlanId: workPlanId, validationMode: validationMode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitWorkplanRequest.patchWorkforcemanagementManagementunitWorkplan was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementmanagementunitworkplanrotation": {
    "operationId": "patchworkforcemanagementmanagementunitworkplanrotation",
    "functionName": "patchWorkforcemanagementManagementunitWorkplanrotation",
    "signature": "patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UpdateWorkPlanRotationRequest",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId: String = \"\" // The ID of the work plan rotation to update\nlet body: UpdateWorkPlanRotationRequest = new UpdateWorkPlanRotationRequest(...) // body\n\n// Update a work plan rotation\nPatchWorkforcemanagementManagementunitWorkplanrotationRequest.patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementManagementunitWorkplanrotationRequest.patchWorkforcemanagementManagementunitWorkplanrotation was successful\")\n        dump(response)\n    }\n}"
  },
  "patchworkforcemanagementtimeoffrequest": {
    "operationId": "patchworkforcemanagementtimeoffrequest",
    "functionName": "patchWorkforcemanagementTimeoffrequest",
    "signature": "patchWorkforcemanagementTimeoffrequest(timeOffRequestId, body)",
    "parameters": [
      {
        "name": "timeOffRequestId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AgentTimeOffRequestPatch",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet timeOffRequestId: String = \"\" // The ID of the time off request\nlet body: AgentTimeOffRequestPatch = new AgentTimeOffRequestPatch(...) // body\n\n// Update a time off request for the current user\nPatchWorkforcemanagementTimeoffrequestRequest.patchWorkforcemanagementTimeoffrequest(timeOffRequestId: timeOffRequestId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PatchWorkforcemanagementTimeoffrequestRequest.patchWorkforcemanagementTimeoffrequest was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementadherencehistorical": {
    "operationId": "postworkforcemanagementadherencehistorical",
    "functionName": "postWorkforcemanagementAdherenceHistorical",
    "signature": "postWorkforcemanagementAdherenceHistorical(body)",
    "parameters": [
      {
        "name": "body",
        "type": "WfmHistoricalAdherenceQueryForUsers",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: WfmHistoricalAdherenceQueryForUsers = new WfmHistoricalAdherenceQueryForUsers(...) // body\n\n// Request a historical adherence report for users across management units\nPostWorkforcemanagementAdherenceHistoricalRequest.postWorkforcemanagementAdherenceHistorical(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementAdherenceHistoricalRequest.postWorkforcemanagementAdherenceHistorical was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementagentschedulesmine": {
    "operationId": "postworkforcemanagementagentschedulesmine",
    "functionName": "postWorkforcemanagementAgentschedulesMine",
    "signature": "postWorkforcemanagementAgentschedulesMine(body)",
    "parameters": [
      {
        "name": "body",
        "type": "BuGetCurrentAgentScheduleRequest",
        "required": "false"
      }
    ],
    "return": "BuCurrentAgentScheduleSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: BuGetCurrentAgentScheduleRequest = new BuGetCurrentAgentScheduleRequest(...) // body\n\n// Get published schedule for the current user\nPostWorkforcemanagementAgentschedulesMineRequest.postWorkforcemanagementAgentschedulesMine(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementAgentschedulesMineRequest.postWorkforcemanagementAgentschedulesMine was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitactivitycodes": {
    "operationId": "postworkforcemanagementbusinessunitactivitycodes",
    "functionName": "postWorkforcemanagementBusinessunitActivitycodes",
    "signature": "postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateActivityCodeRequest",
        "required": "false"
      }
    ],
    "return": "BusinessUnitActivityCode",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit, or 'mine' for the business unit of the logged-in user.\nlet body: CreateActivityCodeRequest = new CreateActivityCodeRequest(...) // body\n\n// Create a new activity code\nPostWorkforcemanagementBusinessunitActivitycodesRequest.postWorkforcemanagementBusinessunitActivitycodes(businessUnitId: businessUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitActivitycodesRequest.postWorkforcemanagementBusinessunitActivitycodes was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitagentschedulessearch": {
    "operationId": "postworkforcemanagementbusinessunitagentschedulessearch",
    "functionName": "postWorkforcemanagementBusinessunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, forceAsync, forceDownloadService, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "body",
        "type": "BuSearchAgentSchedulesRequest",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\nlet body: BuSearchAgentSchedulesRequest = new BuSearchAgentSchedulesRequest(...) // body\n\n// Search published schedules\nPostWorkforcemanagementBusinessunitAgentschedulesSearchRequest.postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId: businessUnitId, forceAsync: forceAsync, forceDownloadService: forceDownloadService, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitAgentschedulesSearchRequest.postWorkforcemanagementBusinessunitAgentschedulesSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitintraday": {
    "operationId": "postworkforcemanagementbusinessunitintraday",
    "functionName": "postWorkforcemanagementBusinessunitIntraday",
    "signature": "postWorkforcemanagementBusinessunitIntraday(businessUnitId, forceAsync, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "body",
        "type": "IntradayPlanningGroupRequest",
        "required": "false"
      }
    ],
    "return": "AsyncIntradayResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\nlet body: IntradayPlanningGroupRequest = new IntradayPlanningGroupRequest(...) // body\n\n// Get intraday data for the given date for the requested planningGroupIds\nPostWorkforcemanagementBusinessunitIntradayRequest.postWorkforcemanagementBusinessunitIntraday(businessUnitId: businessUnitId, forceAsync: forceAsync, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitIntradayRequest.postWorkforcemanagementBusinessunitIntraday was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitplanninggroups": {
    "operationId": "postworkforcemanagementbusinessunitplanninggroups",
    "functionName": "postWorkforcemanagementBusinessunitPlanninggroups",
    "signature": "postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreatePlanningGroupRequest",
        "required": "false"
      }
    ],
    "return": "PlanningGroup",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet body: CreatePlanningGroupRequest = new CreatePlanningGroupRequest(...) // body\n\n// Adds a new planning group\nPostWorkforcemanagementBusinessunitPlanninggroupsRequest.postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId: businessUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitPlanninggroupsRequest.postWorkforcemanagementBusinessunitPlanninggroups was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitservicegoaltemplates": {
    "operationId": "postworkforcemanagementbusinessunitservicegoaltemplates",
    "functionName": "postWorkforcemanagementBusinessunitServicegoaltemplates",
    "signature": "postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateServiceGoalTemplate",
        "required": "false"
      }
    ],
    "return": "ServiceGoalTemplate",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit.\nlet body: CreateServiceGoalTemplate = new CreateServiceGoalTemplate(...) // body\n\n// Adds a new service goal template\nPostWorkforcemanagementBusinessunitServicegoaltemplatesRequest.postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId: businessUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitServicegoaltemplatesRequest.postWorkforcemanagementBusinessunitServicegoaltemplates was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleagentschedulesquery",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, forceAsync, forceDownloadService)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BuQueryAgentSchedulesRequest",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesQueryResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet body: BuQueryAgentSchedulesRequest = new BuQueryAgentSchedulesRequest(...) // body\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\n\n// Loads agent schedule data from the schedule. Used in combination with the metadata route\nPostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryRequest.postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body, forceAsync: forceAsync, forceDownloadService: forceDownloadService) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQueryRequest.postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedulecopy": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulecopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BuCopyScheduleRequest",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule to copy\nlet body: BuCopyScheduleRequest = new BuCopyScheduleRequest(...) // body\n\n// Copy a schedule\nPostWorkforcemanagementBusinessunitWeekScheduleCopyRequest.postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekScheduleCopyRequest.postWorkforcemanagementBusinessunitWeekScheduleCopy was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedulereschedule": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulereschedule",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleReschedule",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BuRescheduleRequest",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet body: BuRescheduleRequest = new BuRescheduleRequest(...) // body\n\n// Start a rescheduling run\nPostWorkforcemanagementBusinessunitWeekScheduleRescheduleRequest.postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekScheduleRescheduleRequest.postWorkforcemanagementBusinessunitWeekScheduleReschedule was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdate": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdate",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdate",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "ProcessScheduleUpdateUploadRequest",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet body: ProcessScheduleUpdateUploadRequest = new ProcessScheduleUpdateUploadRequest(...) // body\n\n// Starts processing a schedule update\nPostWorkforcemanagementBusinessunitWeekScheduleUpdateRequest.postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekScheduleUpdateRequest.postWorkforcemanagementBusinessunitWeekScheduleUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekscheduleupdateuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "scheduleId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UploadUrlRequestBody",
        "required": "true"
      }
    ],
    "return": "UpdateScheduleUploadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet scheduleId: String = \"\" // The ID of the schedule\nlet body: UploadUrlRequestBody = new UploadUrlRequestBody(...) // body\n\n// Creates a signed upload URL for updating a schedule\nPostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlRequest.postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId: businessUnitId, weekId: weekId, scheduleId: scheduleId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurlRequest.postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedules": {
    "operationId": "postworkforcemanagementbusinessunitweekschedules",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedules",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BuCreateBlankScheduleRequest",
        "required": "true"
      }
    ],
    "return": "BuScheduleMetadata",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: BuCreateBlankScheduleRequest = new BuCreateBlankScheduleRequest(...) // body\n\n// Create a blank schedule\nPostWorkforcemanagementBusinessunitWeekSchedulesRequest.postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId: businessUnitId, weekId: weekId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekSchedulesRequest.postWorkforcemanagementBusinessunitWeekSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedulesgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BuGenerateScheduleRequest",
        "required": "true"
      }
    ],
    "return": "BuAsyncScheduleRunResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: BuGenerateScheduleRequest = new BuGenerateScheduleRequest(...) // body\n\n// Generate a schedule\nPostWorkforcemanagementBusinessunitWeekSchedulesGenerateRequest.postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId: businessUnitId, weekId: weekId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekSchedulesGenerateRequest.postWorkforcemanagementBusinessunitWeekSchedulesGenerate was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedulesimport": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImport",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WfmProcessUploadRequest",
        "required": "true"
      }
    ],
    "return": "ScheduleUploadProcessingResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: WfmProcessUploadRequest = new WfmProcessUploadRequest(...) // \n\n// Starts processing a schedule import\nPostWorkforcemanagementBusinessunitWeekSchedulesImportRequest.postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId: businessUnitId, weekId: weekId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekSchedulesImportRequest.postWorkforcemanagementBusinessunitWeekSchedulesImport was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekschedulesimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekschedulesimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UploadUrlRequestBody",
        "required": "true"
      }
    ],
    "return": "ImportScheduleUploadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit\nlet weekId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: UploadUrlRequestBody = new UploadUrlRequestBody(...) // body\n\n// Creates a signed upload URL for importing a schedule\nPostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlRequest.postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId: businessUnitId, weekId: weekId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekSchedulesImportUploadurlRequest.postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastcopy": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastcopy",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "forecastId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CopyBuForecastRequest",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet forecastId: String = \"\" // The ID of the forecast to copy\nlet body: CopyBuForecastRequest = new CopyBuForecastRequest(...) // body\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n\n// Copy a short term forecast\nPostWorkforcemanagementBusinessunitWeekShorttermforecastCopyRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId: businessUnitId, weekDateId: weekDateId, forecastId: forecastId, body: body, forceAsync: forceAsync) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekShorttermforecastCopyRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastCopy was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsgenerate",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "GenerateBuForecastRequest",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "AsyncForecastOperationResult",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: GenerateBuForecastRequest = new GenerateBuForecastRequest(...) // \nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n\n// Generate a short term forecast\nPostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId: businessUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerateRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimport": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimport",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WfmProcessUploadRequest",
        "required": "true"
      }
    ],
    "return": "ImportForecastResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: WfmProcessUploadRequest = new WfmProcessUploadRequest(...) // \n\n// Starts importing the uploaded short term forecast\nPostWorkforcemanagementBusinessunitWeekShorttermforecastsImportRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId: businessUnitId, weekDateId: weekDateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsImport was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl": {
    "operationId": "postworkforcemanagementbusinessunitweekshorttermforecastsimportuploadurl",
    "functionName": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl",
    "signature": "postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "businessUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UploadUrlRequestBody",
        "required": "true"
      }
    ],
    "return": "ImportForecastUploadResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet businessUnitId: String = \"\" // The ID of the business unit to which the forecast belongs\nlet weekDateId: Date = new Date(...) // First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: UploadUrlRequestBody = new UploadUrlRequestBody(...) // body\n\n// Creates a signed upload URL for importing a short term forecast\nPostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId: businessUnitId, weekDateId: weekDateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurlRequest.postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementbusinessunits": {
    "operationId": "postworkforcemanagementbusinessunits",
    "functionName": "postWorkforcemanagementBusinessunits",
    "signature": "postWorkforcemanagementBusinessunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateBusinessUnitRequest",
        "required": "false"
      }
    ],
    "return": "BusinessUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateBusinessUnitRequest = new CreateBusinessUnitRequest(...) // body\n\n// Add a new business unit\nPostWorkforcemanagementBusinessunitsRequest.postWorkforcemanagementBusinessunits(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementBusinessunitsRequest.postWorkforcemanagementBusinessunits was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementcalendarurlics": {
    "operationId": "postworkforcemanagementcalendarurlics",
    "functionName": "postWorkforcemanagementCalendarUrlIcs",
    "signature": "postWorkforcemanagementCalendarUrlIcs(language)",
    "parameters": [
      {
        "name": "language",
        "type": "String",
        "required": "false"
      }
    ],
    "return": "CalendarUrlResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet language: String = en-US // A language tag (which is sometimes referred to as a \\\"locale identifier\\\") to use to localize default activity code names in the ics-formatted calendar\n\n// Create a newly generated calendar link for the current user; if the current user has previously generated one, the generated link will be returned\nPostWorkforcemanagementCalendarUrlIcsRequest.postWorkforcemanagementCalendarUrlIcs(language: language) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementCalendarUrlIcsRequest.postWorkforcemanagementCalendarUrlIcs was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementhistoricaldatadeletejob": {
    "operationId": "postworkforcemanagementhistoricaldatadeletejob",
    "functionName": "postWorkforcemanagementHistoricaldataDeletejob",
    "signature": "postWorkforcemanagementHistoricaldataDeletejob()",
    "return": "HistoricalImportDeleteJobResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\n\n// Delete the entries of the historical data imports in the organization\nPostWorkforcemanagementHistoricaldataDeletejobRequest.postWorkforcemanagementHistoricaldataDeletejob() { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementHistoricaldataDeletejobRequest.postWorkforcemanagementHistoricaldataDeletejob was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementhistoricaldatavalidate": {
    "operationId": "postworkforcemanagementhistoricaldatavalidate",
    "functionName": "postWorkforcemanagementHistoricaldataValidate",
    "signature": "postWorkforcemanagementHistoricaldataValidate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "ValidationServiceRequest",
        "required": "false"
      }
    ],
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: ValidationServiceRequest = new ValidationServiceRequest(...) // body\n\n// Trigger validation process for historical import\nPostWorkforcemanagementHistoricaldataValidateRequest.postWorkforcemanagementHistoricaldataValidate(body: body) { (error) in\n    if let error = error {\n        dump(error)\n    } else {\n        print(\"PostWorkforcemanagementHistoricaldataValidateRequest.postWorkforcemanagementHistoricaldataValidate was successful\")\n    }\n}"
  },
  "postworkforcemanagementmanagementunitagentschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitagentschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitAgentschedulesSearch",
    "signature": "postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, forceAsync, forceDownloadService, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "forceDownloadService",
        "type": "Bool",
        "required": "false"
      },
      {
        "name": "body",
        "type": "BuSearchAgentSchedulesRequest",
        "required": "false"
      }
    ],
    "return": "BuAsyncAgentSchedulesSearchResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\nlet forceDownloadService: Bool = true // Force the result of this operation to be sent via download service.  For testing/app development purposes\nlet body: BuSearchAgentSchedulesRequest = new BuSearchAgentSchedulesRequest(...) // body\n\n// Query published schedules for given given time range for set of users\nPostWorkforcemanagementManagementunitAgentschedulesSearchRequest.postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId: managementUnitId, forceAsync: forceAsync, forceDownloadService: forceDownloadService, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitAgentschedulesSearchRequest.postWorkforcemanagementManagementunitAgentschedulesSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunithistoricaladherencequery": {
    "operationId": "postworkforcemanagementmanagementunithistoricaladherencequery",
    "functionName": "postWorkforcemanagementManagementunitHistoricaladherencequery",
    "signature": "postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "WfmHistoricalAdherenceQuery",
        "required": "false"
      }
    ],
    "return": "WfmHistoricalAdherenceResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet body: WfmHistoricalAdherenceQuery = new WfmHistoricalAdherenceQuery(...) // body\n\n// Request a historical adherence report\nPostWorkforcemanagementManagementunitHistoricaladherencequeryRequest.postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitHistoricaladherencequeryRequest.postWorkforcemanagementManagementunitHistoricaladherencequery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitmove": {
    "operationId": "postworkforcemanagementmanagementunitmove",
    "functionName": "postWorkforcemanagementManagementunitMove",
    "signature": "postWorkforcemanagementManagementunitMove(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MoveManagementUnitRequest",
        "required": "false"
      }
    ],
    "return": "MoveManagementUnitResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: MoveManagementUnitRequest = new MoveManagementUnitRequest(...) // body\n\n// Move the requested management unit to a new business unit\nPostWorkforcemanagementManagementunitMoveRequest.postWorkforcemanagementManagementunitMove(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitMoveRequest.postWorkforcemanagementManagementunitMove was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitschedulessearch": {
    "operationId": "postworkforcemanagementmanagementunitschedulessearch",
    "functionName": "postWorkforcemanagementManagementunitSchedulesSearch",
    "signature": "postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "UserListScheduleRequestBody",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: UserListScheduleRequestBody = new UserListScheduleRequestBody(...) // body\n\n// Query published schedules for given given time range for set of users\nPostWorkforcemanagementManagementunitSchedulesSearchRequest.postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitSchedulesSearchRequest.postWorkforcemanagementManagementunitSchedulesSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeofflimits": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimits",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimits",
    "signature": "postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateTimeOffLimitRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet body: CreateTimeOffLimitRequest = new CreateTimeOffLimitRequest(...) // body\n\n// Creates a new time off limit object under management unit.\nPostWorkforcemanagementManagementunitTimeofflimitsRequest.postWorkforcemanagementManagementunitTimeofflimits(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeofflimitsRequest.postWorkforcemanagementManagementunitTimeofflimits was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeofflimitsvaluesquery": {
    "operationId": "postworkforcemanagementmanagementunittimeofflimitsvaluesquery",
    "functionName": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
    "signature": "postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "QueryTimeOffLimitValuesRequest",
        "required": "false"
      }
    ],
    "return": "QueryTimeOffLimitValuesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet body: QueryTimeOffLimitValuesRequest = new QueryTimeOffLimitValuesRequest(...) // body\n\n// Retrieves time off limit related values based on a given set of filters.\nPostWorkforcemanagementManagementunitTimeofflimitsValuesQueryRequest.postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeofflimitsValuesQueryRequest.postWorkforcemanagementManagementunitTimeofflimitsValuesQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeoffplans": {
    "operationId": "postworkforcemanagementmanagementunittimeoffplans",
    "functionName": "postWorkforcemanagementManagementunitTimeoffplans",
    "signature": "postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateTimeOffPlanRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit\nlet body: CreateTimeOffPlanRequest = new CreateTimeOffPlanRequest(...) // body\n\n// Creates a new time off plan\nPostWorkforcemanagementManagementunitTimeoffplansRequest.postWorkforcemanagementManagementunitTimeoffplans(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeoffplansRequest.postWorkforcemanagementManagementunitTimeoffplans was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeoffrequests": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequests",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequests",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CreateAdminTimeOffRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestList",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: CreateAdminTimeOffRequest = new CreateAdminTimeOffRequest(...) // body\n\n// Create a new time off request\nPostWorkforcemanagementManagementunitTimeoffrequestsRequest.postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeoffrequestsRequest.postWorkforcemanagementManagementunitTimeoffrequests was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeoffrequestsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "TimeOffRequestQueryBody",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: TimeOffRequestQueryBody = new TimeOffRequestQueryBody(...) // body\n\n// Fetches time off requests matching the conditions specified in the request body\nPostWorkforcemanagementManagementunitTimeoffrequestsQueryRequest.postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeoffrequestsQueryRequest.postWorkforcemanagementManagementunitTimeoffrequestsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery": {
    "operationId": "postworkforcemanagementmanagementunittimeoffrequestswaitlistpositionsquery",
    "functionName": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
    "signature": "postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "QueryWaitlistPositionsRequest",
        "required": "false"
      }
    ],
    "return": "WaitlistPositionListing",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet body: QueryWaitlistPositionsRequest = new QueryWaitlistPositionsRequest(...) // body\n\n// Retrieves daily waitlist position for a list of time off requests\nPostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryRequest.postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQueryRequest.postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitweekshifttradematch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradematch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradeMatch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, tradeId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "tradeId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "MatchShiftTradeRequest",
        "required": "true"
      }
    ],
    "return": "MatchShiftTradeResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet tradeId: String = \"\" // The ID of the shift trade to update\nlet body: MatchShiftTradeRequest = new MatchShiftTradeRequest(...) // body\n\n// Matches a shift trade. This route can only be called by the receiving agent\nPostWorkforcemanagementManagementunitWeekShifttradeMatchRequest.postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId: managementUnitId, weekDateId: weekDateId, tradeId: tradeId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWeekShifttradeMatchRequest.postWorkforcemanagementManagementunitWeekShifttradeMatch was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitweekshifttrades": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttrades",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttrades",
    "signature": "postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AddShiftTradeRequest",
        "required": "true"
      }
    ],
    "return": "ShiftTradeResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: AddShiftTradeRequest = new AddShiftTradeRequest(...) // body\n\n// Adds a shift trade\nPostWorkforcemanagementManagementunitWeekShifttradesRequest.postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWeekShifttradesRequest.postWorkforcemanagementManagementunitWeekShifttrades was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitweekshifttradessearch": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradessearch",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesSearch",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SearchShiftTradesRequest",
        "required": "true"
      }
    ],
    "return": "SearchShiftTradesResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: SearchShiftTradesRequest = new SearchShiftTradesRequest(...) // body\n\n// Searches for potential shift trade matches for the current agent\nPostWorkforcemanagementManagementunitWeekShifttradesSearchRequest.postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWeekShifttradesSearchRequest.postWorkforcemanagementManagementunitWeekShifttradesSearch was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitweekshifttradesstatebulk": {
    "operationId": "postworkforcemanagementmanagementunitweekshifttradesstatebulk",
    "functionName": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk",
    "signature": "postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, forceAsync)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "weekDateId",
        "type": "Date",
        "required": "true"
      },
      {
        "name": "body",
        "type": "BulkShiftTradeStateUpdateRequest",
        "required": "true"
      },
      {
        "name": "forceAsync",
        "type": "Bool",
        "required": "false"
      }
    ],
    "return": "BulkUpdateShiftTradeStateResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet weekDateId: Date = new Date(...) // The start date of the week schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd\nlet body: BulkShiftTradeStateUpdateRequest = new BulkShiftTradeStateUpdateRequest(...) // body\nlet forceAsync: Bool = true // Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes\n\n// Updates the state of a batch of shift trades\nPostWorkforcemanagementManagementunitWeekShifttradesStateBulkRequest.postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId: managementUnitId, weekDateId: weekDateId, body: body, forceAsync: forceAsync) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWeekShifttradesStateBulkRequest.postWorkforcemanagementManagementunitWeekShifttradesStateBulk was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitworkplancopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplancopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CopyWorkPlan",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId: String = \"\" // The ID of the work plan to create a copy\nlet body: CopyWorkPlan = new CopyWorkPlan(...) // body\n\n// Create a copy of work plan\nPostWorkforcemanagementManagementunitWorkplanCopyRequest.postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId: managementUnitId, workPlanId: workPlanId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWorkplanCopyRequest.postWorkforcemanagementManagementunitWorkplanCopy was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitworkplanvalidate": {
    "operationId": "postworkforcemanagementmanagementunitworkplanvalidate",
    "functionName": "postWorkforcemanagementManagementunitWorkplanValidate",
    "signature": "postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, expand, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "expand",
        "type": "[String]",
        "required": "false"
      },
      {
        "name": "body",
        "type": "WorkPlanValidationRequest",
        "required": "false"
      }
    ],
    "return": "ValidateWorkPlanResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanId: String = \"\" // The ID of the work plan to validate. For new work plan, use the word 'new' for the ID.\nlet expand: [String] = [\"\"] // \nlet body: WorkPlanValidationRequest = new WorkPlanValidationRequest(...) // body\n\n// Validate Work Plan\nPostWorkforcemanagementManagementunitWorkplanValidateRequest.postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId: managementUnitId, workPlanId: workPlanId, expand: expand, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWorkplanValidateRequest.postWorkforcemanagementManagementunitWorkplanValidate was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitworkplanrotationcopy": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotationcopy",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotationCopy",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "workPlanRotationId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "CopyWorkPlanRotationRequest",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet workPlanRotationId: String = \"\" // The ID of the work plan rotation to create a copy\nlet body: CopyWorkPlanRotationRequest = new CopyWorkPlanRotationRequest(...) // body\n\n// Create a copy of work plan rotation\nPostWorkforcemanagementManagementunitWorkplanrotationCopyRequest.postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId: managementUnitId, workPlanRotationId: workPlanRotationId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWorkplanrotationCopyRequest.postWorkforcemanagementManagementunitWorkplanrotationCopy was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitworkplanrotations": {
    "operationId": "postworkforcemanagementmanagementunitworkplanrotations",
    "functionName": "postWorkforcemanagementManagementunitWorkplanrotations",
    "signature": "postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "AddWorkPlanRotationRequest",
        "required": "false"
      }
    ],
    "return": "WorkPlanRotationResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet body: AddWorkPlanRotationRequest = new AddWorkPlanRotationRequest(...) // body\n\n// Create a new work plan rotation\nPostWorkforcemanagementManagementunitWorkplanrotationsRequest.postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId: managementUnitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWorkplanrotationsRequest.postWorkforcemanagementManagementunitWorkplanrotations was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunitworkplans": {
    "operationId": "postworkforcemanagementmanagementunitworkplans",
    "functionName": "postWorkforcemanagementManagementunitWorkplans",
    "signature": "postWorkforcemanagementManagementunitWorkplans(managementUnitId, validationMode, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "validationMode",
        "type": "String",
        "required": "false"
      },
      {
        "name": "body",
        "type": "CreateWorkPlan",
        "required": "false"
      }
    ],
    "return": "WorkPlan",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit, or 'mine' for the management unit of the logged-in user.\nlet validationMode: PostWorkforcemanagementManagementunitWorkplansRequest.ValidationMode_postWorkforcemanagementManagementunitWorkplans = PostWorkforcemanagementManagementunitWorkplansRequest.ValidationMode_postWorkforcemanagementManagementunitWorkplans.enummember // Allows to create work plan even if the validation result is invalid\nlet body: CreateWorkPlan = new CreateWorkPlan(...) // body\n\n// Create a new work plan\nPostWorkforcemanagementManagementunitWorkplansRequest.postWorkforcemanagementManagementunitWorkplans(managementUnitId: managementUnitId, validationMode: validationMode, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitWorkplansRequest.postWorkforcemanagementManagementunitWorkplans was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementmanagementunits": {
    "operationId": "postworkforcemanagementmanagementunits",
    "functionName": "postWorkforcemanagementManagementunits",
    "signature": "postWorkforcemanagementManagementunits(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateManagementUnitApiRequest",
        "required": "false"
      }
    ],
    "return": "ManagementUnit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateManagementUnitApiRequest = new CreateManagementUnitApiRequest(...) // body\n\n// Add a management unit\nPostWorkforcemanagementManagementunitsRequest.postWorkforcemanagementManagementunits(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementManagementunitsRequest.postWorkforcemanagementManagementunits was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementnotificationsupdate": {
    "operationId": "postworkforcemanagementnotificationsupdate",
    "functionName": "postWorkforcemanagementNotificationsUpdate",
    "signature": "postWorkforcemanagementNotificationsUpdate(body)",
    "parameters": [
      {
        "name": "body",
        "type": "UpdateNotificationsRequest",
        "required": "false"
      }
    ],
    "return": "UpdateNotificationsResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: UpdateNotificationsRequest = new UpdateNotificationsRequest(...) // body\n\n// Mark a list of notifications as read or unread\nPostWorkforcemanagementNotificationsUpdateRequest.postWorkforcemanagementNotificationsUpdate(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementNotificationsUpdateRequest.postWorkforcemanagementNotificationsUpdate was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementschedules": {
    "operationId": "postworkforcemanagementschedules",
    "functionName": "postWorkforcemanagementSchedules",
    "signature": "postWorkforcemanagementSchedules(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CurrentUserScheduleRequestBody",
        "required": "false"
      }
    ],
    "return": "UserScheduleContainer",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CurrentUserScheduleRequestBody = new CurrentUserScheduleRequestBody(...) // body\n\n// Get published schedule for the current user\nPostWorkforcemanagementSchedulesRequest.postWorkforcemanagementSchedules(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementSchedulesRequest.postWorkforcemanagementSchedules was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementtimeofflimitsavailablequery": {
    "operationId": "postworkforcemanagementtimeofflimitsavailablequery",
    "functionName": "postWorkforcemanagementTimeofflimitsAvailableQuery",
    "signature": "postWorkforcemanagementTimeofflimitsAvailableQuery(body)",
    "parameters": [
      {
        "name": "body",
        "type": "AvailableTimeOffRequest",
        "required": "false"
      }
    ],
    "return": "AvailableTimeOffResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: AvailableTimeOffRequest = new AvailableTimeOffRequest(...) // body\n\n// Queries available time off for the current user\nPostWorkforcemanagementTimeofflimitsAvailableQueryRequest.postWorkforcemanagementTimeofflimitsAvailableQuery(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementTimeofflimitsAvailableQueryRequest.postWorkforcemanagementTimeofflimitsAvailableQuery was successful\")\n        dump(response)\n    }\n}"
  },
  "postworkforcemanagementtimeoffrequests": {
    "operationId": "postworkforcemanagementtimeoffrequests",
    "functionName": "postWorkforcemanagementTimeoffrequests",
    "signature": "postWorkforcemanagementTimeoffrequests(body)",
    "parameters": [
      {
        "name": "body",
        "type": "CreateAgentTimeOffRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffRequestResponse",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet body: CreateAgentTimeOffRequest = new CreateAgentTimeOffRequest(...) // body\n\n// Create a time off request for the current user\nPostWorkforcemanagementTimeoffrequestsRequest.postWorkforcemanagementTimeoffrequests(body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PostWorkforcemanagementTimeoffrequestsRequest.postWorkforcemanagementTimeoffrequests was successful\")\n        dump(response)\n    }\n}"
  },
  "putworkforcemanagementmanagementunittimeofflimitvalues": {
    "operationId": "putworkforcemanagementmanagementunittimeofflimitvalues",
    "functionName": "putWorkforcemanagementManagementunitTimeofflimitValues",
    "signature": "putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body)",
    "parameters": [
      {
        "name": "managementUnitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "timeOffLimitId",
        "type": "String",
        "required": "true"
      },
      {
        "name": "body",
        "type": "SetTimeOffLimitValuesRequest",
        "required": "false"
      }
    ],
    "return": "TimeOffLimit",
    "example": "import PureCloudPlatformClientV2\n\nPureCloudPlatformClientV2API.basePath = \"\" // expected format: \"https://api.[base path]\"\nPureCloudPlatformClientV2API.accessToken = \"your_access_token\"\n\nlet managementUnitId: String = \"\" // The ID of the management unit.\nlet timeOffLimitId: String = \"\" // The ID of the time off limit object to set values for\nlet body: SetTimeOffLimitValuesRequest = new SetTimeOffLimitValuesRequest(...) // body\n\n// Sets daily values for a date range of time off limit object\nPutWorkforcemanagementManagementunitTimeofflimitValuesRequest.putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId: managementUnitId, timeOffLimitId: timeOffLimitId, body: body) { (response, error) in\n    if let error = error {\n        dump(error)\n    } else if let response = response {\n        print(\"PutWorkforcemanagementManagementunitTimeofflimitValuesRequest.putWorkforcemanagementManagementunitTimeofflimitValues was successful\")\n        dump(response)\n    }\n}"
  }
}