import PureCloudPlatformClientV2

PureCloudPlatformClientV2API.basePath = "" // expected format: "https://api.[base path]"
PureCloudPlatformClientV2API.accessToken = "your_access_token"

let isArchived: Bool = true // Archive status
let types: [String] = [""] // Specifies the module types.
let pageSize: Int = 0 // Page size
let pageNumber: Int = 0 // Page number
let sortOrder: GetLearningModulesRequest.SortOrder_getLearningModules = GetLearningModulesRequest.SortOrder_getLearningModules.enummember // Sort order
let sortBy: GetLearningModulesRequest.SortBy_getLearningModules = GetLearningModulesRequest.SortBy_getLearningModules.enummember // Sort by
let searchTerm: String = "" // Search Term (searchable by name)
let expand: [String] = [""] // Fields to expand in response(case insensitive)
let isPublished: GetLearningModulesRequest.IsPublished_getLearningModules = GetLearningModulesRequest.IsPublished_getLearningModules.enummember // Specifies if only the Unpublished (isPublished is \"False\") or Published (isPublished is \"True\") modules are returned. If isPublished is \"Any\" or omitted, both types are returned
let statuses: [String] = [""] // Specifies the module statuses to filter by

// Get all learning modules of an organization
GetLearningModulesRequest.getLearningModules(isArchived: isArchived, types: types, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, sortBy: sortBy, searchTerm: searchTerm, expand: expand, isPublished: isPublished, statuses: statuses) { (response, error) in
    if let error = error {
        dump(error)
    } else if let response = response {
        print("GetLearningModulesRequest.getLearningModules was successful")
        dump(response)
    }
}