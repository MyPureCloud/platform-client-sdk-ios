import 

API.basePath = ""
API.accessToken = "cwRto9ScT..."

let moduleId: String = "" // Specifies the ID of the learning module. Fetch assignments for learning module ID
let interval: String = "" // Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
let completionInterval: String = "" // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
let overdue: GetLearningAssignmentsMeRequest.Overdue_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.Overdue_getLearningAssignmentsMe.enummember // Specifies if only the non-overdue (overdue is \"False\") or overdue (overdue is \"True\") assignments are returned. If overdue is \"Any\" or if the overdue parameter is not supplied, all assignments are returned
let pageSize: Int = 25 // Page size
let pageNumber: Int = 1 // Page number
let pass: GetLearningAssignmentsMeRequest.Pass_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.Pass_getLearningAssignmentsMe.enummember // Specifies if only the failed (pass is \"False\") or passed (pass is \"True\") assignments (completed with assessment)are returned. If pass is \"Any\" or if the pass parameter is not supplied, all assignments are returned
let minPercentageScore: Float = 0 // The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
let maxPercentageScore: Float = 0 // The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
let sortOrder: GetLearningAssignmentsMeRequest.SortOrder_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.SortOrder_getLearningAssignmentsMe.enummember // Specifies result set sort order; if not specified, default sort order is descending (Desc)
let sortBy: GetLearningAssignmentsMeRequest.SortBy_getLearningAssignmentsMe = GetLearningAssignmentsMeRequest.SortBy_getLearningAssignmentsMe.enummember // Specifies which field to sort the results by, default sort is by recommendedCompletionDate
let types: [String] = [GetLearningAssignmentsMeRequest.Types_getLearningAssignmentsMe.enummember.rawValue] // Specifies the assignment types, currently not supported and will be ignored. For now, all learning assignments regardless of types will be returned
let states: [String] = [GetLearningAssignmentsMeRequest.States_getLearningAssignmentsMe.enummember.rawValue] // Specifies the assignment states to filter by
let expand: [String] = [GetLearningAssignmentsMeRequest.Expand_getLearningAssignmentsMe.enummember.rawValue] // Specifies the expand option for returning additional information

// Code example
GetLearningAssignmentsMeRequest.getLearningAssignmentsMe(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, types: types, states: states, expand: expand) { (response, error) in
    if let error = error {
        dump(error)
    } else if let response = response {
        print("GetLearningAssignmentsMeRequest.getLearningAssignmentsMe was successful")
        dump(response)
    }
}