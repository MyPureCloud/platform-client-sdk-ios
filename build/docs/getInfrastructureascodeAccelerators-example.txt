import PureCloudPlatformClientV2

PureCloudPlatformClientV2API.basePath = "" // expected format: "https://api.[base path]"
PureCloudPlatformClientV2API.accessToken = "your_access_token"

let pageSize: Int = 0 // The total page size requested
let pageNumber: Int = 0 // The page number requested
let sortBy: String = "" // variable name requested to sort by
let sortOrder: GetInfrastructureascodeAcceleratorsRequest.SortOrder_getInfrastructureascodeAccelerators = GetInfrastructureascodeAcceleratorsRequest.SortOrder_getInfrastructureascodeAccelerators.enummember // Sort order
let name: String = "" // Filter by name
let _description: String = "" // Filter by description
let origin: GetInfrastructureascodeAcceleratorsRequest.Origin_getInfrastructureascodeAccelerators = GetInfrastructureascodeAcceleratorsRequest.Origin_getInfrastructureascodeAccelerators.enummember // Filter by origin
let type: GetInfrastructureascodeAcceleratorsRequest.ModelType_getInfrastructureascodeAccelerators = GetInfrastructureascodeAcceleratorsRequest.ModelType_getInfrastructureascodeAccelerators.enummember // Filter by type
let classification: String = "" // Filter by classification
let tags: String = "" // Filter by tags

// Get a list of available accelerators
GetInfrastructureascodeAcceleratorsRequest.getInfrastructureascodeAccelerators(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, _description: _description, origin: origin, type: type, classification: classification, tags: tags) { (response, error) in
    if let error = error {
        dump(error)
    } else if let response = response {
        print("GetInfrastructureascodeAcceleratorsRequest.getInfrastructureascodeAccelerators was successful")
        dump(response)
    }
}