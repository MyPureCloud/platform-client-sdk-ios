import 

API.basePath = ""
API.accessToken = "cwRto9ScT..."

let pageSize: Int = 25 // The total page size requested
let pageNumber: Int = 1 // The page number requested
let sortBy: String = "" // variable name requested to sort by
let expand: [String] = [""] // variable name requested by expand list
let nextPage: String = "" // next page token
let previousPage: String = "" // Previous page token
let conversationId: String = "" // conversationId specified
let agentUserId: String = "" // user id of the agent
let evaluatorUserId: String = "" // evaluator user id
let queueId: String = "" // queue id
let startTime: String = "" // start time of the evaluation query
let endTime: String = "" // end time of the evaluation query
let evaluationState: [String] = [""] // 
let isReleased: Bool = true // the evaluation has been released
let agentHasRead: Bool = true // agent has the evaluation
let expandAnswerTotalScores: Bool = true // get the total scores for evaluations
let maximum: Int = 0 // maximum
let sortOrder: String = "" // sort order options for agentUserId or evaluatorUserId query. Valid options are 'a', 'asc', 'ascending', 'd', 'desc', 'descending'

// Code example
GetQualityEvaluationsQueryRequest.getQualityEvaluationsQuery(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, queueId: queueId, startTime: startTime, endTime: endTime, evaluationState: evaluationState, isReleased: isReleased, agentHasRead: agentHasRead, expandAnswerTotalScores: expandAnswerTotalScores, maximum: maximum, sortOrder: sortOrder) { (response, error) in
    if let error = error {
        dump(error)
    } else if let response = response {
        print("GetQualityEvaluationsQueryRequest.getQualityEvaluationsQuery was successful")
        dump(response)
    }
}